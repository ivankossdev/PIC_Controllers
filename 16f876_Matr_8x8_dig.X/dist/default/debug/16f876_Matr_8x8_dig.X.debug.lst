

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 23 12:11:24 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 12/10/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F876 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0004                     fsr             equ	4
    55     0004                     fsr0            equ	4
    56     0000                     indf            equ	0
    57     0000                     indf0           equ	0
    58     0002                     pc              equ	2
    59     0002                     pcl             equ	2
    60     000A                     pclath          equ	10
    61     0003                     status          equ	3
    62     0000                     INDF            equ	0	;# 
    63     0001                     TMR0            equ	1	;# 
    64     0002                     PCL             equ	2	;# 
    65     0003                     STATUS          equ	3	;# 
    66     0004                     FSR             equ	4	;# 
    67     0005                     PORTA           equ	5	;# 
    68     0006                     PORTB           equ	6	;# 
    69     0007                     PORTC           equ	7	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009E                     ADRESL          equ	158	;# 
   109     009F                     ADCON1          equ	159	;# 
   110     010C                     EEDATA          equ	268	;# 
   111     010D                     EEADR           equ	269	;# 
   112     010E                     EEDATH          equ	270	;# 
   113     010F                     EEADRH          equ	271	;# 
   114     018C                     EECON1          equ	396	;# 
   115     018D                     EECON2          equ	397	;# 
   116     0000                     INDF            equ	0	;# 
   117     0001                     TMR0            equ	1	;# 
   118     0002                     PCL             equ	2	;# 
   119     0003                     STATUS          equ	3	;# 
   120     0004                     FSR             equ	4	;# 
   121     0005                     PORTA           equ	5	;# 
   122     0006                     PORTB           equ	6	;# 
   123     0007                     PORTC           equ	7	;# 
   124     000A                     PCLATH          equ	10	;# 
   125     000B                     INTCON          equ	11	;# 
   126     000C                     PIR1            equ	12	;# 
   127     000D                     PIR2            equ	13	;# 
   128     000E                     TMR1            equ	14	;# 
   129     000E                     TMR1L           equ	14	;# 
   130     000F                     TMR1H           equ	15	;# 
   131     0010                     T1CON           equ	16	;# 
   132     0011                     TMR2            equ	17	;# 
   133     0012                     T2CON           equ	18	;# 
   134     0013                     SSPBUF          equ	19	;# 
   135     0014                     SSPCON          equ	20	;# 
   136     0015                     CCPR1           equ	21	;# 
   137     0015                     CCPR1L          equ	21	;# 
   138     0016                     CCPR1H          equ	22	;# 
   139     0017                     CCP1CON         equ	23	;# 
   140     0018                     RCSTA           equ	24	;# 
   141     0019                     TXREG           equ	25	;# 
   142     001A                     RCREG           equ	26	;# 
   143     001B                     CCPR2           equ	27	;# 
   144     001B                     CCPR2L          equ	27	;# 
   145     001C                     CCPR2H          equ	28	;# 
   146     001D                     CCP2CON         equ	29	;# 
   147     001E                     ADRESH          equ	30	;# 
   148     001F                     ADCON0          equ	31	;# 
   149     0081                     OPTION_REG      equ	129	;# 
   150     0085                     TRISA           equ	133	;# 
   151     0086                     TRISB           equ	134	;# 
   152     0087                     TRISC           equ	135	;# 
   153     008C                     PIE1            equ	140	;# 
   154     008D                     PIE2            equ	141	;# 
   155     008E                     PCON            equ	142	;# 
   156     0091                     SSPCON2         equ	145	;# 
   157     0092                     PR2             equ	146	;# 
   158     0093                     SSPADD          equ	147	;# 
   159     0094                     SSPSTAT         equ	148	;# 
   160     0098                     TXSTA           equ	152	;# 
   161     0099                     SPBRG           equ	153	;# 
   162     009E                     ADRESL          equ	158	;# 
   163     009F                     ADCON1          equ	159	;# 
   164     010C                     EEDATA          equ	268	;# 
   165     010D                     EEADR           equ	269	;# 
   166     010E                     EEDATH          equ	270	;# 
   167     010F                     EEADRH          equ	271	;# 
   168     018C                     EECON1          equ	396	;# 
   169     018D                     EECON2          equ	397	;# 
   170     0000                     INDF            equ	0	;# 
   171     0001                     TMR0            equ	1	;# 
   172     0002                     PCL             equ	2	;# 
   173     0003                     STATUS          equ	3	;# 
   174     0004                     FSR             equ	4	;# 
   175     0005                     PORTA           equ	5	;# 
   176     0006                     PORTB           equ	6	;# 
   177     0007                     PORTC           equ	7	;# 
   178     000A                     PCLATH          equ	10	;# 
   179     000B                     INTCON          equ	11	;# 
   180     000C                     PIR1            equ	12	;# 
   181     000D                     PIR2            equ	13	;# 
   182     000E                     TMR1            equ	14	;# 
   183     000E                     TMR1L           equ	14	;# 
   184     000F                     TMR1H           equ	15	;# 
   185     0010                     T1CON           equ	16	;# 
   186     0011                     TMR2            equ	17	;# 
   187     0012                     T2CON           equ	18	;# 
   188     0013                     SSPBUF          equ	19	;# 
   189     0014                     SSPCON          equ	20	;# 
   190     0015                     CCPR1           equ	21	;# 
   191     0015                     CCPR1L          equ	21	;# 
   192     0016                     CCPR1H          equ	22	;# 
   193     0017                     CCP1CON         equ	23	;# 
   194     0018                     RCSTA           equ	24	;# 
   195     0019                     TXREG           equ	25	;# 
   196     001A                     RCREG           equ	26	;# 
   197     001B                     CCPR2           equ	27	;# 
   198     001B                     CCPR2L          equ	27	;# 
   199     001C                     CCPR2H          equ	28	;# 
   200     001D                     CCP2CON         equ	29	;# 
   201     001E                     ADRESH          equ	30	;# 
   202     001F                     ADCON0          equ	31	;# 
   203     0081                     OPTION_REG      equ	129	;# 
   204     0085                     TRISA           equ	133	;# 
   205     0086                     TRISB           equ	134	;# 
   206     0087                     TRISC           equ	135	;# 
   207     008C                     PIE1            equ	140	;# 
   208     008D                     PIE2            equ	141	;# 
   209     008E                     PCON            equ	142	;# 
   210     0091                     SSPCON2         equ	145	;# 
   211     0092                     PR2             equ	146	;# 
   212     0093                     SSPADD          equ	147	;# 
   213     0094                     SSPSTAT         equ	148	;# 
   214     0098                     TXSTA           equ	152	;# 
   215     0099                     SPBRG           equ	153	;# 
   216     009E                     ADRESL          equ	158	;# 
   217     009F                     ADCON1          equ	159	;# 
   218     010C                     EEDATA          equ	268	;# 
   219     010D                     EEADR           equ	269	;# 
   220     010E                     EEDATH          equ	270	;# 
   221     010F                     EEADRH          equ	271	;# 
   222     018C                     EECON1          equ	396	;# 
   223     018D                     EECON2          equ	397	;# 
   224     0000                     INDF            equ	0	;# 
   225     0001                     TMR0            equ	1	;# 
   226     0002                     PCL             equ	2	;# 
   227     0003                     STATUS          equ	3	;# 
   228     0004                     FSR             equ	4	;# 
   229     0005                     PORTA           equ	5	;# 
   230     0006                     PORTB           equ	6	;# 
   231     0007                     PORTC           equ	7	;# 
   232     000A                     PCLATH          equ	10	;# 
   233     000B                     INTCON          equ	11	;# 
   234     000C                     PIR1            equ	12	;# 
   235     000D                     PIR2            equ	13	;# 
   236     000E                     TMR1            equ	14	;# 
   237     000E                     TMR1L           equ	14	;# 
   238     000F                     TMR1H           equ	15	;# 
   239     0010                     T1CON           equ	16	;# 
   240     0011                     TMR2            equ	17	;# 
   241     0012                     T2CON           equ	18	;# 
   242     0013                     SSPBUF          equ	19	;# 
   243     0014                     SSPCON          equ	20	;# 
   244     0015                     CCPR1           equ	21	;# 
   245     0015                     CCPR1L          equ	21	;# 
   246     0016                     CCPR1H          equ	22	;# 
   247     0017                     CCP1CON         equ	23	;# 
   248     0018                     RCSTA           equ	24	;# 
   249     0019                     TXREG           equ	25	;# 
   250     001A                     RCREG           equ	26	;# 
   251     001B                     CCPR2           equ	27	;# 
   252     001B                     CCPR2L          equ	27	;# 
   253     001C                     CCPR2H          equ	28	;# 
   254     001D                     CCP2CON         equ	29	;# 
   255     001E                     ADRESH          equ	30	;# 
   256     001F                     ADCON0          equ	31	;# 
   257     0081                     OPTION_REG      equ	129	;# 
   258     0085                     TRISA           equ	133	;# 
   259     0086                     TRISB           equ	134	;# 
   260     0087                     TRISC           equ	135	;# 
   261     008C                     PIE1            equ	140	;# 
   262     008D                     PIE2            equ	141	;# 
   263     008E                     PCON            equ	142	;# 
   264     0091                     SSPCON2         equ	145	;# 
   265     0092                     PR2             equ	146	;# 
   266     0093                     SSPADD          equ	147	;# 
   267     0094                     SSPSTAT         equ	148	;# 
   268     0098                     TXSTA           equ	152	;# 
   269     0099                     SPBRG           equ	153	;# 
   270     009E                     ADRESL          equ	158	;# 
   271     009F                     ADCON1          equ	159	;# 
   272     010C                     EEDATA          equ	268	;# 
   273     010D                     EEADR           equ	269	;# 
   274     010E                     EEDATH          equ	270	;# 
   275     010F                     EEADRH          equ	271	;# 
   276     018C                     EECON1          equ	396	;# 
   277     018D                     EECON2          equ	397	;# 
   278     0000                     INDF            equ	0	;# 
   279     0001                     TMR0            equ	1	;# 
   280     0002                     PCL             equ	2	;# 
   281     0003                     STATUS          equ	3	;# 
   282     0004                     FSR             equ	4	;# 
   283     0005                     PORTA           equ	5	;# 
   284     0006                     PORTB           equ	6	;# 
   285     0007                     PORTC           equ	7	;# 
   286     000A                     PCLATH          equ	10	;# 
   287     000B                     INTCON          equ	11	;# 
   288     000C                     PIR1            equ	12	;# 
   289     000D                     PIR2            equ	13	;# 
   290     000E                     TMR1            equ	14	;# 
   291     000E                     TMR1L           equ	14	;# 
   292     000F                     TMR1H           equ	15	;# 
   293     0010                     T1CON           equ	16	;# 
   294     0011                     TMR2            equ	17	;# 
   295     0012                     T2CON           equ	18	;# 
   296     0013                     SSPBUF          equ	19	;# 
   297     0014                     SSPCON          equ	20	;# 
   298     0015                     CCPR1           equ	21	;# 
   299     0015                     CCPR1L          equ	21	;# 
   300     0016                     CCPR1H          equ	22	;# 
   301     0017                     CCP1CON         equ	23	;# 
   302     0018                     RCSTA           equ	24	;# 
   303     0019                     TXREG           equ	25	;# 
   304     001A                     RCREG           equ	26	;# 
   305     001B                     CCPR2           equ	27	;# 
   306     001B                     CCPR2L          equ	27	;# 
   307     001C                     CCPR2H          equ	28	;# 
   308     001D                     CCP2CON         equ	29	;# 
   309     001E                     ADRESH          equ	30	;# 
   310     001F                     ADCON0          equ	31	;# 
   311     0081                     OPTION_REG      equ	129	;# 
   312     0085                     TRISA           equ	133	;# 
   313     0086                     TRISB           equ	134	;# 
   314     0087                     TRISC           equ	135	;# 
   315     008C                     PIE1            equ	140	;# 
   316     008D                     PIE2            equ	141	;# 
   317     008E                     PCON            equ	142	;# 
   318     0091                     SSPCON2         equ	145	;# 
   319     0092                     PR2             equ	146	;# 
   320     0093                     SSPADD          equ	147	;# 
   321     0094                     SSPSTAT         equ	148	;# 
   322     0098                     TXSTA           equ	152	;# 
   323     0099                     SPBRG           equ	153	;# 
   324     009E                     ADRESL          equ	158	;# 
   325     009F                     ADCON1          equ	159	;# 
   326     010C                     EEDATA          equ	268	;# 
   327     010D                     EEADR           equ	269	;# 
   328     010E                     EEDATH          equ	270	;# 
   329     010F                     EEADRH          equ	271	;# 
   330     018C                     EECON1          equ	396	;# 
   331     018D                     EECON2          equ	397	;# 
   332     0000                     INDF            equ	0	;# 
   333     0001                     TMR0            equ	1	;# 
   334     0002                     PCL             equ	2	;# 
   335     0003                     STATUS          equ	3	;# 
   336     0004                     FSR             equ	4	;# 
   337     0005                     PORTA           equ	5	;# 
   338     0006                     PORTB           equ	6	;# 
   339     0007                     PORTC           equ	7	;# 
   340     000A                     PCLATH          equ	10	;# 
   341     000B                     INTCON          equ	11	;# 
   342     000C                     PIR1            equ	12	;# 
   343     000D                     PIR2            equ	13	;# 
   344     000E                     TMR1            equ	14	;# 
   345     000E                     TMR1L           equ	14	;# 
   346     000F                     TMR1H           equ	15	;# 
   347     0010                     T1CON           equ	16	;# 
   348     0011                     TMR2            equ	17	;# 
   349     0012                     T2CON           equ	18	;# 
   350     0013                     SSPBUF          equ	19	;# 
   351     0014                     SSPCON          equ	20	;# 
   352     0015                     CCPR1           equ	21	;# 
   353     0015                     CCPR1L          equ	21	;# 
   354     0016                     CCPR1H          equ	22	;# 
   355     0017                     CCP1CON         equ	23	;# 
   356     0018                     RCSTA           equ	24	;# 
   357     0019                     TXREG           equ	25	;# 
   358     001A                     RCREG           equ	26	;# 
   359     001B                     CCPR2           equ	27	;# 
   360     001B                     CCPR2L          equ	27	;# 
   361     001C                     CCPR2H          equ	28	;# 
   362     001D                     CCP2CON         equ	29	;# 
   363     001E                     ADRESH          equ	30	;# 
   364     001F                     ADCON0          equ	31	;# 
   365     0081                     OPTION_REG      equ	129	;# 
   366     0085                     TRISA           equ	133	;# 
   367     0086                     TRISB           equ	134	;# 
   368     0087                     TRISC           equ	135	;# 
   369     008C                     PIE1            equ	140	;# 
   370     008D                     PIE2            equ	141	;# 
   371     008E                     PCON            equ	142	;# 
   372     0091                     SSPCON2         equ	145	;# 
   373     0092                     PR2             equ	146	;# 
   374     0093                     SSPADD          equ	147	;# 
   375     0094                     SSPSTAT         equ	148	;# 
   376     0098                     TXSTA           equ	152	;# 
   377     0099                     SPBRG           equ	153	;# 
   378     009E                     ADRESL          equ	158	;# 
   379     009F                     ADCON1          equ	159	;# 
   380     010C                     EEDATA          equ	268	;# 
   381     010D                     EEADR           equ	269	;# 
   382     010E                     EEDATH          equ	270	;# 
   383     010F                     EEADRH          equ	271	;# 
   384     018C                     EECON1          equ	396	;# 
   385     018D                     EECON2          equ	397	;# 
   386                           
   387                           	psect	strings
   388     0003                     __pstrings:
   389     0003                     stringtab:
   390     0003                     __stringtab:
   391     0003                     stringcode:	
   392                           ;	String table - string pointers are 1 byte each
   393                           
   394     0003                     stringdir:
   395     0003  3000               	movlw	high stringdir
   396     0004  008A               	movwf	10
   397     0005  0804               	movf	4,w
   398     0006  0A84               	incf	4,f
   399     0007  0782               	addwf	2,f
   400     0008                     __stringbase:
   401     0008  3400               	retlw	0
   402     0009                     __end_of__stringtab:
   403     0009                     _simvol_dash:
   404     0009  3400               	retlw	0
   405     000A  3400               	retlw	0
   406     000B  3400               	retlw	0
   407     000C  341F               	retlw	31
   408     000D  3400               	retlw	0
   409     000E  3400               	retlw	0
   410     000F  3400               	retlw	0
   411     0010  3400               	retlw	0
   412     0011                     __end_of_simvol_dash:
   413     0011                     _simvol_dot:
   414     0011  3400               	retlw	0
   415     0012  3400               	retlw	0
   416     0013  3400               	retlw	0
   417     0014  3400               	retlw	0
   418     0015  3400               	retlw	0
   419     0016  3418               	retlw	24
   420     0017  3418               	retlw	24
   421     0018  3400               	retlw	0
   422     0019                     __end_of_simvol_dot:
   423     0019                     _simvol_space:
   424     0019  3400               	retlw	0
   425     001A  3400               	retlw	0
   426     001B  3400               	retlw	0
   427     001C  3400               	retlw	0
   428     001D  3400               	retlw	0
   429     001E  3400               	retlw	0
   430     001F  3400               	retlw	0
   431     0020  3400               	retlw	0
   432     0021                     __end_of_simvol_space:
   433     0021                     _simvol_d_dot:
   434     0021  3400               	retlw	0
   435     0022  340C               	retlw	12
   436     0023  340C               	retlw	12
   437     0024  3400               	retlw	0
   438     0025  340C               	retlw	12
   439     0026  340C               	retlw	12
   440     0027  3400               	retlw	0
   441     0028  3400               	retlw	0
   442     0029                     __end_of_simvol_d_dot:
   443     0029                     _simvol_9:
   444     0029  340E               	retlw	14
   445     002A  3411               	retlw	17
   446     002B  3411               	retlw	17
   447     002C  340F               	retlw	15
   448     002D  3401               	retlw	1
   449     002E  3402               	retlw	2
   450     002F  340C               	retlw	12
   451     0030  3400               	retlw	0
   452     0031                     __end_of_simvol_9:
   453     0031                     _simvol_8:
   454     0031  340E               	retlw	14
   455     0032  3411               	retlw	17
   456     0033  3411               	retlw	17
   457     0034  340E               	retlw	14
   458     0035  3411               	retlw	17
   459     0036  3411               	retlw	17
   460     0037  340E               	retlw	14
   461     0038  3400               	retlw	0
   462     0039                     __end_of_simvol_8:
   463     0039                     _simvol_7:
   464     0039  341F               	retlw	31
   465     003A  3401               	retlw	1
   466     003B  3402               	retlw	2
   467     003C  3404               	retlw	4
   468     003D  3408               	retlw	8
   469     003E  3408               	retlw	8
   470     003F  3408               	retlw	8
   471     0040  3400               	retlw	0
   472     0041                     __end_of_simvol_7:
   473     0041                     _simvol_6:
   474     0041  3406               	retlw	6
   475     0042  3408               	retlw	8
   476     0043  3410               	retlw	16
   477     0044  341E               	retlw	30
   478     0045  3411               	retlw	17
   479     0046  3411               	retlw	17
   480     0047  340E               	retlw	14
   481     0048  3400               	retlw	0
   482     0049                     __end_of_simvol_6:
   483     0049                     _simvol_5:
   484     0049  341F               	retlw	31
   485     004A  3410               	retlw	16
   486     004B  341E               	retlw	30
   487     004C  3401               	retlw	1
   488     004D  3401               	retlw	1
   489     004E  3411               	retlw	17
   490     004F  340E               	retlw	14
   491     0050  3400               	retlw	0
   492     0051                     __end_of_simvol_5:
   493     0051                     _simvol_3:
   494     0051  341F               	retlw	31
   495     0052  3402               	retlw	2
   496     0053  3404               	retlw	4
   497     0054  3402               	retlw	2
   498     0055  3401               	retlw	1
   499     0056  3411               	retlw	17
   500     0057  340E               	retlw	14
   501     0058  3400               	retlw	0
   502     0059                     __end_of_simvol_3:
   503     0059                     _simvol_2:
   504     0059  340E               	retlw	14
   505     005A  3411               	retlw	17
   506     005B  3401               	retlw	1
   507     005C  3402               	retlw	2
   508     005D  3404               	retlw	4
   509     005E  3408               	retlw	8
   510     005F  341F               	retlw	31
   511     0060  3400               	retlw	0
   512     0061                     __end_of_simvol_2:
   513     0061                     _simvol_1:
   514     0061  3404               	retlw	4
   515     0062  340C               	retlw	12
   516     0063  3404               	retlw	4
   517     0064  3404               	retlw	4
   518     0065  3404               	retlw	4
   519     0066  3404               	retlw	4
   520     0067  340E               	retlw	14
   521     0068  3400               	retlw	0
   522     0069                     __end_of_simvol_1:
   523     0069                     _simvol_0:
   524     0069  340E               	retlw	14
   525     006A  3411               	retlw	17
   526     006B  3413               	retlw	19
   527     006C  3415               	retlw	21
   528     006D  3419               	retlw	25
   529     006E  3411               	retlw	17
   530     006F  340E               	retlw	14
   531     0070  3400               	retlw	0
   532     0071                     __end_of_simvol_0:
   533     0071                     _simvol_4:
   534     0071  3402               	retlw	2
   535     0072  3406               	retlw	6
   536     0073  340A               	retlw	10
   537     0074  3412               	retlw	18
   538     0075  341F               	retlw	31
   539     0076  3402               	retlw	2
   540     0077  3402               	retlw	2
   541     0078  3400               	retlw	0
   542     0079                     __end_of_simvol_4:
   543     0013                     _SSPBUF         set	19
   544     0014                     _SSPCON         set	20
   545     0005                     _PORTA          set	5
   546     0006                     _PORTB          set	6
   547     0063                     _SSPIF          set	99
   548     002D                     _RA5            set	45
   549     0094                     _SSPSTAT        set	148
   550     0085                     _TRISA          set	133
   551     0087                     _TRISC          set	135
   552     0086                     _TRISB          set	134
   553                           
   554                           	psect	cinit
   555     07FC                     start_initialization:	
   556                           ; #config settings
   557                           
   558     07FC                     __initialization:
   559     07FC                     end_of_initialization:	
   560                           ;End of C runtime variable initialization code
   561                           
   562     07FC                     __end_of__initialization:
   563     07FC  0183               	clrf	3
   564     07FD  120A  118A  2F26   	ljmp	_main	;jump to C main() function
   565                           
   566                           	psect	cstackCOMMON
   567     0071                     __pcstackCOMMON:
   568     0071                     ?_SpiInit:
   569     0071                     ?_MatrixInit:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0071                     ?_PortBInit:	
   573                           ; 1 bytes @ 0x0
   574                           
   575     0071                     ?_SetPosition:	
   576                           ; 1 bytes @ 0x0
   577                           
   578     0071                     ?_MatrixClear:	
   579                           ; 1 bytes @ 0x0
   580                           
   581     0071                     ?_SpiSendByte:	
   582                           ; 1 bytes @ 0x0
   583                           
   584     0071                     ?_main:	
   585                           ; 1 bytes @ 0x0
   586                           
   587     0071                     SpiSendByte@data:	
   588                           ; 1 bytes @ 0x0
   589                           
   590     0071                     SetPosition@position:	
   591                           ; 1 bytes @ 0x0
   592                           
   593     0071                     ??_SpiInit:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0071                     ??_PortBInit:	
   597                           ; 1 bytes @ 0x0
   598                           
   599     0071                     ??_SpiSendByte:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604     0071                     	ds	1
   605     0072                     ?_MatrixSendToSegment:
   606     0072                     MatrixSendToSegment@segment:	
   607                           ; 1 bytes @ 0x1
   608                           
   609                           
   610                           ; 2 bytes @ 0x1
   611     0072                     	ds	1
   612     0073                     SetPosition@x:
   613                           
   614                           ; 2 bytes @ 0x2
   615     0073                     	ds	1
   616     0074                     MatrixSendToSegment@data:
   617                           
   618                           ; 1 bytes @ 0x3
   619     0074                     	ds	1
   620     0075                     ?_ShowShape:
   621     0075                     SetPosition@y:	
   622                           ; 1 bytes @ 0x4
   623                           
   624     0075                     ShowShape@coord:	
   625                           ; 2 bytes @ 0x4
   626                           
   627     0075                     ??_MatrixClear:	
   628                           ; 2 bytes @ 0x4
   629                           
   630     0075                     ??_MatrixSendToSegment:	
   631                           ; 1 bytes @ 0x4
   632                           
   633                           
   634                           ; 1 bytes @ 0x4
   635     0075                     	ds	2
   636     0077                     MatrixClear@i:
   637     0077                     ShowShape@countElemntArray:	
   638                           ; 1 bytes @ 0x6
   639                           
   640     0077                     ??_SetPosition:	
   641                           ; 2 bytes @ 0x6
   642                           
   643                           
   644                           ; 1 bytes @ 0x6
   645     0077                     	ds	1
   646     0078                     ??_MatrixInit:
   647                           
   648                           ; 1 bytes @ 0x7
   649     0078                     	ds	1
   650     0079                     ShowShape@shapeArray:
   651                           
   652                           ; 1 bytes @ 0x8
   653     0079                     	ds	1
   654     007A                     ShowShape@_pos:
   655                           
   656                           ; 2 bytes @ 0x9
   657     007A                     	ds	2
   658     007C                     ShowShape@pos:
   659                           
   660                           ; 2 bytes @ 0xB
   661     007C                     	ds	2
   662                           
   663                           	psect	cstackBANK0
   664     0020                     __pcstackBANK0:
   665     0020                     ??_ShowShape:
   666                           
   667                           ; 1 bytes @ 0x0
   668     0020                     	ds	5
   669     0025                     ??_main:
   670                           
   671                           ; 1 bytes @ 0x5
   672     0025                     	ds	3
   673     0028                     main@shapePosition:
   674                           
   675                           ; 4 bytes @ 0x8
   676     0028                     	ds	4
   677                           
   678                           	psect	maintext
   679     0726                     __pmaintext:	
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 22 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  shapePositio    4    8[BANK0 ] struct .
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : B00/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   699 ;;      Params:         0       0       0       0       0
   700 ;;      Locals:         0       4       0       0       0
   701 ;;      Temps:          0       3       0       0       0
   702 ;;      Totals:         0       7       0       0       0
   703 ;;Total ram usage:        7 bytes
   704 ;; Hardware stack levels required when called: 4
   705 ;; This function calls:
   706 ;;		_MatrixClear
   707 ;;		_MatrixInit
   708 ;;		_PortBInit
   709 ;;		_SetPosition
   710 ;;		_ShowShape
   711 ;;		_SpiInit
   712 ;; This function is called by:
   713 ;;		Startup code after reset
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717     0726                     _main:	
   718                           ;psect for function _main
   719                           
   720     0726                     l776:	
   721                           ;incstack = 0
   722                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   723                           
   724                           
   725                           ;main.c: 23:     SpiInit();
   726     0726  120A  118A  268E  120A  118A  	fcall	_SpiInit
   727                           
   728                           ;main.c: 24:     MatrixInit();
   729     072B  120A  118A  26E6  120A  118A  	fcall	_MatrixInit
   730     0730                     l778:
   731                           
   732                           ;main.c: 25:     PortBInit();
   733     0730  120A  118A  267C  120A  118A  	fcall	_PortBInit
   734     0735                     l780:
   735                           
   736                           ;main.c: 29:         SetPosition(&shapePosition, 0, 0);
   737     0735  3028               	movlw	low main@shapePosition
   738     0736  00F1               	movwf	SetPosition@position
   739     0737  3000               	movlw	high main@shapePosition
   740     0738  00F2               	movwf	SetPosition@position+1
   741     0739  3000               	movlw	0
   742     073A  00F3               	movwf	SetPosition@x
   743     073B  00F4               	movwf	SetPosition@x+1
   744     073C  3000               	movlw	0
   745     073D  00F5               	movwf	SetPosition@y
   746     073E  00F6               	movwf	SetPosition@y+1
   747     073F  120A  118A  26C9  120A  118A  	fcall	_SetPosition
   748     0744                     l782:
   749                           
   750                           ;main.c: 30:         ShowShape(&shapePosition, 8, (char*)simvol_4);
   751     0744  3028               	movlw	low main@shapePosition
   752     0745  00F5               	movwf	ShowShape@coord
   753     0746  3000               	movlw	high main@shapePosition
   754     0747  00F6               	movwf	ShowShape@coord+1
   755     0748  3008               	movlw	8
   756     0749  00F7               	movwf	ShowShape@countElemntArray
   757     074A  3000               	movlw	0
   758     074B  00F8               	movwf	ShowShape@countElemntArray+1
   759     074C  3069               	movlw	(low ((_simvol_4-__stringbase)| (0+32768)))& (0+255)
   760     074D  00F9               	movwf	ShowShape@shapeArray
   761     074E  120A  118A  277A  120A  118A  	fcall	_ShowShape
   762                           
   763                           ;main.c: 31:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   764     0753  3015               	movlw	21
   765     0754  1283               	bcf	3,5	;RP0=0, select bank0
   766     0755  1303               	bcf	3,6	;RP1=0, select bank0
   767     0756  00A7               	movwf	??_main+2
   768     0757  304B               	movlw	75
   769     0758  00A6               	movwf	??_main+1
   770     0759  30BD               	movlw	189
   771     075A  00A5               	movwf	??_main
   772     075B                     u97:
   773     075B  0BA5               	decfsz	??_main,f
   774     075C  2F5B               	goto	u97
   775     075D  0BA6               	decfsz	??_main+1,f
   776     075E  2F5B               	goto	u97
   777     075F  0BA7               	decfsz	??_main+2,f
   778     0760  2F5B               	goto	u97
   779     0761  2F62               	nop2
   780     0762                     l784:
   781                           
   782                           ;main.c: 32:         MatrixClear();
   783     0762  120A  118A  26B3  120A  118A  	fcall	_MatrixClear
   784     0767                     l786:
   785                           
   786                           ;main.c: 33:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   787     0767  3015               	movlw	21
   788     0768  1283               	bcf	3,5	;RP0=0, select bank0
   789     0769  1303               	bcf	3,6	;RP1=0, select bank0
   790     076A  00A7               	movwf	??_main+2
   791     076B  304B               	movlw	75
   792     076C  00A6               	movwf	??_main+1
   793     076D  30BD               	movlw	189
   794     076E  00A5               	movwf	??_main
   795     076F                     u107:
   796     076F  0BA5               	decfsz	??_main,f
   797     0770  2F6F               	goto	u107
   798     0771  0BA6               	decfsz	??_main+1,f
   799     0772  2F6F               	goto	u107
   800     0773  0BA7               	decfsz	??_main+2,f
   801     0774  2F6F               	goto	u107
   802     0775  2F76               	nop2
   803     0776  2F35               	goto	l780
   804     0777  120A  118A  2800   	ljmp	start
   805     077A                     __end_of_main:
   806                           
   807                           	psect	text1
   808     068E                     __ptext1:	
   809 ;; *************** function _SpiInit *****************
   810 ;; Defined at:
   811 ;;		line 9 in file "spi.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;		None
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, status,2, status,0
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   825 ;;      Params:         0       0       0       0       0
   826 ;;      Locals:         0       0       0       0       0
   827 ;;      Temps:          0       0       0       0       0
   828 ;;      Totals:         0       0       0       0       0
   829 ;;Total ram usage:        0 bytes
   830 ;; Hardware stack levels used: 1
   831 ;; This function calls:
   832 ;;		Nothing
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838     068E                     _SpiInit:	
   839                           ;psect for function _SpiInit
   840                           
   841     068E                     l736:	
   842                           ;incstack = 0
   843                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   844                           
   845                           
   846                           ;spi.c: 10:     TRISC |= 0x10;
   847     068E  1683               	bsf	3,5	;RP0=1, select bank1
   848     068F  1303               	bcf	3,6	;RP1=0, select bank1
   849     0690  1607               	bsf	7,4	;volatile
   850     0691                     l738:
   851                           
   852                           ;spi.c: 11:     TRISC &= ~0x28;
   853     0691  30D7               	movlw	215
   854     0692  0587               	andwf	7,f	;volatile
   855                           
   856                           ;spi.c: 12:     TRISA &= ~0x20;
   857     0693  30DF               	movlw	223
   858     0694  0585               	andwf	5,f	;volatile
   859                           
   860                           ;spi.c: 13:     PORTA &= ~0x20;
   861     0695  30DF               	movlw	223
   862     0696  1283               	bcf	3,5	;RP0=0, select bank0
   863     0697  1303               	bcf	3,6	;RP1=0, select bank0
   864     0698  0585               	andwf	5,f	;volatile
   865     0699                     l740:
   866                           
   867                           ;spi.c: 14:     SSPCON = 0x30;
   868     0699  3030               	movlw	48
   869     069A  0094               	movwf	20	;volatile
   870     069B                     l742:
   871                           
   872                           ;spi.c: 15:     SSPSTAT = 0x80;
   873     069B  3080               	movlw	128
   874     069C  1683               	bsf	3,5	;RP0=1, select bank1
   875     069D  1303               	bcf	3,6	;RP1=0, select bank1
   876     069E  0094               	movwf	20	;volatile
   877     069F                     l106:
   878     069F  0008               	return
   879     06A0                     __end_of_SpiInit:
   880                           
   881                           	psect	text2
   882     077A                     __ptext2:	
   883 ;; *************** function _ShowShape *****************
   884 ;; Defined at:
   885 ;;		line 8 in file "shape.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  coord           2    4[COMMON] PTR struct .
   888 ;;		 -> main@shapePosition(4), 
   889 ;;  countElemntA    2    6[COMMON] int 
   890 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
   891 ;;		 -> simvol_4(8), 
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  pos             2   11[COMMON] int 
   894 ;;  _pos            2    9[COMMON] int 
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   904 ;;      Params:         5       0       0       0       0
   905 ;;      Locals:         4       0       0       0       0
   906 ;;      Temps:          0       5       0       0       0
   907 ;;      Totals:         9       5       0       0       0
   908 ;;Total ram usage:       14 bytes
   909 ;; Hardware stack levels used: 1
   910 ;; Hardware stack levels required when called: 2
   911 ;; This function calls:
   912 ;;		_MatrixSendToSegment
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918     077A                     _ShowShape:	
   919                           ;psect for function _ShowShape
   920                           
   921     077A                     l764:	
   922                           ;incstack = 0
   923                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   924                           
   925     077A                     l766:
   926                           
   927                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
   928     077A  0875               	movf	ShowShape@coord,w
   929     077B  0084               	movwf	4
   930     077C  1783               	bsf	3,7
   931     077D  1C76               	btfss	ShowShape@coord+1,0
   932     077E  1383               	bcf	3,7
   933     077F  0800               	movf	0,w
   934     0780  1283               	bcf	3,5	;RP0=0, select bank0
   935     0781  1303               	bcf	3,6	;RP1=0, select bank0
   936     0782  00A0               	movwf	??_ShowShape
   937     0783  0A84               	incf	4,f
   938     0784  0800               	movf	0,w
   939     0785  00A1               	movwf	??_ShowShape+1
   940     0786  0820               	movf	??_ShowShape,w
   941     0787  3E01               	addlw	1
   942     0788  00FC               	movwf	ShowShape@pos
   943     0789  0821               	movf	??_ShowShape+1,w
   944     078A  1803               	skipnc
   945     078B  3E01               	addlw	1
   946     078C  3E00               	addlw	0
   947     078D  00FD               	movwf	ShowShape@pos+1
   948     078E  2FD9               	goto	l774
   949     078F                     l768:
   950                           
   951                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
   952     078F  0875               	movf	ShowShape@coord,w
   953     0790  0084               	movwf	4
   954     0791  1783               	bsf	3,7
   955     0792  1C76               	btfss	ShowShape@coord+1,0
   956     0793  1383               	bcf	3,7
   957     0794  0800               	movf	0,w
   958     0795  1283               	bcf	3,5	;RP0=0, select bank0
   959     0796  1303               	bcf	3,6	;RP1=0, select bank0
   960     0797  00A0               	movwf	??_ShowShape
   961     0798  0A84               	incf	4,f
   962     0799  0800               	movf	0,w
   963     079A  00A1               	movwf	??_ShowShape+1
   964     079B  0820               	movf	??_ShowShape,w
   965     079C  027C               	subwf	ShowShape@pos,w
   966     079D  00A2               	movwf	??_ShowShape+2
   967     079E  0821               	movf	??_ShowShape+1,w
   968     079F  1C03               	skipc
   969     07A0  0A21               	incf	??_ShowShape+1,w
   970     07A1  027D               	subwf	ShowShape@pos+1,w
   971     07A2  00A3               	movwf	??_ShowShape+3
   972     07A3  0822               	movf	??_ShowShape+2,w
   973     07A4  3EFF               	addlw	255
   974     07A5  00FA               	movwf	ShowShape@_pos
   975     07A6  0823               	movf	??_ShowShape+3,w
   976     07A7  1803               	skipnc
   977     07A8  3E01               	addlw	1
   978     07A9  3EFF               	addlw	255
   979     07AA  00FB               	movwf	ShowShape@_pos+1
   980     07AB                     l770:
   981                           
   982                           ;shape.c: 12:        MatrixSendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
   983     07AB  087D               	movf	ShowShape@pos+1,w
   984     07AC  00F3               	movwf	MatrixSendToSegment@segment+1
   985     07AD  087C               	movf	ShowShape@pos,w
   986     07AE  00F2               	movwf	MatrixSendToSegment@segment
   987     07AF  087A               	movf	ShowShape@_pos,w
   988     07B0  0779               	addwf	ShowShape@shapeArray,w
   989     07B1  0084               	movwf	4
   990     07B2  120A  118A  2003  120A  118A  	fcall	stringdir
   991     07B7  00A0               	movwf	??_ShowShape
   992     07B8  0875               	movf	ShowShape@coord,w
   993     07B9  3E02               	addlw	2
   994     07BA  00A1               	movwf	??_ShowShape+1
   995     07BB  0876               	movf	ShowShape@coord+1,w
   996     07BC  1803               	skipnc
   997     07BD  3E01               	addlw	1
   998     07BE  3E00               	addlw	0
   999     07BF  00A2               	movwf	??_ShowShape+2
  1000     07C0  0821               	movf	??_ShowShape+1,w
  1001     07C1  0084               	movwf	4
  1002     07C2  1783               	bsf	3,7
  1003     07C3  1C22               	btfss	??_ShowShape+2,0
  1004     07C4  1383               	bcf	3,7
  1005     07C5  0A00               	incf	0,w
  1006     07C6  2FC9               	goto	u74
  1007     07C7                     u75:
  1008     07C7  1003               	clrc
  1009     07C8  0DA0               	rlf	??_ShowShape,f
  1010     07C9                     u74:
  1011     07C9  3EFF               	addlw	-1
  1012     07CA  1D03               	skipz
  1013     07CB  2FC7               	goto	u75
  1014     07CC  0820               	movf	??_ShowShape,w
  1015     07CD  00F4               	movwf	MatrixSendToSegment@data
  1016     07CE  120A  118A  26A0  120A  118A  	fcall	_MatrixSendToSegment
  1017     07D3                     l772:
  1018                           
  1019                           ;shape.c: 13:     }
  1020     07D3  3001               	movlw	1
  1021     07D4  07FC               	addwf	ShowShape@pos,f
  1022     07D5  1803               	skipnc
  1023     07D6  0AFD               	incf	ShowShape@pos+1,f
  1024     07D7  3000               	movlw	0
  1025     07D8  07FD               	addwf	ShowShape@pos+1,f
  1026     07D9                     l774:
  1027     07D9  0875               	movf	ShowShape@coord,w
  1028     07DA  0084               	movwf	4
  1029     07DB  1783               	bsf	3,7
  1030     07DC  1C76               	btfss	ShowShape@coord+1,0
  1031     07DD  1383               	bcf	3,7
  1032     07DE  0800               	movf	0,w
  1033     07DF  1283               	bcf	3,5	;RP0=0, select bank0
  1034     07E0  1303               	bcf	3,6	;RP1=0, select bank0
  1035     07E1  00A0               	movwf	??_ShowShape
  1036     07E2  0A84               	incf	4,f
  1037     07E3  0800               	movf	0,w
  1038     07E4  00A1               	movwf	??_ShowShape+1
  1039     07E5  0877               	movf	ShowShape@countElemntArray,w
  1040     07E6  0720               	addwf	??_ShowShape,w
  1041     07E7  00A2               	movwf	??_ShowShape+2
  1042     07E8  0878               	movf	ShowShape@countElemntArray+1,w
  1043     07E9  1803               	skipnc
  1044     07EA  0A78               	incf	ShowShape@countElemntArray+1,w
  1045     07EB  0721               	addwf	??_ShowShape+1,w
  1046     07EC  00A3               	movwf	??_ShowShape+3
  1047     07ED  0823               	movf	??_ShowShape+3,w
  1048     07EE  3A80               	xorlw	128
  1049     07EF  00A4               	movwf	??_ShowShape+4
  1050     07F0  087D               	movf	ShowShape@pos+1,w
  1051     07F1  3A80               	xorlw	128
  1052     07F2  0224               	subwf	??_ShowShape+4,w
  1053     07F3  1D03               	skipz
  1054     07F4  2FF7               	goto	u85
  1055     07F5  087C               	movf	ShowShape@pos,w
  1056     07F6  0222               	subwf	??_ShowShape+2,w
  1057     07F7                     u85:
  1058     07F7  1803               	skipnc
  1059     07F8  2FFA               	goto	u81
  1060     07F9  2FFB               	goto	u80
  1061     07FA                     u81:
  1062     07FA  2F8F               	goto	l768
  1063     07FB                     u80:
  1064     07FB                     l89:
  1065     07FB  0008               	return
  1066     07FC                     __end_of_ShowShape:
  1067                           
  1068                           	psect	text3
  1069     06C9                     __ptext3:	
  1070 ;; *************** function _SetPosition *****************
  1071 ;; Defined at:
  1072 ;;		line 3 in file "shape.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  position        2    0[COMMON] PTR struct .
  1075 ;;		 -> main@shapePosition(4), 
  1076 ;;  x               2    2[COMMON] int 
  1077 ;;  y               2    4[COMMON] int 
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1089 ;;      Params:         6       0       0       0       0
  1090 ;;      Locals:         0       0       0       0       0
  1091 ;;      Temps:          2       0       0       0       0
  1092 ;;      Totals:         8       0       0       0       0
  1093 ;;Total ram usage:        8 bytes
  1094 ;; Hardware stack levels used: 1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		_main
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102     06C9                     _SetPosition:	
  1103                           ;psect for function _SetPosition
  1104                           
  1105     06C9                     l760:	
  1106                           ;incstack = 0
  1107                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1108                           
  1109                           
  1110                           ;shape.c: 4:     position->x = x;
  1111     06C9  0871               	movf	SetPosition@position,w
  1112     06CA  0084               	movwf	4
  1113     06CB  1783               	bsf	3,7
  1114     06CC  1C72               	btfss	SetPosition@position+1,0
  1115     06CD  1383               	bcf	3,7
  1116     06CE  0873               	movf	SetPosition@x,w
  1117     06CF  0080               	movwf	0
  1118     06D0  0A84               	incf	4,f
  1119     06D1  0874               	movf	SetPosition@x+1,w
  1120     06D2  0080               	movwf	0
  1121     06D3                     l762:
  1122                           
  1123                           ;shape.c: 5:     position->y = y;
  1124     06D3  0871               	movf	SetPosition@position,w
  1125     06D4  3E02               	addlw	2
  1126     06D5  00F7               	movwf	??_SetPosition
  1127     06D6  0872               	movf	SetPosition@position+1,w
  1128     06D7  1803               	skipnc
  1129     06D8  3E01               	addlw	1
  1130     06D9  3E00               	addlw	0
  1131     06DA  00F8               	movwf	??_SetPosition+1
  1132     06DB  0877               	movf	??_SetPosition,w
  1133     06DC  0084               	movwf	4
  1134     06DD  1783               	bsf	3,7
  1135     06DE  1C78               	btfss	??_SetPosition+1,0
  1136     06DF  1383               	bcf	3,7
  1137     06E0  0875               	movf	SetPosition@y,w
  1138     06E1  0080               	movwf	0
  1139     06E2  0A84               	incf	4,f
  1140     06E3  0876               	movf	SetPosition@y+1,w
  1141     06E4  0080               	movwf	0
  1142     06E5                     l83:
  1143     06E5  0008               	return
  1144     06E6                     __end_of_SetPosition:
  1145                           
  1146                           	psect	text4
  1147     067C                     __ptext4:	
  1148 ;; *************** function _PortBInit *****************
  1149 ;; Defined at:
  1150 ;;		line 13 in file "portsinit.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		status,2
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0
  1167 ;;      Totals:         0       0       0       0       0
  1168 ;;Total ram usage:        0 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177     067C                     _PortBInit:	
  1178                           ;psect for function _PortBInit
  1179                           
  1180     067C                     l758:	
  1181                           ;incstack = 0
  1182                           ; Regs used in _PortBInit: [status,2]
  1183                           
  1184                           
  1185                           ;portsinit.c: 14:     TRISB = 0x00;
  1186     067C  1683               	bsf	3,5	;RP0=1, select bank1
  1187     067D  1303               	bcf	3,6	;RP1=0, select bank1
  1188     067E  0186               	clrf	6	;volatile
  1189                           
  1190                           ;portsinit.c: 15:     PORTB = 0x00;
  1191     067F  1283               	bcf	3,5	;RP0=0, select bank0
  1192     0680  1303               	bcf	3,6	;RP1=0, select bank0
  1193     0681  0186               	clrf	6	;volatile
  1194     0682                     l78:
  1195     0682  0008               	return
  1196     0683                     __end_of_PortBInit:
  1197                           
  1198                           	psect	text5
  1199     06E6                     __ptext5:	
  1200 ;; *************** function _MatrixInit *****************
  1201 ;; Defined at:
  1202 ;;		line 20 in file "matrix.c"
  1203 ;; Parameters:    Size  Location     Type
  1204 ;;		None
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  1    wreg      void 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0, pclath, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0
  1218 ;;      Temps:          3       0       0       0       0
  1219 ;;      Totals:         3       0       0       0       0
  1220 ;;Total ram usage:        3 bytes
  1221 ;; Hardware stack levels used: 1
  1222 ;; Hardware stack levels required when called: 3
  1223 ;; This function calls:
  1224 ;;		_MatrixClear
  1225 ;;		_MatrixSendToSegment
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231     06E6                     _MatrixInit:	
  1232                           ;psect for function _MatrixInit
  1233                           
  1234     06E6                     l744:	
  1235                           ;incstack = 0
  1236                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1237                           
  1238                           
  1239                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1240     06E6  3003               	movlw	3
  1241     06E7  00FA               	movwf	??_MatrixInit+2
  1242     06E8  3008               	movlw	8
  1243     06E9  00F9               	movwf	??_MatrixInit+1
  1244     06EA  3077               	movlw	119
  1245     06EB  00F8               	movwf	??_MatrixInit
  1246     06EC                     u117:
  1247     06EC  0BF8               	decfsz	??_MatrixInit,f
  1248     06ED  2EEC               	goto	u117
  1249     06EE  0BF9               	decfsz	??_MatrixInit+1,f
  1250     06EF  2EEC               	goto	u117
  1251     06F0  0BFA               	decfsz	??_MatrixInit+2,f
  1252     06F1  2EEC               	goto	u117
  1253     06F2                     l746:
  1254                           
  1255                           ;matrix.c: 22:     RA5=1;
  1256     06F2  1283               	bcf	3,5	;RP0=0, select bank0
  1257     06F3  1303               	bcf	3,6	;RP1=0, select bank0
  1258     06F4  1685               	bsf	5,5	;volatile
  1259     06F5                     l748:
  1260                           
  1261                           ;matrix.c: 23:     MatrixSendToSegment(0x09, 0x00);
  1262     06F5  3009               	movlw	9
  1263     06F6  00F2               	movwf	MatrixSendToSegment@segment
  1264     06F7  3000               	movlw	0
  1265     06F8  00F3               	movwf	MatrixSendToSegment@segment+1
  1266     06F9  01F4               	clrf	MatrixSendToSegment@data
  1267     06FA  120A  118A  26A0  120A  118A  	fcall	_MatrixSendToSegment
  1268     06FF                     l750:
  1269                           
  1270                           ;matrix.c: 24:     MatrixSendToSegment(0x0b, 0x07);
  1271     06FF  300B               	movlw	11
  1272     0700  00F2               	movwf	MatrixSendToSegment@segment
  1273     0701  3000               	movlw	0
  1274     0702  00F3               	movwf	MatrixSendToSegment@segment+1
  1275     0703  3007               	movlw	7
  1276     0704  00F4               	movwf	MatrixSendToSegment@data
  1277     0705  120A  118A  26A0  120A  118A  	fcall	_MatrixSendToSegment
  1278     070A                     l752:
  1279                           
  1280                           ;matrix.c: 25:     MatrixSendToSegment(0x0A, 0x02);
  1281     070A  300A               	movlw	10
  1282     070B  00F2               	movwf	MatrixSendToSegment@segment
  1283     070C  3000               	movlw	0
  1284     070D  00F3               	movwf	MatrixSendToSegment@segment+1
  1285     070E  3002               	movlw	2
  1286     070F  00F4               	movwf	MatrixSendToSegment@data
  1287     0710  120A  118A  26A0  120A  118A  	fcall	_MatrixSendToSegment
  1288     0715                     l754:
  1289                           
  1290                           ;matrix.c: 26:     MatrixSendToSegment(0x0c, 0x01);
  1291     0715  300C               	movlw	12
  1292     0716  00F2               	movwf	MatrixSendToSegment@segment
  1293     0717  3000               	movlw	0
  1294     0718  00F3               	movwf	MatrixSendToSegment@segment+1
  1295     0719  01F4               	clrf	MatrixSendToSegment@data
  1296     071A  0AF4               	incf	MatrixSendToSegment@data,f
  1297     071B  120A  118A  26A0  120A  118A  	fcall	_MatrixSendToSegment
  1298     0720                     l756:
  1299                           
  1300                           ;matrix.c: 27:     MatrixClear();
  1301     0720  120A  118A  26B3  120A  118A  	fcall	_MatrixClear
  1302     0725                     l68:
  1303     0725  0008               	return
  1304     0726                     __end_of_MatrixInit:
  1305                           
  1306                           	psect	text6
  1307     06B3                     __ptext6:	
  1308 ;; *************** function _MatrixClear *****************
  1309 ;; Defined at:
  1310 ;;		line 10 in file "matrix.c"
  1311 ;; Parameters:    Size  Location     Type
  1312 ;;		None
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  i               1    6[COMMON] unsigned char 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  1    wreg      void 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0, pclath, cstack
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1324 ;;      Params:         0       0       0       0       0
  1325 ;;      Locals:         1       0       0       0       0
  1326 ;;      Temps:          2       0       0       0       0
  1327 ;;      Totals:         3       0       0       0       0
  1328 ;;Total ram usage:        3 bytes
  1329 ;; Hardware stack levels used: 1
  1330 ;; Hardware stack levels required when called: 2
  1331 ;; This function calls:
  1332 ;;		_MatrixSendToSegment
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;;		_MatrixInit
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339     06B3                     _MatrixClear:	
  1340                           ;psect for function _MatrixClear
  1341                           
  1342     06B3                     l730:	
  1343                           ;incstack = 0
  1344                           ; Regs used in _MatrixClear: [wreg+status,2+status,0+pclath+cstack]
  1345                           
  1346                           
  1347                           ;matrix.c: 12:   char i = 8;
  1348     06B3  3008               	movlw	8
  1349     06B4  00F7               	movwf	MatrixClear@i
  1350     06B5                     l732:
  1351                           
  1352                           ;matrix.c: 14:   {;matrix.c: 15:     MatrixSendToSegment(i, 0x00);
  1353     06B5  0877               	movf	MatrixClear@i,w
  1354     06B6  00F5               	movwf	??_MatrixClear
  1355     06B7  01F6               	clrf	??_MatrixClear+1
  1356     06B8  0875               	movf	??_MatrixClear,w
  1357     06B9  00F2               	movwf	MatrixSendToSegment@segment
  1358     06BA  0876               	movf	??_MatrixClear+1,w
  1359     06BB  00F3               	movwf	MatrixSendToSegment@segment+1
  1360     06BC  01F4               	clrf	MatrixSendToSegment@data
  1361     06BD  120A  118A  26A0  120A  118A  	fcall	_MatrixSendToSegment
  1362     06C2                     l734:
  1363                           
  1364                           ;matrix.c: 16:   } while (--i);
  1365     06C2  3001               	movlw	1
  1366     06C3  02F7               	subwf	MatrixClear@i,f
  1367     06C4  1D03               	btfss	3,2
  1368     06C5  2EC7               	goto	u61
  1369     06C6  2EC8               	goto	u60
  1370     06C7                     u61:
  1371     06C7  2EB5               	goto	l732
  1372     06C8                     u60:
  1373     06C8                     l65:
  1374     06C8  0008               	return
  1375     06C9                     __end_of_MatrixClear:
  1376                           
  1377                           	psect	text7
  1378     06A0                     __ptext7:	
  1379 ;; *************** function _MatrixSendToSegment *****************
  1380 ;; Defined at:
  1381 ;;		line 31 in file "matrix.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  segment         2    1[COMMON] int 
  1384 ;;  data            1    3[COMMON] unsigned char 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1    wreg      void 
  1389 ;; Registers used:
  1390 ;;		wreg, status,2, status,0, pclath, cstack
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1396 ;;      Params:         3       0       0       0       0
  1397 ;;      Locals:         0       0       0       0       0
  1398 ;;      Temps:          0       0       0       0       0
  1399 ;;      Totals:         3       0       0       0       0
  1400 ;;Total ram usage:        3 bytes
  1401 ;; Hardware stack levels used: 1
  1402 ;; Hardware stack levels required when called: 1
  1403 ;; This function calls:
  1404 ;;		_SpiSendByte
  1405 ;; This function is called by:
  1406 ;;		_MatrixClear
  1407 ;;		_MatrixInit
  1408 ;;		_ShowShape
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412     06A0                     _MatrixSendToSegment:	
  1413                           ;psect for function _MatrixSendToSegment
  1414                           
  1415     06A0                     l724:	
  1416                           ;incstack = 0
  1417                           ; Regs used in _MatrixSendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1418                           
  1419                           
  1420                           ;matrix.c: 32:     RA5 = 0;
  1421     06A0  1283               	bcf	3,5	;RP0=0, select bank0
  1422     06A1  1303               	bcf	3,6	;RP1=0, select bank0
  1423     06A2  1285               	bcf	5,5	;volatile
  1424     06A3                     l726:
  1425                           
  1426                           ;matrix.c: 33:     SpiSendByte((char)segment);
  1427     06A3  0872               	movf	MatrixSendToSegment@segment,w
  1428     06A4  120A  118A  2683  120A  118A  	fcall	_SpiSendByte
  1429                           
  1430                           ;matrix.c: 34:     SpiSendByte(data);
  1431     06A9  0874               	movf	MatrixSendToSegment@data,w
  1432     06AA  120A  118A  2683  120A  118A  	fcall	_SpiSendByte
  1433     06AF                     l728:
  1434                           
  1435                           ;matrix.c: 35:     RA5 = 1;
  1436     06AF  1283               	bcf	3,5	;RP0=0, select bank0
  1437     06B0  1303               	bcf	3,6	;RP1=0, select bank0
  1438     06B1  1685               	bsf	5,5	;volatile
  1439     06B2                     l71:
  1440     06B2  0008               	return
  1441     06B3                     __end_of_MatrixSendToSegment:
  1442                           
  1443                           	psect	text8
  1444     0683                     __ptext8:	
  1445 ;; *************** function _SpiSendByte *****************
  1446 ;; Defined at:
  1447 ;;		line 18 in file "spi.c"
  1448 ;; Parameters:    Size  Location     Type
  1449 ;;  data            1    wreg     unsigned char 
  1450 ;; Auto vars:     Size  Location     Type
  1451 ;;  data            1    0[COMMON] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      void 
  1454 ;; Registers used:
  1455 ;;		wreg
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         0       0       0       0       0
  1462 ;;      Locals:         1       0       0       0       0
  1463 ;;      Temps:          0       0       0       0       0
  1464 ;;      Totals:         1       0       0       0       0
  1465 ;;Total ram usage:        1 bytes
  1466 ;; Hardware stack levels used: 1
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_MatrixSendToSegment
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474     0683                     _SpiSendByte:	
  1475                           ;psect for function _SpiSendByte
  1476                           
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _SpiSendByte: [wreg]
  1480                           ;SpiSendByte@data stored from wreg
  1481     0683  00F1               	movwf	SpiSendByte@data
  1482     0684                     l722:
  1483                           
  1484                           ;spi.c: 19:     SSPBUF = data;
  1485     0684  0871               	movf	SpiSendByte@data,w
  1486     0685  1283               	bcf	3,5	;RP0=0, select bank0
  1487     0686  1303               	bcf	3,6	;RP1=0, select bank0
  1488     0687  0093               	movwf	19	;volatile
  1489     0688                     l109:	
  1490                           ;spi.c: 20:     while (!SSPIF);
  1491                           
  1492     0688  1D8C               	btfss	12,3	;volatile
  1493     0689  2E8B               	goto	u51
  1494     068A  2E8C               	goto	u50
  1495     068B                     u51:
  1496     068B  2E88               	goto	l109
  1497     068C                     u50:
  1498     068C                     l111:
  1499                           
  1500                           ;spi.c: 21:     SSPIF = 0;
  1501     068C  118C               	bcf	12,3	;volatile
  1502     068D                     l112:
  1503     068D  0008               	return
  1504     068E                     __end_of_SpiSendByte:
  1505     0002                     ___latbits      equ	2
  1506     007E                     btemp           set	126	;btemp
  1507     007E                     wtemp0          set	126
  1508                           
  1509                           	psect	config
  1510                           
  1511                           ;Config register CONFIG @ 0x2007
  1512                           ;	Oscillator Selection bits
  1513                           ;	FOSC = HS, HS oscillator
  1514                           ;	Watchdog Timer Enable bit
  1515                           ;	WDTE = OFF, WDT disabled
  1516                           ;	Power-up Timer Enable bit
  1517                           ;	PWRTE = OFF, PWRT disabled
  1518                           ;	FLASH Program Memory Code Protection bits
  1519                           ;	CP = OFF, Code protection off
  1520                           ;	Brown-out Reset Enable bit
  1521                           ;	BOREN = OFF, BOR disabled
  1522                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1523                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1524                           ;	Data EE Memory Code Protection
  1525                           ;	CPD = OFF, Code Protection off
  1526                           ;	FLASH Program Memory Write Enable
  1527                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1528                           ;	In-Circuit Debugger Mode bit
  1529                           ;	DEBUG = 0x1, unprogrammed default
  1530     2007                     	org	8199
  1531     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    112
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     12      12
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 8
		 -> simvol_4(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_ShowShape
    _ShowShape->_MatrixSendToSegment
    _MatrixInit->_MatrixClear
    _MatrixClear->_MatrixSendToSegment
    _MatrixSendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     800
                                              5 BANK0      7     7      0
                        _MatrixClear
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                          _ShowShape
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ShowShape                                           14     9      5     312
                                              4 COMMON     9     4      5
                                              0 BANK0      5     5      0
                _MatrixSendToSegment
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                        _MatrixClear
                _MatrixSendToSegment
 ---------------------------------------------------------------------------------
 (2) _MatrixClear                                          3     3      0     130
                                              4 COMMON     3     3      0
                _MatrixSendToSegment
 ---------------------------------------------------------------------------------
 (2) _MatrixSendToSegment                                  3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixClear
     _MatrixSendToSegment
       _SpiSendByte
   _MatrixInit
     _MatrixClear
     _MatrixSendToSegment
   _PortBInit
   _SetPosition
   _ShowShape
     _MatrixSendToSegment
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           13      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            85      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              13     13      13    100.0%
BANK0               80     12      12     15.0%
BANK1               80      0       0      0.0%
BANK3               85      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      25      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 23 12:11:24 2024

                          pc 0002                           l71 06B2                           l65 06C8  
                         l83 06E5                           l68 0725                           l78 0682  
                         l89 07FB                           u50 068C                           u51 068B  
                         u60 06C8                           u61 06C7                           u80 07FB  
                         u81 07FA                           u74 07C9                           u75 07C7  
                         u85 07F7                           u97 075B                           fsr 0004  
            SpiSendByte@data 0071                          l111 068C                          l112 068D  
                        l106 069F                          l109 0688                          l722 0684  
                        l730 06B3                          l724 06A0                          l732 06B5  
                        l740 0699                          l726 06A3                          l734 06C2  
                        l750 06FF                          l742 069B                          l728 06AF  
                        l752 070A                          l744 06E6                          l760 06C9  
                        l736 068E                          l754 0715                          l746 06F2  
                        l762 06D3                          l770 07AB                          l738 0691  
                        l756 0720                          l748 06F5                          l772 07D3  
                        l764 077A                          l780 0735                          l758 067C  
                        l774 07D9                          l766 077A                          l782 0744  
                        l768 078F                          l784 0762                          l776 0726  
                        l786 0767                          l778 0730                          _RA5 002D  
                        u107 076F                          u117 06EC                          fsr0 0004  
                        indf 0000                         _main 0726                         btemp 007E  
                       start 0000              __end_of_SpiInit 06A0                        ?_main 0071  
              ??_MatrixClear 0075                        _PORTA 0005                        _PORTB 0006  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _SSPIF 0063                        pclath 000A                        status 0003  
                      wtemp0 007E              __initialization 07FC                 __end_of_main 077A  
                 _MatrixInit 06E6                       ??_main 0025                ??_SetPosition 0077  
        __end_of_MatrixClear 06C9                       _SSPCON 0014                       _SSPBUF 0013  
                  ??_SpiInit 0071                ??_SpiSendByte 0071             __end_of_simvol_0 0071  
           __end_of_simvol_1 0069             __end_of_simvol_2 0061             __end_of_simvol_3 0059  
           __end_of_simvol_4 0079             __end_of_simvol_5 0051             __end_of_simvol_6 0049  
           __end_of_simvol_7 0041             __end_of_simvol_8 0039             __end_of_simvol_9 0031  
             ShowShape@coord 0075      __end_of__initialization 07FC          __end_of_SetPosition 06E6  
__end_of_MatrixSendToSegment 06B3               __pcstackCOMMON 0071                  ?_MatrixInit 0071  
        __end_of_SpiSendByte 068E                  _MatrixClear 06B3                 MatrixClear@i 0077  
          __end_of_PortBInit 0683            __end_of_ShowShape 07FC            main@shapePosition 0028  
                 __pmaintext 0726    ShowShape@countElemntArray 0077                  _SetPosition 06C9  
                    _SSPSTAT 0094                   __stringtab 0003                      _SpiInit 068E  
                _SpiSendByte 0683                      __ptext1 068E                      __ptext2 077A  
                    __ptext3 06C9                      __ptext4 067C                      __ptext5 06E6  
                    __ptext6 06B3                      __ptext7 06A0                      __ptext8 0683  
       end_of_initialization 07FC                   _simvol_dot 0011          SetPosition@position 0071  
               ??_MatrixInit 0078                 ?_MatrixClear 0071          start_initialization 07FC  
         __end_of_MatrixInit 0726                    _PortBInit 067C                    _ShowShape 077A  
              ShowShape@_pos 007A                 SetPosition@x 0073                 SetPosition@y 0075  
                  ___latbits 0002                __pcstackBANK0 0020                 ?_SetPosition 0071  
        ShowShape@shapeArray 0079                     ?_SpiInit 0071                   ?_PortBInit 0071  
               ?_SpiSendByte 0071                   ?_ShowShape 0075                    __pstrings 0003  
       __end_of_simvol_d_dot 0029         __end_of_simvol_space 0021                  __stringbase 0008  
                ??_PortBInit 0071                  ??_ShowShape 0020                 ShowShape@pos 007C  
         __end_of__stringtab 0009      MatrixSendToSegment@data 0074          _MatrixSendToSegment 06A0  
 MatrixSendToSegment@segment 0072          __end_of_simvol_dash 0011                     _simvol_0 0069  
                   _simvol_1 0061                     _simvol_2 0059                     _simvol_3 0051  
                   _simvol_4 0071                     _simvol_5 0049                     _simvol_6 0041  
                   _simvol_7 0039                     _simvol_8 0031                     _simvol_9 0029  
       ?_MatrixSendToSegment 0072                    stringcode 0003           __end_of_simvol_dot 0019  
      ??_MatrixSendToSegment 0075                     stringdir 0003                     stringtab 0003  
               _simvol_d_dot 0021                 _simvol_space 0019                  _simvol_dash 0009  

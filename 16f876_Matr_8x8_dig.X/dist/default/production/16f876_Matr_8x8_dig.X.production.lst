

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 23 12:12:51 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 12/10/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F876 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0004                     fsr             equ	4
    55     0004                     fsr0            equ	4
    56     0000                     indf            equ	0
    57     0000                     indf0           equ	0
    58     0002                     pc              equ	2
    59     0002                     pcl             equ	2
    60     000A                     pclath          equ	10
    61     0003                     status          equ	3
    62     0000                     INDF            equ	0	;# 
    63     0001                     TMR0            equ	1	;# 
    64     0002                     PCL             equ	2	;# 
    65     0003                     STATUS          equ	3	;# 
    66     0004                     FSR             equ	4	;# 
    67     0005                     PORTA           equ	5	;# 
    68     0006                     PORTB           equ	6	;# 
    69     0007                     PORTC           equ	7	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009E                     ADRESL          equ	158	;# 
   109     009F                     ADCON1          equ	159	;# 
   110     010C                     EEDATA          equ	268	;# 
   111     010D                     EEADR           equ	269	;# 
   112     010E                     EEDATH          equ	270	;# 
   113     010F                     EEADRH          equ	271	;# 
   114     018C                     EECON1          equ	396	;# 
   115     018D                     EECON2          equ	397	;# 
   116     0000                     INDF            equ	0	;# 
   117     0001                     TMR0            equ	1	;# 
   118     0002                     PCL             equ	2	;# 
   119     0003                     STATUS          equ	3	;# 
   120     0004                     FSR             equ	4	;# 
   121     0005                     PORTA           equ	5	;# 
   122     0006                     PORTB           equ	6	;# 
   123     0007                     PORTC           equ	7	;# 
   124     000A                     PCLATH          equ	10	;# 
   125     000B                     INTCON          equ	11	;# 
   126     000C                     PIR1            equ	12	;# 
   127     000D                     PIR2            equ	13	;# 
   128     000E                     TMR1            equ	14	;# 
   129     000E                     TMR1L           equ	14	;# 
   130     000F                     TMR1H           equ	15	;# 
   131     0010                     T1CON           equ	16	;# 
   132     0011                     TMR2            equ	17	;# 
   133     0012                     T2CON           equ	18	;# 
   134     0013                     SSPBUF          equ	19	;# 
   135     0014                     SSPCON          equ	20	;# 
   136     0015                     CCPR1           equ	21	;# 
   137     0015                     CCPR1L          equ	21	;# 
   138     0016                     CCPR1H          equ	22	;# 
   139     0017                     CCP1CON         equ	23	;# 
   140     0018                     RCSTA           equ	24	;# 
   141     0019                     TXREG           equ	25	;# 
   142     001A                     RCREG           equ	26	;# 
   143     001B                     CCPR2           equ	27	;# 
   144     001B                     CCPR2L          equ	27	;# 
   145     001C                     CCPR2H          equ	28	;# 
   146     001D                     CCP2CON         equ	29	;# 
   147     001E                     ADRESH          equ	30	;# 
   148     001F                     ADCON0          equ	31	;# 
   149     0081                     OPTION_REG      equ	129	;# 
   150     0085                     TRISA           equ	133	;# 
   151     0086                     TRISB           equ	134	;# 
   152     0087                     TRISC           equ	135	;# 
   153     008C                     PIE1            equ	140	;# 
   154     008D                     PIE2            equ	141	;# 
   155     008E                     PCON            equ	142	;# 
   156     0091                     SSPCON2         equ	145	;# 
   157     0092                     PR2             equ	146	;# 
   158     0093                     SSPADD          equ	147	;# 
   159     0094                     SSPSTAT         equ	148	;# 
   160     0098                     TXSTA           equ	152	;# 
   161     0099                     SPBRG           equ	153	;# 
   162     009E                     ADRESL          equ	158	;# 
   163     009F                     ADCON1          equ	159	;# 
   164     010C                     EEDATA          equ	268	;# 
   165     010D                     EEADR           equ	269	;# 
   166     010E                     EEDATH          equ	270	;# 
   167     010F                     EEADRH          equ	271	;# 
   168     018C                     EECON1          equ	396	;# 
   169     018D                     EECON2          equ	397	;# 
   170     0000                     INDF            equ	0	;# 
   171     0001                     TMR0            equ	1	;# 
   172     0002                     PCL             equ	2	;# 
   173     0003                     STATUS          equ	3	;# 
   174     0004                     FSR             equ	4	;# 
   175     0005                     PORTA           equ	5	;# 
   176     0006                     PORTB           equ	6	;# 
   177     0007                     PORTC           equ	7	;# 
   178     000A                     PCLATH          equ	10	;# 
   179     000B                     INTCON          equ	11	;# 
   180     000C                     PIR1            equ	12	;# 
   181     000D                     PIR2            equ	13	;# 
   182     000E                     TMR1            equ	14	;# 
   183     000E                     TMR1L           equ	14	;# 
   184     000F                     TMR1H           equ	15	;# 
   185     0010                     T1CON           equ	16	;# 
   186     0011                     TMR2            equ	17	;# 
   187     0012                     T2CON           equ	18	;# 
   188     0013                     SSPBUF          equ	19	;# 
   189     0014                     SSPCON          equ	20	;# 
   190     0015                     CCPR1           equ	21	;# 
   191     0015                     CCPR1L          equ	21	;# 
   192     0016                     CCPR1H          equ	22	;# 
   193     0017                     CCP1CON         equ	23	;# 
   194     0018                     RCSTA           equ	24	;# 
   195     0019                     TXREG           equ	25	;# 
   196     001A                     RCREG           equ	26	;# 
   197     001B                     CCPR2           equ	27	;# 
   198     001B                     CCPR2L          equ	27	;# 
   199     001C                     CCPR2H          equ	28	;# 
   200     001D                     CCP2CON         equ	29	;# 
   201     001E                     ADRESH          equ	30	;# 
   202     001F                     ADCON0          equ	31	;# 
   203     0081                     OPTION_REG      equ	129	;# 
   204     0085                     TRISA           equ	133	;# 
   205     0086                     TRISB           equ	134	;# 
   206     0087                     TRISC           equ	135	;# 
   207     008C                     PIE1            equ	140	;# 
   208     008D                     PIE2            equ	141	;# 
   209     008E                     PCON            equ	142	;# 
   210     0091                     SSPCON2         equ	145	;# 
   211     0092                     PR2             equ	146	;# 
   212     0093                     SSPADD          equ	147	;# 
   213     0094                     SSPSTAT         equ	148	;# 
   214     0098                     TXSTA           equ	152	;# 
   215     0099                     SPBRG           equ	153	;# 
   216     009E                     ADRESL          equ	158	;# 
   217     009F                     ADCON1          equ	159	;# 
   218     010C                     EEDATA          equ	268	;# 
   219     010D                     EEADR           equ	269	;# 
   220     010E                     EEDATH          equ	270	;# 
   221     010F                     EEADRH          equ	271	;# 
   222     018C                     EECON1          equ	396	;# 
   223     018D                     EECON2          equ	397	;# 
   224     0000                     INDF            equ	0	;# 
   225     0001                     TMR0            equ	1	;# 
   226     0002                     PCL             equ	2	;# 
   227     0003                     STATUS          equ	3	;# 
   228     0004                     FSR             equ	4	;# 
   229     0005                     PORTA           equ	5	;# 
   230     0006                     PORTB           equ	6	;# 
   231     0007                     PORTC           equ	7	;# 
   232     000A                     PCLATH          equ	10	;# 
   233     000B                     INTCON          equ	11	;# 
   234     000C                     PIR1            equ	12	;# 
   235     000D                     PIR2            equ	13	;# 
   236     000E                     TMR1            equ	14	;# 
   237     000E                     TMR1L           equ	14	;# 
   238     000F                     TMR1H           equ	15	;# 
   239     0010                     T1CON           equ	16	;# 
   240     0011                     TMR2            equ	17	;# 
   241     0012                     T2CON           equ	18	;# 
   242     0013                     SSPBUF          equ	19	;# 
   243     0014                     SSPCON          equ	20	;# 
   244     0015                     CCPR1           equ	21	;# 
   245     0015                     CCPR1L          equ	21	;# 
   246     0016                     CCPR1H          equ	22	;# 
   247     0017                     CCP1CON         equ	23	;# 
   248     0018                     RCSTA           equ	24	;# 
   249     0019                     TXREG           equ	25	;# 
   250     001A                     RCREG           equ	26	;# 
   251     001B                     CCPR2           equ	27	;# 
   252     001B                     CCPR2L          equ	27	;# 
   253     001C                     CCPR2H          equ	28	;# 
   254     001D                     CCP2CON         equ	29	;# 
   255     001E                     ADRESH          equ	30	;# 
   256     001F                     ADCON0          equ	31	;# 
   257     0081                     OPTION_REG      equ	129	;# 
   258     0085                     TRISA           equ	133	;# 
   259     0086                     TRISB           equ	134	;# 
   260     0087                     TRISC           equ	135	;# 
   261     008C                     PIE1            equ	140	;# 
   262     008D                     PIE2            equ	141	;# 
   263     008E                     PCON            equ	142	;# 
   264     0091                     SSPCON2         equ	145	;# 
   265     0092                     PR2             equ	146	;# 
   266     0093                     SSPADD          equ	147	;# 
   267     0094                     SSPSTAT         equ	148	;# 
   268     0098                     TXSTA           equ	152	;# 
   269     0099                     SPBRG           equ	153	;# 
   270     009E                     ADRESL          equ	158	;# 
   271     009F                     ADCON1          equ	159	;# 
   272     010C                     EEDATA          equ	268	;# 
   273     010D                     EEADR           equ	269	;# 
   274     010E                     EEDATH          equ	270	;# 
   275     010F                     EEADRH          equ	271	;# 
   276     018C                     EECON1          equ	396	;# 
   277     018D                     EECON2          equ	397	;# 
   278     0000                     INDF            equ	0	;# 
   279     0001                     TMR0            equ	1	;# 
   280     0002                     PCL             equ	2	;# 
   281     0003                     STATUS          equ	3	;# 
   282     0004                     FSR             equ	4	;# 
   283     0005                     PORTA           equ	5	;# 
   284     0006                     PORTB           equ	6	;# 
   285     0007                     PORTC           equ	7	;# 
   286     000A                     PCLATH          equ	10	;# 
   287     000B                     INTCON          equ	11	;# 
   288     000C                     PIR1            equ	12	;# 
   289     000D                     PIR2            equ	13	;# 
   290     000E                     TMR1            equ	14	;# 
   291     000E                     TMR1L           equ	14	;# 
   292     000F                     TMR1H           equ	15	;# 
   293     0010                     T1CON           equ	16	;# 
   294     0011                     TMR2            equ	17	;# 
   295     0012                     T2CON           equ	18	;# 
   296     0013                     SSPBUF          equ	19	;# 
   297     0014                     SSPCON          equ	20	;# 
   298     0015                     CCPR1           equ	21	;# 
   299     0015                     CCPR1L          equ	21	;# 
   300     0016                     CCPR1H          equ	22	;# 
   301     0017                     CCP1CON         equ	23	;# 
   302     0018                     RCSTA           equ	24	;# 
   303     0019                     TXREG           equ	25	;# 
   304     001A                     RCREG           equ	26	;# 
   305     001B                     CCPR2           equ	27	;# 
   306     001B                     CCPR2L          equ	27	;# 
   307     001C                     CCPR2H          equ	28	;# 
   308     001D                     CCP2CON         equ	29	;# 
   309     001E                     ADRESH          equ	30	;# 
   310     001F                     ADCON0          equ	31	;# 
   311     0081                     OPTION_REG      equ	129	;# 
   312     0085                     TRISA           equ	133	;# 
   313     0086                     TRISB           equ	134	;# 
   314     0087                     TRISC           equ	135	;# 
   315     008C                     PIE1            equ	140	;# 
   316     008D                     PIE2            equ	141	;# 
   317     008E                     PCON            equ	142	;# 
   318     0091                     SSPCON2         equ	145	;# 
   319     0092                     PR2             equ	146	;# 
   320     0093                     SSPADD          equ	147	;# 
   321     0094                     SSPSTAT         equ	148	;# 
   322     0098                     TXSTA           equ	152	;# 
   323     0099                     SPBRG           equ	153	;# 
   324     009E                     ADRESL          equ	158	;# 
   325     009F                     ADCON1          equ	159	;# 
   326     010C                     EEDATA          equ	268	;# 
   327     010D                     EEADR           equ	269	;# 
   328     010E                     EEDATH          equ	270	;# 
   329     010F                     EEADRH          equ	271	;# 
   330     018C                     EECON1          equ	396	;# 
   331     018D                     EECON2          equ	397	;# 
   332     0000                     INDF            equ	0	;# 
   333     0001                     TMR0            equ	1	;# 
   334     0002                     PCL             equ	2	;# 
   335     0003                     STATUS          equ	3	;# 
   336     0004                     FSR             equ	4	;# 
   337     0005                     PORTA           equ	5	;# 
   338     0006                     PORTB           equ	6	;# 
   339     0007                     PORTC           equ	7	;# 
   340     000A                     PCLATH          equ	10	;# 
   341     000B                     INTCON          equ	11	;# 
   342     000C                     PIR1            equ	12	;# 
   343     000D                     PIR2            equ	13	;# 
   344     000E                     TMR1            equ	14	;# 
   345     000E                     TMR1L           equ	14	;# 
   346     000F                     TMR1H           equ	15	;# 
   347     0010                     T1CON           equ	16	;# 
   348     0011                     TMR2            equ	17	;# 
   349     0012                     T2CON           equ	18	;# 
   350     0013                     SSPBUF          equ	19	;# 
   351     0014                     SSPCON          equ	20	;# 
   352     0015                     CCPR1           equ	21	;# 
   353     0015                     CCPR1L          equ	21	;# 
   354     0016                     CCPR1H          equ	22	;# 
   355     0017                     CCP1CON         equ	23	;# 
   356     0018                     RCSTA           equ	24	;# 
   357     0019                     TXREG           equ	25	;# 
   358     001A                     RCREG           equ	26	;# 
   359     001B                     CCPR2           equ	27	;# 
   360     001B                     CCPR2L          equ	27	;# 
   361     001C                     CCPR2H          equ	28	;# 
   362     001D                     CCP2CON         equ	29	;# 
   363     001E                     ADRESH          equ	30	;# 
   364     001F                     ADCON0          equ	31	;# 
   365     0081                     OPTION_REG      equ	129	;# 
   366     0085                     TRISA           equ	133	;# 
   367     0086                     TRISB           equ	134	;# 
   368     0087                     TRISC           equ	135	;# 
   369     008C                     PIE1            equ	140	;# 
   370     008D                     PIE2            equ	141	;# 
   371     008E                     PCON            equ	142	;# 
   372     0091                     SSPCON2         equ	145	;# 
   373     0092                     PR2             equ	146	;# 
   374     0093                     SSPADD          equ	147	;# 
   375     0094                     SSPSTAT         equ	148	;# 
   376     0098                     TXSTA           equ	152	;# 
   377     0099                     SPBRG           equ	153	;# 
   378     009E                     ADRESL          equ	158	;# 
   379     009F                     ADCON1          equ	159	;# 
   380     010C                     EEDATA          equ	268	;# 
   381     010D                     EEADR           equ	269	;# 
   382     010E                     EEDATH          equ	270	;# 
   383     010F                     EEADRH          equ	271	;# 
   384     018C                     EECON1          equ	396	;# 
   385     018D                     EECON2          equ	397	;# 
   386                           
   387                           	psect	strings
   388     0003                     __pstrings:
   389     0003                     stringtab:
   390     0003                     __stringtab:
   391     0003                     stringcode:	
   392                           ;	String table - string pointers are 1 byte each
   393                           
   394     0003                     stringdir:
   395     0003  3000               	movlw	high stringdir
   396     0004  008A               	movwf	10
   397     0005  0804               	movf	4,w
   398     0006  0A84               	incf	4,f
   399     0007  0782               	addwf	2,f
   400     0008                     __stringbase:
   401     0008  3400               	retlw	0
   402     0009                     __end_of__stringtab:
   403     0009                     _simvol_dash:
   404     0009  3400               	retlw	0
   405     000A  3400               	retlw	0
   406     000B  3400               	retlw	0
   407     000C  341F               	retlw	31
   408     000D  3400               	retlw	0
   409     000E  3400               	retlw	0
   410     000F  3400               	retlw	0
   411     0010  3400               	retlw	0
   412     0011                     __end_of_simvol_dash:
   413     0011                     _simvol_dot:
   414     0011  3400               	retlw	0
   415     0012  3400               	retlw	0
   416     0013  3400               	retlw	0
   417     0014  3400               	retlw	0
   418     0015  3400               	retlw	0
   419     0016  3418               	retlw	24
   420     0017  3418               	retlw	24
   421     0018  3400               	retlw	0
   422     0019                     __end_of_simvol_dot:
   423     0019                     _simvol_space:
   424     0019  3400               	retlw	0
   425     001A  3400               	retlw	0
   426     001B  3400               	retlw	0
   427     001C  3400               	retlw	0
   428     001D  3400               	retlw	0
   429     001E  3400               	retlw	0
   430     001F  3400               	retlw	0
   431     0020  3400               	retlw	0
   432     0021                     __end_of_simvol_space:
   433     0021                     _simvol_d_dot:
   434     0021  3400               	retlw	0
   435     0022  340C               	retlw	12
   436     0023  340C               	retlw	12
   437     0024  3400               	retlw	0
   438     0025  340C               	retlw	12
   439     0026  340C               	retlw	12
   440     0027  3400               	retlw	0
   441     0028  3400               	retlw	0
   442     0029                     __end_of_simvol_d_dot:
   443     0029                     _simvol_9:
   444     0029  340E               	retlw	14
   445     002A  3411               	retlw	17
   446     002B  3411               	retlw	17
   447     002C  340F               	retlw	15
   448     002D  3401               	retlw	1
   449     002E  3402               	retlw	2
   450     002F  340C               	retlw	12
   451     0030  3400               	retlw	0
   452     0031                     __end_of_simvol_9:
   453     0031                     _simvol_8:
   454     0031  340E               	retlw	14
   455     0032  3411               	retlw	17
   456     0033  3411               	retlw	17
   457     0034  340E               	retlw	14
   458     0035  3411               	retlw	17
   459     0036  3411               	retlw	17
   460     0037  340E               	retlw	14
   461     0038  3400               	retlw	0
   462     0039                     __end_of_simvol_8:
   463     0039                     _simvol_7:
   464     0039  341F               	retlw	31
   465     003A  3401               	retlw	1
   466     003B  3402               	retlw	2
   467     003C  3404               	retlw	4
   468     003D  3408               	retlw	8
   469     003E  3408               	retlw	8
   470     003F  3408               	retlw	8
   471     0040  3400               	retlw	0
   472     0041                     __end_of_simvol_7:
   473     0041                     _simvol_6:
   474     0041  3406               	retlw	6
   475     0042  3408               	retlw	8
   476     0043  3410               	retlw	16
   477     0044  341E               	retlw	30
   478     0045  3411               	retlw	17
   479     0046  3411               	retlw	17
   480     0047  340E               	retlw	14
   481     0048  3400               	retlw	0
   482     0049                     __end_of_simvol_6:
   483     0049                     _simvol_5:
   484     0049  341F               	retlw	31
   485     004A  3410               	retlw	16
   486     004B  341E               	retlw	30
   487     004C  3401               	retlw	1
   488     004D  3401               	retlw	1
   489     004E  3411               	retlw	17
   490     004F  340E               	retlw	14
   491     0050  3400               	retlw	0
   492     0051                     __end_of_simvol_5:
   493     0051                     _simvol_3:
   494     0051  341F               	retlw	31
   495     0052  3402               	retlw	2
   496     0053  3404               	retlw	4
   497     0054  3402               	retlw	2
   498     0055  3401               	retlw	1
   499     0056  3411               	retlw	17
   500     0057  340E               	retlw	14
   501     0058  3400               	retlw	0
   502     0059                     __end_of_simvol_3:
   503     0059                     _simvol_2:
   504     0059  340E               	retlw	14
   505     005A  3411               	retlw	17
   506     005B  3401               	retlw	1
   507     005C  3402               	retlw	2
   508     005D  3404               	retlw	4
   509     005E  3408               	retlw	8
   510     005F  341F               	retlw	31
   511     0060  3400               	retlw	0
   512     0061                     __end_of_simvol_2:
   513     0061                     _simvol_1:
   514     0061  3404               	retlw	4
   515     0062  340C               	retlw	12
   516     0063  3404               	retlw	4
   517     0064  3404               	retlw	4
   518     0065  3404               	retlw	4
   519     0066  3404               	retlw	4
   520     0067  340E               	retlw	14
   521     0068  3400               	retlw	0
   522     0069                     __end_of_simvol_1:
   523     0069                     _simvol_0:
   524     0069  340E               	retlw	14
   525     006A  3411               	retlw	17
   526     006B  3413               	retlw	19
   527     006C  3415               	retlw	21
   528     006D  3419               	retlw	25
   529     006E  3411               	retlw	17
   530     006F  340E               	retlw	14
   531     0070  3400               	retlw	0
   532     0071                     __end_of_simvol_0:
   533     0071                     _simvol_4:
   534     0071  3402               	retlw	2
   535     0072  3406               	retlw	6
   536     0073  340A               	retlw	10
   537     0074  3412               	retlw	18
   538     0075  341F               	retlw	31
   539     0076  3402               	retlw	2
   540     0077  3402               	retlw	2
   541     0078  3400               	retlw	0
   542     0079                     __end_of_simvol_4:
   543     0013                     _SSPBUF         set	19
   544     0014                     _SSPCON         set	20
   545     0005                     _PORTA          set	5
   546     0006                     _PORTB          set	6
   547     0063                     _SSPIF          set	99
   548     002D                     _RA5            set	45
   549     0094                     _SSPSTAT        set	148
   550     0085                     _TRISA          set	133
   551     0087                     _TRISC          set	135
   552     0086                     _TRISB          set	134
   553                           
   554                           	psect	cinit
   555     07FC                     start_initialization:	
   556                           ; #config settings
   557                           
   558     07FC                     __initialization:
   559     07FC                     end_of_initialization:	
   560                           ;End of C runtime variable initialization code
   561                           
   562     07FC                     __end_of__initialization:
   563     07FC  0183               	clrf	3
   564     07FD  120A  118A  2F25   	ljmp	_main	;jump to C main() function
   565                           
   566                           	psect	cstackCOMMON
   567     0070                     __pcstackCOMMON:
   568     0070                     ?_SpiInit:
   569     0070                     ?_MatrixInit:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0070                     ?_PortBInit:	
   573                           ; 1 bytes @ 0x0
   574                           
   575     0070                     ?_SetPosition:	
   576                           ; 1 bytes @ 0x0
   577                           
   578     0070                     ?_MatrixClear:	
   579                           ; 1 bytes @ 0x0
   580                           
   581     0070                     ?_SpiSendByte:	
   582                           ; 1 bytes @ 0x0
   583                           
   584     0070                     ?_main:	
   585                           ; 1 bytes @ 0x0
   586                           
   587     0070                     SpiSendByte@data:	
   588                           ; 1 bytes @ 0x0
   589                           
   590     0070                     SetPosition@position:	
   591                           ; 1 bytes @ 0x0
   592                           
   593     0070                     ??_SpiInit:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0070                     ??_PortBInit:	
   597                           ; 1 bytes @ 0x0
   598                           
   599     0070                     ??_SpiSendByte:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604     0070                     	ds	1
   605     0071                     ?_MatrixSendToSegment:
   606     0071                     MatrixSendToSegment@segment:	
   607                           ; 1 bytes @ 0x1
   608                           
   609                           
   610                           ; 2 bytes @ 0x1
   611     0071                     	ds	1
   612     0072                     SetPosition@x:
   613                           
   614                           ; 2 bytes @ 0x2
   615     0072                     	ds	1
   616     0073                     MatrixSendToSegment@data:
   617                           
   618                           ; 1 bytes @ 0x3
   619     0073                     	ds	1
   620     0074                     ?_ShowShape:
   621     0074                     SetPosition@y:	
   622                           ; 1 bytes @ 0x4
   623                           
   624     0074                     ShowShape@coord:	
   625                           ; 2 bytes @ 0x4
   626                           
   627     0074                     ??_MatrixClear:	
   628                           ; 2 bytes @ 0x4
   629                           
   630     0074                     ??_MatrixSendToSegment:	
   631                           ; 1 bytes @ 0x4
   632                           
   633                           
   634                           ; 1 bytes @ 0x4
   635     0074                     	ds	2
   636     0076                     MatrixClear@i:
   637     0076                     ShowShape@countElemntArray:	
   638                           ; 1 bytes @ 0x6
   639                           
   640     0076                     ??_SetPosition:	
   641                           ; 2 bytes @ 0x6
   642                           
   643                           
   644                           ; 1 bytes @ 0x6
   645     0076                     	ds	1
   646     0077                     ??_MatrixInit:
   647                           
   648                           ; 1 bytes @ 0x7
   649     0077                     	ds	1
   650     0078                     ShowShape@shapeArray:
   651                           
   652                           ; 1 bytes @ 0x8
   653     0078                     	ds	1
   654     0079                     ??_ShowShape:
   655                           
   656                           ; 1 bytes @ 0x9
   657     0079                     	ds	5
   658                           
   659                           	psect	cstackBANK0
   660     0020                     __pcstackBANK0:
   661     0020                     ShowShape@_pos:
   662                           
   663                           ; 2 bytes @ 0x0
   664     0020                     	ds	2
   665     0022                     ShowShape@pos:
   666                           
   667                           ; 2 bytes @ 0x2
   668     0022                     	ds	2
   669     0024                     ??_main:
   670                           
   671                           ; 1 bytes @ 0x4
   672     0024                     	ds	3
   673     0027                     main@shapePosition:
   674                           
   675                           ; 4 bytes @ 0x7
   676     0027                     	ds	4
   677                           
   678                           	psect	maintext
   679     0725                     __pmaintext:	
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 23 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  shapePositio    4    7[BANK0 ] struct .
   690 ;; Return value:  Size  Location     Type
   691 ;;                  1    wreg      void 
   692 ;; Registers used:
   693 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   694 ;; Tracked objects:
   695 ;;		On entry : B00/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   699 ;;      Params:         0       0       0       0       0
   700 ;;      Locals:         0       4       0       0       0
   701 ;;      Temps:          0       3       0       0       0
   702 ;;      Totals:         0       7       0       0       0
   703 ;;Total ram usage:        7 bytes
   704 ;; Hardware stack levels required when called: 4
   705 ;; This function calls:
   706 ;;		_MatrixClear
   707 ;;		_MatrixInit
   708 ;;		_PortBInit
   709 ;;		_SetPosition
   710 ;;		_ShowShape
   711 ;;		_SpiInit
   712 ;; This function is called by:
   713 ;;		Startup code after reset
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717     0725                     _main:	
   718                           ;psect for function _main
   719                           
   720     0725                     l776:	
   721                           ;incstack = 0
   722                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   723                           
   724                           
   725                           ;main.c: 24:     SpiInit();
   726     0725  120A  118A  268D  120A  118A  	fcall	_SpiInit
   727                           
   728                           ;main.c: 25:     MatrixInit();
   729     072A  120A  118A  26E5  120A  118A  	fcall	_MatrixInit
   730     072F                     l778:
   731                           
   732                           ;main.c: 26:     PortBInit();
   733     072F  120A  118A  267B  120A  118A  	fcall	_PortBInit
   734     0734                     l780:
   735                           
   736                           ;main.c: 30:         SetPosition(&shapePosition, 0, 1);
   737     0734  3027               	movlw	low main@shapePosition
   738     0735  00F0               	movwf	SetPosition@position
   739     0736  3000               	movlw	high main@shapePosition
   740     0737  00F1               	movwf	SetPosition@position+1
   741     0738  3000               	movlw	0
   742     0739  00F2               	movwf	SetPosition@x
   743     073A  00F3               	movwf	SetPosition@x+1
   744     073B  3001               	movlw	1
   745     073C  00F4               	movwf	SetPosition@y
   746     073D  3000               	movlw	0
   747     073E  00F5               	movwf	SetPosition@y+1
   748     073F  120A  118A  26C8  120A  118A  	fcall	_SetPosition
   749     0744                     l782:
   750                           
   751                           ;main.c: 31:         ShowShape(&shapePosition, 8, (char*)simvol_4);
   752     0744  3027               	movlw	low main@shapePosition
   753     0745  00F4               	movwf	ShowShape@coord
   754     0746  3000               	movlw	high main@shapePosition
   755     0747  00F5               	movwf	ShowShape@coord+1
   756     0748  3008               	movlw	8
   757     0749  00F6               	movwf	ShowShape@countElemntArray
   758     074A  3000               	movlw	0
   759     074B  00F7               	movwf	ShowShape@countElemntArray+1
   760     074C  3069               	movlw	(low ((_simvol_4-__stringbase)| (0+32768)))& (0+255)
   761     074D  00F8               	movwf	ShowShape@shapeArray
   762     074E  120A  118A  277A  120A  118A  	fcall	_ShowShape
   763                           
   764                           ;main.c: 32:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   765     0753  3015               	movlw	21
   766     0754  1283               	bcf	3,5	;RP0=0, select bank0
   767     0755  1303               	bcf	3,6	;RP1=0, select bank0
   768     0756  00A6               	movwf	??_main+2
   769     0757  304B               	movlw	75
   770     0758  00A5               	movwf	??_main+1
   771     0759  30BD               	movlw	189
   772     075A  00A4               	movwf	??_main
   773     075B                     u97:
   774     075B  0BA4               	decfsz	??_main,f
   775     075C  2F5B               	goto	u97
   776     075D  0BA5               	decfsz	??_main+1,f
   777     075E  2F5B               	goto	u97
   778     075F  0BA6               	decfsz	??_main+2,f
   779     0760  2F5B               	goto	u97
   780     0761  2F62               	nop2
   781     0762                     l784:
   782                           
   783                           ;main.c: 33:         MatrixClear();
   784     0762  120A  118A  26B2  120A  118A  	fcall	_MatrixClear
   785     0767                     l786:
   786                           
   787                           ;main.c: 34:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   788     0767  3015               	movlw	21
   789     0768  1283               	bcf	3,5	;RP0=0, select bank0
   790     0769  1303               	bcf	3,6	;RP1=0, select bank0
   791     076A  00A6               	movwf	??_main+2
   792     076B  304B               	movlw	75
   793     076C  00A5               	movwf	??_main+1
   794     076D  30BD               	movlw	189
   795     076E  00A4               	movwf	??_main
   796     076F                     u107:
   797     076F  0BA4               	decfsz	??_main,f
   798     0770  2F6F               	goto	u107
   799     0771  0BA5               	decfsz	??_main+1,f
   800     0772  2F6F               	goto	u107
   801     0773  0BA6               	decfsz	??_main+2,f
   802     0774  2F6F               	goto	u107
   803     0775  2F76               	nop2
   804     0776  2F34               	goto	l780
   805     0777  120A  118A  2800   	ljmp	start
   806     077A                     __end_of_main:
   807                           
   808                           	psect	text1
   809     068D                     __ptext1:	
   810 ;; *************** function _SpiInit *****************
   811 ;; Defined at:
   812 ;;		line 9 in file "spi.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, status,2, status,0
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         0       0       0       0       0
   827 ;;      Locals:         0       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0
   829 ;;      Totals:         0       0       0       0       0
   830 ;;Total ram usage:        0 bytes
   831 ;; Hardware stack levels used: 1
   832 ;; This function calls:
   833 ;;		Nothing
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839     068D                     _SpiInit:	
   840                           ;psect for function _SpiInit
   841                           
   842     068D                     l736:	
   843                           ;incstack = 0
   844                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   845                           
   846                           
   847                           ;spi.c: 10:     TRISC |= 0x10;
   848     068D  1683               	bsf	3,5	;RP0=1, select bank1
   849     068E  1303               	bcf	3,6	;RP1=0, select bank1
   850     068F  1607               	bsf	7,4	;volatile
   851     0690                     l738:
   852                           
   853                           ;spi.c: 11:     TRISC &= ~0x28;
   854     0690  30D7               	movlw	215
   855     0691  0587               	andwf	7,f	;volatile
   856                           
   857                           ;spi.c: 12:     TRISA &= ~0x20;
   858     0692  30DF               	movlw	223
   859     0693  0585               	andwf	5,f	;volatile
   860                           
   861                           ;spi.c: 13:     PORTA &= ~0x20;
   862     0694  30DF               	movlw	223
   863     0695  1283               	bcf	3,5	;RP0=0, select bank0
   864     0696  1303               	bcf	3,6	;RP1=0, select bank0
   865     0697  0585               	andwf	5,f	;volatile
   866     0698                     l740:
   867                           
   868                           ;spi.c: 14:     SSPCON = 0x30;
   869     0698  3030               	movlw	48
   870     0699  0094               	movwf	20	;volatile
   871     069A                     l742:
   872                           
   873                           ;spi.c: 15:     SSPSTAT = 0x80;
   874     069A  3080               	movlw	128
   875     069B  1683               	bsf	3,5	;RP0=1, select bank1
   876     069C  1303               	bcf	3,6	;RP1=0, select bank1
   877     069D  0094               	movwf	20	;volatile
   878     069E                     l106:
   879     069E  0008               	return
   880     069F                     __end_of_SpiInit:
   881                           
   882                           	psect	text2
   883     077A                     __ptext2:	
   884 ;; *************** function _ShowShape *****************
   885 ;; Defined at:
   886 ;;		line 8 in file "shape.c"
   887 ;; Parameters:    Size  Location     Type
   888 ;;  coord           2    4[COMMON] PTR struct .
   889 ;;		 -> main@shapePosition(4), 
   890 ;;  countElemntA    2    6[COMMON] int 
   891 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
   892 ;;		 -> simvol_4(8), 
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  pos             2    2[BANK0 ] int 
   895 ;;  _pos            2    0[BANK0 ] int 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   905 ;;      Params:         5       0       0       0       0
   906 ;;      Locals:         0       4       0       0       0
   907 ;;      Temps:          5       0       0       0       0
   908 ;;      Totals:        10       4       0       0       0
   909 ;;Total ram usage:       14 bytes
   910 ;; Hardware stack levels used: 1
   911 ;; Hardware stack levels required when called: 2
   912 ;; This function calls:
   913 ;;		_MatrixSendToSegment
   914 ;; This function is called by:
   915 ;;		_main
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919     077A                     _ShowShape:	
   920                           ;psect for function _ShowShape
   921                           
   922     077A                     l764:	
   923                           ;incstack = 0
   924                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   925                           
   926     077A                     l766:
   927                           
   928                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
   929     077A  0874               	movf	ShowShape@coord,w
   930     077B  0084               	movwf	4
   931     077C  1783               	bsf	3,7
   932     077D  1C75               	btfss	ShowShape@coord+1,0
   933     077E  1383               	bcf	3,7
   934     077F  0800               	movf	0,w
   935     0780  00F9               	movwf	??_ShowShape
   936     0781  0A84               	incf	4,f
   937     0782  0800               	movf	0,w
   938     0783  00FA               	movwf	??_ShowShape+1
   939     0784  0879               	movf	??_ShowShape,w
   940     0785  3E01               	addlw	1
   941     0786  1283               	bcf	3,5	;RP0=0, select bank0
   942     0787  1303               	bcf	3,6	;RP1=0, select bank0
   943     0788  00A2               	movwf	ShowShape@pos
   944     0789  087A               	movf	??_ShowShape+1,w
   945     078A  1803               	skipnc
   946     078B  3E01               	addlw	1
   947     078C  3E00               	addlw	0
   948     078D  00A3               	movwf	ShowShape@pos+1
   949     078E  2FDB               	goto	l774
   950     078F                     l768:
   951                           
   952                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
   953     078F  0874               	movf	ShowShape@coord,w
   954     0790  0084               	movwf	4
   955     0791  1783               	bsf	3,7
   956     0792  1C75               	btfss	ShowShape@coord+1,0
   957     0793  1383               	bcf	3,7
   958     0794  0800               	movf	0,w
   959     0795  00F9               	movwf	??_ShowShape
   960     0796  0A84               	incf	4,f
   961     0797  0800               	movf	0,w
   962     0798  00FA               	movwf	??_ShowShape+1
   963     0799  0879               	movf	??_ShowShape,w
   964     079A  1283               	bcf	3,5	;RP0=0, select bank0
   965     079B  1303               	bcf	3,6	;RP1=0, select bank0
   966     079C  0222               	subwf	ShowShape@pos,w
   967     079D  00FB               	movwf	??_ShowShape+2
   968     079E  087A               	movf	??_ShowShape+1,w
   969     079F  1C03               	skipc
   970     07A0  0A7A               	incf	??_ShowShape+1,w
   971     07A1  0223               	subwf	ShowShape@pos+1,w
   972     07A2  00FC               	movwf	??_ShowShape+3
   973     07A3  087B               	movf	??_ShowShape+2,w
   974     07A4  3EFF               	addlw	255
   975     07A5  00A0               	movwf	ShowShape@_pos
   976     07A6  087C               	movf	??_ShowShape+3,w
   977     07A7  1803               	skipnc
   978     07A8  3E01               	addlw	1
   979     07A9  3EFF               	addlw	255
   980     07AA  00A1               	movwf	ShowShape@_pos+1
   981     07AB                     l770:
   982                           
   983                           ;shape.c: 12:        MatrixSendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
   984     07AB  0823               	movf	ShowShape@pos+1,w
   985     07AC  00F2               	movwf	MatrixSendToSegment@segment+1
   986     07AD  0822               	movf	ShowShape@pos,w
   987     07AE  00F1               	movwf	MatrixSendToSegment@segment
   988     07AF  0820               	movf	ShowShape@_pos,w
   989     07B0  0778               	addwf	ShowShape@shapeArray,w
   990     07B1  0084               	movwf	4
   991     07B2  120A  118A  2003  120A  118A  	fcall	stringdir
   992     07B7  00F9               	movwf	??_ShowShape
   993     07B8  0874               	movf	ShowShape@coord,w
   994     07B9  3E02               	addlw	2
   995     07BA  00FA               	movwf	??_ShowShape+1
   996     07BB  0875               	movf	ShowShape@coord+1,w
   997     07BC  1803               	skipnc
   998     07BD  3E01               	addlw	1
   999     07BE  3E00               	addlw	0
  1000     07BF  00FB               	movwf	??_ShowShape+2
  1001     07C0  087A               	movf	??_ShowShape+1,w
  1002     07C1  0084               	movwf	4
  1003     07C2  1783               	bsf	3,7
  1004     07C3  1C7B               	btfss	??_ShowShape+2,0
  1005     07C4  1383               	bcf	3,7
  1006     07C5  0A00               	incf	0,w
  1007     07C6  2FC9               	goto	u74
  1008     07C7                     u75:
  1009     07C7  1003               	clrc
  1010     07C8  0DF9               	rlf	??_ShowShape,f
  1011     07C9                     u74:
  1012     07C9  3EFF               	addlw	-1
  1013     07CA  1D03               	skipz
  1014     07CB  2FC7               	goto	u75
  1015     07CC  0879               	movf	??_ShowShape,w
  1016     07CD  00F3               	movwf	MatrixSendToSegment@data
  1017     07CE  120A  118A  269F  120A  118A  	fcall	_MatrixSendToSegment
  1018     07D3                     l772:
  1019                           
  1020                           ;shape.c: 13:     }
  1021     07D3  3001               	movlw	1
  1022     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1023     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1024     07D6  07A2               	addwf	ShowShape@pos,f
  1025     07D7  1803               	skipnc
  1026     07D8  0AA3               	incf	ShowShape@pos+1,f
  1027     07D9  3000               	movlw	0
  1028     07DA  07A3               	addwf	ShowShape@pos+1,f
  1029     07DB                     l774:
  1030     07DB  0874               	movf	ShowShape@coord,w
  1031     07DC  0084               	movwf	4
  1032     07DD  1783               	bsf	3,7
  1033     07DE  1C75               	btfss	ShowShape@coord+1,0
  1034     07DF  1383               	bcf	3,7
  1035     07E0  0800               	movf	0,w
  1036     07E1  00F9               	movwf	??_ShowShape
  1037     07E2  0A84               	incf	4,f
  1038     07E3  0800               	movf	0,w
  1039     07E4  00FA               	movwf	??_ShowShape+1
  1040     07E5  0876               	movf	ShowShape@countElemntArray,w
  1041     07E6  0779               	addwf	??_ShowShape,w
  1042     07E7  00FB               	movwf	??_ShowShape+2
  1043     07E8  0877               	movf	ShowShape@countElemntArray+1,w
  1044     07E9  1803               	skipnc
  1045     07EA  0A77               	incf	ShowShape@countElemntArray+1,w
  1046     07EB  077A               	addwf	??_ShowShape+1,w
  1047     07EC  00FC               	movwf	??_ShowShape+3
  1048     07ED  087C               	movf	??_ShowShape+3,w
  1049     07EE  3A80               	xorlw	128
  1050     07EF  00FD               	movwf	??_ShowShape+4
  1051     07F0  0823               	movf	ShowShape@pos+1,w
  1052     07F1  3A80               	xorlw	128
  1053     07F2  027D               	subwf	??_ShowShape+4,w
  1054     07F3  1D03               	skipz
  1055     07F4  2FF7               	goto	u85
  1056     07F5  0822               	movf	ShowShape@pos,w
  1057     07F6  027B               	subwf	??_ShowShape+2,w
  1058     07F7                     u85:
  1059     07F7  1803               	skipnc
  1060     07F8  2FFA               	goto	u81
  1061     07F9  2FFB               	goto	u80
  1062     07FA                     u81:
  1063     07FA  2F8F               	goto	l768
  1064     07FB                     u80:
  1065     07FB                     l89:
  1066     07FB  0008               	return
  1067     07FC                     __end_of_ShowShape:
  1068                           
  1069                           	psect	text3
  1070     06C8                     __ptext3:	
  1071 ;; *************** function _SetPosition *****************
  1072 ;; Defined at:
  1073 ;;		line 3 in file "shape.c"
  1074 ;; Parameters:    Size  Location     Type
  1075 ;;  position        2    0[COMMON] PTR struct .
  1076 ;;		 -> main@shapePosition(4), 
  1077 ;;  x               2    2[COMMON] int 
  1078 ;;  y               2    4[COMMON] int 
  1079 ;; Auto vars:     Size  Location     Type
  1080 ;;		None
  1081 ;; Return value:  Size  Location     Type
  1082 ;;                  1    wreg      void 
  1083 ;; Registers used:
  1084 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1085 ;; Tracked objects:
  1086 ;;		On entry : 0/0
  1087 ;;		On exit  : 0/0
  1088 ;;		Unchanged: 0/0
  1089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1090 ;;      Params:         6       0       0       0       0
  1091 ;;      Locals:         0       0       0       0       0
  1092 ;;      Temps:          2       0       0       0       0
  1093 ;;      Totals:         8       0       0       0       0
  1094 ;;Total ram usage:        8 bytes
  1095 ;; Hardware stack levels used: 1
  1096 ;; This function calls:
  1097 ;;		Nothing
  1098 ;; This function is called by:
  1099 ;;		_main
  1100 ;; This function uses a non-reentrant model
  1101 ;;
  1102                           
  1103     06C8                     _SetPosition:	
  1104                           ;psect for function _SetPosition
  1105                           
  1106     06C8                     l760:	
  1107                           ;incstack = 0
  1108                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1109                           
  1110                           
  1111                           ;shape.c: 4:     position->x = x;
  1112     06C8  0870               	movf	SetPosition@position,w
  1113     06C9  0084               	movwf	4
  1114     06CA  1783               	bsf	3,7
  1115     06CB  1C71               	btfss	SetPosition@position+1,0
  1116     06CC  1383               	bcf	3,7
  1117     06CD  0872               	movf	SetPosition@x,w
  1118     06CE  0080               	movwf	0
  1119     06CF  0A84               	incf	4,f
  1120     06D0  0873               	movf	SetPosition@x+1,w
  1121     06D1  0080               	movwf	0
  1122     06D2                     l762:
  1123                           
  1124                           ;shape.c: 5:     position->y = y;
  1125     06D2  0870               	movf	SetPosition@position,w
  1126     06D3  3E02               	addlw	2
  1127     06D4  00F6               	movwf	??_SetPosition
  1128     06D5  0871               	movf	SetPosition@position+1,w
  1129     06D6  1803               	skipnc
  1130     06D7  3E01               	addlw	1
  1131     06D8  3E00               	addlw	0
  1132     06D9  00F7               	movwf	??_SetPosition+1
  1133     06DA  0876               	movf	??_SetPosition,w
  1134     06DB  0084               	movwf	4
  1135     06DC  1783               	bsf	3,7
  1136     06DD  1C77               	btfss	??_SetPosition+1,0
  1137     06DE  1383               	bcf	3,7
  1138     06DF  0874               	movf	SetPosition@y,w
  1139     06E0  0080               	movwf	0
  1140     06E1  0A84               	incf	4,f
  1141     06E2  0875               	movf	SetPosition@y+1,w
  1142     06E3  0080               	movwf	0
  1143     06E4                     l83:
  1144     06E4  0008               	return
  1145     06E5                     __end_of_SetPosition:
  1146                           
  1147                           	psect	text4
  1148     067B                     __ptext4:	
  1149 ;; *************** function _PortBInit *****************
  1150 ;; Defined at:
  1151 ;;		line 13 in file "portsinit.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;		None
  1154 ;; Auto vars:     Size  Location     Type
  1155 ;;		None
  1156 ;; Return value:  Size  Location     Type
  1157 ;;                  1    wreg      void 
  1158 ;; Registers used:
  1159 ;;		status,2
  1160 ;; Tracked objects:
  1161 ;;		On entry : 0/0
  1162 ;;		On exit  : 0/0
  1163 ;;		Unchanged: 0/0
  1164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1165 ;;      Params:         0       0       0       0       0
  1166 ;;      Locals:         0       0       0       0       0
  1167 ;;      Temps:          0       0       0       0       0
  1168 ;;      Totals:         0       0       0       0       0
  1169 ;;Total ram usage:        0 bytes
  1170 ;; Hardware stack levels used: 1
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178     067B                     _PortBInit:	
  1179                           ;psect for function _PortBInit
  1180                           
  1181     067B                     l758:	
  1182                           ;incstack = 0
  1183                           ; Regs used in _PortBInit: [status,2]
  1184                           
  1185                           
  1186                           ;portsinit.c: 14:     TRISB = 0x00;
  1187     067B  1683               	bsf	3,5	;RP0=1, select bank1
  1188     067C  1303               	bcf	3,6	;RP1=0, select bank1
  1189     067D  0186               	clrf	6	;volatile
  1190                           
  1191                           ;portsinit.c: 15:     PORTB = 0x00;
  1192     067E  1283               	bcf	3,5	;RP0=0, select bank0
  1193     067F  1303               	bcf	3,6	;RP1=0, select bank0
  1194     0680  0186               	clrf	6	;volatile
  1195     0681                     l78:
  1196     0681  0008               	return
  1197     0682                     __end_of_PortBInit:
  1198                           
  1199                           	psect	text5
  1200     06E5                     __ptext5:	
  1201 ;; *************** function _MatrixInit *****************
  1202 ;; Defined at:
  1203 ;;		line 20 in file "matrix.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0
  1219 ;;      Temps:          3       0       0       0       0
  1220 ;;      Totals:         3       0       0       0       0
  1221 ;;Total ram usage:        3 bytes
  1222 ;; Hardware stack levels used: 1
  1223 ;; Hardware stack levels required when called: 3
  1224 ;; This function calls:
  1225 ;;		_MatrixClear
  1226 ;;		_MatrixSendToSegment
  1227 ;; This function is called by:
  1228 ;;		_main
  1229 ;; This function uses a non-reentrant model
  1230 ;;
  1231                           
  1232     06E5                     _MatrixInit:	
  1233                           ;psect for function _MatrixInit
  1234                           
  1235     06E5                     l744:	
  1236                           ;incstack = 0
  1237                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1238                           
  1239                           
  1240                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1241     06E5  3003               	movlw	3
  1242     06E6  00F9               	movwf	??_MatrixInit+2
  1243     06E7  3008               	movlw	8
  1244     06E8  00F8               	movwf	??_MatrixInit+1
  1245     06E9  3077               	movlw	119
  1246     06EA  00F7               	movwf	??_MatrixInit
  1247     06EB                     u117:
  1248     06EB  0BF7               	decfsz	??_MatrixInit,f
  1249     06EC  2EEB               	goto	u117
  1250     06ED  0BF8               	decfsz	??_MatrixInit+1,f
  1251     06EE  2EEB               	goto	u117
  1252     06EF  0BF9               	decfsz	??_MatrixInit+2,f
  1253     06F0  2EEB               	goto	u117
  1254     06F1                     l746:
  1255                           
  1256                           ;matrix.c: 22:     RA5=1;
  1257     06F1  1283               	bcf	3,5	;RP0=0, select bank0
  1258     06F2  1303               	bcf	3,6	;RP1=0, select bank0
  1259     06F3  1685               	bsf	5,5	;volatile
  1260     06F4                     l748:
  1261                           
  1262                           ;matrix.c: 23:     MatrixSendToSegment(0x09, 0x00);
  1263     06F4  3009               	movlw	9
  1264     06F5  00F1               	movwf	MatrixSendToSegment@segment
  1265     06F6  3000               	movlw	0
  1266     06F7  00F2               	movwf	MatrixSendToSegment@segment+1
  1267     06F8  01F3               	clrf	MatrixSendToSegment@data
  1268     06F9  120A  118A  269F  120A  118A  	fcall	_MatrixSendToSegment
  1269     06FE                     l750:
  1270                           
  1271                           ;matrix.c: 24:     MatrixSendToSegment(0x0b, 0x07);
  1272     06FE  300B               	movlw	11
  1273     06FF  00F1               	movwf	MatrixSendToSegment@segment
  1274     0700  3000               	movlw	0
  1275     0701  00F2               	movwf	MatrixSendToSegment@segment+1
  1276     0702  3007               	movlw	7
  1277     0703  00F3               	movwf	MatrixSendToSegment@data
  1278     0704  120A  118A  269F  120A  118A  	fcall	_MatrixSendToSegment
  1279     0709                     l752:
  1280                           
  1281                           ;matrix.c: 25:     MatrixSendToSegment(0x0A, 0x02);
  1282     0709  300A               	movlw	10
  1283     070A  00F1               	movwf	MatrixSendToSegment@segment
  1284     070B  3000               	movlw	0
  1285     070C  00F2               	movwf	MatrixSendToSegment@segment+1
  1286     070D  3002               	movlw	2
  1287     070E  00F3               	movwf	MatrixSendToSegment@data
  1288     070F  120A  118A  269F  120A  118A  	fcall	_MatrixSendToSegment
  1289     0714                     l754:
  1290                           
  1291                           ;matrix.c: 26:     MatrixSendToSegment(0x0c, 0x01);
  1292     0714  300C               	movlw	12
  1293     0715  00F1               	movwf	MatrixSendToSegment@segment
  1294     0716  3000               	movlw	0
  1295     0717  00F2               	movwf	MatrixSendToSegment@segment+1
  1296     0718  01F3               	clrf	MatrixSendToSegment@data
  1297     0719  0AF3               	incf	MatrixSendToSegment@data,f
  1298     071A  120A  118A  269F  120A  118A  	fcall	_MatrixSendToSegment
  1299     071F                     l756:
  1300                           
  1301                           ;matrix.c: 27:     MatrixClear();
  1302     071F  120A  118A  26B2  120A  118A  	fcall	_MatrixClear
  1303     0724                     l68:
  1304     0724  0008               	return
  1305     0725                     __end_of_MatrixInit:
  1306                           
  1307                           	psect	text6
  1308     06B2                     __ptext6:	
  1309 ;; *************** function _MatrixClear *****************
  1310 ;; Defined at:
  1311 ;;		line 10 in file "matrix.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  i               1    6[COMMON] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, pclath, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         0       0       0       0       0
  1326 ;;      Locals:         1       0       0       0       0
  1327 ;;      Temps:          2       0       0       0       0
  1328 ;;      Totals:         3       0       0       0       0
  1329 ;;Total ram usage:        3 bytes
  1330 ;; Hardware stack levels used: 1
  1331 ;; Hardware stack levels required when called: 2
  1332 ;; This function calls:
  1333 ;;		_MatrixSendToSegment
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;;		_MatrixInit
  1337 ;; This function uses a non-reentrant model
  1338 ;;
  1339                           
  1340     06B2                     _MatrixClear:	
  1341                           ;psect for function _MatrixClear
  1342                           
  1343     06B2                     l730:	
  1344                           ;incstack = 0
  1345                           ; Regs used in _MatrixClear: [wreg+status,2+status,0+pclath+cstack]
  1346                           
  1347                           
  1348                           ;matrix.c: 12:   char i = 8;
  1349     06B2  3008               	movlw	8
  1350     06B3  00F6               	movwf	MatrixClear@i
  1351     06B4                     l732:
  1352                           
  1353                           ;matrix.c: 14:   {;matrix.c: 15:     MatrixSendToSegment(i, 0x00);
  1354     06B4  0876               	movf	MatrixClear@i,w
  1355     06B5  00F4               	movwf	??_MatrixClear
  1356     06B6  01F5               	clrf	??_MatrixClear+1
  1357     06B7  0874               	movf	??_MatrixClear,w
  1358     06B8  00F1               	movwf	MatrixSendToSegment@segment
  1359     06B9  0875               	movf	??_MatrixClear+1,w
  1360     06BA  00F2               	movwf	MatrixSendToSegment@segment+1
  1361     06BB  01F3               	clrf	MatrixSendToSegment@data
  1362     06BC  120A  118A  269F  120A  118A  	fcall	_MatrixSendToSegment
  1363     06C1                     l734:
  1364                           
  1365                           ;matrix.c: 16:   } while (--i);
  1366     06C1  3001               	movlw	1
  1367     06C2  02F6               	subwf	MatrixClear@i,f
  1368     06C3  1D03               	btfss	3,2
  1369     06C4  2EC6               	goto	u61
  1370     06C5  2EC7               	goto	u60
  1371     06C6                     u61:
  1372     06C6  2EB4               	goto	l732
  1373     06C7                     u60:
  1374     06C7                     l65:
  1375     06C7  0008               	return
  1376     06C8                     __end_of_MatrixClear:
  1377                           
  1378                           	psect	text7
  1379     069F                     __ptext7:	
  1380 ;; *************** function _MatrixSendToSegment *****************
  1381 ;; Defined at:
  1382 ;;		line 31 in file "matrix.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  segment         2    1[COMMON] int 
  1385 ;;  data            1    3[COMMON] unsigned char 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, status,0, pclath, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1397 ;;      Params:         3       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0
  1400 ;;      Totals:         3       0       0       0       0
  1401 ;;Total ram usage:        3 bytes
  1402 ;; Hardware stack levels used: 1
  1403 ;; Hardware stack levels required when called: 1
  1404 ;; This function calls:
  1405 ;;		_SpiSendByte
  1406 ;; This function is called by:
  1407 ;;		_MatrixClear
  1408 ;;		_MatrixInit
  1409 ;;		_ShowShape
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413     069F                     _MatrixSendToSegment:	
  1414                           ;psect for function _MatrixSendToSegment
  1415                           
  1416     069F                     l724:	
  1417                           ;incstack = 0
  1418                           ; Regs used in _MatrixSendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1419                           
  1420                           
  1421                           ;matrix.c: 32:     RA5 = 0;
  1422     069F  1283               	bcf	3,5	;RP0=0, select bank0
  1423     06A0  1303               	bcf	3,6	;RP1=0, select bank0
  1424     06A1  1285               	bcf	5,5	;volatile
  1425     06A2                     l726:
  1426                           
  1427                           ;matrix.c: 33:     SpiSendByte((char)segment);
  1428     06A2  0871               	movf	MatrixSendToSegment@segment,w
  1429     06A3  120A  118A  2682  120A  118A  	fcall	_SpiSendByte
  1430                           
  1431                           ;matrix.c: 34:     SpiSendByte(data);
  1432     06A8  0873               	movf	MatrixSendToSegment@data,w
  1433     06A9  120A  118A  2682  120A  118A  	fcall	_SpiSendByte
  1434     06AE                     l728:
  1435                           
  1436                           ;matrix.c: 35:     RA5 = 1;
  1437     06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1438     06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1439     06B0  1685               	bsf	5,5	;volatile
  1440     06B1                     l71:
  1441     06B1  0008               	return
  1442     06B2                     __end_of_MatrixSendToSegment:
  1443                           
  1444                           	psect	text8
  1445     0682                     __ptext8:	
  1446 ;; *************** function _SpiSendByte *****************
  1447 ;; Defined at:
  1448 ;;		line 18 in file "spi.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;  data            1    wreg     unsigned char 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;  data            1    0[COMMON] unsigned char 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1462 ;;      Params:         0       0       0       0       0
  1463 ;;      Locals:         1       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0
  1465 ;;      Totals:         1       0       0       0       0
  1466 ;;Total ram usage:        1 bytes
  1467 ;; Hardware stack levels used: 1
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_MatrixSendToSegment
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475     0682                     _SpiSendByte:	
  1476                           ;psect for function _SpiSendByte
  1477                           
  1478                           
  1479                           ;incstack = 0
  1480                           ; Regs used in _SpiSendByte: [wreg]
  1481                           ;SpiSendByte@data stored from wreg
  1482     0682  00F0               	movwf	SpiSendByte@data
  1483     0683                     l722:
  1484                           
  1485                           ;spi.c: 19:     SSPBUF = data;
  1486     0683  0870               	movf	SpiSendByte@data,w
  1487     0684  1283               	bcf	3,5	;RP0=0, select bank0
  1488     0685  1303               	bcf	3,6	;RP1=0, select bank0
  1489     0686  0093               	movwf	19	;volatile
  1490     0687                     l109:	
  1491                           ;spi.c: 20:     while (!SSPIF);
  1492                           
  1493     0687  1D8C               	btfss	12,3	;volatile
  1494     0688  2E8A               	goto	u51
  1495     0689  2E8B               	goto	u50
  1496     068A                     u51:
  1497     068A  2E87               	goto	l109
  1498     068B                     u50:
  1499     068B                     l111:
  1500                           
  1501                           ;spi.c: 21:     SSPIF = 0;
  1502     068B  118C               	bcf	12,3	;volatile
  1503     068C                     l112:
  1504     068C  0008               	return
  1505     068D                     __end_of_SpiSendByte:
  1506     0002                     ___latbits      equ	2
  1507     007E                     btemp           set	126	;btemp
  1508     007E                     wtemp0          set	126
  1509                           
  1510                           	psect	config
  1511                           
  1512                           ;Config register CONFIG @ 0x2007
  1513                           ;	Oscillator Selection bits
  1514                           ;	FOSC = HS, HS oscillator
  1515                           ;	Watchdog Timer Enable bit
  1516                           ;	WDTE = OFF, WDT disabled
  1517                           ;	Power-up Timer Enable bit
  1518                           ;	PWRTE = OFF, PWRT disabled
  1519                           ;	FLASH Program Memory Code Protection bits
  1520                           ;	CP = OFF, Code protection off
  1521                           ;	Brown-out Reset Enable bit
  1522                           ;	BOREN = OFF, BOR disabled
  1523                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1524                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1525                           ;	Data EE Memory Code Protection
  1526                           ;	CPD = OFF, Code Protection off
  1527                           ;	FLASH Program Memory Write Enable
  1528                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1529                           ;	In-Circuit Debugger Mode bit
  1530                           ;	DEBUG = 0x1, unprogrammed default
  1531     2007                     	org	8199
  1532     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    112
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     11      11
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 8
		 -> simvol_4(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_ShowShape
    _ShowShape->_MatrixSendToSegment
    _MatrixInit->_MatrixClear
    _MatrixClear->_MatrixSendToSegment
    _MatrixSendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     800
                                              4 BANK0      7     7      0
                        _MatrixClear
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                          _ShowShape
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ShowShape                                           14     9      5     312
                                              4 COMMON    10     5      5
                                              0 BANK0      4     4      0
                _MatrixSendToSegment
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                        _MatrixClear
                _MatrixSendToSegment
 ---------------------------------------------------------------------------------
 (2) _MatrixClear                                          3     3      0     130
                                              4 COMMON     3     3      0
                _MatrixSendToSegment
 ---------------------------------------------------------------------------------
 (2) _MatrixSendToSegment                                  3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixClear
     _MatrixSendToSegment
       _SpiSendByte
   _MatrixInit
     _MatrixClear
     _MatrixSendToSegment
   _PortBInit
   _SetPosition
   _ShowShape
     _MatrixSendToSegment
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     11      11     13.8%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      25      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 23 12:12:51 2024

                          pc 0002                           l71 06B1                           l65 06C7  
                         l83 06E4                           l68 0724                           l78 0681  
                         l89 07FB                           u50 068B                           u51 068A  
                         u60 06C7                           u61 06C6                           u80 07FB  
                         u81 07FA                           u74 07C9                           u75 07C7  
                         u85 07F7                           u97 075B                           fsr 0004  
            SpiSendByte@data 0070                          l111 068B                          l112 068C  
                        l106 069E                          l109 0687                          l722 0683  
                        l730 06B2                          l724 069F                          l732 06B4  
                        l740 0698                          l726 06A2                          l734 06C1  
                        l750 06FE                          l742 069A                          l728 06AE  
                        l752 0709                          l744 06E5                          l760 06C8  
                        l736 068D                          l754 0714                          l746 06F1  
                        l762 06D2                          l770 07AB                          l738 0690  
                        l756 071F                          l748 06F4                          l772 07D3  
                        l764 077A                          l780 0734                          l758 067B  
                        l774 07DB                          l766 077A                          l782 0744  
                        l768 078F                          l784 0762                          l776 0725  
                        l786 0767                          l778 072F                          _RA5 002D  
                        u107 076F                          u117 06EB                          fsr0 0004  
                        indf 0000                         _main 0725                         btemp 007E  
                       start 0000              __end_of_SpiInit 069F                        ?_main 0070  
              ??_MatrixClear 0074                        _PORTA 0005                        _PORTB 0006  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _SSPIF 0063                        pclath 000A                        status 0003  
                      wtemp0 007E              __initialization 07FC                 __end_of_main 077A  
                 _MatrixInit 06E5                       ??_main 0024                ??_SetPosition 0076  
        __end_of_MatrixClear 06C8                       _SSPCON 0014                       _SSPBUF 0013  
                  ??_SpiInit 0070                ??_SpiSendByte 0070             __end_of_simvol_0 0071  
           __end_of_simvol_1 0069             __end_of_simvol_2 0061             __end_of_simvol_3 0059  
           __end_of_simvol_4 0079             __end_of_simvol_5 0051             __end_of_simvol_6 0049  
           __end_of_simvol_7 0041             __end_of_simvol_8 0039             __end_of_simvol_9 0031  
             ShowShape@coord 0074      __end_of__initialization 07FC          __end_of_SetPosition 06E5  
__end_of_MatrixSendToSegment 06B2               __pcstackCOMMON 0070                  ?_MatrixInit 0070  
        __end_of_SpiSendByte 068D                  _MatrixClear 06B2                 MatrixClear@i 0076  
          __end_of_PortBInit 0682            __end_of_ShowShape 07FC            main@shapePosition 0027  
                 __pmaintext 0725    ShowShape@countElemntArray 0076                  _SetPosition 06C8  
                    _SSPSTAT 0094                   __stringtab 0003                      _SpiInit 068D  
                _SpiSendByte 0682                      __ptext1 068D                      __ptext2 077A  
                    __ptext3 06C8                      __ptext4 067B                      __ptext5 06E5  
                    __ptext6 06B2                      __ptext7 069F                      __ptext8 0682  
       end_of_initialization 07FC                   _simvol_dot 0011          SetPosition@position 0070  
               ??_MatrixInit 0077                 ?_MatrixClear 0070          start_initialization 07FC  
         __end_of_MatrixInit 0725                    _PortBInit 067B                    _ShowShape 077A  
              ShowShape@_pos 0020                 SetPosition@x 0072                 SetPosition@y 0074  
                  ___latbits 0002                __pcstackBANK0 0020                 ?_SetPosition 0070  
        ShowShape@shapeArray 0078                     ?_SpiInit 0070                   ?_PortBInit 0070  
               ?_SpiSendByte 0070                   ?_ShowShape 0074                    __pstrings 0003  
       __end_of_simvol_d_dot 0029         __end_of_simvol_space 0021                  __stringbase 0008  
                ??_PortBInit 0070                  ??_ShowShape 0079                 ShowShape@pos 0022  
         __end_of__stringtab 0009      MatrixSendToSegment@data 0073          _MatrixSendToSegment 069F  
 MatrixSendToSegment@segment 0071          __end_of_simvol_dash 0011                     _simvol_0 0069  
                   _simvol_1 0061                     _simvol_2 0059                     _simvol_3 0051  
                   _simvol_4 0071                     _simvol_5 0049                     _simvol_6 0041  
                   _simvol_7 0039                     _simvol_8 0031                     _simvol_9 0029  
       ?_MatrixSendToSegment 0071                    stringcode 0003           __end_of_simvol_dot 0019  
      ??_MatrixSendToSegment 0074                     stringdir 0003                     stringtab 0003  
               _simvol_d_dot 0021                 _simvol_space 0019                  _simvol_dash 0009  



Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Dec  6 14:18:55 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22     0000                     
    23                           ; Generated 12/10/2023 GMT
    24                           ; 
    25                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F876 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0004                     fsr             equ	4
    58     0004                     fsr0            equ	4
    59     0000                     indf            equ	0
    60     0000                     indf0           equ	0
    61     0002                     pc              equ	2
    62     0002                     pcl             equ	2
    63     000A                     pclath          equ	10
    64     0003                     status          equ	3
    65     0000                     INDF            equ	0	;# 
    66     0001                     TMR0            equ	1	;# 
    67     0002                     PCL             equ	2	;# 
    68     0003                     STATUS          equ	3	;# 
    69     0004                     FSR             equ	4	;# 
    70     0005                     PORTA           equ	5	;# 
    71     0006                     PORTB           equ	6	;# 
    72     0007                     PORTC           equ	7	;# 
    73     000A                     PCLATH          equ	10	;# 
    74     000B                     INTCON          equ	11	;# 
    75     000C                     PIR1            equ	12	;# 
    76     000D                     PIR2            equ	13	;# 
    77     000E                     TMR1            equ	14	;# 
    78     000E                     TMR1L           equ	14	;# 
    79     000F                     TMR1H           equ	15	;# 
    80     0010                     T1CON           equ	16	;# 
    81     0011                     TMR2            equ	17	;# 
    82     0012                     T2CON           equ	18	;# 
    83     0013                     SSPBUF          equ	19	;# 
    84     0014                     SSPCON          equ	20	;# 
    85     0015                     CCPR1           equ	21	;# 
    86     0015                     CCPR1L          equ	21	;# 
    87     0016                     CCPR1H          equ	22	;# 
    88     0017                     CCP1CON         equ	23	;# 
    89     0018                     RCSTA           equ	24	;# 
    90     0019                     TXREG           equ	25	;# 
    91     001A                     RCREG           equ	26	;# 
    92     001B                     CCPR2           equ	27	;# 
    93     001B                     CCPR2L          equ	27	;# 
    94     001C                     CCPR2H          equ	28	;# 
    95     001D                     CCP2CON         equ	29	;# 
    96     001E                     ADRESH          equ	30	;# 
    97     001F                     ADCON0          equ	31	;# 
    98     0081                     OPTION_REG      equ	129	;# 
    99     0085                     TRISA           equ	133	;# 
   100     0086                     TRISB           equ	134	;# 
   101     0087                     TRISC           equ	135	;# 
   102     008C                     PIE1            equ	140	;# 
   103     008D                     PIE2            equ	141	;# 
   104     008E                     PCON            equ	142	;# 
   105     0091                     SSPCON2         equ	145	;# 
   106     0092                     PR2             equ	146	;# 
   107     0093                     SSPADD          equ	147	;# 
   108     0094                     SSPSTAT         equ	148	;# 
   109     0098                     TXSTA           equ	152	;# 
   110     0099                     SPBRG           equ	153	;# 
   111     009E                     ADRESL          equ	158	;# 
   112     009F                     ADCON1          equ	159	;# 
   113     010C                     EEDATA          equ	268	;# 
   114     010D                     EEADR           equ	269	;# 
   115     010E                     EEDATH          equ	270	;# 
   116     010F                     EEADRH          equ	271	;# 
   117     018C                     EECON1          equ	396	;# 
   118     018D                     EECON2          equ	397	;# 
   119     0000                     INDF            equ	0	;# 
   120     0001                     TMR0            equ	1	;# 
   121     0002                     PCL             equ	2	;# 
   122     0003                     STATUS          equ	3	;# 
   123     0004                     FSR             equ	4	;# 
   124     0005                     PORTA           equ	5	;# 
   125     0006                     PORTB           equ	6	;# 
   126     0007                     PORTC           equ	7	;# 
   127     000A                     PCLATH          equ	10	;# 
   128     000B                     INTCON          equ	11	;# 
   129     000C                     PIR1            equ	12	;# 
   130     000D                     PIR2            equ	13	;# 
   131     000E                     TMR1            equ	14	;# 
   132     000E                     TMR1L           equ	14	;# 
   133     000F                     TMR1H           equ	15	;# 
   134     0010                     T1CON           equ	16	;# 
   135     0011                     TMR2            equ	17	;# 
   136     0012                     T2CON           equ	18	;# 
   137     0013                     SSPBUF          equ	19	;# 
   138     0014                     SSPCON          equ	20	;# 
   139     0015                     CCPR1           equ	21	;# 
   140     0015                     CCPR1L          equ	21	;# 
   141     0016                     CCPR1H          equ	22	;# 
   142     0017                     CCP1CON         equ	23	;# 
   143     0018                     RCSTA           equ	24	;# 
   144     0019                     TXREG           equ	25	;# 
   145     001A                     RCREG           equ	26	;# 
   146     001B                     CCPR2           equ	27	;# 
   147     001B                     CCPR2L          equ	27	;# 
   148     001C                     CCPR2H          equ	28	;# 
   149     001D                     CCP2CON         equ	29	;# 
   150     001E                     ADRESH          equ	30	;# 
   151     001F                     ADCON0          equ	31	;# 
   152     0081                     OPTION_REG      equ	129	;# 
   153     0085                     TRISA           equ	133	;# 
   154     0086                     TRISB           equ	134	;# 
   155     0087                     TRISC           equ	135	;# 
   156     008C                     PIE1            equ	140	;# 
   157     008D                     PIE2            equ	141	;# 
   158     008E                     PCON            equ	142	;# 
   159     0091                     SSPCON2         equ	145	;# 
   160     0092                     PR2             equ	146	;# 
   161     0093                     SSPADD          equ	147	;# 
   162     0094                     SSPSTAT         equ	148	;# 
   163     0098                     TXSTA           equ	152	;# 
   164     0099                     SPBRG           equ	153	;# 
   165     009E                     ADRESL          equ	158	;# 
   166     009F                     ADCON1          equ	159	;# 
   167     010C                     EEDATA          equ	268	;# 
   168     010D                     EEADR           equ	269	;# 
   169     010E                     EEDATH          equ	270	;# 
   170     010F                     EEADRH          equ	271	;# 
   171     018C                     EECON1          equ	396	;# 
   172     018D                     EECON2          equ	397	;# 
   173     0000                     INDF            equ	0	;# 
   174     0001                     TMR0            equ	1	;# 
   175     0002                     PCL             equ	2	;# 
   176     0003                     STATUS          equ	3	;# 
   177     0004                     FSR             equ	4	;# 
   178     0005                     PORTA           equ	5	;# 
   179     0006                     PORTB           equ	6	;# 
   180     0007                     PORTC           equ	7	;# 
   181     000A                     PCLATH          equ	10	;# 
   182     000B                     INTCON          equ	11	;# 
   183     000C                     PIR1            equ	12	;# 
   184     000D                     PIR2            equ	13	;# 
   185     000E                     TMR1            equ	14	;# 
   186     000E                     TMR1L           equ	14	;# 
   187     000F                     TMR1H           equ	15	;# 
   188     0010                     T1CON           equ	16	;# 
   189     0011                     TMR2            equ	17	;# 
   190     0012                     T2CON           equ	18	;# 
   191     0013                     SSPBUF          equ	19	;# 
   192     0014                     SSPCON          equ	20	;# 
   193     0015                     CCPR1           equ	21	;# 
   194     0015                     CCPR1L          equ	21	;# 
   195     0016                     CCPR1H          equ	22	;# 
   196     0017                     CCP1CON         equ	23	;# 
   197     0018                     RCSTA           equ	24	;# 
   198     0019                     TXREG           equ	25	;# 
   199     001A                     RCREG           equ	26	;# 
   200     001B                     CCPR2           equ	27	;# 
   201     001B                     CCPR2L          equ	27	;# 
   202     001C                     CCPR2H          equ	28	;# 
   203     001D                     CCP2CON         equ	29	;# 
   204     001E                     ADRESH          equ	30	;# 
   205     001F                     ADCON0          equ	31	;# 
   206     0081                     OPTION_REG      equ	129	;# 
   207     0085                     TRISA           equ	133	;# 
   208     0086                     TRISB           equ	134	;# 
   209     0087                     TRISC           equ	135	;# 
   210     008C                     PIE1            equ	140	;# 
   211     008D                     PIE2            equ	141	;# 
   212     008E                     PCON            equ	142	;# 
   213     0091                     SSPCON2         equ	145	;# 
   214     0092                     PR2             equ	146	;# 
   215     0093                     SSPADD          equ	147	;# 
   216     0094                     SSPSTAT         equ	148	;# 
   217     0098                     TXSTA           equ	152	;# 
   218     0099                     SPBRG           equ	153	;# 
   219     009E                     ADRESL          equ	158	;# 
   220     009F                     ADCON1          equ	159	;# 
   221     010C                     EEDATA          equ	268	;# 
   222     010D                     EEADR           equ	269	;# 
   223     010E                     EEDATH          equ	270	;# 
   224     010F                     EEADRH          equ	271	;# 
   225     018C                     EECON1          equ	396	;# 
   226     018D                     EECON2          equ	397	;# 
   227     0000                     INDF            equ	0	;# 
   228     0001                     TMR0            equ	1	;# 
   229     0002                     PCL             equ	2	;# 
   230     0003                     STATUS          equ	3	;# 
   231     0004                     FSR             equ	4	;# 
   232     0005                     PORTA           equ	5	;# 
   233     0006                     PORTB           equ	6	;# 
   234     0007                     PORTC           equ	7	;# 
   235     000A                     PCLATH          equ	10	;# 
   236     000B                     INTCON          equ	11	;# 
   237     000C                     PIR1            equ	12	;# 
   238     000D                     PIR2            equ	13	;# 
   239     000E                     TMR1            equ	14	;# 
   240     000E                     TMR1L           equ	14	;# 
   241     000F                     TMR1H           equ	15	;# 
   242     0010                     T1CON           equ	16	;# 
   243     0011                     TMR2            equ	17	;# 
   244     0012                     T2CON           equ	18	;# 
   245     0013                     SSPBUF          equ	19	;# 
   246     0014                     SSPCON          equ	20	;# 
   247     0015                     CCPR1           equ	21	;# 
   248     0015                     CCPR1L          equ	21	;# 
   249     0016                     CCPR1H          equ	22	;# 
   250     0017                     CCP1CON         equ	23	;# 
   251     0018                     RCSTA           equ	24	;# 
   252     0019                     TXREG           equ	25	;# 
   253     001A                     RCREG           equ	26	;# 
   254     001B                     CCPR2           equ	27	;# 
   255     001B                     CCPR2L          equ	27	;# 
   256     001C                     CCPR2H          equ	28	;# 
   257     001D                     CCP2CON         equ	29	;# 
   258     001E                     ADRESH          equ	30	;# 
   259     001F                     ADCON0          equ	31	;# 
   260     0081                     OPTION_REG      equ	129	;# 
   261     0085                     TRISA           equ	133	;# 
   262     0086                     TRISB           equ	134	;# 
   263     0087                     TRISC           equ	135	;# 
   264     008C                     PIE1            equ	140	;# 
   265     008D                     PIE2            equ	141	;# 
   266     008E                     PCON            equ	142	;# 
   267     0091                     SSPCON2         equ	145	;# 
   268     0092                     PR2             equ	146	;# 
   269     0093                     SSPADD          equ	147	;# 
   270     0094                     SSPSTAT         equ	148	;# 
   271     0098                     TXSTA           equ	152	;# 
   272     0099                     SPBRG           equ	153	;# 
   273     009E                     ADRESL          equ	158	;# 
   274     009F                     ADCON1          equ	159	;# 
   275     010C                     EEDATA          equ	268	;# 
   276     010D                     EEADR           equ	269	;# 
   277     010E                     EEDATH          equ	270	;# 
   278     010F                     EEADRH          equ	271	;# 
   279     018C                     EECON1          equ	396	;# 
   280     018D                     EECON2          equ	397	;# 
   281     0000                     INDF            equ	0	;# 
   282     0001                     TMR0            equ	1	;# 
   283     0002                     PCL             equ	2	;# 
   284     0003                     STATUS          equ	3	;# 
   285     0004                     FSR             equ	4	;# 
   286     0005                     PORTA           equ	5	;# 
   287     0006                     PORTB           equ	6	;# 
   288     0007                     PORTC           equ	7	;# 
   289     000A                     PCLATH          equ	10	;# 
   290     000B                     INTCON          equ	11	;# 
   291     000C                     PIR1            equ	12	;# 
   292     000D                     PIR2            equ	13	;# 
   293     000E                     TMR1            equ	14	;# 
   294     000E                     TMR1L           equ	14	;# 
   295     000F                     TMR1H           equ	15	;# 
   296     0010                     T1CON           equ	16	;# 
   297     0011                     TMR2            equ	17	;# 
   298     0012                     T2CON           equ	18	;# 
   299     0013                     SSPBUF          equ	19	;# 
   300     0014                     SSPCON          equ	20	;# 
   301     0015                     CCPR1           equ	21	;# 
   302     0015                     CCPR1L          equ	21	;# 
   303     0016                     CCPR1H          equ	22	;# 
   304     0017                     CCP1CON         equ	23	;# 
   305     0018                     RCSTA           equ	24	;# 
   306     0019                     TXREG           equ	25	;# 
   307     001A                     RCREG           equ	26	;# 
   308     001B                     CCPR2           equ	27	;# 
   309     001B                     CCPR2L          equ	27	;# 
   310     001C                     CCPR2H          equ	28	;# 
   311     001D                     CCP2CON         equ	29	;# 
   312     001E                     ADRESH          equ	30	;# 
   313     001F                     ADCON0          equ	31	;# 
   314     0081                     OPTION_REG      equ	129	;# 
   315     0085                     TRISA           equ	133	;# 
   316     0086                     TRISB           equ	134	;# 
   317     0087                     TRISC           equ	135	;# 
   318     008C                     PIE1            equ	140	;# 
   319     008D                     PIE2            equ	141	;# 
   320     008E                     PCON            equ	142	;# 
   321     0091                     SSPCON2         equ	145	;# 
   322     0092                     PR2             equ	146	;# 
   323     0093                     SSPADD          equ	147	;# 
   324     0094                     SSPSTAT         equ	148	;# 
   325     0098                     TXSTA           equ	152	;# 
   326     0099                     SPBRG           equ	153	;# 
   327     009E                     ADRESL          equ	158	;# 
   328     009F                     ADCON1          equ	159	;# 
   329     010C                     EEDATA          equ	268	;# 
   330     010D                     EEADR           equ	269	;# 
   331     010E                     EEDATH          equ	270	;# 
   332     010F                     EEADRH          equ	271	;# 
   333     018C                     EECON1          equ	396	;# 
   334     018D                     EECON2          equ	397	;# 
   335     0000                     INDF            equ	0	;# 
   336     0001                     TMR0            equ	1	;# 
   337     0002                     PCL             equ	2	;# 
   338     0003                     STATUS          equ	3	;# 
   339     0004                     FSR             equ	4	;# 
   340     0005                     PORTA           equ	5	;# 
   341     0006                     PORTB           equ	6	;# 
   342     0007                     PORTC           equ	7	;# 
   343     000A                     PCLATH          equ	10	;# 
   344     000B                     INTCON          equ	11	;# 
   345     000C                     PIR1            equ	12	;# 
   346     000D                     PIR2            equ	13	;# 
   347     000E                     TMR1            equ	14	;# 
   348     000E                     TMR1L           equ	14	;# 
   349     000F                     TMR1H           equ	15	;# 
   350     0010                     T1CON           equ	16	;# 
   351     0011                     TMR2            equ	17	;# 
   352     0012                     T2CON           equ	18	;# 
   353     0013                     SSPBUF          equ	19	;# 
   354     0014                     SSPCON          equ	20	;# 
   355     0015                     CCPR1           equ	21	;# 
   356     0015                     CCPR1L          equ	21	;# 
   357     0016                     CCPR1H          equ	22	;# 
   358     0017                     CCP1CON         equ	23	;# 
   359     0018                     RCSTA           equ	24	;# 
   360     0019                     TXREG           equ	25	;# 
   361     001A                     RCREG           equ	26	;# 
   362     001B                     CCPR2           equ	27	;# 
   363     001B                     CCPR2L          equ	27	;# 
   364     001C                     CCPR2H          equ	28	;# 
   365     001D                     CCP2CON         equ	29	;# 
   366     001E                     ADRESH          equ	30	;# 
   367     001F                     ADCON0          equ	31	;# 
   368     0081                     OPTION_REG      equ	129	;# 
   369     0085                     TRISA           equ	133	;# 
   370     0086                     TRISB           equ	134	;# 
   371     0087                     TRISC           equ	135	;# 
   372     008C                     PIE1            equ	140	;# 
   373     008D                     PIE2            equ	141	;# 
   374     008E                     PCON            equ	142	;# 
   375     0091                     SSPCON2         equ	145	;# 
   376     0092                     PR2             equ	146	;# 
   377     0093                     SSPADD          equ	147	;# 
   378     0094                     SSPSTAT         equ	148	;# 
   379     0098                     TXSTA           equ	152	;# 
   380     0099                     SPBRG           equ	153	;# 
   381     009E                     ADRESL          equ	158	;# 
   382     009F                     ADCON1          equ	159	;# 
   383     010C                     EEDATA          equ	268	;# 
   384     010D                     EEADR           equ	269	;# 
   385     010E                     EEDATH          equ	270	;# 
   386     010F                     EEADRH          equ	271	;# 
   387     018C                     EECON1          equ	396	;# 
   388     018D                     EECON2          equ	397	;# 
   389                           
   390                           	psect	idataBANK0
   391     05FB                     __pidataBANK0:
   392                           
   393                           ;initializer for main@F905
   394     05FB  3407               	retlw	7
   395     05FC  3405               	retlw	5
   396     05FD  3407               	retlw	7
   397     0013                     _SSPBUF         set	19
   398     0014                     _SSPCON         set	20
   399     0005                     _PORTA          set	5
   400     0006                     _PORTB          set	6
   401     002D                     _RA5            set	45
   402     0063                     _SSPIF          set	99
   403     0094                     _SSPSTAT        set	148
   404     0085                     _TRISA          set	133
   405     0087                     _TRISC          set	135
   406     0086                     _TRISB          set	134
   407                           
   408                           	psect	cinit
   409     07EA                     start_initialization:	
   410                           ; #config settings
   411                           
   412     07EA                     __initialization:
   413                           
   414                           ; Initialize objects allocated to BANK0
   415     07EA  120A  118A  25FB  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   416     07EF  00B9               	movwf	__pdataBANK0& (0+127)
   417     07F0  120A  118A  25FC  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   418     07F5  00BA               	movwf	(__pdataBANK0+1)& (0+127)
   419     07F6  120A  118A  25FD  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   420     07FB  00BB               	movwf	(__pdataBANK0+2)& (0+127)
   421     07FC                     end_of_initialization:	
   422                           ;End of C runtime variable initialization code
   423                           
   424     07FC                     __end_of__initialization:
   425     07FC  0183               	clrf	3
   426     07FD  120A  118A  2E71   	ljmp	_main	;jump to C main() function
   427                           
   428                           	psect	dataBANK0
   429     0039                     __pdataBANK0:
   430     0039                     main@F905:
   431     0039                     	ds	3
   432                           
   433                           	psect	cstackCOMMON
   434     0070                     __pcstackCOMMON:
   435     0070                     ?_SpiClearMatrix:
   436     0070                     ?_SetPosition:	
   437                           ; 1 bytes @ 0x0
   438                           
   439     0070                     ?_SpiInit:	
   440                           ; 1 bytes @ 0x0
   441                           
   442     0070                     ?_MatrixInit:	
   443                           ; 1 bytes @ 0x0
   444                           
   445     0070                     ?_PortBInit:	
   446                           ; 1 bytes @ 0x0
   447                           
   448     0070                     ?_main:	
   449                           ; 1 bytes @ 0x0
   450                           
   451     0070                     ?_SpiSendByte:	
   452                           ; 1 bytes @ 0x0
   453                           
   454     0070                     ?_WidthLimit:	
   455                           ; 1 bytes @ 0x0
   456                           
   457     0070                     SpiSendByte@data:	
   458                           ; 2 bytes @ 0x0
   459                           
   460     0070                     SetPosition@position:	
   461                           ; 1 bytes @ 0x0
   462                           
   463     0070                     WidthLimit@lenghtMatrix:	
   464                           ; 2 bytes @ 0x0
   465                           
   466     0070                     ??_SpiInit:	
   467                           ; 2 bytes @ 0x0
   468                           
   469     0070                     ??_PortBInit:	
   470                           ; 1 bytes @ 0x0
   471                           
   472     0070                     ??_SpiSendByte:	
   473                           ; 1 bytes @ 0x0
   474                           
   475                           
   476                           ; 1 bytes @ 0x0
   477     0070                     	ds	1
   478     0071                     ?_SendToSegment:
   479     0071                     SendToSegment@segment:	
   480                           ; 1 bytes @ 0x1
   481                           
   482                           
   483                           ; 2 bytes @ 0x1
   484     0071                     	ds	1
   485     0072                     SetPosition@x:
   486     0072                     WidthLimit@lengthShape:	
   487                           ; 2 bytes @ 0x2
   488                           
   489                           
   490                           ; 2 bytes @ 0x2
   491     0072                     	ds	1
   492     0073                     SendToSegment@data:
   493                           
   494                           ; 1 bytes @ 0x3
   495     0073                     	ds	1
   496     0074                     ?_ShowShape:
   497     0074                     SetPosition@y:	
   498                           ; 1 bytes @ 0x4
   499                           
   500     0074                     ShowShape@coord:	
   501                           ; 2 bytes @ 0x4
   502                           
   503     0074                     ??_SpiClearMatrix:	
   504                           ; 2 bytes @ 0x4
   505                           
   506     0074                     ??_WidthLimit:	
   507                           ; 1 bytes @ 0x4
   508                           
   509     0074                     ??_SendToSegment:	
   510                           ; 1 bytes @ 0x4
   511                           
   512                           
   513                           ; 1 bytes @ 0x4
   514     0074                     	ds	2
   515     0076                     SpiClearMatrix@i:
   516     0076                     ShowShape@countElemntArray:	
   517                           ; 1 bytes @ 0x6
   518                           
   519     0076                     ??_SetPosition:	
   520                           ; 2 bytes @ 0x6
   521                           
   522                           
   523                           ; 1 bytes @ 0x6
   524     0076                     	ds	1
   525     0077                     ??_MatrixInit:
   526                           
   527                           ; 1 bytes @ 0x7
   528     0077                     	ds	1
   529     0078                     ShowShape@shapeArray:
   530                           
   531                           ; 1 bytes @ 0x8
   532     0078                     	ds	1
   533     0079                     ??_ShowShape:
   534                           
   535                           ; 1 bytes @ 0x9
   536     0079                     	ds	5
   537     007E                     ??_main:
   538                           
   539                           	psect	cstackBANK0
   540     0020                     __pcstackBANK0:	
   541                           ; 1 bytes @ 0xE
   542                           
   543     0020                     ShowShape@_pos:
   544                           
   545                           ; 2 bytes @ 0x0
   546     0020                     	ds	2
   547     0022                     ShowShape@pos:
   548                           
   549                           ; 2 bytes @ 0x2
   550     0022                     	ds	2
   551     0024                     ?_Movie:
   552     0024                     Movie@_shapePosition:	
   553                           ; 1 bytes @ 0x4
   554                           
   555                           
   556                           ; 2 bytes @ 0x4
   557     0024                     	ds	2
   558     0026                     Movie@_widthLimit:
   559                           
   560                           ; 2 bytes @ 0x6
   561     0026                     	ds	2
   562     0028                     Movie@_figure:
   563                           
   564                           ; 1 bytes @ 0x8
   565     0028                     	ds	1
   566     0029                     ??_Movie:
   567                           
   568                           ; 1 bytes @ 0x9
   569     0029                     	ds	3
   570     002C                     Movie@xCoord:
   571                           
   572                           ; 2 bytes @ 0xC
   573     002C                     	ds	2
   574     002E                     Movie@yCoord:
   575                           
   576                           ; 2 bytes @ 0xE
   577     002E                     	ds	2
   578     0030                     main@figure:
   579                           
   580                           ; 3 bytes @ 0x10
   581     0030                     	ds	3
   582     0033                     main@widthLimit:
   583                           
   584                           ; 2 bytes @ 0x13
   585     0033                     	ds	2
   586     0035                     main@shapePosition:
   587                           
   588                           ; 4 bytes @ 0x15
   589     0035                     	ds	4
   590                           
   591                           	psect	maintext
   592     0671                     __pmaintext:	
   593 ;;
   594 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   595 ;;
   596 ;; *************** function _main *****************
   597 ;; Defined at:
   598 ;;		line 31 in file "main.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;		None
   601 ;; Auto vars:     Size  Location     Type
   602 ;;  shapePositio    4   21[BANK0 ] struct .
   603 ;;  figure          3   16[BANK0 ] unsigned char [3]
   604 ;;  widthLimit      2   19[BANK0 ] int 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : B00/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         0       0       0       0       0
   615 ;;      Locals:         0       9       0       0       0
   616 ;;      Temps:          0       0       0       0       0
   617 ;;      Totals:         0       9       0       0       0
   618 ;;Total ram usage:        9 bytes
   619 ;; Hardware stack levels required when called: 4
   620 ;; This function calls:
   621 ;;		_MatrixInit
   622 ;;		_Movie
   623 ;;		_PortBInit
   624 ;;		_SpiInit
   625 ;;		_WidthLimit
   626 ;; This function is called by:
   627 ;;		Startup code after reset
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631     0671                     _main:	
   632                           ;psect for function _main
   633                           
   634     0671                     l808:	
   635                           ;incstack = 0
   636                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   637                           
   638                           
   639                           ;main.c: 32:     SpiInit();
   640     0671  120A  118A  2619  120A  118A  	fcall	_SpiInit
   641                           
   642                           ;main.c: 33:     MatrixInit();
   643     0676  120A  118A  26AE  120A  118A  	fcall	_MatrixInit
   644     067B                     l810:
   645                           
   646                           ;main.c: 34:     PortBInit();
   647     067B  120A  118A  25FE  120A  118A  	fcall	_PortBInit
   648     0680                     l812:
   649                           
   650                           ;main.c: 36:     TCoord shapePosition;;main.c: 37:     int widthLimit = WidthLimit(8, 3)
      +                          ;
   651     0680  3008               	movlw	8
   652     0681  00F0               	movwf	WidthLimit@lenghtMatrix
   653     0682  3000               	movlw	0
   654     0683  00F1               	movwf	WidthLimit@lenghtMatrix+1
   655     0684  3003               	movlw	3
   656     0685  00F2               	movwf	WidthLimit@lengthShape
   657     0686  3000               	movlw	0
   658     0687  00F3               	movwf	WidthLimit@lengthShape+1
   659     0688  120A  118A  2605  120A  118A  	fcall	_WidthLimit
   660     068D  0871               	movf	?_WidthLimit+1,w
   661     068E  1283               	bcf	3,5	;RP0=0, select bank0
   662     068F  1303               	bcf	3,6	;RP1=0, select bank0
   663     0690  00B4               	movwf	main@widthLimit+1
   664     0691  0870               	movf	?_WidthLimit,w
   665     0692  00B3               	movwf	main@widthLimit
   666     0693                     l814:
   667                           
   668                           ;main.c: 38:     char figure[3] = { 0x07, 0x05, 0x07 };
   669     0693  0839               	movf	main@F905,w
   670     0694  00B0               	movwf	main@figure
   671     0695  083A               	movf	main@F905+1,w
   672     0696  00B1               	movwf	main@figure+1
   673     0697  083B               	movf	main@F905+2,w
   674     0698  00B2               	movwf	main@figure+2
   675     0699                     l816:
   676                           
   677                           ;main.c: 41:         Movie(&shapePosition, widthLimit, (char *)figure);
   678     0699  3035               	movlw	low main@shapePosition
   679     069A  1283               	bcf	3,5	;RP0=0, select bank0
   680     069B  1303               	bcf	3,6	;RP1=0, select bank0
   681     069C  00A4               	movwf	Movie@_shapePosition
   682     069D  3000               	movlw	high main@shapePosition
   683     069E  00A5               	movwf	Movie@_shapePosition+1
   684     069F  0834               	movf	main@widthLimit+1,w
   685     06A0  00A7               	movwf	Movie@_widthLimit+1
   686     06A1  0833               	movf	main@widthLimit,w
   687     06A2  00A6               	movwf	Movie@_widthLimit
   688     06A3  3030               	movlw	(low (main@figure| 0))& (0+255)
   689     06A4  00A8               	movwf	Movie@_figure
   690     06A5  120A  118A  26EE  120A  118A  	fcall	_Movie
   691     06AA  2E99               	goto	l816
   692     06AB  120A  118A  2800   	ljmp	start
   693     06AE                     __end_of_main:
   694                           
   695                           	psect	text1
   696     0605                     __ptext1:	
   697 ;; *************** function _WidthLimit *****************
   698 ;; Defined at:
   699 ;;		line 16 in file "shape.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;  lenghtMatrix    2    0[COMMON] int 
   702 ;;  lengthShape     2    2[COMMON] int 
   703 ;; Auto vars:     Size  Location     Type
   704 ;;		None
   705 ;; Return value:  Size  Location     Type
   706 ;;                  2    0[COMMON] int 
   707 ;; Registers used:
   708 ;;		wreg, status,2, status,0
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   714 ;;      Params:         4       0       0       0       0
   715 ;;      Locals:         0       0       0       0       0
   716 ;;      Temps:          0       0       0       0       0
   717 ;;      Totals:         4       0       0       0       0
   718 ;;Total ram usage:        4 bytes
   719 ;; Hardware stack levels used: 1
   720 ;; This function calls:
   721 ;;		Nothing
   722 ;; This function is called by:
   723 ;;		_main
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727     0605                     _WidthLimit:	
   728                           ;psect for function _WidthLimit
   729                           
   730     0605                     l804:	
   731                           ;incstack = 0
   732                           ; Regs used in _WidthLimit: [wreg+status,2+status,0]
   733                           
   734                           
   735                           ;shape.c: 17:     return lenghtMatrix - lengthShape;
   736     0605  0872               	movf	WidthLimit@lengthShape,w
   737     0606  0270               	subwf	WidthLimit@lenghtMatrix,w
   738     0607  00F0               	movwf	?_WidthLimit
   739     0608  0873               	movf	WidthLimit@lengthShape+1,w
   740     0609  1C03               	skipc
   741     060A  0A73               	incf	WidthLimit@lengthShape+1,w
   742     060B  0271               	subwf	WidthLimit@lenghtMatrix+1,w
   743     060C  00F1               	movwf	?_WidthLimit+1
   744     060D                     l98:
   745     060D  0008               	return
   746     060E                     __end_of_WidthLimit:
   747                           
   748                           	psect	text2
   749     0619                     __ptext2:	
   750 ;; *************** function _SpiInit *****************
   751 ;; Defined at:
   752 ;;		line 9 in file "spi.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, status,2, status,0
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   766 ;;      Params:         0       0       0       0       0
   767 ;;      Locals:         0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0
   769 ;;      Totals:         0       0       0       0       0
   770 ;;Total ram usage:        0 bytes
   771 ;; Hardware stack levels used: 1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779     0619                     _SpiInit:	
   780                           ;psect for function _SpiInit
   781                           
   782     0619                     l780:	
   783                           ;incstack = 0
   784                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   785                           
   786                           
   787                           ;spi.c: 10:     TRISC |= 0x10;
   788     0619  1683               	bsf	3,5	;RP0=1, select bank1
   789     061A  1303               	bcf	3,6	;RP1=0, select bank1
   790     061B  1607               	bsf	7,4	;volatile
   791     061C                     l782:
   792                           
   793                           ;spi.c: 11:     TRISC &= ~0x28;
   794     061C  30D7               	movlw	215
   795     061D  0587               	andwf	7,f	;volatile
   796                           
   797                           ;spi.c: 12:     TRISA &= ~0x20;
   798     061E  30DF               	movlw	223
   799     061F  0585               	andwf	5,f	;volatile
   800                           
   801                           ;spi.c: 13:     PORTA &= ~0x20;
   802     0620  30DF               	movlw	223
   803     0621  1283               	bcf	3,5	;RP0=0, select bank0
   804     0622  1303               	bcf	3,6	;RP1=0, select bank0
   805     0623  0585               	andwf	5,f	;volatile
   806     0624                     l784:
   807                           
   808                           ;spi.c: 14:     SSPCON = 0x30;
   809     0624  3030               	movlw	48
   810     0625  0094               	movwf	20	;volatile
   811     0626                     l786:
   812                           
   813                           ;spi.c: 15:     SSPSTAT = 0x80;
   814     0626  3080               	movlw	128
   815     0627  1683               	bsf	3,5	;RP0=1, select bank1
   816     0628  1303               	bcf	3,6	;RP1=0, select bank1
   817     0629  0094               	movwf	20	;volatile
   818     062A                     l59:
   819     062A  0008               	return
   820     062B                     __end_of_SpiInit:
   821                           
   822                           	psect	text3
   823     05FE                     __ptext3:	
   824 ;; *************** function _PortBInit *****************
   825 ;; Defined at:
   826 ;;		line 13 in file "portsinit.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		status,2
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         0       0       0       0       0
   841 ;;      Locals:         0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0
   843 ;;      Totals:         0       0       0       0       0
   844 ;;Total ram usage:        0 bytes
   845 ;; Hardware stack levels used: 1
   846 ;; This function calls:
   847 ;;		Nothing
   848 ;; This function is called by:
   849 ;;		_main
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853     05FE                     _PortBInit:	
   854                           ;psect for function _PortBInit
   855                           
   856     05FE                     l802:	
   857                           ;incstack = 0
   858                           ; Regs used in _PortBInit: [status,2]
   859                           
   860                           
   861                           ;portsinit.c: 14:     TRISB = 0x00;
   862     05FE  1683               	bsf	3,5	;RP0=1, select bank1
   863     05FF  1303               	bcf	3,6	;RP1=0, select bank1
   864     0600  0186               	clrf	6	;volatile
   865                           
   866                           ;portsinit.c: 15:     PORTB = 0x00;
   867     0601  1283               	bcf	3,5	;RP0=0, select bank0
   868     0602  1303               	bcf	3,6	;RP1=0, select bank0
   869     0603  0186               	clrf	6	;volatile
   870     0604                     l42:
   871     0604  0008               	return
   872     0605                     __end_of_PortBInit:
   873                           
   874                           	psect	text4
   875     06EE                     __ptext4:	
   876 ;; *************** function _Movie *****************
   877 ;; Defined at:
   878 ;;		line 19 in file "main.c"
   879 ;; Parameters:    Size  Location     Type
   880 ;;  _shapePositi    2    4[BANK0 ] PTR struct .
   881 ;;		 -> main@shapePosition(4), 
   882 ;;  _widthLimit     2    6[BANK0 ] int 
   883 ;;  _figure         1    8[BANK0 ] PTR unsigned char 
   884 ;;		 -> main@figure(3), 
   885 ;; Auto vars:     Size  Location     Type
   886 ;;  yCoord          2   14[BANK0 ] int 
   887 ;;  xCoord          2   12[BANK0 ] int 
   888 ;; Return value:  Size  Location     Type
   889 ;;                  1    wreg      void 
   890 ;; Registers used:
   891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   892 ;; Tracked objects:
   893 ;;		On entry : 0/0
   894 ;;		On exit  : 0/0
   895 ;;		Unchanged: 0/0
   896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   897 ;;      Params:         0       5       0       0       0
   898 ;;      Locals:         0       4       0       0       0
   899 ;;      Temps:          0       3       0       0       0
   900 ;;      Totals:         0      12       0       0       0
   901 ;;Total ram usage:       12 bytes
   902 ;; Hardware stack levels used: 1
   903 ;; Hardware stack levels required when called: 3
   904 ;; This function calls:
   905 ;;		_SetPosition
   906 ;;		_ShowShape
   907 ;;		_SpiClearMatrix
   908 ;; This function is called by:
   909 ;;		_main
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913     06EE                     _Movie:	
   914                           ;psect for function _Movie
   915                           
   916     06EE                     l760:	
   917                           ;incstack = 0
   918                           ; Regs used in _Movie: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   919                           
   920                           
   921                           ;main.c: 20:     for(int xCoord = 0; xCoord <= _widthLimit; xCoord++){
   922     06EE  1283               	bcf	3,5	;RP0=0, select bank0
   923     06EF  1303               	bcf	3,6	;RP1=0, select bank0
   924     06F0  01AC               	clrf	Movie@xCoord
   925     06F1  01AD               	clrf	Movie@xCoord+1
   926     06F2  2F55               	goto	l19
   927     06F3                     l762:
   928                           
   929                           ;main.c: 21:         for(int yCoord = 0; yCoord <= _widthLimit + 3; yCoord++){
   930     06F3  1283               	bcf	3,5	;RP0=0, select bank0
   931     06F4  1303               	bcf	3,6	;RP1=0, select bank0
   932     06F5  01AE               	clrf	Movie@yCoord
   933     06F6  01AF               	clrf	Movie@yCoord+1
   934     06F7  2F37               	goto	l774
   935     06F8                     l764:
   936                           
   937                           ;main.c: 22:             SpiClearMatrix();
   938     06F8  120A  118A  263E  120A  118A  	fcall	_SpiClearMatrix
   939     06FD                     l766:
   940                           
   941                           ;main.c: 23:             SetPosition(_shapePosition, xCoord, yCoord);
   942     06FD  1283               	bcf	3,5	;RP0=0, select bank0
   943     06FE  1303               	bcf	3,6	;RP1=0, select bank0
   944     06FF  0824               	movf	Movie@_shapePosition,w
   945     0700  00F0               	movwf	SetPosition@position
   946     0701  0825               	movf	Movie@_shapePosition+1,w
   947     0702  00F1               	movwf	SetPosition@position+1
   948     0703  082D               	movf	Movie@xCoord+1,w
   949     0704  00F3               	movwf	SetPosition@x+1
   950     0705  082C               	movf	Movie@xCoord,w
   951     0706  00F2               	movwf	SetPosition@x
   952     0707  082F               	movf	Movie@yCoord+1,w
   953     0708  00F5               	movwf	SetPosition@y+1
   954     0709  082E               	movf	Movie@yCoord,w
   955     070A  00F4               	movwf	SetPosition@y
   956     070B  120A  118A  2654  120A  118A  	fcall	_SetPosition
   957     0710                     l768:
   958                           
   959                           ;main.c: 24:             ShowShape(_shapePosition, 3, _figure);
   960     0710  1283               	bcf	3,5	;RP0=0, select bank0
   961     0711  1303               	bcf	3,6	;RP1=0, select bank0
   962     0712  0824               	movf	Movie@_shapePosition,w
   963     0713  00F4               	movwf	ShowShape@coord
   964     0714  0825               	movf	Movie@_shapePosition+1,w
   965     0715  00F5               	movwf	ShowShape@coord+1
   966     0716  3003               	movlw	3
   967     0717  00F6               	movwf	ShowShape@countElemntArray
   968     0718  3000               	movlw	0
   969     0719  00F7               	movwf	ShowShape@countElemntArray+1
   970     071A  0828               	movf	Movie@_figure,w
   971     071B  00F8               	movwf	ShowShape@shapeArray
   972     071C  120A  118A  2769  120A  118A  	fcall	_ShowShape
   973     0721                     l770:
   974                           
   975                           ;main.c: 25:             _delay((unsigned long)((250)*(16000000/4000.0)));
   976     0721  3006               	movlw	6
   977     0722  1283               	bcf	3,5	;RP0=0, select bank0
   978     0723  1303               	bcf	3,6	;RP1=0, select bank0
   979     0724  00AB               	movwf	??_Movie+2
   980     0725  3013               	movlw	19
   981     0726  00AA               	movwf	??_Movie+1
   982     0727  30AD               	movlw	173
   983     0728  00A9               	movwf	??_Movie
   984     0729                     u137:
   985     0729  0BA9               	decfsz	??_Movie,f
   986     072A  2F29               	goto	u137
   987     072B  0BAA               	decfsz	??_Movie+1,f
   988     072C  2F29               	goto	u137
   989     072D  0BAB               	decfsz	??_Movie+2,f
   990     072E  2F29               	goto	u137
   991     072F                     l772:
   992                           
   993                           ;main.c: 26:         }
   994     072F  3001               	movlw	1
   995     0730  1283               	bcf	3,5	;RP0=0, select bank0
   996     0731  1303               	bcf	3,6	;RP1=0, select bank0
   997     0732  07AE               	addwf	Movie@yCoord,f
   998     0733  1803               	skipnc
   999     0734  0AAF               	incf	Movie@yCoord+1,f
  1000     0735  3000               	movlw	0
  1001     0736  07AF               	addwf	Movie@yCoord+1,f
  1002     0737                     l774:
  1003     0737  0826               	movf	Movie@_widthLimit,w
  1004     0738  3E03               	addlw	3
  1005     0739  00A9               	movwf	??_Movie
  1006     073A  0827               	movf	Movie@_widthLimit+1,w
  1007     073B  1803               	skipnc
  1008     073C  3E01               	addlw	1
  1009     073D  3E00               	addlw	0
  1010     073E  00AA               	movwf	??_Movie+1
  1011     073F  082A               	movf	??_Movie+1,w
  1012     0740  3A80               	xorlw	128
  1013     0741  00AB               	movwf	??_Movie+2
  1014     0742  082F               	movf	Movie@yCoord+1,w
  1015     0743  3A80               	xorlw	128
  1016     0744  022B               	subwf	??_Movie+2,w
  1017     0745  1D03               	skipz
  1018     0746  2F49               	goto	u115
  1019     0747  082E               	movf	Movie@yCoord,w
  1020     0748  0229               	subwf	??_Movie,w
  1021     0749                     u115:
  1022     0749  1803               	skipnc
  1023     074A  2F4C               	goto	u111
  1024     074B  2F4D               	goto	u110
  1025     074C                     u111:
  1026     074C  2EF8               	goto	l764
  1027     074D                     u110:
  1028     074D                     l776:
  1029                           
  1030                           ;main.c: 27:     }
  1031     074D  3001               	movlw	1
  1032     074E  1283               	bcf	3,5	;RP0=0, select bank0
  1033     074F  1303               	bcf	3,6	;RP1=0, select bank0
  1034     0750  07AC               	addwf	Movie@xCoord,f
  1035     0751  1803               	skipnc
  1036     0752  0AAD               	incf	Movie@xCoord+1,f
  1037     0753  3000               	movlw	0
  1038     0754  07AD               	addwf	Movie@xCoord+1,f
  1039     0755                     l19:
  1040     0755  0827               	movf	Movie@_widthLimit+1,w
  1041     0756  3A80               	xorlw	128
  1042     0757  00A9               	movwf	??_Movie
  1043     0758  082D               	movf	Movie@xCoord+1,w
  1044     0759  3A80               	xorlw	128
  1045     075A  0229               	subwf	??_Movie,w
  1046     075B  1D03               	skipz
  1047     075C  2F5F               	goto	u125
  1048     075D  082C               	movf	Movie@xCoord,w
  1049     075E  0226               	subwf	Movie@_widthLimit,w
  1050     075F                     u125:
  1051     075F  1803               	skipnc
  1052     0760  2F62               	goto	u121
  1053     0761  2F63               	goto	u120
  1054     0762                     u121:
  1055     0762  2EF3               	goto	l762
  1056     0763                     u120:
  1057     0763                     l778:
  1058                           
  1059                           ;main.c: 28:     SpiClearMatrix();
  1060     0763  120A  118A  263E  120A  118A  	fcall	_SpiClearMatrix
  1061     0768                     l25:
  1062     0768  0008               	return
  1063     0769                     __end_of_Movie:
  1064                           
  1065                           	psect	text5
  1066     0769                     __ptext5:	
  1067 ;; *************** function _ShowShape *****************
  1068 ;; Defined at:
  1069 ;;		line 8 in file "shape.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  coord           2    4[COMMON] PTR struct .
  1072 ;;		 -> main@shapePosition(4), 
  1073 ;;  countElemntA    2    6[COMMON] int 
  1074 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
  1075 ;;		 -> main@figure(3), 
  1076 ;; Auto vars:     Size  Location     Type
  1077 ;;  pos             2    2[BANK0 ] int 
  1078 ;;  _pos            2    0[BANK0 ] int 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1088 ;;      Params:         5       0       0       0       0
  1089 ;;      Locals:         0       4       0       0       0
  1090 ;;      Temps:          5       0       0       0       0
  1091 ;;      Totals:        10       4       0       0       0
  1092 ;;Total ram usage:       14 bytes
  1093 ;; Hardware stack levels used: 1
  1094 ;; Hardware stack levels required when called: 2
  1095 ;; This function calls:
  1096 ;;		_SendToSegment
  1097 ;; This function is called by:
  1098 ;;		_Movie
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102     0769                     _ShowShape:	
  1103                           ;psect for function _ShowShape
  1104                           
  1105     0769                     l748:	
  1106                           ;incstack = 0
  1107                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1108                           
  1109     0769                     l750:
  1110                           
  1111                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  1112     0769  0874               	movf	ShowShape@coord,w
  1113     076A  0084               	movwf	4
  1114     076B  1783               	bsf	3,7
  1115     076C  1C75               	btfss	ShowShape@coord+1,0
  1116     076D  1383               	bcf	3,7
  1117     076E  0800               	movf	0,w
  1118     076F  00F9               	movwf	??_ShowShape
  1119     0770  0A84               	incf	4,f
  1120     0771  0800               	movf	0,w
  1121     0772  00FA               	movwf	??_ShowShape+1
  1122     0773  0879               	movf	??_ShowShape,w
  1123     0774  3E01               	addlw	1
  1124     0775  1283               	bcf	3,5	;RP0=0, select bank0
  1125     0776  1303               	bcf	3,6	;RP1=0, select bank0
  1126     0777  00A2               	movwf	ShowShape@pos
  1127     0778  087A               	movf	??_ShowShape+1,w
  1128     0779  1803               	skipnc
  1129     077A  3E01               	addlw	1
  1130     077B  3E00               	addlw	0
  1131     077C  00A3               	movwf	ShowShape@pos+1
  1132     077D  2FC9               	goto	l758
  1133     077E                     l752:
  1134                           
  1135                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  1136     077E  0874               	movf	ShowShape@coord,w
  1137     077F  0084               	movwf	4
  1138     0780  1783               	bsf	3,7
  1139     0781  1C75               	btfss	ShowShape@coord+1,0
  1140     0782  1383               	bcf	3,7
  1141     0783  0800               	movf	0,w
  1142     0784  00F9               	movwf	??_ShowShape
  1143     0785  0A84               	incf	4,f
  1144     0786  0800               	movf	0,w
  1145     0787  00FA               	movwf	??_ShowShape+1
  1146     0788  0879               	movf	??_ShowShape,w
  1147     0789  1283               	bcf	3,5	;RP0=0, select bank0
  1148     078A  1303               	bcf	3,6	;RP1=0, select bank0
  1149     078B  0222               	subwf	ShowShape@pos,w
  1150     078C  00FB               	movwf	??_ShowShape+2
  1151     078D  087A               	movf	??_ShowShape+1,w
  1152     078E  1C03               	skipc
  1153     078F  0A7A               	incf	??_ShowShape+1,w
  1154     0790  0223               	subwf	ShowShape@pos+1,w
  1155     0791  00FC               	movwf	??_ShowShape+3
  1156     0792  087B               	movf	??_ShowShape+2,w
  1157     0793  3EFF               	addlw	255
  1158     0794  00A0               	movwf	ShowShape@_pos
  1159     0795  087C               	movf	??_ShowShape+3,w
  1160     0796  1803               	skipnc
  1161     0797  3E01               	addlw	1
  1162     0798  3EFF               	addlw	255
  1163     0799  00A1               	movwf	ShowShape@_pos+1
  1164     079A                     l754:
  1165                           
  1166                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  1167     079A  0823               	movf	ShowShape@pos+1,w
  1168     079B  00F2               	movwf	SendToSegment@segment+1
  1169     079C  0822               	movf	ShowShape@pos,w
  1170     079D  00F1               	movwf	SendToSegment@segment
  1171     079E  0820               	movf	ShowShape@_pos,w
  1172     079F  0778               	addwf	ShowShape@shapeArray,w
  1173     07A0  00F9               	movwf	??_ShowShape
  1174     07A1  0879               	movf	??_ShowShape,w
  1175     07A2  0084               	movwf	4
  1176     07A3  1383               	bcf	3,7	;select IRP bank0
  1177     07A4  0800               	movf	0,w
  1178     07A5  00FA               	movwf	??_ShowShape+1
  1179     07A6  0874               	movf	ShowShape@coord,w
  1180     07A7  3E02               	addlw	2
  1181     07A8  00FB               	movwf	??_ShowShape+2
  1182     07A9  0875               	movf	ShowShape@coord+1,w
  1183     07AA  1803               	skipnc
  1184     07AB  3E01               	addlw	1
  1185     07AC  3E00               	addlw	0
  1186     07AD  00FC               	movwf	??_ShowShape+3
  1187     07AE  087B               	movf	??_ShowShape+2,w
  1188     07AF  0084               	movwf	4
  1189     07B0  1783               	bsf	3,7
  1190     07B1  1C7C               	btfss	??_ShowShape+3,0
  1191     07B2  1383               	bcf	3,7
  1192     07B3  0A00               	incf	0,w
  1193     07B4  2FB7               	goto	u94
  1194     07B5                     u95:
  1195     07B5  1003               	clrc
  1196     07B6  0DFA               	rlf	??_ShowShape+1,f
  1197     07B7                     u94:
  1198     07B7  3EFF               	addlw	-1
  1199     07B8  1D03               	skipz
  1200     07B9  2FB5               	goto	u95
  1201     07BA  087A               	movf	??_ShowShape+1,w
  1202     07BB  00F3               	movwf	SendToSegment@data
  1203     07BC  120A  118A  262B  120A  118A  	fcall	_SendToSegment
  1204     07C1                     l756:
  1205                           
  1206                           ;shape.c: 13:     }
  1207     07C1  3001               	movlw	1
  1208     07C2  1283               	bcf	3,5	;RP0=0, select bank0
  1209     07C3  1303               	bcf	3,6	;RP1=0, select bank0
  1210     07C4  07A2               	addwf	ShowShape@pos,f
  1211     07C5  1803               	skipnc
  1212     07C6  0AA3               	incf	ShowShape@pos+1,f
  1213     07C7  3000               	movlw	0
  1214     07C8  07A3               	addwf	ShowShape@pos+1,f
  1215     07C9                     l758:
  1216     07C9  0874               	movf	ShowShape@coord,w
  1217     07CA  0084               	movwf	4
  1218     07CB  1783               	bsf	3,7
  1219     07CC  1C75               	btfss	ShowShape@coord+1,0
  1220     07CD  1383               	bcf	3,7
  1221     07CE  0800               	movf	0,w
  1222     07CF  00F9               	movwf	??_ShowShape
  1223     07D0  0A84               	incf	4,f
  1224     07D1  0800               	movf	0,w
  1225     07D2  00FA               	movwf	??_ShowShape+1
  1226     07D3  0876               	movf	ShowShape@countElemntArray,w
  1227     07D4  0779               	addwf	??_ShowShape,w
  1228     07D5  00FB               	movwf	??_ShowShape+2
  1229     07D6  0877               	movf	ShowShape@countElemntArray+1,w
  1230     07D7  1803               	skipnc
  1231     07D8  0A77               	incf	ShowShape@countElemntArray+1,w
  1232     07D9  077A               	addwf	??_ShowShape+1,w
  1233     07DA  00FC               	movwf	??_ShowShape+3
  1234     07DB  087C               	movf	??_ShowShape+3,w
  1235     07DC  3A80               	xorlw	128
  1236     07DD  00FD               	movwf	??_ShowShape+4
  1237     07DE  0823               	movf	ShowShape@pos+1,w
  1238     07DF  3A80               	xorlw	128
  1239     07E0  027D               	subwf	??_ShowShape+4,w
  1240     07E1  1D03               	skipz
  1241     07E2  2FE5               	goto	u105
  1242     07E3  0822               	movf	ShowShape@pos,w
  1243     07E4  027B               	subwf	??_ShowShape+2,w
  1244     07E5                     u105:
  1245     07E5  1803               	skipnc
  1246     07E6  2FE8               	goto	u101
  1247     07E7  2FE9               	goto	u100
  1248     07E8                     u101:
  1249     07E8  2F7E               	goto	l752
  1250     07E9                     u100:
  1251     07E9                     l95:
  1252     07E9  0008               	return
  1253     07EA                     __end_of_ShowShape:
  1254                           
  1255                           	psect	text6
  1256     0654                     __ptext6:	
  1257 ;; *************** function _SetPosition *****************
  1258 ;; Defined at:
  1259 ;;		line 3 in file "shape.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;  position        2    0[COMMON] PTR struct .
  1262 ;;		 -> main@shapePosition(4), 
  1263 ;;  x               2    2[COMMON] int 
  1264 ;;  y               2    4[COMMON] int 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         6       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0
  1278 ;;      Temps:          2       0       0       0       0
  1279 ;;      Totals:         8       0       0       0       0
  1280 ;;Total ram usage:        8 bytes
  1281 ;; Hardware stack levels used: 1
  1282 ;; This function calls:
  1283 ;;		Nothing
  1284 ;; This function is called by:
  1285 ;;		_Movie
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289     0654                     _SetPosition:	
  1290                           ;psect for function _SetPosition
  1291                           
  1292     0654                     l744:	
  1293                           ;incstack = 0
  1294                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1295                           
  1296                           
  1297                           ;shape.c: 4:     position->x = x;
  1298     0654  0870               	movf	SetPosition@position,w
  1299     0655  0084               	movwf	4
  1300     0656  1783               	bsf	3,7
  1301     0657  1C71               	btfss	SetPosition@position+1,0
  1302     0658  1383               	bcf	3,7
  1303     0659  0872               	movf	SetPosition@x,w
  1304     065A  0080               	movwf	0
  1305     065B  0A84               	incf	4,f
  1306     065C  0873               	movf	SetPosition@x+1,w
  1307     065D  0080               	movwf	0
  1308     065E                     l746:
  1309                           
  1310                           ;shape.c: 5:     position->y = y;
  1311     065E  0870               	movf	SetPosition@position,w
  1312     065F  3E02               	addlw	2
  1313     0660  00F6               	movwf	??_SetPosition
  1314     0661  0871               	movf	SetPosition@position+1,w
  1315     0662  1803               	skipnc
  1316     0663  3E01               	addlw	1
  1317     0664  3E00               	addlw	0
  1318     0665  00F7               	movwf	??_SetPosition+1
  1319     0666  0876               	movf	??_SetPosition,w
  1320     0667  0084               	movwf	4
  1321     0668  1783               	bsf	3,7
  1322     0669  1C77               	btfss	??_SetPosition+1,0
  1323     066A  1383               	bcf	3,7
  1324     066B  0874               	movf	SetPosition@y,w
  1325     066C  0080               	movwf	0
  1326     066D  0A84               	incf	4,f
  1327     066E  0875               	movf	SetPosition@y+1,w
  1328     066F  0080               	movwf	0
  1329     0670                     l89:
  1330     0670  0008               	return
  1331     0671                     __end_of_SetPosition:
  1332                           
  1333                           	psect	text7
  1334     06AE                     __ptext7:	
  1335 ;; *************** function _MatrixInit *****************
  1336 ;; Defined at:
  1337 ;;		line 20 in file "matrix.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;		None
  1342 ;; Return value:  Size  Location     Type
  1343 ;;                  1    wreg      void 
  1344 ;; Registers used:
  1345 ;;		wreg, status,2, status,0, pclath, cstack
  1346 ;; Tracked objects:
  1347 ;;		On entry : 0/0
  1348 ;;		On exit  : 0/0
  1349 ;;		Unchanged: 0/0
  1350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1351 ;;      Params:         0       0       0       0       0
  1352 ;;      Locals:         0       0       0       0       0
  1353 ;;      Temps:          3       0       0       0       0
  1354 ;;      Totals:         3       0       0       0       0
  1355 ;;Total ram usage:        3 bytes
  1356 ;; Hardware stack levels used: 1
  1357 ;; Hardware stack levels required when called: 3
  1358 ;; This function calls:
  1359 ;;		_SendToSegment
  1360 ;;		_SpiClearMatrix
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366     06AE                     _MatrixInit:	
  1367                           ;psect for function _MatrixInit
  1368                           
  1369     06AE                     l788:	
  1370                           ;incstack = 0
  1371                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1372                           
  1373                           
  1374                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1375     06AE  3003               	movlw	3
  1376     06AF  00F9               	movwf	??_MatrixInit+2
  1377     06B0  3008               	movlw	8
  1378     06B1  00F8               	movwf	??_MatrixInit+1
  1379     06B2  3077               	movlw	119
  1380     06B3  00F7               	movwf	??_MatrixInit
  1381     06B4                     u147:
  1382     06B4  0BF7               	decfsz	??_MatrixInit,f
  1383     06B5  2EB4               	goto	u147
  1384     06B6  0BF8               	decfsz	??_MatrixInit+1,f
  1385     06B7  2EB4               	goto	u147
  1386     06B8  0BF9               	decfsz	??_MatrixInit+2,f
  1387     06B9  2EB4               	goto	u147
  1388     06BA                     l790:
  1389                           
  1390                           ;matrix.c: 22:     RA5=1;
  1391     06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1392     06BB  1303               	bcf	3,6	;RP1=0, select bank0
  1393     06BC  1685               	bsf	5,5	;volatile
  1394     06BD                     l792:
  1395                           
  1396                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1397     06BD  3009               	movlw	9
  1398     06BE  00F1               	movwf	SendToSegment@segment
  1399     06BF  3000               	movlw	0
  1400     06C0  00F2               	movwf	SendToSegment@segment+1
  1401     06C1  01F3               	clrf	SendToSegment@data
  1402     06C2  120A  118A  262B  120A  118A  	fcall	_SendToSegment
  1403     06C7                     l794:
  1404                           
  1405                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1406     06C7  300B               	movlw	11
  1407     06C8  00F1               	movwf	SendToSegment@segment
  1408     06C9  3000               	movlw	0
  1409     06CA  00F2               	movwf	SendToSegment@segment+1
  1410     06CB  3007               	movlw	7
  1411     06CC  00F3               	movwf	SendToSegment@data
  1412     06CD  120A  118A  262B  120A  118A  	fcall	_SendToSegment
  1413     06D2                     l796:
  1414                           
  1415                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1416     06D2  300A               	movlw	10
  1417     06D3  00F1               	movwf	SendToSegment@segment
  1418     06D4  3000               	movlw	0
  1419     06D5  00F2               	movwf	SendToSegment@segment+1
  1420     06D6  3002               	movlw	2
  1421     06D7  00F3               	movwf	SendToSegment@data
  1422     06D8  120A  118A  262B  120A  118A  	fcall	_SendToSegment
  1423     06DD                     l798:
  1424                           
  1425                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1426     06DD  300C               	movlw	12
  1427     06DE  00F1               	movwf	SendToSegment@segment
  1428     06DF  3000               	movlw	0
  1429     06E0  00F2               	movwf	SendToSegment@segment+1
  1430     06E1  01F3               	clrf	SendToSegment@data
  1431     06E2  0AF3               	incf	SendToSegment@data,f
  1432     06E3  120A  118A  262B  120A  118A  	fcall	_SendToSegment
  1433     06E8                     l800:
  1434                           
  1435                           ;matrix.c: 27:     SpiClearMatrix();
  1436     06E8  120A  118A  263E  120A  118A  	fcall	_SpiClearMatrix
  1437     06ED                     l81:
  1438     06ED  0008               	return
  1439     06EE                     __end_of_MatrixInit:
  1440                           
  1441                           	psect	text8
  1442     063E                     __ptext8:	
  1443 ;; *************** function _SpiClearMatrix *****************
  1444 ;; Defined at:
  1445 ;;		line 10 in file "matrix.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;		None
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  i               1    6[COMMON] unsigned char 
  1450 ;; Return value:  Size  Location     Type
  1451 ;;                  1    wreg      void 
  1452 ;; Registers used:
  1453 ;;		wreg, status,2, status,0, pclath, cstack
  1454 ;; Tracked objects:
  1455 ;;		On entry : 0/0
  1456 ;;		On exit  : 0/0
  1457 ;;		Unchanged: 0/0
  1458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1459 ;;      Params:         0       0       0       0       0
  1460 ;;      Locals:         1       0       0       0       0
  1461 ;;      Temps:          2       0       0       0       0
  1462 ;;      Totals:         3       0       0       0       0
  1463 ;;Total ram usage:        3 bytes
  1464 ;; Hardware stack levels used: 1
  1465 ;; Hardware stack levels required when called: 2
  1466 ;; This function calls:
  1467 ;;		_SendToSegment
  1468 ;; This function is called by:
  1469 ;;		_Movie
  1470 ;;		_MatrixInit
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474     063E                     _SpiClearMatrix:	
  1475                           ;psect for function _SpiClearMatrix
  1476                           
  1477     063E                     l738:	
  1478                           ;incstack = 0
  1479                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  1480                           
  1481                           
  1482                           ;matrix.c: 12:   char i = 8;
  1483     063E  3008               	movlw	8
  1484     063F  00F6               	movwf	SpiClearMatrix@i
  1485     0640                     l740:
  1486                           
  1487                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  1488     0640  0876               	movf	SpiClearMatrix@i,w
  1489     0641  00F4               	movwf	??_SpiClearMatrix
  1490     0642  01F5               	clrf	??_SpiClearMatrix+1
  1491     0643  0874               	movf	??_SpiClearMatrix,w
  1492     0644  00F1               	movwf	SendToSegment@segment
  1493     0645  0875               	movf	??_SpiClearMatrix+1,w
  1494     0646  00F2               	movwf	SendToSegment@segment+1
  1495     0647  01F3               	clrf	SendToSegment@data
  1496     0648  120A  118A  262B  120A  118A  	fcall	_SendToSegment
  1497     064D                     l742:
  1498                           
  1499                           ;matrix.c: 16:   } while (--i);
  1500     064D  3001               	movlw	1
  1501     064E  02F6               	subwf	SpiClearMatrix@i,f
  1502     064F  1D03               	btfss	3,2
  1503     0650  2E52               	goto	u81
  1504     0651  2E53               	goto	u80
  1505     0652                     u81:
  1506     0652  2E40               	goto	l740
  1507     0653                     u80:
  1508     0653                     l78:
  1509     0653  0008               	return
  1510     0654                     __end_of_SpiClearMatrix:
  1511                           
  1512                           	psect	text9
  1513     062B                     __ptext9:	
  1514 ;; *************** function _SendToSegment *****************
  1515 ;; Defined at:
  1516 ;;		line 34 in file "matrix.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  segment         2    1[COMMON] int 
  1519 ;;  data            1    3[COMMON] unsigned char 
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;		None
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2, status,0, pclath, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1531 ;;      Params:         3       0       0       0       0
  1532 ;;      Locals:         0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0
  1534 ;;      Totals:         3       0       0       0       0
  1535 ;;Total ram usage:        3 bytes
  1536 ;; Hardware stack levels used: 1
  1537 ;; Hardware stack levels required when called: 1
  1538 ;; This function calls:
  1539 ;;		_SpiSendByte
  1540 ;; This function is called by:
  1541 ;;		_SpiClearMatrix
  1542 ;;		_MatrixInit
  1543 ;;		_ShowShape
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547     062B                     _SendToSegment:	
  1548                           ;psect for function _SendToSegment
  1549                           
  1550     062B                     l732:	
  1551                           ;incstack = 0
  1552                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1553                           
  1554                           
  1555                           ;matrix.c: 35:     RA5 = 0;
  1556     062B  1283               	bcf	3,5	;RP0=0, select bank0
  1557     062C  1303               	bcf	3,6	;RP1=0, select bank0
  1558     062D  1285               	bcf	5,5	;volatile
  1559     062E                     l734:
  1560                           
  1561                           ;matrix.c: 36:     SpiSendByte((char)segment);
  1562     062E  0871               	movf	SendToSegment@segment,w
  1563     062F  120A  118A  260E  120A  118A  	fcall	_SpiSendByte
  1564                           
  1565                           ;matrix.c: 37:     SpiSendByte(data);
  1566     0634  0873               	movf	SendToSegment@data,w
  1567     0635  120A  118A  260E  120A  118A  	fcall	_SpiSendByte
  1568     063A                     l736:
  1569                           
  1570                           ;matrix.c: 38:     RA5 = 1;
  1571     063A  1283               	bcf	3,5	;RP0=0, select bank0
  1572     063B  1303               	bcf	3,6	;RP1=0, select bank0
  1573     063C  1685               	bsf	5,5	;volatile
  1574     063D                     l84:
  1575     063D  0008               	return
  1576     063E                     __end_of_SendToSegment:
  1577                           
  1578                           	psect	text10
  1579     060E                     __ptext10:	
  1580 ;; *************** function _SpiSendByte *****************
  1581 ;; Defined at:
  1582 ;;		line 18 in file "spi.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;  data            1    wreg     unsigned char 
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  data            1    0[COMMON] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1596 ;;      Params:         0       0       0       0       0
  1597 ;;      Locals:         1       0       0       0       0
  1598 ;;      Temps:          0       0       0       0       0
  1599 ;;      Totals:         1       0       0       0       0
  1600 ;;Total ram usage:        1 bytes
  1601 ;; Hardware stack levels used: 1
  1602 ;; This function calls:
  1603 ;;		Nothing
  1604 ;; This function is called by:
  1605 ;;		_SendToSegment
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609     060E                     _SpiSendByte:	
  1610                           ;psect for function _SpiSendByte
  1611                           
  1612                           
  1613                           ;incstack = 0
  1614                           ; Regs used in _SpiSendByte: [wreg]
  1615                           ;SpiSendByte@data stored from wreg
  1616     060E  00F0               	movwf	SpiSendByte@data
  1617     060F                     l730:
  1618                           
  1619                           ;spi.c: 19:     SSPBUF = data;
  1620     060F  0870               	movf	SpiSendByte@data,w
  1621     0610  1283               	bcf	3,5	;RP0=0, select bank0
  1622     0611  1303               	bcf	3,6	;RP1=0, select bank0
  1623     0612  0093               	movwf	19	;volatile
  1624     0613                     l62:	
  1625                           ;spi.c: 20:     while (!SSPIF);
  1626                           
  1627     0613  1D8C               	btfss	12,3	;volatile
  1628     0614  2E16               	goto	u71
  1629     0615  2E17               	goto	u70
  1630     0616                     u71:
  1631     0616  2E13               	goto	l62
  1632     0617                     u70:
  1633     0617                     l64:
  1634                           
  1635                           ;spi.c: 21:     SSPIF = 0;
  1636     0617  118C               	bcf	12,3	;volatile
  1637     0618                     l65:
  1638     0618  0008               	return
  1639     0619                     __end_of_SpiSendByte:
  1640     0002                     ___latbits      equ	2
  1641     007E                     btemp           set	126	;btemp
  1642     007E                     wtemp0          set	126
  1643                           
  1644                           	psect	config
  1645                           
  1646                           ;Config register CONFIG @ 0x2007
  1647                           ;	Oscillator Selection bits
  1648                           ;	FOSC = HS, HS oscillator
  1649                           ;	Watchdog Timer Enable bit
  1650                           ;	WDTE = OFF, WDT disabled
  1651                           ;	Power-up Timer Enable bit
  1652                           ;	PWRTE = OFF, PWRT disabled
  1653                           ;	FLASH Program Memory Code Protection bits
  1654                           ;	CP = OFF, Code protection off
  1655                           ;	Brown-out Reset Enable bit
  1656                           ;	BOREN = OFF, BOR disabled
  1657                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1658                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1659                           ;	Data EE Memory Code Protection
  1660                           ;	CPD = OFF, Code Protection off
  1661                           ;	FLASH Program Memory Write Enable
  1662                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1663                           ;	In-Circuit Debugger Mode bit
  1664                           ;	DEBUG = 0x1, unprogrammed default
  1665     2007                     	org	8199
  1666     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     25      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Movie@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@figure(BANK0[3]), 

    Movie@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@figure(BANK0[3]), 


Critical Paths under _main in COMMON

    _Movie->_ShowShape
    _ShowShape->_SendToSegment
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_Movie
    _Movie->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    1076
                                             16 BANK0      9     9      0
                         _MatrixInit
                              _Movie
                          _PortBInit
                            _SpiInit
                         _WidthLimit
 ---------------------------------------------------------------------------------
 (1) _WidthLimit                                           4     0      4      46
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Movie                                               12     7      5     738
                                              4 BANK0     12     7      5
                        _SetPosition
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _ShowShape                                           14     9      5     312
                                              4 COMMON    10     5      5
                                              0 BANK0      4     4      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _Movie
     _SetPosition
     _ShowShape
       _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SpiInit
   _WidthLimit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     25      28     35.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      42      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Dec  6 14:18:55 2024

           _SpiClearMatrix 063E                         l25 0768                         l42 0604  
                       l19 0755                         l62 0613                         l64 0617  
                       l65 0618                         l81 06ED                         l59 062A  
                       l84 063D                         l78 0653                         l95 07E9  
                       l89 0670                         l98 060D                         u70 0617  
                       u71 0616                         u80 0653                         u81 0652  
                       u94 07B7                         u95 07B5            SpiSendByte@data 0070  
                      l800 06E8                        l730 060F                        l802 05FE  
                      l810 067B                        l732 062B                        l740 0640  
                      l804 0605                        l812 0680                        l734 062E  
                      l742 064D                        l750 0769                        l814 0693  
                      l736 063A                        l744 0654                        l752 077E  
                      l760 06EE                        l816 0699                        l808 0671  
                      l738 063E                        l746 065E                        l754 079A  
                      l770 0721                        l762 06F3                        l756 07C1  
                      l748 0769                        l772 072F                        l764 06F8  
                      l780 0619                        l790 06BA                        l758 07C9  
                      l766 06FD                        l774 0737                        l782 061C  
                      l792 06BD                        l776 074D                        l768 0710  
                      l784 0624                        l794 06C7                        l778 0763  
                      l786 0626                        l796 06D2                        l788 06AE  
                      l798 06DD                        _RA5 002D                        u100 07E9  
                      u101 07E8                        u110 074D                        u111 074C  
                      u120 0763                        u105 07E5                        u121 0762  
                      u115 0749                        u125 075F                        u137 0729  
                      u147 06B4                        fsr0 0004                        indf 0000  
                     _main 0671                       btemp 007E                       start 0000  
   __end_of_SpiClearMatrix 0654            __end_of_SpiInit 062B                      ?_main 0070  
                    _PORTA 0005                      _PORTB 0006                      _TRISA 0085  
                    _TRISB 0086                      _TRISC 0087                      _SSPIF 0063  
                    _Movie 06EE            SpiClearMatrix@i 0076          SendToSegment@data 0073  
                    status 0003                      wtemp0 007E            ?_SpiClearMatrix 0070  
          __initialization 07EA               __end_of_main 06AE                 _MatrixInit 06AE  
                   ??_main 007E                     ?_Movie 0024              ??_SetPosition 0076  
                   _SSPCON 0014                     _SSPBUF 0013                  ??_SpiInit 0070  
            ??_SpiSendByte 0070                 _WidthLimit 0605           Movie@_widthLimit 0026  
           ShowShape@coord 0074    __end_of__initialization 07FC        __end_of_SetPosition 0671  
           __pcstackCOMMON 0070              __end_of_Movie 0769               __pidataBANK0 05FB  
              ?_MatrixInit 0070        __end_of_SpiSendByte 0619                    ??_Movie 0029  
              Movie@xCoord 002C                Movie@yCoord 002E          __end_of_PortBInit 0605  
        __end_of_ShowShape 07EA          main@shapePosition 0035                 __pmaintext 0671  
              ?_WidthLimit 0070  ShowShape@countElemntArray 0076                _SetPosition 0654  
                  _SSPSTAT 0094           ??_SpiClearMatrix 0074                    _SpiInit 0619  
            _SendToSegment 062B                _SpiSendByte 060E                    __ptext1 0605  
                  __ptext2 0619                    __ptext3 05FE                    __ptext4 06EE  
                  __ptext5 0769                    __ptext6 0654                    __ptext7 06AE  
                  __ptext8 063E                    __ptext9 062B      WidthLimit@lengthShape 0072  
      Movie@_shapePosition 0024       end_of_initialization 07FC             ?_SendToSegment 0071  
           main@widthLimit 0033        SetPosition@position 0070                 main@figure 0030  
             ??_MatrixInit 0077        start_initialization 07EA         __end_of_MatrixInit 06EE  
          ??_SendToSegment 0074                  _PortBInit 05FE                  _ShowShape 0769  
              __pdataBANK0 0039              ShowShape@_pos 0020               SetPosition@x 0072  
             SetPosition@y 0074               ??_WidthLimit 0074                  ___latbits 0002  
             Movie@_figure 0028              __pcstackBANK0 0020               ?_SetPosition 0070  
      ShowShape@shapeArray 0078                   ?_SpiInit 0070                 ?_PortBInit 0070  
       __end_of_WidthLimit 060E               ?_SpiSendByte 0070                 ?_ShowShape 0074  
              ??_PortBInit 0070                ??_ShowShape 0079               ShowShape@pos 0022  
   WidthLimit@lenghtMatrix 0070                   __ptext10 060E                   main@F905 0039  
     SendToSegment@segment 0071      __end_of_SendToSegment 063E  

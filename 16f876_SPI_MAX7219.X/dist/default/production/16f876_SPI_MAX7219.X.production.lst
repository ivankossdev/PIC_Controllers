

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Dec 13 15:17:46 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Generated 12/10/2023 GMT
    30                           ; 
    31                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F876 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63     0004                     fsr             equ	4
    64     0004                     fsr0            equ	4
    65     0000                     indf            equ	0
    66     0000                     indf0           equ	0
    67     0002                     pc              equ	2
    68     0002                     pcl             equ	2
    69     000A                     pclath          equ	10
    70     0003                     status          equ	3
    71     0000                     INDF            equ	0	;# 
    72     0001                     TMR0            equ	1	;# 
    73     0002                     PCL             equ	2	;# 
    74     0003                     STATUS          equ	3	;# 
    75     0004                     FSR             equ	4	;# 
    76     0005                     PORTA           equ	5	;# 
    77     0006                     PORTB           equ	6	;# 
    78     0007                     PORTC           equ	7	;# 
    79     000A                     PCLATH          equ	10	;# 
    80     000B                     INTCON          equ	11	;# 
    81     000C                     PIR1            equ	12	;# 
    82     000D                     PIR2            equ	13	;# 
    83     000E                     TMR1            equ	14	;# 
    84     000E                     TMR1L           equ	14	;# 
    85     000F                     TMR1H           equ	15	;# 
    86     0010                     T1CON           equ	16	;# 
    87     0011                     TMR2            equ	17	;# 
    88     0012                     T2CON           equ	18	;# 
    89     0013                     SSPBUF          equ	19	;# 
    90     0014                     SSPCON          equ	20	;# 
    91     0015                     CCPR1           equ	21	;# 
    92     0015                     CCPR1L          equ	21	;# 
    93     0016                     CCPR1H          equ	22	;# 
    94     0017                     CCP1CON         equ	23	;# 
    95     0018                     RCSTA           equ	24	;# 
    96     0019                     TXREG           equ	25	;# 
    97     001A                     RCREG           equ	26	;# 
    98     001B                     CCPR2           equ	27	;# 
    99     001B                     CCPR2L          equ	27	;# 
   100     001C                     CCPR2H          equ	28	;# 
   101     001D                     CCP2CON         equ	29	;# 
   102     001E                     ADRESH          equ	30	;# 
   103     001F                     ADCON0          equ	31	;# 
   104     0081                     OPTION_REG      equ	129	;# 
   105     0085                     TRISA           equ	133	;# 
   106     0086                     TRISB           equ	134	;# 
   107     0087                     TRISC           equ	135	;# 
   108     008C                     PIE1            equ	140	;# 
   109     008D                     PIE2            equ	141	;# 
   110     008E                     PCON            equ	142	;# 
   111     0091                     SSPCON2         equ	145	;# 
   112     0092                     PR2             equ	146	;# 
   113     0093                     SSPADD          equ	147	;# 
   114     0094                     SSPSTAT         equ	148	;# 
   115     0098                     TXSTA           equ	152	;# 
   116     0099                     SPBRG           equ	153	;# 
   117     009E                     ADRESL          equ	158	;# 
   118     009F                     ADCON1          equ	159	;# 
   119     010C                     EEDATA          equ	268	;# 
   120     010D                     EEADR           equ	269	;# 
   121     010E                     EEDATH          equ	270	;# 
   122     010F                     EEADRH          equ	271	;# 
   123     018C                     EECON1          equ	396	;# 
   124     018D                     EECON2          equ	397	;# 
   125     0000                     INDF            equ	0	;# 
   126     0001                     TMR0            equ	1	;# 
   127     0002                     PCL             equ	2	;# 
   128     0003                     STATUS          equ	3	;# 
   129     0004                     FSR             equ	4	;# 
   130     0005                     PORTA           equ	5	;# 
   131     0006                     PORTB           equ	6	;# 
   132     0007                     PORTC           equ	7	;# 
   133     000A                     PCLATH          equ	10	;# 
   134     000B                     INTCON          equ	11	;# 
   135     000C                     PIR1            equ	12	;# 
   136     000D                     PIR2            equ	13	;# 
   137     000E                     TMR1            equ	14	;# 
   138     000E                     TMR1L           equ	14	;# 
   139     000F                     TMR1H           equ	15	;# 
   140     0010                     T1CON           equ	16	;# 
   141     0011                     TMR2            equ	17	;# 
   142     0012                     T2CON           equ	18	;# 
   143     0013                     SSPBUF          equ	19	;# 
   144     0014                     SSPCON          equ	20	;# 
   145     0015                     CCPR1           equ	21	;# 
   146     0015                     CCPR1L          equ	21	;# 
   147     0016                     CCPR1H          equ	22	;# 
   148     0017                     CCP1CON         equ	23	;# 
   149     0018                     RCSTA           equ	24	;# 
   150     0019                     TXREG           equ	25	;# 
   151     001A                     RCREG           equ	26	;# 
   152     001B                     CCPR2           equ	27	;# 
   153     001B                     CCPR2L          equ	27	;# 
   154     001C                     CCPR2H          equ	28	;# 
   155     001D                     CCP2CON         equ	29	;# 
   156     001E                     ADRESH          equ	30	;# 
   157     001F                     ADCON0          equ	31	;# 
   158     0081                     OPTION_REG      equ	129	;# 
   159     0085                     TRISA           equ	133	;# 
   160     0086                     TRISB           equ	134	;# 
   161     0087                     TRISC           equ	135	;# 
   162     008C                     PIE1            equ	140	;# 
   163     008D                     PIE2            equ	141	;# 
   164     008E                     PCON            equ	142	;# 
   165     0091                     SSPCON2         equ	145	;# 
   166     0092                     PR2             equ	146	;# 
   167     0093                     SSPADD          equ	147	;# 
   168     0094                     SSPSTAT         equ	148	;# 
   169     0098                     TXSTA           equ	152	;# 
   170     0099                     SPBRG           equ	153	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179     0000                     INDF            equ	0	;# 
   180     0001                     TMR0            equ	1	;# 
   181     0002                     PCL             equ	2	;# 
   182     0003                     STATUS          equ	3	;# 
   183     0004                     FSR             equ	4	;# 
   184     0005                     PORTA           equ	5	;# 
   185     0006                     PORTB           equ	6	;# 
   186     0007                     PORTC           equ	7	;# 
   187     000A                     PCLATH          equ	10	;# 
   188     000B                     INTCON          equ	11	;# 
   189     000C                     PIR1            equ	12	;# 
   190     000D                     PIR2            equ	13	;# 
   191     000E                     TMR1            equ	14	;# 
   192     000E                     TMR1L           equ	14	;# 
   193     000F                     TMR1H           equ	15	;# 
   194     0010                     T1CON           equ	16	;# 
   195     0011                     TMR2            equ	17	;# 
   196     0012                     T2CON           equ	18	;# 
   197     0013                     SSPBUF          equ	19	;# 
   198     0014                     SSPCON          equ	20	;# 
   199     0015                     CCPR1           equ	21	;# 
   200     0015                     CCPR1L          equ	21	;# 
   201     0016                     CCPR1H          equ	22	;# 
   202     0017                     CCP1CON         equ	23	;# 
   203     0018                     RCSTA           equ	24	;# 
   204     0019                     TXREG           equ	25	;# 
   205     001A                     RCREG           equ	26	;# 
   206     001B                     CCPR2           equ	27	;# 
   207     001B                     CCPR2L          equ	27	;# 
   208     001C                     CCPR2H          equ	28	;# 
   209     001D                     CCP2CON         equ	29	;# 
   210     001E                     ADRESH          equ	30	;# 
   211     001F                     ADCON0          equ	31	;# 
   212     0081                     OPTION_REG      equ	129	;# 
   213     0085                     TRISA           equ	133	;# 
   214     0086                     TRISB           equ	134	;# 
   215     0087                     TRISC           equ	135	;# 
   216     008C                     PIE1            equ	140	;# 
   217     008D                     PIE2            equ	141	;# 
   218     008E                     PCON            equ	142	;# 
   219     0091                     SSPCON2         equ	145	;# 
   220     0092                     PR2             equ	146	;# 
   221     0093                     SSPADD          equ	147	;# 
   222     0094                     SSPSTAT         equ	148	;# 
   223     0098                     TXSTA           equ	152	;# 
   224     0099                     SPBRG           equ	153	;# 
   225     009E                     ADRESL          equ	158	;# 
   226     009F                     ADCON1          equ	159	;# 
   227     010C                     EEDATA          equ	268	;# 
   228     010D                     EEADR           equ	269	;# 
   229     010E                     EEDATH          equ	270	;# 
   230     010F                     EEADRH          equ	271	;# 
   231     018C                     EECON1          equ	396	;# 
   232     018D                     EECON2          equ	397	;# 
   233     0000                     INDF            equ	0	;# 
   234     0001                     TMR0            equ	1	;# 
   235     0002                     PCL             equ	2	;# 
   236     0003                     STATUS          equ	3	;# 
   237     0004                     FSR             equ	4	;# 
   238     0005                     PORTA           equ	5	;# 
   239     0006                     PORTB           equ	6	;# 
   240     0007                     PORTC           equ	7	;# 
   241     000A                     PCLATH          equ	10	;# 
   242     000B                     INTCON          equ	11	;# 
   243     000C                     PIR1            equ	12	;# 
   244     000D                     PIR2            equ	13	;# 
   245     000E                     TMR1            equ	14	;# 
   246     000E                     TMR1L           equ	14	;# 
   247     000F                     TMR1H           equ	15	;# 
   248     0010                     T1CON           equ	16	;# 
   249     0011                     TMR2            equ	17	;# 
   250     0012                     T2CON           equ	18	;# 
   251     0013                     SSPBUF          equ	19	;# 
   252     0014                     SSPCON          equ	20	;# 
   253     0015                     CCPR1           equ	21	;# 
   254     0015                     CCPR1L          equ	21	;# 
   255     0016                     CCPR1H          equ	22	;# 
   256     0017                     CCP1CON         equ	23	;# 
   257     0018                     RCSTA           equ	24	;# 
   258     0019                     TXREG           equ	25	;# 
   259     001A                     RCREG           equ	26	;# 
   260     001B                     CCPR2           equ	27	;# 
   261     001B                     CCPR2L          equ	27	;# 
   262     001C                     CCPR2H          equ	28	;# 
   263     001D                     CCP2CON         equ	29	;# 
   264     001E                     ADRESH          equ	30	;# 
   265     001F                     ADCON0          equ	31	;# 
   266     0081                     OPTION_REG      equ	129	;# 
   267     0085                     TRISA           equ	133	;# 
   268     0086                     TRISB           equ	134	;# 
   269     0087                     TRISC           equ	135	;# 
   270     008C                     PIE1            equ	140	;# 
   271     008D                     PIE2            equ	141	;# 
   272     008E                     PCON            equ	142	;# 
   273     0091                     SSPCON2         equ	145	;# 
   274     0092                     PR2             equ	146	;# 
   275     0093                     SSPADD          equ	147	;# 
   276     0094                     SSPSTAT         equ	148	;# 
   277     0098                     TXSTA           equ	152	;# 
   278     0099                     SPBRG           equ	153	;# 
   279     009E                     ADRESL          equ	158	;# 
   280     009F                     ADCON1          equ	159	;# 
   281     010C                     EEDATA          equ	268	;# 
   282     010D                     EEADR           equ	269	;# 
   283     010E                     EEDATH          equ	270	;# 
   284     010F                     EEADRH          equ	271	;# 
   285     018C                     EECON1          equ	396	;# 
   286     018D                     EECON2          equ	397	;# 
   287     0000                     INDF            equ	0	;# 
   288     0001                     TMR0            equ	1	;# 
   289     0002                     PCL             equ	2	;# 
   290     0003                     STATUS          equ	3	;# 
   291     0004                     FSR             equ	4	;# 
   292     0005                     PORTA           equ	5	;# 
   293     0006                     PORTB           equ	6	;# 
   294     0007                     PORTC           equ	7	;# 
   295     000A                     PCLATH          equ	10	;# 
   296     000B                     INTCON          equ	11	;# 
   297     000C                     PIR1            equ	12	;# 
   298     000D                     PIR2            equ	13	;# 
   299     000E                     TMR1            equ	14	;# 
   300     000E                     TMR1L           equ	14	;# 
   301     000F                     TMR1H           equ	15	;# 
   302     0010                     T1CON           equ	16	;# 
   303     0011                     TMR2            equ	17	;# 
   304     0012                     T2CON           equ	18	;# 
   305     0013                     SSPBUF          equ	19	;# 
   306     0014                     SSPCON          equ	20	;# 
   307     0015                     CCPR1           equ	21	;# 
   308     0015                     CCPR1L          equ	21	;# 
   309     0016                     CCPR1H          equ	22	;# 
   310     0017                     CCP1CON         equ	23	;# 
   311     0018                     RCSTA           equ	24	;# 
   312     0019                     TXREG           equ	25	;# 
   313     001A                     RCREG           equ	26	;# 
   314     001B                     CCPR2           equ	27	;# 
   315     001B                     CCPR2L          equ	27	;# 
   316     001C                     CCPR2H          equ	28	;# 
   317     001D                     CCP2CON         equ	29	;# 
   318     001E                     ADRESH          equ	30	;# 
   319     001F                     ADCON0          equ	31	;# 
   320     0081                     OPTION_REG      equ	129	;# 
   321     0085                     TRISA           equ	133	;# 
   322     0086                     TRISB           equ	134	;# 
   323     0087                     TRISC           equ	135	;# 
   324     008C                     PIE1            equ	140	;# 
   325     008D                     PIE2            equ	141	;# 
   326     008E                     PCON            equ	142	;# 
   327     0091                     SSPCON2         equ	145	;# 
   328     0092                     PR2             equ	146	;# 
   329     0093                     SSPADD          equ	147	;# 
   330     0094                     SSPSTAT         equ	148	;# 
   331     0098                     TXSTA           equ	152	;# 
   332     0099                     SPBRG           equ	153	;# 
   333     009E                     ADRESL          equ	158	;# 
   334     009F                     ADCON1          equ	159	;# 
   335     010C                     EEDATA          equ	268	;# 
   336     010D                     EEADR           equ	269	;# 
   337     010E                     EEDATH          equ	270	;# 
   338     010F                     EEADRH          equ	271	;# 
   339     018C                     EECON1          equ	396	;# 
   340     018D                     EECON2          equ	397	;# 
   341     0000                     INDF            equ	0	;# 
   342     0001                     TMR0            equ	1	;# 
   343     0002                     PCL             equ	2	;# 
   344     0003                     STATUS          equ	3	;# 
   345     0004                     FSR             equ	4	;# 
   346     0005                     PORTA           equ	5	;# 
   347     0006                     PORTB           equ	6	;# 
   348     0007                     PORTC           equ	7	;# 
   349     000A                     PCLATH          equ	10	;# 
   350     000B                     INTCON          equ	11	;# 
   351     000C                     PIR1            equ	12	;# 
   352     000D                     PIR2            equ	13	;# 
   353     000E                     TMR1            equ	14	;# 
   354     000E                     TMR1L           equ	14	;# 
   355     000F                     TMR1H           equ	15	;# 
   356     0010                     T1CON           equ	16	;# 
   357     0011                     TMR2            equ	17	;# 
   358     0012                     T2CON           equ	18	;# 
   359     0013                     SSPBUF          equ	19	;# 
   360     0014                     SSPCON          equ	20	;# 
   361     0015                     CCPR1           equ	21	;# 
   362     0015                     CCPR1L          equ	21	;# 
   363     0016                     CCPR1H          equ	22	;# 
   364     0017                     CCP1CON         equ	23	;# 
   365     0018                     RCSTA           equ	24	;# 
   366     0019                     TXREG           equ	25	;# 
   367     001A                     RCREG           equ	26	;# 
   368     001B                     CCPR2           equ	27	;# 
   369     001B                     CCPR2L          equ	27	;# 
   370     001C                     CCPR2H          equ	28	;# 
   371     001D                     CCP2CON         equ	29	;# 
   372     001E                     ADRESH          equ	30	;# 
   373     001F                     ADCON0          equ	31	;# 
   374     0081                     OPTION_REG      equ	129	;# 
   375     0085                     TRISA           equ	133	;# 
   376     0086                     TRISB           equ	134	;# 
   377     0087                     TRISC           equ	135	;# 
   378     008C                     PIE1            equ	140	;# 
   379     008D                     PIE2            equ	141	;# 
   380     008E                     PCON            equ	142	;# 
   381     0091                     SSPCON2         equ	145	;# 
   382     0092                     PR2             equ	146	;# 
   383     0093                     SSPADD          equ	147	;# 
   384     0094                     SSPSTAT         equ	148	;# 
   385     0098                     TXSTA           equ	152	;# 
   386     0099                     SPBRG           equ	153	;# 
   387     009E                     ADRESL          equ	158	;# 
   388     009F                     ADCON1          equ	159	;# 
   389     010C                     EEDATA          equ	268	;# 
   390     010D                     EEADR           equ	269	;# 
   391     010E                     EEDATH          equ	270	;# 
   392     010F                     EEADRH          equ	271	;# 
   393     018C                     EECON1          equ	396	;# 
   394     018D                     EECON2          equ	397	;# 
   395                           
   396                           	psect	idataBANK0
   397     04ED                     __pidataBANK0:
   398                           
   399                           ;initializer for main@F927
   400     04ED  3407               	retlw	7
   401     04EE  3405               	retlw	5
   402     04EF  3402               	retlw	2
   403                           
   404                           	psect	strings
   405     0003                     __pstrings:
   406     0003                     stringtab:
   407     0003                     __stringtab:
   408     0003                     stringcode:	
   409                           ;	String table - string pointers are 1 byte each
   410                           
   411     0003                     stringdir:
   412     0003  3000               	movlw	high stringdir
   413     0004  008A               	movwf	10
   414     0005  0804               	movf	4,w
   415     0006  0A84               	incf	4,f
   416     0007  0782               	addwf	2,f
   417     0008                     __stringbase:
   418     0008  3400               	retlw	0
   419     0009                     __end_of__stringtab:
   420     0009                     ChangeOfCoordinates@delay:
   421     0009  3464               	retlw	100
   422     000A  3400               	retlw	0
   423     000B  3400               	retlw	0
   424     000C  3400               	retlw	0
   425     000D                     __end_ofChangeOfCoordinates@delay:
   426     0013                     _SSPBUF         set	19
   427     0014                     _SSPCON         set	20
   428     0005                     _PORTA          set	5
   429     0006                     _PORTB          set	6
   430     002D                     _RA5            set	45
   431     0063                     _SSPIF          set	99
   432     0094                     _SSPSTAT        set	148
   433     0085                     _TRISA          set	133
   434     0087                     _TRISC          set	135
   435     0086                     _TRISB          set	134
   436                           
   437                           	psect	cinit
   438     07EA                     start_initialization:	
   439                           ; #config settings
   440                           
   441     07EA                     __initialization:
   442                           
   443                           ; Initialize objects allocated to BANK0
   444     07EA  120A  118A  24ED  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   445     07EF  00C1               	movwf	__pdataBANK0& (0+127)
   446     07F0  120A  118A  24EE  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   447     07F5  00C2               	movwf	(__pdataBANK0+1)& (0+127)
   448     07F6  120A  118A  24EF  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   449     07FB  00C3               	movwf	(__pdataBANK0+2)& (0+127)
   450     07FC                     end_of_initialization:	
   451                           ;End of C runtime variable initialization code
   452                           
   453     07FC                     __end_of__initialization:
   454     07FC  0183               	clrf	3
   455     07FD  120A  118A  2E25   	ljmp	_main	;jump to C main() function
   456                           
   457                           	psect	dataBANK0
   458     0041                     __pdataBANK0:
   459     0041                     main@F927:
   460     0041                     	ds	3
   461                           
   462                           	psect	cstackCOMMON
   463     0070                     __pcstackCOMMON:
   464     0070                     ?_SpiInit:
   465     0070                     ?_MatrixInit:	
   466                           ; 1 bytes @ 0x0
   467                           
   468     0070                     ?_PortBInit:	
   469                           ; 1 bytes @ 0x0
   470                           
   471     0070                     ?_SetPosition:	
   472                           ; 1 bytes @ 0x0
   473                           
   474     0070                     ?_invert:	
   475                           ; 1 bytes @ 0x0
   476                           
   477     0070                     ?_main:	
   478                           ; 1 bytes @ 0x0
   479                           
   480     0070                     ?_SpiSendByte:	
   481                           ; 1 bytes @ 0x0
   482                           
   483     0070                     ?_SpiClearMatrix:	
   484                           ; 1 bytes @ 0x0
   485                           
   486     0070                     ?_MovieDown:	
   487                           ; 1 bytes @ 0x0
   488                           
   489     0070                     ?_MovieUp:	
   490                           ; 1 bytes @ 0x0
   491                           
   492     0070                     ?_MovieLeft:	
   493                           ; 1 bytes @ 0x0
   494                           
   495     0070                     ?_MovieRigth:	
   496                           ; 1 bytes @ 0x0
   497                           
   498     0070                     invert@array:	
   499                           ; 1 bytes @ 0x0
   500                           
   501     0070                     SpiSendByte@data:	
   502                           ; 1 bytes @ 0x0
   503                           
   504     0070                     SetPosition@position:	
   505                           ; 1 bytes @ 0x0
   506                           
   507     0070                     MovieDown@_shapePosition:	
   508                           ; 2 bytes @ 0x0
   509                           
   510     0070                     MovieUp@_shapePosition:	
   511                           ; 2 bytes @ 0x0
   512                           
   513     0070                     MovieLeft@_shapePosition:	
   514                           ; 2 bytes @ 0x0
   515                           
   516     0070                     MovieRigth@_shapePosition:	
   517                           ; 2 bytes @ 0x0
   518                           
   519     0070                     ??_SpiInit:	
   520                           ; 2 bytes @ 0x0
   521                           
   522     0070                     ??_PortBInit:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ??_SpiSendByte:	
   526                           ; 1 bytes @ 0x0
   527                           
   528                           
   529                           ; 1 bytes @ 0x0
   530     0070                     	ds	1
   531     0071                     ?_SendToSegment:
   532     0071                     invert@countElemnt:	
   533                           ; 1 bytes @ 0x1
   534                           
   535     0071                     SendToSegment@segment:	
   536                           ; 2 bytes @ 0x1
   537                           
   538                           
   539                           ; 2 bytes @ 0x1
   540     0071                     	ds	1
   541     0072                     SetPosition@x:
   542     0072                     ??_MovieDown:	
   543                           ; 2 bytes @ 0x2
   544                           
   545     0072                     ??_MovieUp:	
   546                           ; 1 bytes @ 0x2
   547                           
   548     0072                     ??_MovieLeft:	
   549                           ; 1 bytes @ 0x2
   550                           
   551     0072                     ??_MovieRigth:	
   552                           ; 1 bytes @ 0x2
   553                           
   554                           
   555                           ; 1 bytes @ 0x2
   556     0072                     	ds	1
   557     0073                     SendToSegment@data:
   558     0073                     ??_invert:	
   559                           ; 1 bytes @ 0x3
   560                           
   561                           
   562                           ; 1 bytes @ 0x3
   563     0073                     	ds	1
   564     0074                     ?_ShowShape:
   565     0074                     SetPosition@y:	
   566                           ; 1 bytes @ 0x4
   567                           
   568     0074                     ShowShape@coord:	
   569                           ; 2 bytes @ 0x4
   570                           
   571     0074                     ??_SendToSegment:	
   572                           ; 2 bytes @ 0x4
   573                           
   574     0074                     ??_SpiClearMatrix:	
   575                           ; 1 bytes @ 0x4
   576                           
   577                           
   578                           ; 1 bytes @ 0x4
   579     0074                     	ds	2
   580     0076                     invert@t:
   581     0076                     SpiClearMatrix@i:	
   582                           ; 1 bytes @ 0x6
   583                           
   584     0076                     ShowShape@countElemntArray:	
   585                           ; 1 bytes @ 0x6
   586                           
   587     0076                     ??_SetPosition:	
   588                           ; 2 bytes @ 0x6
   589                           
   590                           
   591                           ; 1 bytes @ 0x6
   592     0076                     	ds	1
   593     0077                     invert@i:
   594     0077                     ??_MatrixInit:	
   595                           ; 2 bytes @ 0x7
   596                           
   597                           
   598                           ; 1 bytes @ 0x7
   599     0077                     	ds	1
   600     0078                     ShowShape@shapeArray:
   601                           
   602                           ; 1 bytes @ 0x8
   603     0078                     	ds	1
   604     0079                     invert@j:
   605     0079                     ??_ShowShape:	
   606                           ; 2 bytes @ 0x9
   607                           
   608                           
   609                           ; 1 bytes @ 0x9
   610     0079                     	ds	5
   611     007E                     ??_main:
   612                           
   613                           	psect	cstackBANK0
   614     0020                     __pcstackBANK0:	
   615                           ; 1 bytes @ 0xE
   616                           
   617     0020                     ShowShape@_pos:
   618                           
   619                           ; 2 bytes @ 0x0
   620     0020                     	ds	2
   621     0022                     ShowShape@pos:
   622                           
   623                           ; 2 bytes @ 0x2
   624     0022                     	ds	2
   625     0024                     ?_MovieShape:
   626     0024                     MovieShape@_shapePosition:	
   627                           ; 1 bytes @ 0x4
   628                           
   629                           
   630                           ; 2 bytes @ 0x4
   631     0024                     	ds	2
   632     0026                     MovieShape@shapeArray:
   633                           
   634                           ; 1 bytes @ 0x6
   635     0026                     	ds	1
   636     0027                     MovieShape@countElemntArray:
   637                           
   638                           ; 2 bytes @ 0x7
   639     0027                     	ds	2
   640     0029                     ??_MovieShape:
   641                           
   642                           ; 1 bytes @ 0x9
   643     0029                     	ds	2
   644     002B                     MovieShape@dir:
   645                           
   646                           ; 1 bytes @ 0xB
   647     002B                     	ds	1
   648     002C                     ?_ChangeOfCoordinates:
   649     002C                     ChangeOfCoordinates@_shapePosition:	
   650                           ; 1 bytes @ 0xC
   651                           
   652                           
   653                           ; 2 bytes @ 0xC
   654     002C                     	ds	2
   655     002E                     ChangeOfCoordinates@_figure:
   656                           
   657                           ; 1 bytes @ 0xE
   658     002E                     	ds	1
   659     002F                     ChangeOfCoordinates@_countElemntArray:
   660                           
   661                           ; 2 bytes @ 0xF
   662     002F                     	ds	2
   663     0031                     ??_ChangeOfCoordinates:
   664                           
   665                           ; 1 bytes @ 0x11
   666     0031                     	ds	3
   667     0034                     ChangeOfCoordinates@step:
   668                           
   669                           ; 2 bytes @ 0x14
   670     0034                     	ds	2
   671     0036                     ChangeOfCoordinates@i:
   672                           
   673                           ; 2 bytes @ 0x16
   674     0036                     	ds	2
   675     0038                     main@square_1:
   676                           
   677                           ; 3 bytes @ 0x18
   678     0038                     	ds	3
   679     003B                     main@countElemntArray:
   680                           
   681                           ; 2 bytes @ 0x1B
   682     003B                     	ds	2
   683     003D                     main@shapePosition:
   684                           
   685                           ; 4 bytes @ 0x1D
   686     003D                     	ds	4
   687                           
   688                           	psect	maintext
   689     0625                     __pmaintext:	
   690 ;;
   691 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   692 ;;
   693 ;; *************** function _main *****************
   694 ;; Defined at:
   695 ;;		line 65 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  shapePositio    4   29[BANK0 ] struct .
   700 ;;  square_1        3   24[BANK0 ] unsigned char [3]
   701 ;;  countElemntA    2   27[BANK0 ] int 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : B00/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   711 ;;      Params:         0       0       0       0       0
   712 ;;      Locals:         0       9       0       0       0
   713 ;;      Temps:          0       0       0       0       0
   714 ;;      Totals:         0       9       0       0       0
   715 ;;Total ram usage:        9 bytes
   716 ;; Hardware stack levels required when called: 5
   717 ;; This function calls:
   718 ;;		_ChangeOfCoordinates
   719 ;;		_MatrixInit
   720 ;;		_PortBInit
   721 ;;		_SetPosition
   722 ;;		_SpiInit
   723 ;;		_invert
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729     0625                     _main:	
   730                           ;psect for function _main
   731                           
   732     0625                     l975:	
   733                           ;incstack = 0
   734                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   735                           
   736                           
   737                           ;main.c: 66:     SpiInit();
   738     0625  120A  118A  251E  120A  118A  	fcall	_SpiInit
   739                           
   740                           ;main.c: 67:     MatrixInit();
   741     062A  120A  118A  25A2  120A  118A  	fcall	_MatrixInit
   742     062F                     l977:
   743                           
   744                           ;main.c: 68:     PortBInit();
   745     062F  120A  118A  24F0  120A  118A  	fcall	_PortBInit
   746                           
   747                           ;main.c: 70:     TCoord shapePosition;;main.c: 71:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
   748     0634  1283               	bcf	3,5	;RP0=0, select bank0
   749     0635  1303               	bcf	3,6	;RP1=0, select bank0
   750     0636  0841               	movf	main@F927,w
   751     0637  00B8               	movwf	main@square_1
   752     0638  0842               	movf	main@F927+1,w
   753     0639  00B9               	movwf	main@square_1+1
   754     063A  0843               	movf	main@F927+2,w
   755     063B  00BA               	movwf	main@square_1+2
   756                           
   757                           ;main.c: 72:     int countElemntArray = 3;
   758     063C  3003               	movlw	3
   759     063D  00BB               	movwf	main@countElemntArray
   760     063E  3000               	movlw	0
   761     063F  00BC               	movwf	main@countElemntArray+1
   762     0640                     l979:
   763                           
   764                           ;main.c: 74:         SetPosition(&shapePosition, 0, 0);
   765     0640  303D               	movlw	low main@shapePosition
   766     0641  00F0               	movwf	SetPosition@position
   767     0642  3000               	movlw	high main@shapePosition
   768     0643  00F1               	movwf	SetPosition@position+1
   769     0644  3000               	movlw	0
   770     0645  00F2               	movwf	SetPosition@x
   771     0646  00F3               	movwf	SetPosition@x+1
   772     0647  3000               	movlw	0
   773     0648  00F4               	movwf	SetPosition@y
   774     0649  00F5               	movwf	SetPosition@y+1
   775     064A  120A  118A  2585  120A  118A  	fcall	_SetPosition
   776     064F                     l981:
   777                           
   778                           ;main.c: 75:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray);
   779     064F  303D               	movlw	low main@shapePosition
   780     0650  1283               	bcf	3,5	;RP0=0, select bank0
   781     0651  1303               	bcf	3,6	;RP1=0, select bank0
   782     0652  00AC               	movwf	ChangeOfCoordinates@_shapePosition
   783     0653  3000               	movlw	high main@shapePosition
   784     0654  00AD               	movwf	ChangeOfCoordinates@_shapePosition+1
   785     0655  3038               	movlw	(low (main@square_1| 0))& (0+255)
   786     0656  00AE               	movwf	ChangeOfCoordinates@_figure
   787     0657  083C               	movf	main@countElemntArray+1,w
   788     0658  00B0               	movwf	ChangeOfCoordinates@_countElemntArray+1
   789     0659  083B               	movf	main@countElemntArray,w
   790     065A  00AF               	movwf	ChangeOfCoordinates@_countElemntArray
   791     065B  120A  118A  274E  120A  118A  	fcall	_ChangeOfCoordinates
   792     0660                     l983:
   793                           
   794                           ;main.c: 76:         invert(square_1, countElemntArray);
   795     0660  3038               	movlw	(low (main@square_1| 0))& (0+255)
   796     0661  00F0               	movwf	invert@array
   797     0662  1283               	bcf	3,5	;RP0=0, select bank0
   798     0663  1303               	bcf	3,6	;RP1=0, select bank0
   799     0664  083C               	movf	main@countElemntArray+1,w
   800     0665  00F2               	movwf	invert@countElemnt+1
   801     0666  083B               	movf	main@countElemntArray,w
   802     0667  00F1               	movwf	invert@countElemnt
   803     0668  120A  118A  25E2  120A  118A  	fcall	_invert
   804     066D  2E40               	goto	l979
   805     066E  120A  118A  2800   	ljmp	start
   806     0671                     __end_of_main:
   807                           
   808                           	psect	text1
   809     05E2                     __ptext1:	
   810 ;; *************** function _invert *****************
   811 ;; Defined at:
   812 ;;		line 45 in file "main.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;  array           1    0[COMMON] PTR unsigned char 
   815 ;;		 -> main@square_1(3), 
   816 ;;  countElemnt     2    1[COMMON] int 
   817 ;; Auto vars:     Size  Location     Type
   818 ;;  t               1    6[COMMON] unsigned char 
   819 ;;  j               2    9[COMMON] int 
   820 ;;  i               2    7[COMMON] int 
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   830 ;;      Params:         3       0       0       0       0
   831 ;;      Locals:         5       0       0       0       0
   832 ;;      Temps:          3       0       0       0       0
   833 ;;      Totals:        11       0       0       0       0
   834 ;;Total ram usage:       11 bytes
   835 ;; Hardware stack levels used: 1
   836 ;; This function calls:
   837 ;;		Nothing
   838 ;; This function is called by:
   839 ;;		_main
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843     05E2                     _invert:	
   844                           ;psect for function _invert
   845                           
   846     05E2                     l935:	
   847                           ;incstack = 0
   848                           ; Regs used in _invert: [wreg-fsr0h+status,2+status,0]
   849                           
   850                           
   851                           ;main.c: 45: void invert(char * array, int countElemnt);main.c: 46: {;main.c: 47:     fo
      +                          r(int i = 0, j = countElemnt - 1; i < j; i++, j--)
   852     05E2  01F7               	clrf	invert@i
   853     05E3  01F8               	clrf	invert@i+1
   854     05E4                     l937:
   855     05E4  0871               	movf	invert@countElemnt,w
   856     05E5  3EFF               	addlw	255
   857     05E6  00F9               	movwf	invert@j
   858     05E7  0872               	movf	invert@countElemnt+1,w
   859     05E8  1803               	skipnc
   860     05E9  3E01               	addlw	1
   861     05EA  3EFF               	addlw	255
   862     05EB  00FA               	movwf	invert@j+1
   863     05EC  2E16               	goto	l945
   864     05ED                     l939:
   865                           
   866                           ;main.c: 48:     {;main.c: 49:         char t = array[i];
   867     05ED  0877               	movf	invert@i,w
   868     05EE  0770               	addwf	invert@array,w
   869     05EF  00F3               	movwf	??_invert
   870     05F0  0873               	movf	??_invert,w
   871     05F1  0084               	movwf	4
   872     05F2  1383               	bcf	3,7	;select IRP bank0
   873     05F3  0800               	movf	0,w
   874     05F4  00F6               	movwf	invert@t
   875                           
   876                           ;main.c: 50:         array[i] = array[j];
   877     05F5  0879               	movf	invert@j,w
   878     05F6  0770               	addwf	invert@array,w
   879     05F7  00F3               	movwf	??_invert
   880     05F8  0873               	movf	??_invert,w
   881     05F9  0084               	movwf	4
   882     05FA  0800               	movf	0,w
   883     05FB  00F4               	movwf	??_invert+1
   884     05FC  0877               	movf	invert@i,w
   885     05FD  0770               	addwf	invert@array,w
   886     05FE  00F5               	movwf	??_invert+2
   887     05FF  0875               	movf	??_invert+2,w
   888     0600  0084               	movwf	4
   889     0601  0874               	movf	??_invert+1,w
   890     0602  0080               	movwf	0
   891                           
   892                           ;main.c: 51:         array[j] = t;
   893     0603  0879               	movf	invert@j,w
   894     0604  0770               	addwf	invert@array,w
   895     0605  00F3               	movwf	??_invert
   896     0606  0873               	movf	??_invert,w
   897     0607  0084               	movwf	4
   898     0608  0876               	movf	invert@t,w
   899     0609  0080               	movwf	0
   900     060A                     l941:
   901                           
   902                           ;main.c: 52:     }
   903     060A  3001               	movlw	1
   904     060B  07F7               	addwf	invert@i,f
   905     060C  1803               	skipnc
   906     060D  0AF8               	incf	invert@i+1,f
   907     060E  3000               	movlw	0
   908     060F  07F8               	addwf	invert@i+1,f
   909     0610                     l943:
   910     0610  30FF               	movlw	255
   911     0611  07F9               	addwf	invert@j,f
   912     0612  1803               	skipnc
   913     0613  0AFA               	incf	invert@j+1,f
   914     0614  30FF               	movlw	255
   915     0615  07FA               	addwf	invert@j+1,f
   916     0616                     l945:
   917     0616  0878               	movf	invert@i+1,w
   918     0617  3A80               	xorlw	128
   919     0618  00F3               	movwf	??_invert
   920     0619  087A               	movf	invert@j+1,w
   921     061A  3A80               	xorlw	128
   922     061B  0273               	subwf	??_invert,w
   923     061C  1D03               	skipz
   924     061D  2E20               	goto	u145
   925     061E  0879               	movf	invert@j,w
   926     061F  0277               	subwf	invert@i,w
   927     0620                     u145:
   928     0620  1C03               	skipc
   929     0621  2E23               	goto	u141
   930     0622  2E24               	goto	u140
   931     0623                     u141:
   932     0623  2DED               	goto	l939
   933     0624                     u140:
   934     0624                     l33:
   935     0624  0008               	return
   936     0625                     __end_of_invert:
   937                           
   938                           	psect	text2
   939     051E                     __ptext2:	
   940 ;; *************** function _SpiInit *****************
   941 ;; Defined at:
   942 ;;		line 9 in file "spi.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;		None
   945 ;; Auto vars:     Size  Location     Type
   946 ;;		None
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, status,2, status,0
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   956 ;;      Params:         0       0       0       0       0
   957 ;;      Locals:         0       0       0       0       0
   958 ;;      Temps:          0       0       0       0       0
   959 ;;      Totals:         0       0       0       0       0
   960 ;;Total ram usage:        0 bytes
   961 ;; Hardware stack levels used: 1
   962 ;; This function calls:
   963 ;;		Nothing
   964 ;; This function is called by:
   965 ;;		_main
   966 ;; This function uses a non-reentrant model
   967 ;;
   968                           
   969     051E                     _SpiInit:	
   970                           ;psect for function _SpiInit
   971                           
   972     051E                     l947:	
   973                           ;incstack = 0
   974                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   975                           
   976                           
   977                           ;spi.c: 10:     TRISC |= 0x10;
   978     051E  1683               	bsf	3,5	;RP0=1, select bank1
   979     051F  1303               	bcf	3,6	;RP1=0, select bank1
   980     0520  1607               	bsf	7,4	;volatile
   981     0521                     l949:
   982                           
   983                           ;spi.c: 11:     TRISC &= ~0x28;
   984     0521  30D7               	movlw	215
   985     0522  0587               	andwf	7,f	;volatile
   986                           
   987                           ;spi.c: 12:     TRISA &= ~0x20;
   988     0523  30DF               	movlw	223
   989     0524  0585               	andwf	5,f	;volatile
   990                           
   991                           ;spi.c: 13:     PORTA &= ~0x20;
   992     0525  30DF               	movlw	223
   993     0526  1283               	bcf	3,5	;RP0=0, select bank0
   994     0527  1303               	bcf	3,6	;RP1=0, select bank0
   995     0528  0585               	andwf	5,f	;volatile
   996     0529                     l951:
   997                           
   998                           ;spi.c: 14:     SSPCON = 0x30;
   999     0529  3030               	movlw	48
  1000     052A  0094               	movwf	20	;volatile
  1001     052B                     l953:
  1002                           
  1003                           ;spi.c: 15:     SSPSTAT = 0x80;
  1004     052B  3080               	movlw	128
  1005     052C  1683               	bsf	3,5	;RP0=1, select bank1
  1006     052D  1303               	bcf	3,6	;RP1=0, select bank1
  1007     052E  0094               	movwf	20	;volatile
  1008     052F                     l67:
  1009     052F  0008               	return
  1010     0530                     __end_of_SpiInit:
  1011                           
  1012                           	psect	text3
  1013     0585                     __ptext3:	
  1014 ;; *************** function _SetPosition *****************
  1015 ;; Defined at:
  1016 ;;		line 3 in file "shape.c"
  1017 ;; Parameters:    Size  Location     Type
  1018 ;;  position        2    0[COMMON] PTR struct .
  1019 ;;		 -> main@shapePosition(4), 
  1020 ;;  x               2    2[COMMON] int 
  1021 ;;  y               2    4[COMMON] int 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         6       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0
  1035 ;;      Temps:          2       0       0       0       0
  1036 ;;      Totals:         8       0       0       0       0
  1037 ;;Total ram usage:        8 bytes
  1038 ;; Hardware stack levels used: 1
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_main
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046     0585                     _SetPosition:	
  1047                           ;psect for function _SetPosition
  1048                           
  1049     0585                     l971:	
  1050                           ;incstack = 0
  1051                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1052                           
  1053                           
  1054                           ;shape.c: 4:     position->x = x;
  1055     0585  0870               	movf	SetPosition@position,w
  1056     0586  0084               	movwf	4
  1057     0587  1783               	bsf	3,7
  1058     0588  1C71               	btfss	SetPosition@position+1,0
  1059     0589  1383               	bcf	3,7
  1060     058A  0872               	movf	SetPosition@x,w
  1061     058B  0080               	movwf	0
  1062     058C  0A84               	incf	4,f
  1063     058D  0873               	movf	SetPosition@x+1,w
  1064     058E  0080               	movwf	0
  1065     058F                     l973:
  1066                           
  1067                           ;shape.c: 5:     position->y = y;
  1068     058F  0870               	movf	SetPosition@position,w
  1069     0590  3E02               	addlw	2
  1070     0591  00F6               	movwf	??_SetPosition
  1071     0592  0871               	movf	SetPosition@position+1,w
  1072     0593  1803               	skipnc
  1073     0594  3E01               	addlw	1
  1074     0595  3E00               	addlw	0
  1075     0596  00F7               	movwf	??_SetPosition+1
  1076     0597  0876               	movf	??_SetPosition,w
  1077     0598  0084               	movwf	4
  1078     0599  1783               	bsf	3,7
  1079     059A  1C77               	btfss	??_SetPosition+1,0
  1080     059B  1383               	bcf	3,7
  1081     059C  0874               	movf	SetPosition@y,w
  1082     059D  0080               	movwf	0
  1083     059E  0A84               	incf	4,f
  1084     059F  0875               	movf	SetPosition@y+1,w
  1085     05A0  0080               	movwf	0
  1086     05A1                     l99:
  1087     05A1  0008               	return
  1088     05A2                     __end_of_SetPosition:
  1089                           
  1090                           	psect	text4
  1091     04F0                     __ptext4:	
  1092 ;; *************** function _PortBInit *****************
  1093 ;; Defined at:
  1094 ;;		line 13 in file "portsinit.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;		None
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;		None
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		status,2
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1108 ;;      Params:         0       0       0       0       0
  1109 ;;      Locals:         0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0
  1111 ;;      Totals:         0       0       0       0       0
  1112 ;;Total ram usage:        0 bytes
  1113 ;; Hardware stack levels used: 1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121     04F0                     _PortBInit:	
  1122                           ;psect for function _PortBInit
  1123                           
  1124     04F0                     l969:	
  1125                           ;incstack = 0
  1126                           ; Regs used in _PortBInit: [status,2]
  1127                           
  1128                           
  1129                           ;portsinit.c: 14:     TRISB = 0x00;
  1130     04F0  1683               	bsf	3,5	;RP0=1, select bank1
  1131     04F1  1303               	bcf	3,6	;RP1=0, select bank1
  1132     04F2  0186               	clrf	6	;volatile
  1133                           
  1134                           ;portsinit.c: 15:     PORTB = 0x00;
  1135     04F3  1283               	bcf	3,5	;RP0=0, select bank0
  1136     04F4  1303               	bcf	3,6	;RP1=0, select bank0
  1137     04F5  0186               	clrf	6	;volatile
  1138     04F6                     l50:
  1139     04F6  0008               	return
  1140     04F7                     __end_of_PortBInit:
  1141                           
  1142                           	psect	text5
  1143     05A2                     __ptext5:	
  1144 ;; *************** function _MatrixInit *****************
  1145 ;; Defined at:
  1146 ;;		line 20 in file "matrix.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0, pclath, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1160 ;;      Params:         0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0
  1162 ;;      Temps:          3       0       0       0       0
  1163 ;;      Totals:         3       0       0       0       0
  1164 ;;Total ram usage:        3 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; Hardware stack levels required when called: 3
  1167 ;; This function calls:
  1168 ;;		_SendToSegment
  1169 ;;		_SpiClearMatrix
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175     05A2                     _MatrixInit:	
  1176                           ;psect for function _MatrixInit
  1177                           
  1178     05A2                     l955:	
  1179                           ;incstack = 0
  1180                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1181                           
  1182                           
  1183                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1184     05A2  3003               	movlw	3
  1185     05A3  00F9               	movwf	??_MatrixInit+2
  1186     05A4  3008               	movlw	8
  1187     05A5  00F8               	movwf	??_MatrixInit+1
  1188     05A6  3077               	movlw	119
  1189     05A7  00F7               	movwf	??_MatrixInit
  1190     05A8                     u157:
  1191     05A8  0BF7               	decfsz	??_MatrixInit,f
  1192     05A9  2DA8               	goto	u157
  1193     05AA  0BF8               	decfsz	??_MatrixInit+1,f
  1194     05AB  2DA8               	goto	u157
  1195     05AC  0BF9               	decfsz	??_MatrixInit+2,f
  1196     05AD  2DA8               	goto	u157
  1197     05AE                     l957:
  1198                           
  1199                           ;matrix.c: 22:     RA5=1;
  1200     05AE  1283               	bcf	3,5	;RP0=0, select bank0
  1201     05AF  1303               	bcf	3,6	;RP1=0, select bank0
  1202     05B0  1685               	bsf	5,5	;volatile
  1203     05B1                     l959:
  1204                           
  1205                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1206     05B1  3009               	movlw	9
  1207     05B2  00F1               	movwf	SendToSegment@segment
  1208     05B3  3000               	movlw	0
  1209     05B4  00F2               	movwf	SendToSegment@segment+1
  1210     05B5  01F3               	clrf	SendToSegment@data
  1211     05B6  120A  118A  2543  120A  118A  	fcall	_SendToSegment
  1212     05BB                     l961:
  1213                           
  1214                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1215     05BB  300B               	movlw	11
  1216     05BC  00F1               	movwf	SendToSegment@segment
  1217     05BD  3000               	movlw	0
  1218     05BE  00F2               	movwf	SendToSegment@segment+1
  1219     05BF  3007               	movlw	7
  1220     05C0  00F3               	movwf	SendToSegment@data
  1221     05C1  120A  118A  2543  120A  118A  	fcall	_SendToSegment
  1222     05C6                     l963:
  1223                           
  1224                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1225     05C6  300A               	movlw	10
  1226     05C7  00F1               	movwf	SendToSegment@segment
  1227     05C8  3000               	movlw	0
  1228     05C9  00F2               	movwf	SendToSegment@segment+1
  1229     05CA  3002               	movlw	2
  1230     05CB  00F3               	movwf	SendToSegment@data
  1231     05CC  120A  118A  2543  120A  118A  	fcall	_SendToSegment
  1232     05D1                     l965:
  1233                           
  1234                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1235     05D1  300C               	movlw	12
  1236     05D2  00F1               	movwf	SendToSegment@segment
  1237     05D3  3000               	movlw	0
  1238     05D4  00F2               	movwf	SendToSegment@segment+1
  1239     05D5  01F3               	clrf	SendToSegment@data
  1240     05D6  0AF3               	incf	SendToSegment@data,f
  1241     05D7  120A  118A  2543  120A  118A  	fcall	_SendToSegment
  1242     05DC                     l967:
  1243                           
  1244                           ;matrix.c: 27:     SpiClearMatrix();
  1245     05DC  120A  118A  2556  120A  118A  	fcall	_SpiClearMatrix
  1246     05E1                     l89:
  1247     05E1  0008               	return
  1248     05E2                     __end_of_MatrixInit:
  1249                           
  1250                           	psect	text6
  1251     074E                     __ptext6:	
  1252 ;; *************** function _ChangeOfCoordinates *****************
  1253 ;; Defined at:
  1254 ;;		line 19 in file "main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  _shapePositi    2   12[BANK0 ] PTR struct .
  1257 ;;		 -> main@shapePosition(4), 
  1258 ;;  _figure         1   14[BANK0 ] PTR unsigned char 
  1259 ;;		 -> main@square_1(3), 
  1260 ;;  _countElemnt    2   15[BANK0 ] int 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  i               2   22[BANK0 ] int 
  1263 ;;  step            2   20[BANK0 ] int 
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1273 ;;      Params:         0       5       0       0       0
  1274 ;;      Locals:         0       4       0       0       0
  1275 ;;      Temps:          0       3       0       0       0
  1276 ;;      Totals:         0      12       0       0       0
  1277 ;;Total ram usage:       12 bytes
  1278 ;; Hardware stack levels used: 1
  1279 ;; Hardware stack levels required when called: 4
  1280 ;; This function calls:
  1281 ;;		_MovieShape
  1282 ;; This function is called by:
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287     074E                     _ChangeOfCoordinates:	
  1288                           ;psect for function _ChangeOfCoordinates
  1289                           
  1290     074E                     l905:	
  1291                           ;incstack = 0
  1292                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1293                           
  1294                           
  1295                           ;main.c: 20:     const unsigned long delay = 100;;main.c: 21:     int step = 0;
  1296     074E  1283               	bcf	3,5	;RP0=0, select bank0
  1297     074F  1303               	bcf	3,6	;RP1=0, select bank0
  1298     0750  01B4               	clrf	ChangeOfCoordinates@step
  1299     0751  01B5               	clrf	ChangeOfCoordinates@step+1
  1300     0752                     l17:	
  1301                           ;main.c: 22:         do{
  1302                           
  1303                           
  1304                           ;main.c: 23:             for(int i = 0; i < 5; i++){
  1305     0752  1283               	bcf	3,5	;RP0=0, select bank0
  1306     0753  1303               	bcf	3,6	;RP1=0, select bank0
  1307     0754  01B6               	clrf	ChangeOfCoordinates@i
  1308     0755  01B7               	clrf	ChangeOfCoordinates@i+1
  1309     0756  2F9B               	goto	l921
  1310     0757                     l911:
  1311                           
  1312                           ;main.c: 26:                         MovieShape(right, _shapePosition, _figure, _countEl
      +                          emntArray);
  1313     0757  082C               	movf	ChangeOfCoordinates@_shapePosition,w
  1314     0758  00A4               	movwf	MovieShape@_shapePosition
  1315     0759  082D               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1316     075A  00A5               	movwf	MovieShape@_shapePosition+1
  1317     075B  082E               	movf	ChangeOfCoordinates@_figure,w
  1318     075C  00A6               	movwf	MovieShape@shapeArray
  1319     075D  0830               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1320     075E  00A8               	movwf	MovieShape@countElemntArray+1
  1321     075F  082F               	movf	ChangeOfCoordinates@_countElemntArray,w
  1322     0760  00A7               	movwf	MovieShape@countElemntArray
  1323     0761  3003               	movlw	3
  1324     0762  120A  118A  2671  120A  118A  	fcall	_MovieShape
  1325                           
  1326                           ;main.c: 27:                         break;
  1327     0767  2FB0               	goto	l923
  1328     0768                     l913:
  1329                           
  1330                           ;main.c: 29:                         MovieShape(down, _shapePosition, _figure, _countEle
      +                          mntArray);
  1331     0768  082C               	movf	ChangeOfCoordinates@_shapePosition,w
  1332     0769  00A4               	movwf	MovieShape@_shapePosition
  1333     076A  082D               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1334     076B  00A5               	movwf	MovieShape@_shapePosition+1
  1335     076C  082E               	movf	ChangeOfCoordinates@_figure,w
  1336     076D  00A6               	movwf	MovieShape@shapeArray
  1337     076E  0830               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1338     076F  00A8               	movwf	MovieShape@countElemntArray+1
  1339     0770  082F               	movf	ChangeOfCoordinates@_countElemntArray,w
  1340     0771  00A7               	movwf	MovieShape@countElemntArray
  1341     0772  3000               	movlw	0
  1342     0773  120A  118A  2671  120A  118A  	fcall	_MovieShape
  1343                           
  1344                           ;main.c: 30:                         break;
  1345     0778  2FB0               	goto	l923
  1346     0779                     l915:
  1347                           
  1348                           ;main.c: 32:                         MovieShape(left, _shapePosition, _figure, _countEle
      +                          mntArray);
  1349     0779  082C               	movf	ChangeOfCoordinates@_shapePosition,w
  1350     077A  00A4               	movwf	MovieShape@_shapePosition
  1351     077B  082D               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1352     077C  00A5               	movwf	MovieShape@_shapePosition+1
  1353     077D  082E               	movf	ChangeOfCoordinates@_figure,w
  1354     077E  00A6               	movwf	MovieShape@shapeArray
  1355     077F  0830               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1356     0780  00A8               	movwf	MovieShape@countElemntArray+1
  1357     0781  082F               	movf	ChangeOfCoordinates@_countElemntArray,w
  1358     0782  00A7               	movwf	MovieShape@countElemntArray
  1359     0783  3002               	movlw	2
  1360     0784  120A  118A  2671  120A  118A  	fcall	_MovieShape
  1361                           
  1362                           ;main.c: 33:                         break;
  1363     0789  2FB0               	goto	l923
  1364     078A                     l917:
  1365                           
  1366                           ;main.c: 35:                         MovieShape(up, _shapePosition, _figure, _countElemn
      +                          tArray);
  1367     078A  082C               	movf	ChangeOfCoordinates@_shapePosition,w
  1368     078B  00A4               	movwf	MovieShape@_shapePosition
  1369     078C  082D               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1370     078D  00A5               	movwf	MovieShape@_shapePosition+1
  1371     078E  082E               	movf	ChangeOfCoordinates@_figure,w
  1372     078F  00A6               	movwf	MovieShape@shapeArray
  1373     0790  0830               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1374     0791  00A8               	movwf	MovieShape@countElemntArray+1
  1375     0792  082F               	movf	ChangeOfCoordinates@_countElemntArray,w
  1376     0793  00A7               	movwf	MovieShape@countElemntArray
  1377     0794  3001               	movlw	1
  1378     0795  120A  118A  2671  120A  118A  	fcall	_MovieShape
  1379                           
  1380                           ;main.c: 36:                         break;
  1381     079A  2FB0               	goto	l923
  1382     079B                     l921:
  1383                           
  1384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1385                           ; Switch size 1, requested type "simple"
  1386                           ; Number of cases is 1, Range of values is 0 to 0
  1387                           ; switch strategies available:
  1388                           ; Name         Instructions Cycles
  1389                           ; simple_byte            4     3 (average)
  1390                           ; direct_byte           11     8 (fixed)
  1391                           ; jumptable            260     6 (fixed)
  1392                           ;	Chosen strategy is simple_byte
  1393     079B  1283               	bcf	3,5	;RP0=0, select bank0
  1394     079C  1303               	bcf	3,6	;RP1=0, select bank0
  1395     079D  0835               	movf	ChangeOfCoordinates@step+1,w
  1396     079E  3A00               	xorlw	0	; case 0
  1397     079F  1903               	skipnz
  1398     07A0  2FA2               	goto	l1035
  1399     07A1  2FB0               	goto	l923
  1400     07A2                     l1035:
  1401                           
  1402                           ; Switch size 1, requested type "simple"
  1403                           ; Number of cases is 4, Range of values is 0 to 3
  1404                           ; switch strategies available:
  1405                           ; Name         Instructions Cycles
  1406                           ; simple_byte           13     7 (average)
  1407                           ; direct_byte           20     8 (fixed)
  1408                           ; jumptable            260     6 (fixed)
  1409                           ;	Chosen strategy is simple_byte
  1410     07A2  0834               	movf	ChangeOfCoordinates@step,w
  1411     07A3  3A00               	xorlw	0	; case 0
  1412     07A4  1903               	skipnz
  1413     07A5  2F57               	goto	l911
  1414     07A6  3A01               	xorlw	1	; case 1
  1415     07A7  1903               	skipnz
  1416     07A8  2F68               	goto	l913
  1417     07A9  3A03               	xorlw	3	; case 2
  1418     07AA  1903               	skipnz
  1419     07AB  2F79               	goto	l915
  1420     07AC  3A01               	xorlw	1	; case 3
  1421     07AD  1903               	skipnz
  1422     07AE  2F8A               	goto	l917
  1423     07AF  2FB0               	goto	l923
  1424     07B0                     l923:
  1425                           
  1426                           ;main.c: 38:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1427     07B0  3003               	movlw	3
  1428     07B1  1283               	bcf	3,5	;RP0=0, select bank0
  1429     07B2  1303               	bcf	3,6	;RP1=0, select bank0
  1430     07B3  00B3               	movwf	??_ChangeOfCoordinates+2
  1431     07B4  3008               	movlw	8
  1432     07B5  00B2               	movwf	??_ChangeOfCoordinates+1
  1433     07B6  3076               	movlw	118
  1434     07B7  00B1               	movwf	??_ChangeOfCoordinates
  1435     07B8                     u167:
  1436     07B8  0BB1               	decfsz	??_ChangeOfCoordinates,f
  1437     07B9  2FB8               	goto	u167
  1438     07BA  0BB2               	decfsz	??_ChangeOfCoordinates+1,f
  1439     07BB  2FB8               	goto	u167
  1440     07BC  0BB3               	decfsz	??_ChangeOfCoordinates+2,f
  1441     07BD  2FB8               	goto	u167
  1442     07BE  0000               	nop
  1443                           
  1444                           ;main.c: 39:             }
  1445     07BF  3001               	movlw	1
  1446     07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1447     07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1448     07C2  07B6               	addwf	ChangeOfCoordinates@i,f
  1449     07C3  1803               	skipnc
  1450     07C4  0AB7               	incf	ChangeOfCoordinates@i+1,f
  1451     07C5  3000               	movlw	0
  1452     07C6  07B7               	addwf	ChangeOfCoordinates@i+1,f
  1453     07C7                     l925:
  1454     07C7  0837               	movf	ChangeOfCoordinates@i+1,w
  1455     07C8  3A80               	xorlw	128
  1456     07C9  00FF               	movwf	btemp+1
  1457     07CA  3080               	movlw	128
  1458     07CB  027F               	subwf	btemp+1,w
  1459     07CC  1D03               	skipz
  1460     07CD  2FD0               	goto	u125
  1461     07CE  3005               	movlw	5
  1462     07CF  0236               	subwf	ChangeOfCoordinates@i,w
  1463     07D0                     u125:
  1464     07D0  1C03               	skipc
  1465     07D1  2FD3               	goto	u121
  1466     07D2  2FD4               	goto	u120
  1467     07D3                     u121:
  1468     07D3  2F9B               	goto	l921
  1469     07D4                     u120:
  1470     07D4                     l927:
  1471                           
  1472                           ;main.c: 40:             step++;
  1473     07D4  3001               	movlw	1
  1474     07D5  1283               	bcf	3,5	;RP0=0, select bank0
  1475     07D6  1303               	bcf	3,6	;RP1=0, select bank0
  1476     07D7  07B4               	addwf	ChangeOfCoordinates@step,f
  1477     07D8  1803               	skipnc
  1478     07D9  0AB5               	incf	ChangeOfCoordinates@step+1,f
  1479     07DA  3000               	movlw	0
  1480     07DB  07B5               	addwf	ChangeOfCoordinates@step+1,f
  1481     07DC                     l929:
  1482                           
  1483                           ;main.c: 41:         } while(step < 4);
  1484     07DC  0835               	movf	ChangeOfCoordinates@step+1,w
  1485     07DD  3A80               	xorlw	128
  1486     07DE  00FF               	movwf	btemp+1
  1487     07DF  3080               	movlw	128
  1488     07E0  027F               	subwf	btemp+1,w
  1489     07E1  1D03               	skipz
  1490     07E2  2FE5               	goto	u135
  1491     07E3  3004               	movlw	4
  1492     07E4  0234               	subwf	ChangeOfCoordinates@step,w
  1493     07E5                     u135:
  1494     07E5  1C03               	skipc
  1495     07E6  2FE8               	goto	u131
  1496     07E7  2FE9               	goto	u130
  1497     07E8                     u131:
  1498     07E8  2F52               	goto	l17
  1499     07E9                     u130:
  1500     07E9                     l27:
  1501     07E9  0008               	return
  1502     07EA                     __end_of_ChangeOfCoordinates:
  1503                           
  1504                           	psect	text7
  1505     0671                     __ptext7:	
  1506 ;; *************** function _MovieShape *****************
  1507 ;; Defined at:
  1508 ;;		line 32 in file "shape.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  dir             1    wreg     enum E885
  1511 ;;  _shapePositi    2    4[BANK0 ] PTR struct .
  1512 ;;		 -> main@shapePosition(4), 
  1513 ;;  shapeArray      1    6[BANK0 ] PTR unsigned char 
  1514 ;;		 -> main@square_1(3), 
  1515 ;;  countElemntA    2    7[BANK0 ] int 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  dir             1   11[BANK0 ] enum E885
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1527 ;;      Params:         0       5       0       0       0
  1528 ;;      Locals:         0       1       0       0       0
  1529 ;;      Temps:          0       2       0       0       0
  1530 ;;      Totals:         0       8       0       0       0
  1531 ;;Total ram usage:        8 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; Hardware stack levels required when called: 3
  1534 ;; This function calls:
  1535 ;;		_MovieDown
  1536 ;;		_MovieLeft
  1537 ;;		_MovieRigth
  1538 ;;		_MovieUp
  1539 ;;		_ShowShape
  1540 ;;		_SpiClearMatrix
  1541 ;; This function is called by:
  1542 ;;		_ChangeOfCoordinates
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546     0671                     _MovieShape:	
  1547                           ;psect for function _MovieShape
  1548                           
  1549                           
  1550                           ;incstack = 0
  1551                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1552                           ;MovieShape@dir stored from wreg
  1553     0671  1283               	bcf	3,5	;RP0=0, select bank0
  1554     0672  1303               	bcf	3,6	;RP1=0, select bank0
  1555     0673  00AB               	movwf	MovieShape@dir
  1556     0674                     l881:
  1557                           
  1558                           ;shape.c: 34:     switch (dir){
  1559     0674  2E9D               	goto	l893
  1560     0675                     l883:
  1561                           
  1562                           ;shape.c: 36:             MovieDown(_shapePosition);
  1563     0675  0824               	movf	MovieShape@_shapePosition,w
  1564     0676  00F0               	movwf	MovieDown@_shapePosition
  1565     0677  0825               	movf	MovieShape@_shapePosition+1,w
  1566     0678  00F1               	movwf	MovieDown@_shapePosition+1
  1567     0679  120A  118A  2530  120A  118A  	fcall	_MovieDown
  1568                           
  1569                           ;shape.c: 37:             break;
  1570     067E  2EB6               	goto	l895
  1571     067F                     l885:
  1572                           
  1573                           ;shape.c: 39:             MovieUp(_shapePosition);
  1574     067F  0824               	movf	MovieShape@_shapePosition,w
  1575     0680  00F0               	movwf	MovieUp@_shapePosition
  1576     0681  0825               	movf	MovieShape@_shapePosition+1,w
  1577     0682  00F1               	movwf	MovieUp@_shapePosition+1
  1578     0683  120A  118A  256C  120A  118A  	fcall	_MovieUp
  1579                           
  1580                           ;shape.c: 40:             break;
  1581     0688  2EB6               	goto	l895
  1582     0689                     l887:
  1583                           
  1584                           ;shape.c: 42:             MovieLeft(_shapePosition);
  1585     0689  0824               	movf	MovieShape@_shapePosition,w
  1586     068A  00F0               	movwf	MovieLeft@_shapePosition
  1587     068B  0825               	movf	MovieShape@_shapePosition+1,w
  1588     068C  00F1               	movwf	MovieLeft@_shapePosition+1
  1589     068D  120A  118A  250D  120A  118A  	fcall	_MovieLeft
  1590                           
  1591                           ;shape.c: 43:             break;
  1592     0692  2EB6               	goto	l895
  1593     0693                     l889:
  1594                           
  1595                           ;shape.c: 45:             MovieRigth(_shapePosition);
  1596     0693  0824               	movf	MovieShape@_shapePosition,w
  1597     0694  00F0               	movwf	MovieRigth@_shapePosition
  1598     0695  0825               	movf	MovieShape@_shapePosition+1,w
  1599     0696  00F1               	movwf	MovieRigth@_shapePosition+1
  1600     0697  120A  118A  24F7  120A  118A  	fcall	_MovieRigth
  1601                           
  1602                           ;shape.c: 46:             break;
  1603     069C  2EB6               	goto	l895
  1604     069D                     l893:
  1605     069D  082B               	movf	MovieShape@dir,w
  1606     069E  00A9               	movwf	??_MovieShape
  1607     069F  01AA               	clrf	??_MovieShape+1
  1608                           
  1609                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1610                           ; Switch size 1, requested type "simple"
  1611                           ; Number of cases is 1, Range of values is 0 to 0
  1612                           ; switch strategies available:
  1613                           ; Name         Instructions Cycles
  1614                           ; simple_byte            4     3 (average)
  1615                           ; direct_byte           11     8 (fixed)
  1616                           ; jumptable            260     6 (fixed)
  1617                           ;	Chosen strategy is simple_byte
  1618     06A0  082A               	movf	??_MovieShape+1,w
  1619     06A1  3A00               	xorlw	0	; case 0
  1620     06A2  1903               	skipnz
  1621     06A3  2EA5               	goto	l1037
  1622     06A4  2EB6               	goto	l895
  1623     06A5                     l1037:
  1624                           
  1625                           ; Switch size 1, requested type "simple"
  1626                           ; Number of cases is 5, Range of values is 0 to 4
  1627                           ; switch strategies available:
  1628                           ; Name         Instructions Cycles
  1629                           ; simple_byte           16     9 (average)
  1630                           ; direct_byte           23     8 (fixed)
  1631                           ; jumptable            260     6 (fixed)
  1632                           ;	Chosen strategy is simple_byte
  1633     06A5  0829               	movf	??_MovieShape,w
  1634     06A6  3A00               	xorlw	0	; case 0
  1635     06A7  1903               	skipnz
  1636     06A8  2E75               	goto	l883
  1637     06A9  3A01               	xorlw	1	; case 1
  1638     06AA  1903               	skipnz
  1639     06AB  2E7F               	goto	l885
  1640     06AC  3A03               	xorlw	3	; case 2
  1641     06AD  1903               	skipnz
  1642     06AE  2E89               	goto	l887
  1643     06AF  3A01               	xorlw	1	; case 3
  1644     06B0  1903               	skipnz
  1645     06B1  2E93               	goto	l889
  1646     06B2  3A07               	xorlw	7	; case 4
  1647     06B3  1903               	skipnz
  1648     06B4  2EB6               	goto	l895
  1649     06B5  2EB6               	goto	l895
  1650     06B6                     l895:
  1651                           
  1652                           ;shape.c: 51:     SpiClearMatrix();
  1653     06B6  120A  118A  2556  120A  118A  	fcall	_SpiClearMatrix
  1654     06BB                     l897:
  1655                           
  1656                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  1657     06BB  1283               	bcf	3,5	;RP0=0, select bank0
  1658     06BC  1303               	bcf	3,6	;RP1=0, select bank0
  1659     06BD  0824               	movf	MovieShape@_shapePosition,w
  1660     06BE  00F4               	movwf	ShowShape@coord
  1661     06BF  0825               	movf	MovieShape@_shapePosition+1,w
  1662     06C0  00F5               	movwf	ShowShape@coord+1
  1663     06C1  0828               	movf	MovieShape@countElemntArray+1,w
  1664     06C2  00F7               	movwf	ShowShape@countElemntArray+1
  1665     06C3  0827               	movf	MovieShape@countElemntArray,w
  1666     06C4  00F6               	movwf	ShowShape@countElemntArray
  1667     06C5  0826               	movf	MovieShape@shapeArray,w
  1668     06C6  00F8               	movwf	ShowShape@shapeArray
  1669     06C7  120A  118A  26CD  120A  118A  	fcall	_ShowShape
  1670     06CC                     l127:
  1671     06CC  0008               	return
  1672     06CD                     __end_of_MovieShape:
  1673                           
  1674                           	psect	text8
  1675     0556                     __ptext8:	
  1676 ;; *************** function _SpiClearMatrix *****************
  1677 ;; Defined at:
  1678 ;;		line 10 in file "matrix.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;		None
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;  i               1    6[COMMON] unsigned char 
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      void 
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, pclath, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1692 ;;      Params:         0       0       0       0       0
  1693 ;;      Locals:         1       0       0       0       0
  1694 ;;      Temps:          2       0       0       0       0
  1695 ;;      Totals:         3       0       0       0       0
  1696 ;;Total ram usage:        3 bytes
  1697 ;; Hardware stack levels used: 1
  1698 ;; Hardware stack levels required when called: 2
  1699 ;; This function calls:
  1700 ;;		_SendToSegment
  1701 ;; This function is called by:
  1702 ;;		_MatrixInit
  1703 ;;		_MovieShape
  1704 ;; This function uses a non-reentrant model
  1705 ;;
  1706                           
  1707     0556                     _SpiClearMatrix:	
  1708                           ;psect for function _SpiClearMatrix
  1709                           
  1710     0556                     l855:	
  1711                           ;incstack = 0
  1712                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  1713                           
  1714                           
  1715                           ;matrix.c: 12:   char i = 8;
  1716     0556  3008               	movlw	8
  1717     0557  00F6               	movwf	SpiClearMatrix@i
  1718     0558                     l857:
  1719                           
  1720                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  1721     0558  0876               	movf	SpiClearMatrix@i,w
  1722     0559  00F4               	movwf	??_SpiClearMatrix
  1723     055A  01F5               	clrf	??_SpiClearMatrix+1
  1724     055B  0874               	movf	??_SpiClearMatrix,w
  1725     055C  00F1               	movwf	SendToSegment@segment
  1726     055D  0875               	movf	??_SpiClearMatrix+1,w
  1727     055E  00F2               	movwf	SendToSegment@segment+1
  1728     055F  01F3               	clrf	SendToSegment@data
  1729     0560  120A  118A  2543  120A  118A  	fcall	_SendToSegment
  1730     0565                     l859:
  1731                           
  1732                           ;matrix.c: 16:   } while (--i);
  1733     0565  3001               	movlw	1
  1734     0566  02F6               	subwf	SpiClearMatrix@i,f
  1735     0567  1D03               	btfss	3,2
  1736     0568  2D6A               	goto	u91
  1737     0569  2D6B               	goto	u90
  1738     056A                     u91:
  1739     056A  2D58               	goto	l857
  1740     056B                     u90:
  1741     056B                     l86:
  1742     056B  0008               	return
  1743     056C                     __end_of_SpiClearMatrix:
  1744                           
  1745                           	psect	text9
  1746     06CD                     __ptext9:	
  1747 ;; *************** function _ShowShape *****************
  1748 ;; Defined at:
  1749 ;;		line 8 in file "shape.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  coord           2    4[COMMON] PTR struct .
  1752 ;;		 -> main@shapePosition(4), 
  1753 ;;  countElemntA    2    6[COMMON] int 
  1754 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
  1755 ;;		 -> main@square_1(3), 
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;  pos             2    2[BANK0 ] int 
  1758 ;;  _pos            2    0[BANK0 ] int 
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1763 ;; Tracked objects:
  1764 ;;		On entry : 0/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1768 ;;      Params:         5       0       0       0       0
  1769 ;;      Locals:         0       4       0       0       0
  1770 ;;      Temps:          5       0       0       0       0
  1771 ;;      Totals:        10       4       0       0       0
  1772 ;;Total ram usage:       14 bytes
  1773 ;; Hardware stack levels used: 1
  1774 ;; Hardware stack levels required when called: 2
  1775 ;; This function calls:
  1776 ;;		_SendToSegment
  1777 ;; This function is called by:
  1778 ;;		_MovieShape
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782     06CD                     _ShowShape:	
  1783                           ;psect for function _ShowShape
  1784                           
  1785     06CD                     l861:	
  1786                           ;incstack = 0
  1787                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1788                           
  1789     06CD                     l863:
  1790                           
  1791                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  1792     06CD  0874               	movf	ShowShape@coord,w
  1793     06CE  0084               	movwf	4
  1794     06CF  1783               	bsf	3,7
  1795     06D0  1C75               	btfss	ShowShape@coord+1,0
  1796     06D1  1383               	bcf	3,7
  1797     06D2  0800               	movf	0,w
  1798     06D3  00F9               	movwf	??_ShowShape
  1799     06D4  0A84               	incf	4,f
  1800     06D5  0800               	movf	0,w
  1801     06D6  00FA               	movwf	??_ShowShape+1
  1802     06D7  0879               	movf	??_ShowShape,w
  1803     06D8  3E01               	addlw	1
  1804     06D9  1283               	bcf	3,5	;RP0=0, select bank0
  1805     06DA  1303               	bcf	3,6	;RP1=0, select bank0
  1806     06DB  00A2               	movwf	ShowShape@pos
  1807     06DC  087A               	movf	??_ShowShape+1,w
  1808     06DD  1803               	skipnc
  1809     06DE  3E01               	addlw	1
  1810     06DF  3E00               	addlw	0
  1811     06E0  00A3               	movwf	ShowShape@pos+1
  1812     06E1  2F2D               	goto	l871
  1813     06E2                     l865:
  1814                           
  1815                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  1816     06E2  0874               	movf	ShowShape@coord,w
  1817     06E3  0084               	movwf	4
  1818     06E4  1783               	bsf	3,7
  1819     06E5  1C75               	btfss	ShowShape@coord+1,0
  1820     06E6  1383               	bcf	3,7
  1821     06E7  0800               	movf	0,w
  1822     06E8  00F9               	movwf	??_ShowShape
  1823     06E9  0A84               	incf	4,f
  1824     06EA  0800               	movf	0,w
  1825     06EB  00FA               	movwf	??_ShowShape+1
  1826     06EC  0879               	movf	??_ShowShape,w
  1827     06ED  1283               	bcf	3,5	;RP0=0, select bank0
  1828     06EE  1303               	bcf	3,6	;RP1=0, select bank0
  1829     06EF  0222               	subwf	ShowShape@pos,w
  1830     06F0  00FB               	movwf	??_ShowShape+2
  1831     06F1  087A               	movf	??_ShowShape+1,w
  1832     06F2  1C03               	skipc
  1833     06F3  0A7A               	incf	??_ShowShape+1,w
  1834     06F4  0223               	subwf	ShowShape@pos+1,w
  1835     06F5  00FC               	movwf	??_ShowShape+3
  1836     06F6  087B               	movf	??_ShowShape+2,w
  1837     06F7  3EFF               	addlw	255
  1838     06F8  00A0               	movwf	ShowShape@_pos
  1839     06F9  087C               	movf	??_ShowShape+3,w
  1840     06FA  1803               	skipnc
  1841     06FB  3E01               	addlw	1
  1842     06FC  3EFF               	addlw	255
  1843     06FD  00A1               	movwf	ShowShape@_pos+1
  1844     06FE                     l867:
  1845                           
  1846                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  1847     06FE  0823               	movf	ShowShape@pos+1,w
  1848     06FF  00F2               	movwf	SendToSegment@segment+1
  1849     0700  0822               	movf	ShowShape@pos,w
  1850     0701  00F1               	movwf	SendToSegment@segment
  1851     0702  0820               	movf	ShowShape@_pos,w
  1852     0703  0778               	addwf	ShowShape@shapeArray,w
  1853     0704  00F9               	movwf	??_ShowShape
  1854     0705  0879               	movf	??_ShowShape,w
  1855     0706  0084               	movwf	4
  1856     0707  1383               	bcf	3,7	;select IRP bank0
  1857     0708  0800               	movf	0,w
  1858     0709  00FA               	movwf	??_ShowShape+1
  1859     070A  0874               	movf	ShowShape@coord,w
  1860     070B  3E02               	addlw	2
  1861     070C  00FB               	movwf	??_ShowShape+2
  1862     070D  0875               	movf	ShowShape@coord+1,w
  1863     070E  1803               	skipnc
  1864     070F  3E01               	addlw	1
  1865     0710  3E00               	addlw	0
  1866     0711  00FC               	movwf	??_ShowShape+3
  1867     0712  087B               	movf	??_ShowShape+2,w
  1868     0713  0084               	movwf	4
  1869     0714  1783               	bsf	3,7
  1870     0715  1C7C               	btfss	??_ShowShape+3,0
  1871     0716  1383               	bcf	3,7
  1872     0717  0A00               	incf	0,w
  1873     0718  2F1B               	goto	u104
  1874     0719                     u105:
  1875     0719  1003               	clrc
  1876     071A  0DFA               	rlf	??_ShowShape+1,f
  1877     071B                     u104:
  1878     071B  3EFF               	addlw	-1
  1879     071C  1D03               	skipz
  1880     071D  2F19               	goto	u105
  1881     071E  087A               	movf	??_ShowShape+1,w
  1882     071F  00F3               	movwf	SendToSegment@data
  1883     0720  120A  118A  2543  120A  118A  	fcall	_SendToSegment
  1884     0725                     l869:
  1885                           
  1886                           ;shape.c: 13:     }
  1887     0725  3001               	movlw	1
  1888     0726  1283               	bcf	3,5	;RP0=0, select bank0
  1889     0727  1303               	bcf	3,6	;RP1=0, select bank0
  1890     0728  07A2               	addwf	ShowShape@pos,f
  1891     0729  1803               	skipnc
  1892     072A  0AA3               	incf	ShowShape@pos+1,f
  1893     072B  3000               	movlw	0
  1894     072C  07A3               	addwf	ShowShape@pos+1,f
  1895     072D                     l871:
  1896     072D  0874               	movf	ShowShape@coord,w
  1897     072E  0084               	movwf	4
  1898     072F  1783               	bsf	3,7
  1899     0730  1C75               	btfss	ShowShape@coord+1,0
  1900     0731  1383               	bcf	3,7
  1901     0732  0800               	movf	0,w
  1902     0733  00F9               	movwf	??_ShowShape
  1903     0734  0A84               	incf	4,f
  1904     0735  0800               	movf	0,w
  1905     0736  00FA               	movwf	??_ShowShape+1
  1906     0737  0876               	movf	ShowShape@countElemntArray,w
  1907     0738  0779               	addwf	??_ShowShape,w
  1908     0739  00FB               	movwf	??_ShowShape+2
  1909     073A  0877               	movf	ShowShape@countElemntArray+1,w
  1910     073B  1803               	skipnc
  1911     073C  0A77               	incf	ShowShape@countElemntArray+1,w
  1912     073D  077A               	addwf	??_ShowShape+1,w
  1913     073E  00FC               	movwf	??_ShowShape+3
  1914     073F  087C               	movf	??_ShowShape+3,w
  1915     0740  3A80               	xorlw	128
  1916     0741  00FD               	movwf	??_ShowShape+4
  1917     0742  0823               	movf	ShowShape@pos+1,w
  1918     0743  3A80               	xorlw	128
  1919     0744  027D               	subwf	??_ShowShape+4,w
  1920     0745  1D03               	skipz
  1921     0746  2F49               	goto	u115
  1922     0747  0822               	movf	ShowShape@pos,w
  1923     0748  027B               	subwf	??_ShowShape+2,w
  1924     0749                     u115:
  1925     0749  1803               	skipnc
  1926     074A  2F4C               	goto	u111
  1927     074B  2F4D               	goto	u110
  1928     074C                     u111:
  1929     074C  2EE2               	goto	l865
  1930     074D                     u110:
  1931     074D                     l105:
  1932     074D  0008               	return
  1933     074E                     __end_of_ShowShape:
  1934                           
  1935                           	psect	text10
  1936     0543                     __ptext10:	
  1937 ;; *************** function _SendToSegment *****************
  1938 ;; Defined at:
  1939 ;;		line 34 in file "matrix.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  segment         2    1[COMMON] int 
  1942 ;;  data            1    3[COMMON] unsigned char 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0, pclath, cstack
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         3       0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0
  1957 ;;      Totals:         3       0       0       0       0
  1958 ;;Total ram usage:        3 bytes
  1959 ;; Hardware stack levels used: 1
  1960 ;; Hardware stack levels required when called: 1
  1961 ;; This function calls:
  1962 ;;		_SpiSendByte
  1963 ;; This function is called by:
  1964 ;;		_SpiClearMatrix
  1965 ;;		_MatrixInit
  1966 ;;		_ShowShape
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970     0543                     _SendToSegment:	
  1971                           ;psect for function _SendToSegment
  1972                           
  1973     0543                     l849:	
  1974                           ;incstack = 0
  1975                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1976                           
  1977                           
  1978                           ;matrix.c: 35:     RA5 = 0;
  1979     0543  1283               	bcf	3,5	;RP0=0, select bank0
  1980     0544  1303               	bcf	3,6	;RP1=0, select bank0
  1981     0545  1285               	bcf	5,5	;volatile
  1982     0546                     l851:
  1983                           
  1984                           ;matrix.c: 36:     SpiSendByte((char)segment);
  1985     0546  0871               	movf	SendToSegment@segment,w
  1986     0547  120A  118A  2502  120A  118A  	fcall	_SpiSendByte
  1987                           
  1988                           ;matrix.c: 37:     SpiSendByte(data);
  1989     054C  0873               	movf	SendToSegment@data,w
  1990     054D  120A  118A  2502  120A  118A  	fcall	_SpiSendByte
  1991     0552                     l853:
  1992                           
  1993                           ;matrix.c: 38:     RA5 = 1;
  1994     0552  1283               	bcf	3,5	;RP0=0, select bank0
  1995     0553  1303               	bcf	3,6	;RP1=0, select bank0
  1996     0554  1685               	bsf	5,5	;volatile
  1997     0555                     l92:
  1998     0555  0008               	return
  1999     0556                     __end_of_SendToSegment:
  2000                           
  2001                           	psect	text11
  2002     0502                     __ptext11:	
  2003 ;; *************** function _SpiSendByte *****************
  2004 ;; Defined at:
  2005 ;;		line 18 in file "spi.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  data            1    wreg     unsigned char 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  data            1    0[COMMON] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2019 ;;      Params:         0       0       0       0       0
  2020 ;;      Locals:         1       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0
  2022 ;;      Totals:         1       0       0       0       0
  2023 ;;Total ram usage:        1 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; This function calls:
  2026 ;;		Nothing
  2027 ;; This function is called by:
  2028 ;;		_SendToSegment
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032     0502                     _SpiSendByte:	
  2033                           ;psect for function _SpiSendByte
  2034                           
  2035                           
  2036                           ;incstack = 0
  2037                           ; Regs used in _SpiSendByte: [wreg]
  2038                           ;SpiSendByte@data stored from wreg
  2039     0502  00F0               	movwf	SpiSendByte@data
  2040     0503                     l847:
  2041                           
  2042                           ;spi.c: 19:     SSPBUF = data;
  2043     0503  0870               	movf	SpiSendByte@data,w
  2044     0504  1283               	bcf	3,5	;RP0=0, select bank0
  2045     0505  1303               	bcf	3,6	;RP1=0, select bank0
  2046     0506  0093               	movwf	19	;volatile
  2047     0507                     l70:	
  2048                           ;spi.c: 20:     while (!SSPIF);
  2049                           
  2050     0507  1D8C               	btfss	12,3	;volatile
  2051     0508  2D0A               	goto	u81
  2052     0509  2D0B               	goto	u80
  2053     050A                     u81:
  2054     050A  2D07               	goto	l70
  2055     050B                     u80:
  2056     050B                     l72:
  2057                           
  2058                           ;spi.c: 21:     SSPIF = 0;
  2059     050B  118C               	bcf	12,3	;volatile
  2060     050C                     l73:
  2061     050C  0008               	return
  2062     050D                     __end_of_SpiSendByte:
  2063                           
  2064                           	psect	text12
  2065     056C                     __ptext12:	
  2066 ;; *************** function _MovieUp *****************
  2067 ;; Defined at:
  2068 ;;		line 20 in file "shape.c"
  2069 ;; Parameters:    Size  Location     Type
  2070 ;;  _shapePositi    2    0[COMMON] PTR struct .
  2071 ;;		 -> main@shapePosition(4), 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2083 ;;      Params:         2       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0
  2085 ;;      Temps:          2       0       0       0       0
  2086 ;;      Totals:         4       0       0       0       0
  2087 ;;Total ram usage:        4 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; This function calls:
  2090 ;;		Nothing
  2091 ;; This function is called by:
  2092 ;;		_MovieShape
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096     056C                     _MovieUp:	
  2097                           ;psect for function _MovieUp
  2098                           
  2099     056C                     l875:	
  2100                           ;incstack = 0
  2101                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  2102                           
  2103                           
  2104                           ;shape.c: 21:     _shapePosition->y--;
  2105     056C  0870               	movf	MovieUp@_shapePosition,w
  2106     056D  3E02               	addlw	2
  2107     056E  00F2               	movwf	??_MovieUp
  2108     056F  0871               	movf	MovieUp@_shapePosition+1,w
  2109     0570  1803               	skipnc
  2110     0571  3E01               	addlw	1
  2111     0572  3E00               	addlw	0
  2112     0573  00F3               	movwf	??_MovieUp+1
  2113     0574  0872               	movf	??_MovieUp,w
  2114     0575  0084               	movwf	4
  2115     0576  1783               	bsf	3,7
  2116     0577  1C73               	btfss	??_MovieUp+1,0
  2117     0578  1383               	bcf	3,7
  2118     0579  30FF               	movlw	255
  2119     057A  0780               	addwf	0,f
  2120     057B  0F84               	incfsz	4,f
  2121     057C  0800               	movf	0,w
  2122     057D  1803               	skipnc
  2123     057E  0A00               	incf	0,w
  2124     057F  00FF               	movwf	btemp+1
  2125     0580  30FF               	movlw	255
  2126     0581  077F               	addwf	btemp+1,w
  2127     0582  0080               	movwf	0
  2128     0583  0384               	decf	4,f
  2129     0584                     l111:
  2130     0584  0008               	return
  2131     0585                     __end_of_MovieUp:
  2132                           
  2133                           	psect	text13
  2134     04F7                     __ptext13:	
  2135 ;; *************** function _MovieRigth *****************
  2136 ;; Defined at:
  2137 ;;		line 28 in file "shape.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  _shapePositi    2    0[COMMON] PTR struct .
  2140 ;;		 -> main@shapePosition(4), 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         2       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0
  2155 ;;      Totals:         2       0       0       0       0
  2156 ;;Total ram usage:        2 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_MovieShape
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165     04F7                     _MovieRigth:	
  2166                           ;psect for function _MovieRigth
  2167                           
  2168     04F7                     l879:	
  2169                           ;incstack = 0
  2170                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  2171                           
  2172                           
  2173                           ;shape.c: 29:     _shapePosition->x++;
  2174     04F7  0870               	movf	MovieRigth@_shapePosition,w
  2175     04F8  0084               	movwf	4
  2176     04F9  1783               	bsf	3,7
  2177     04FA  1C71               	btfss	MovieRigth@_shapePosition+1,0
  2178     04FB  1383               	bcf	3,7
  2179     04FC  3001               	movlw	1
  2180     04FD  0780               	addwf	0,f
  2181     04FE  0A84               	incf	4,f
  2182     04FF  1803               	skipnc
  2183     0500  0A80               	incf	0,f
  2184     0501                     l117:
  2185     0501  0008               	return
  2186     0502                     __end_of_MovieRigth:
  2187                           
  2188                           	psect	text14
  2189     050D                     __ptext14:	
  2190 ;; *************** function _MovieLeft *****************
  2191 ;; Defined at:
  2192 ;;		line 24 in file "shape.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  _shapePositi    2    0[COMMON] PTR struct .
  2195 ;;		 -> main@shapePosition(4), 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, fsr0l, fsr0h, btemp+1
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2207 ;;      Params:         2       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0
  2210 ;;      Totals:         2       0       0       0       0
  2211 ;;Total ram usage:        2 bytes
  2212 ;; Hardware stack levels used: 1
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		_MovieShape
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220     050D                     _MovieLeft:	
  2221                           ;psect for function _MovieLeft
  2222                           
  2223     050D                     l877:	
  2224                           ;incstack = 0
  2225                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  2226                           
  2227                           
  2228                           ;shape.c: 25:     _shapePosition->x--;
  2229     050D  0870               	movf	MovieLeft@_shapePosition,w
  2230     050E  0084               	movwf	4
  2231     050F  1783               	bsf	3,7
  2232     0510  1C71               	btfss	MovieLeft@_shapePosition+1,0
  2233     0511  1383               	bcf	3,7
  2234     0512  30FF               	movlw	255
  2235     0513  0780               	addwf	0,f
  2236     0514  0F84               	incfsz	4,f
  2237     0515  0800               	movf	0,w
  2238     0516  1803               	skipnc
  2239     0517  0A00               	incf	0,w
  2240     0518  00FF               	movwf	btemp+1
  2241     0519  30FF               	movlw	255
  2242     051A  077F               	addwf	btemp+1,w
  2243     051B  0080               	movwf	0
  2244     051C  0384               	decf	4,f
  2245     051D                     l114:
  2246     051D  0008               	return
  2247     051E                     __end_of_MovieLeft:
  2248                           
  2249                           	psect	text15
  2250     0530                     __ptext15:	
  2251 ;; *************** function _MovieDown *****************
  2252 ;; Defined at:
  2253 ;;		line 16 in file "shape.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  _shapePositi    2    0[COMMON] PTR struct .
  2256 ;;		 -> main@shapePosition(4), 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2268 ;;      Params:         2       0       0       0       0
  2269 ;;      Locals:         0       0       0       0       0
  2270 ;;      Temps:          2       0       0       0       0
  2271 ;;      Totals:         4       0       0       0       0
  2272 ;;Total ram usage:        4 bytes
  2273 ;; Hardware stack levels used: 1
  2274 ;; This function calls:
  2275 ;;		Nothing
  2276 ;; This function is called by:
  2277 ;;		_MovieShape
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281     0530                     _MovieDown:	
  2282                           ;psect for function _MovieDown
  2283                           
  2284     0530                     l873:	
  2285                           ;incstack = 0
  2286                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  2287                           
  2288                           
  2289                           ;shape.c: 17:     _shapePosition->y++;
  2290     0530  0870               	movf	MovieDown@_shapePosition,w
  2291     0531  3E02               	addlw	2
  2292     0532  00F2               	movwf	??_MovieDown
  2293     0533  0871               	movf	MovieDown@_shapePosition+1,w
  2294     0534  1803               	skipnc
  2295     0535  3E01               	addlw	1
  2296     0536  3E00               	addlw	0
  2297     0537  00F3               	movwf	??_MovieDown+1
  2298     0538  0872               	movf	??_MovieDown,w
  2299     0539  0084               	movwf	4
  2300     053A  1783               	bsf	3,7
  2301     053B  1C73               	btfss	??_MovieDown+1,0
  2302     053C  1383               	bcf	3,7
  2303     053D  3001               	movlw	1
  2304     053E  0780               	addwf	0,f
  2305     053F  0A84               	incf	4,f
  2306     0540  1803               	skipnc
  2307     0541  0A80               	incf	0,f
  2308     0542                     l108:
  2309     0542  0008               	return
  2310     0543                     __end_of_MovieDown:
  2311     0002                     ___latbits      equ	2
  2312     007E                     btemp           set	126	;btemp
  2313     007E                     wtemp0          set	126
  2314                           
  2315                           	psect	config
  2316                           
  2317                           ;Config register CONFIG @ 0x2007
  2318                           ;	Oscillator Selection bits
  2319                           ;	FOSC = HS, HS oscillator
  2320                           ;	Watchdog Timer Enable bit
  2321                           ;	WDTE = OFF, WDT disabled
  2322                           ;	Power-up Timer Enable bit
  2323                           ;	PWRTE = OFF, PWRT disabled
  2324                           ;	FLASH Program Memory Code Protection bits
  2325                           ;	CP = OFF, Code protection off
  2326                           ;	Brown-out Reset Enable bit
  2327                           ;	BOREN = OFF, BOR disabled
  2328                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  2329                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2330                           ;	Data EE Memory Code Protection
  2331                           ;	CPD = OFF, Code Protection off
  2332                           ;	FLASH Program Memory Write Enable
  2333                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  2334                           ;	In-Circuit Debugger Mode bit
  2335                           ;	DEBUG = 0x1, unprogrammed default
  2336     2007                     	org	8199
  2337     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      36
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    invert@array	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_MovieShape
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    1822
                                             24 BANK0      9     9      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
                             _invert
 ---------------------------------------------------------------------------------
 (1) _invert                                              11     8      3     271
                                              0 COMMON    11     8      3
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 12     7      5    1088
                                             12 BANK0     12     7      5
                         _MovieShape
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           8     3      5     729
                                              4 BANK0      8     3      5
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           14     9      5     312
                                              4 COMMON    10     5      5
                                              0 BANK0      4     4      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit
   _invert

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     33      36     45.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      50      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Dec 13 15:17:46 2024

                      _SpiClearMatrix 0556                                     pc 0002  
                                  l17 0752                                    l33 0624  
                                  l50 04F6                                    l27 07E9  
                                  l70 0507                                    l72 050B  
                                  l73 050C                                    l67 052F  
                                  l92 0555                                    l86 056B  
                                  l89 05E1                                    l99 05A1  
                                  u80 050B                                    u81 050A  
                                  u90 056B                                    u91 056A  
                                  fsr 0004                       SpiSendByte@data 0070  
                                 l111 0584                                   l105 074D  
                                 l114 051D                                   l108 0542  
                                 l117 0501                                   l127 06CC  
                                 l911 0757                                   l913 0768  
                                 l921 079B                                   l905 074E  
                                 l851 0546                                   l915 0779  
                                 l923 07B0                                   l853 0552  
                                 l861 06CD                                   l925 07C7  
                                 l917 078A                                   l941 060A  
                                 l847 0503                                   l871 072D  
                                 l863 06CD                                   l855 0556  
                                 l927 07D4                                   l951 0529  
                                 l943 0610                                   l935 05E2  
                                 l873 0530                                   l849 0543  
                                 l865 06E2                                   l857 0558  
                                 l881 0674                                   l929 07DC  
                                 l961 05BB                                   l953 052B  
                                 l945 0616                                   l937 05E4  
                                 l875 056C                                   l867 06FE  
                                 l859 0565                                   l883 0675  
                                 l963 05C6                                   l955 05A2  
                                 l971 0585                                   l947 051E  
                                 l939 05ED                                   l877 050D  
                                 l869 0725                                   l885 067F  
                                 l893 069D                                   l965 05D1  
                                 l957 05AE                                   l973 058F  
                                 l949 0521                                   l981 064F  
                                 l879 04F7                                   l887 0689  
                                 l895 06B6                                   l967 05DC  
                                 l959 05B1                                   l983 0660  
                                 l975 0625                                   l897 06BB  
                                 l889 0693                                   l969 04F0  
                                 l977 062F                                   l979 0640  
                                 _RA5 002D                                   u110 074D  
                                 u111 074C                                   u104 071B  
                                 u120 07D4                                   u105 0719  
                                 u121 07D3                                   u130 07E9  
                                 u115 0749                                   u131 07E8  
                                 u140 0624                                   u125 07D0  
                                 u141 0623                                   u135 07E5  
                                 u145 0620                                   u157 05A8  
                                 u167 07B8                                   fsr0 0004  
                                 indf 0000                                  l1035 07A2  
                                l1037 06A5                                  _main 0625  
                                btemp 007E                                  start 0000  
              __end_of_SpiClearMatrix 056C                       __end_of_MovieUp 0585  
                     __end_of_SpiInit 0530                                 ?_main 0070  
                 _ChangeOfCoordinates 074E                                 _PORTA 0005  
                               _PORTB 0006                                 _TRISA 0085  
                               _TRISB 0086                                 _TRISC 0087  
                               _SSPIF 0063                       SpiClearMatrix@i 0076  
                   SendToSegment@data 0073                                 pclath 000A  
                               status 0003                                 wtemp0 007E  
                        main@square_1 0038                  ?_ChangeOfCoordinates 002C  
                     ?_SpiClearMatrix 0070                       __initialization 07EA  
                        __end_of_main 0671                            _MatrixInit 05A2  
                              ??_main 007E                         ??_SetPosition 0076  
               ??_ChangeOfCoordinates 0031                                _SSPCON 0014  
                              _SSPBUF 0013                            _MovieShape 0671  
                          _MovieRigth 04F7                  MovieShape@shapeArray 0026  
                           ??_MovieUp 0072                             ??_SpiInit 0070  
                       ??_SpiSendByte 0070                                _invert 05E2  
                      ShowShape@coord 0074               __end_of__initialization 07FC  
                 __end_of_SetPosition 05A2                        __pcstackCOMMON 0070  
                        __pidataBANK0 04ED                           ?_MatrixInit 0070  
                 __end_of_SpiSendByte 050D     ChangeOfCoordinates@_shapePosition 002C  
                         invert@array 0070  ChangeOfCoordinates@_countElemntArray 002F  
                   __end_of_MovieLeft 051E                     __end_of_MovieDown 0543  
            MovieShape@_shapePosition 0024                     __end_of_PortBInit 04F7  
                   __end_of_ShowShape 074E                           ?_MovieShape 0024  
                   main@shapePosition 003D                           ?_MovieRigth 0070  
                          __pmaintext 0625                               ?_invert 0070  
                       MovieShape@dir 002B             ShowShape@countElemntArray 0076  
                         _SetPosition 0585                               _SSPSTAT 0094  
                          __stringtab 0003                      ??_SpiClearMatrix 0074  
                             _MovieUp 056C                               _SpiInit 051E  
                       _SendToSegment 0543                           _SpiSendByte 0502  
                             __ptext1 05E2                               __ptext2 051E  
                             __ptext3 0585                               __ptext4 04F0  
                             __ptext5 05A2                               __ptext6 074E  
                             __ptext7 0671                               __ptext8 0556  
                             __ptext9 06CD               ChangeOfCoordinates@step 0034  
                end_of_initialization 07FC                               invert@i 0077  
                             invert@j 0079                               invert@t 0076  
                      ?_SendToSegment 0071                   SetPosition@position 0070  
         __end_of_ChangeOfCoordinates 07EA               MovieLeft@_shapePosition 0070  
          ChangeOfCoordinates@_figure 002E                          ??_MatrixInit 0077  
                      __end_of_invert 0625                   start_initialization 07EA  
                  __end_of_MatrixInit 05E2                       ??_SendToSegment 0074  
                        ??_MovieShape 0029                          ??_MovieRigth 0072  
                           _MovieLeft 050D                             _MovieDown 0530  
                           _PortBInit 04F0                             _ShowShape 06CD  
                         __pdataBANK0 0041                              ??_invert 0073  
                       ShowShape@_pos 0020                          SetPosition@x 0072  
                        SetPosition@y 0074                             ___latbits 0002  
                       __pcstackBANK0 0020                    __end_of_MovieShape 06CD  
                  __end_of_MovieRigth 0502                          ?_SetPosition 0070  
                main@countElemntArray 003B                   ShowShape@shapeArray 0078  
                          ?_MovieLeft 0070                            ?_MovieDown 0070  
                            ?_MovieUp 0070                              ?_SpiInit 0070  
                          ?_PortBInit 0070                          ?_SpiSendByte 0070  
                          ?_ShowShape 0074                             __pstrings 0003  
             MovieDown@_shapePosition 0070      __end_ofChangeOfCoordinates@delay 000D  
               MovieUp@_shapePosition 0070                           __stringbase 0008  
                         ??_MovieLeft 0072                           ??_MovieDown 0072  
                         ??_PortBInit 0070                           ??_ShowShape 0079  
                        ShowShape@pos 0022                    __end_of__stringtab 0009  
                            __ptext10 0543                              __ptext11 0502  
                            __ptext12 056C                              __ptext13 04F7  
                            __ptext14 050D                              __ptext15 0530  
            ChangeOfCoordinates@delay 0009                              main@F927 0041  
                SendToSegment@segment 0071                  ChangeOfCoordinates@i 0036  
                           stringcode 0003                 __end_of_SendToSegment 0556  
            MovieRigth@_shapePosition 0070            MovieShape@countElemntArray 0027  
                            stringdir 0003                              stringtab 0003  
                   invert@countElemnt 0071  

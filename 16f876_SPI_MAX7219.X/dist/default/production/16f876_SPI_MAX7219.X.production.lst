

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec  5 15:07:59 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F876 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     008C                     PIE1            equ	140	;# 
    97     008D                     PIE2            equ	141	;# 
    98     008E                     PCON            equ	142	;# 
    99     0091                     SSPCON2         equ	145	;# 
   100     0092                     PR2             equ	146	;# 
   101     0093                     SSPADD          equ	147	;# 
   102     0094                     SSPSTAT         equ	148	;# 
   103     0098                     TXSTA           equ	152	;# 
   104     0099                     SPBRG           equ	153	;# 
   105     009E                     ADRESL          equ	158	;# 
   106     009F                     ADCON1          equ	159	;# 
   107     010C                     EEDATA          equ	268	;# 
   108     010D                     EEADR           equ	269	;# 
   109     010E                     EEDATH          equ	270	;# 
   110     010F                     EEADRH          equ	271	;# 
   111     018C                     EECON1          equ	396	;# 
   112     018D                     EECON2          equ	397	;# 
   113     0000                     INDF            equ	0	;# 
   114     0001                     TMR0            equ	1	;# 
   115     0002                     PCL             equ	2	;# 
   116     0003                     STATUS          equ	3	;# 
   117     0004                     FSR             equ	4	;# 
   118     0005                     PORTA           equ	5	;# 
   119     0006                     PORTB           equ	6	;# 
   120     0007                     PORTC           equ	7	;# 
   121     000A                     PCLATH          equ	10	;# 
   122     000B                     INTCON          equ	11	;# 
   123     000C                     PIR1            equ	12	;# 
   124     000D                     PIR2            equ	13	;# 
   125     000E                     TMR1            equ	14	;# 
   126     000E                     TMR1L           equ	14	;# 
   127     000F                     TMR1H           equ	15	;# 
   128     0010                     T1CON           equ	16	;# 
   129     0011                     TMR2            equ	17	;# 
   130     0012                     T2CON           equ	18	;# 
   131     0013                     SSPBUF          equ	19	;# 
   132     0014                     SSPCON          equ	20	;# 
   133     0015                     CCPR1           equ	21	;# 
   134     0015                     CCPR1L          equ	21	;# 
   135     0016                     CCPR1H          equ	22	;# 
   136     0017                     CCP1CON         equ	23	;# 
   137     0018                     RCSTA           equ	24	;# 
   138     0019                     TXREG           equ	25	;# 
   139     001A                     RCREG           equ	26	;# 
   140     001B                     CCPR2           equ	27	;# 
   141     001B                     CCPR2L          equ	27	;# 
   142     001C                     CCPR2H          equ	28	;# 
   143     001D                     CCP2CON         equ	29	;# 
   144     001E                     ADRESH          equ	30	;# 
   145     001F                     ADCON0          equ	31	;# 
   146     0081                     OPTION_REG      equ	129	;# 
   147     0085                     TRISA           equ	133	;# 
   148     0086                     TRISB           equ	134	;# 
   149     0087                     TRISC           equ	135	;# 
   150     008C                     PIE1            equ	140	;# 
   151     008D                     PIE2            equ	141	;# 
   152     008E                     PCON            equ	142	;# 
   153     0091                     SSPCON2         equ	145	;# 
   154     0092                     PR2             equ	146	;# 
   155     0093                     SSPADD          equ	147	;# 
   156     0094                     SSPSTAT         equ	148	;# 
   157     0098                     TXSTA           equ	152	;# 
   158     0099                     SPBRG           equ	153	;# 
   159     009E                     ADRESL          equ	158	;# 
   160     009F                     ADCON1          equ	159	;# 
   161     010C                     EEDATA          equ	268	;# 
   162     010D                     EEADR           equ	269	;# 
   163     010E                     EEDATH          equ	270	;# 
   164     010F                     EEADRH          equ	271	;# 
   165     018C                     EECON1          equ	396	;# 
   166     018D                     EECON2          equ	397	;# 
   167     0000                     INDF            equ	0	;# 
   168     0001                     TMR0            equ	1	;# 
   169     0002                     PCL             equ	2	;# 
   170     0003                     STATUS          equ	3	;# 
   171     0004                     FSR             equ	4	;# 
   172     0005                     PORTA           equ	5	;# 
   173     0006                     PORTB           equ	6	;# 
   174     0007                     PORTC           equ	7	;# 
   175     000A                     PCLATH          equ	10	;# 
   176     000B                     INTCON          equ	11	;# 
   177     000C                     PIR1            equ	12	;# 
   178     000D                     PIR2            equ	13	;# 
   179     000E                     TMR1            equ	14	;# 
   180     000E                     TMR1L           equ	14	;# 
   181     000F                     TMR1H           equ	15	;# 
   182     0010                     T1CON           equ	16	;# 
   183     0011                     TMR2            equ	17	;# 
   184     0012                     T2CON           equ	18	;# 
   185     0013                     SSPBUF          equ	19	;# 
   186     0014                     SSPCON          equ	20	;# 
   187     0015                     CCPR1           equ	21	;# 
   188     0015                     CCPR1L          equ	21	;# 
   189     0016                     CCPR1H          equ	22	;# 
   190     0017                     CCP1CON         equ	23	;# 
   191     0018                     RCSTA           equ	24	;# 
   192     0019                     TXREG           equ	25	;# 
   193     001A                     RCREG           equ	26	;# 
   194     001B                     CCPR2           equ	27	;# 
   195     001B                     CCPR2L          equ	27	;# 
   196     001C                     CCPR2H          equ	28	;# 
   197     001D                     CCP2CON         equ	29	;# 
   198     001E                     ADRESH          equ	30	;# 
   199     001F                     ADCON0          equ	31	;# 
   200     0081                     OPTION_REG      equ	129	;# 
   201     0085                     TRISA           equ	133	;# 
   202     0086                     TRISB           equ	134	;# 
   203     0087                     TRISC           equ	135	;# 
   204     008C                     PIE1            equ	140	;# 
   205     008D                     PIE2            equ	141	;# 
   206     008E                     PCON            equ	142	;# 
   207     0091                     SSPCON2         equ	145	;# 
   208     0092                     PR2             equ	146	;# 
   209     0093                     SSPADD          equ	147	;# 
   210     0094                     SSPSTAT         equ	148	;# 
   211     0098                     TXSTA           equ	152	;# 
   212     0099                     SPBRG           equ	153	;# 
   213     009E                     ADRESL          equ	158	;# 
   214     009F                     ADCON1          equ	159	;# 
   215     010C                     EEDATA          equ	268	;# 
   216     010D                     EEADR           equ	269	;# 
   217     010E                     EEDATH          equ	270	;# 
   218     010F                     EEADRH          equ	271	;# 
   219     018C                     EECON1          equ	396	;# 
   220     018D                     EECON2          equ	397	;# 
   221     0000                     INDF            equ	0	;# 
   222     0001                     TMR0            equ	1	;# 
   223     0002                     PCL             equ	2	;# 
   224     0003                     STATUS          equ	3	;# 
   225     0004                     FSR             equ	4	;# 
   226     0005                     PORTA           equ	5	;# 
   227     0006                     PORTB           equ	6	;# 
   228     0007                     PORTC           equ	7	;# 
   229     000A                     PCLATH          equ	10	;# 
   230     000B                     INTCON          equ	11	;# 
   231     000C                     PIR1            equ	12	;# 
   232     000D                     PIR2            equ	13	;# 
   233     000E                     TMR1            equ	14	;# 
   234     000E                     TMR1L           equ	14	;# 
   235     000F                     TMR1H           equ	15	;# 
   236     0010                     T1CON           equ	16	;# 
   237     0011                     TMR2            equ	17	;# 
   238     0012                     T2CON           equ	18	;# 
   239     0013                     SSPBUF          equ	19	;# 
   240     0014                     SSPCON          equ	20	;# 
   241     0015                     CCPR1           equ	21	;# 
   242     0015                     CCPR1L          equ	21	;# 
   243     0016                     CCPR1H          equ	22	;# 
   244     0017                     CCP1CON         equ	23	;# 
   245     0018                     RCSTA           equ	24	;# 
   246     0019                     TXREG           equ	25	;# 
   247     001A                     RCREG           equ	26	;# 
   248     001B                     CCPR2           equ	27	;# 
   249     001B                     CCPR2L          equ	27	;# 
   250     001C                     CCPR2H          equ	28	;# 
   251     001D                     CCP2CON         equ	29	;# 
   252     001E                     ADRESH          equ	30	;# 
   253     001F                     ADCON0          equ	31	;# 
   254     0081                     OPTION_REG      equ	129	;# 
   255     0085                     TRISA           equ	133	;# 
   256     0086                     TRISB           equ	134	;# 
   257     0087                     TRISC           equ	135	;# 
   258     008C                     PIE1            equ	140	;# 
   259     008D                     PIE2            equ	141	;# 
   260     008E                     PCON            equ	142	;# 
   261     0091                     SSPCON2         equ	145	;# 
   262     0092                     PR2             equ	146	;# 
   263     0093                     SSPADD          equ	147	;# 
   264     0094                     SSPSTAT         equ	148	;# 
   265     0098                     TXSTA           equ	152	;# 
   266     0099                     SPBRG           equ	153	;# 
   267     009E                     ADRESL          equ	158	;# 
   268     009F                     ADCON1          equ	159	;# 
   269     010C                     EEDATA          equ	268	;# 
   270     010D                     EEADR           equ	269	;# 
   271     010E                     EEDATH          equ	270	;# 
   272     010F                     EEADRH          equ	271	;# 
   273     018C                     EECON1          equ	396	;# 
   274     018D                     EECON2          equ	397	;# 
   275     0000                     INDF            equ	0	;# 
   276     0001                     TMR0            equ	1	;# 
   277     0002                     PCL             equ	2	;# 
   278     0003                     STATUS          equ	3	;# 
   279     0004                     FSR             equ	4	;# 
   280     0005                     PORTA           equ	5	;# 
   281     0006                     PORTB           equ	6	;# 
   282     0007                     PORTC           equ	7	;# 
   283     000A                     PCLATH          equ	10	;# 
   284     000B                     INTCON          equ	11	;# 
   285     000C                     PIR1            equ	12	;# 
   286     000D                     PIR2            equ	13	;# 
   287     000E                     TMR1            equ	14	;# 
   288     000E                     TMR1L           equ	14	;# 
   289     000F                     TMR1H           equ	15	;# 
   290     0010                     T1CON           equ	16	;# 
   291     0011                     TMR2            equ	17	;# 
   292     0012                     T2CON           equ	18	;# 
   293     0013                     SSPBUF          equ	19	;# 
   294     0014                     SSPCON          equ	20	;# 
   295     0015                     CCPR1           equ	21	;# 
   296     0015                     CCPR1L          equ	21	;# 
   297     0016                     CCPR1H          equ	22	;# 
   298     0017                     CCP1CON         equ	23	;# 
   299     0018                     RCSTA           equ	24	;# 
   300     0019                     TXREG           equ	25	;# 
   301     001A                     RCREG           equ	26	;# 
   302     001B                     CCPR2           equ	27	;# 
   303     001B                     CCPR2L          equ	27	;# 
   304     001C                     CCPR2H          equ	28	;# 
   305     001D                     CCP2CON         equ	29	;# 
   306     001E                     ADRESH          equ	30	;# 
   307     001F                     ADCON0          equ	31	;# 
   308     0081                     OPTION_REG      equ	129	;# 
   309     0085                     TRISA           equ	133	;# 
   310     0086                     TRISB           equ	134	;# 
   311     0087                     TRISC           equ	135	;# 
   312     008C                     PIE1            equ	140	;# 
   313     008D                     PIE2            equ	141	;# 
   314     008E                     PCON            equ	142	;# 
   315     0091                     SSPCON2         equ	145	;# 
   316     0092                     PR2             equ	146	;# 
   317     0093                     SSPADD          equ	147	;# 
   318     0094                     SSPSTAT         equ	148	;# 
   319     0098                     TXSTA           equ	152	;# 
   320     0099                     SPBRG           equ	153	;# 
   321     009E                     ADRESL          equ	158	;# 
   322     009F                     ADCON1          equ	159	;# 
   323     010C                     EEDATA          equ	268	;# 
   324     010D                     EEADR           equ	269	;# 
   325     010E                     EEDATH          equ	270	;# 
   326     010F                     EEADRH          equ	271	;# 
   327     018C                     EECON1          equ	396	;# 
   328     018D                     EECON2          equ	397	;# 
   329     0013                     _SSPBUF         set	19
   330     0014                     _SSPCON         set	20
   331     0005                     _PORTA          set	5
   332     0006                     _PORTB          set	6
   333     002D                     _RA5            set	45
   334     0063                     _SSPIF          set	99
   335     0094                     _SSPSTAT        set	148
   336     0085                     _TRISA          set	133
   337     0087                     _TRISC          set	135
   338     0086                     _TRISB          set	134
   339                           
   340                           	psect	cinit
   341     07FC                     start_initialization:	
   342                           ; #config settings
   343                           
   344     07FC                     __initialization:
   345     07FC                     end_of_initialization:	
   346                           ;End of C runtime variable initialization code
   347                           
   348     07FC                     __end_of__initialization:
   349     07FC  0183               	clrf	3
   350     07FD  120A  118A  2F0B   	ljmp	_main	;jump to C main() function
   351                           
   352                           	psect	cstackCOMMON
   353     0070                     __pcstackCOMMON:
   354     0070                     ?_SpiInit:
   355     0070                     ?_MatrixInit:	
   356                           ; 1 bytes @ 0x0
   357                           
   358     0070                     ?_PortBInit:	
   359                           ; 1 bytes @ 0x0
   360                           
   361     0070                     ?_SpiClearMatrix:	
   362                           ; 1 bytes @ 0x0
   363                           
   364     0070                     ?_main:	
   365                           ; 1 bytes @ 0x0
   366                           
   367     0070                     ?_SpiSendByte:	
   368                           ; 1 bytes @ 0x0
   369                           
   370     0070                     SpiSendByte@data:	
   371                           ; 1 bytes @ 0x0
   372                           
   373     0070                     ??_SpiInit:	
   374                           ; 1 bytes @ 0x0
   375                           
   376     0070                     ??_PortBInit:	
   377                           ; 1 bytes @ 0x0
   378                           
   379     0070                     ??_SpiSendByte:	
   380                           ; 1 bytes @ 0x0
   381                           
   382                           
   383                           ; 1 bytes @ 0x0
   384     0070                     	ds	1
   385     0071                     ?_SendToSegment:
   386     0071                     SendToSegment@segment:	
   387                           ; 1 bytes @ 0x1
   388                           
   389                           
   390                           ; 2 bytes @ 0x1
   391     0071                     	ds	2
   392     0073                     SendToSegment@data:
   393                           
   394                           ; 1 bytes @ 0x3
   395     0073                     	ds	1
   396     0074                     ??_SendToSegment:
   397     0074                     ??_SpiClearMatrix:	
   398                           ; 1 bytes @ 0x4
   399                           
   400                           
   401                           ; 1 bytes @ 0x4
   402     0074                     	ds	2
   403     0076                     SpiClearMatrix@i:
   404                           
   405                           ; 1 bytes @ 0x6
   406     0076                     	ds	1
   407     0077                     ??_MatrixInit:
   408                           
   409                           ; 1 bytes @ 0x7
   410     0077                     	ds	3
   411     007A                     ??_main:
   412                           
   413                           ; 1 bytes @ 0xA
   414     007A                     	ds	3
   415                           
   416                           	psect	cstackBANK0
   417     0020                     __pcstackBANK0:
   418     0020                     main@x:
   419                           
   420                           ; 2 bytes @ 0x0
   421     0020                     	ds	2
   422     0022                     main@x_56:
   423                           
   424                           ; 2 bytes @ 0x2
   425     0022                     	ds	2
   426     0024                     main@x_57:
   427                           
   428                           ; 2 bytes @ 0x4
   429     0024                     	ds	2
   430     0026                     main@x_58:
   431                           
   432                           ; 2 bytes @ 0x6
   433     0026                     	ds	2
   434                           
   435                           	psect	maintext
   436     070B                     __pmaintext:	
   437 ;;
   438 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   439 ;;
   440 ;; *************** function _main *****************
   441 ;; Defined at:
   442 ;;		line 17 in file "main.c"
   443 ;; Parameters:    Size  Location     Type
   444 ;;		None
   445 ;; Auto vars:     Size  Location     Type
   446 ;;  x               2    6[BANK0 ] int 
   447 ;;  x               2    4[BANK0 ] int 
   448 ;;  x               2    2[BANK0 ] int 
   449 ;;  x               2    0[BANK0 ] int 
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : B00/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   459 ;;      Params:         0       0       0       0       0
   460 ;;      Locals:         0       8       0       0       0
   461 ;;      Temps:          3       0       0       0       0
   462 ;;      Totals:         3       8       0       0       0
   463 ;;Total ram usage:       11 bytes
   464 ;; Hardware stack levels required when called: 4
   465 ;; This function calls:
   466 ;;		_MatrixInit
   467 ;;		_PortBInit
   468 ;;		_SendToSegment
   469 ;;		_SpiClearMatrix
   470 ;;		_SpiInit
   471 ;; This function is called by:
   472 ;;		Startup code after reset
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476     070B                     _main:	
   477                           ;psect for function _main
   478                           
   479     070B                     l755:	
   480                           ;incstack = 0
   481                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   482                           
   483                           
   484                           ;main.c: 18:     SpiInit();
   485     070B  120A  118A  2690  120A  118A  	fcall	_SpiInit
   486                           
   487                           ;main.c: 19:     MatrixInit();
   488     0710  120A  118A  26CB  120A  118A  	fcall	_MatrixInit
   489     0715                     l757:
   490                           
   491                           ;main.c: 20:     PortBInit();
   492     0715  120A  118A  267E  120A  118A  	fcall	_PortBInit
   493     071A                     l17:	
   494                           ;main.c: 23:     while(1){
   495                           
   496                           
   497                           ;main.c: 24:         for(int x = 1; x <=4; x++){
   498     071A  3001               	movlw	1
   499     071B  1283               	bcf	3,5	;RP0=0, select bank0
   500     071C  1303               	bcf	3,6	;RP1=0, select bank0
   501     071D  00A0               	movwf	main@x
   502     071E  3000               	movlw	0
   503     071F  00A1               	movwf	main@x+1
   504     0720                     l763:
   505                           
   506                           ;main.c: 25:             SendToSegment(x, 0x0f);
   507     0720  1283               	bcf	3,5	;RP0=0, select bank0
   508     0721  1303               	bcf	3,6	;RP1=0, select bank0
   509     0722  0821               	movf	main@x+1,w
   510     0723  00F2               	movwf	SendToSegment@segment+1
   511     0724  0820               	movf	main@x,w
   512     0725  00F1               	movwf	SendToSegment@segment
   513     0726  300F               	movlw	15
   514     0727  00F3               	movwf	SendToSegment@data
   515     0728  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   516     072D                     l765:
   517                           
   518                           ;main.c: 26:         }
   519     072D  3001               	movlw	1
   520     072E  1283               	bcf	3,5	;RP0=0, select bank0
   521     072F  1303               	bcf	3,6	;RP1=0, select bank0
   522     0730  07A0               	addwf	main@x,f
   523     0731  1803               	skipnc
   524     0732  0AA1               	incf	main@x+1,f
   525     0733  3000               	movlw	0
   526     0734  07A1               	addwf	main@x+1,f
   527     0735                     l767:
   528     0735  0821               	movf	main@x+1,w
   529     0736  3A80               	xorlw	128
   530     0737  00FF               	movwf	btemp+1
   531     0738  3080               	movlw	128
   532     0739  027F               	subwf	btemp+1,w
   533     073A  1D03               	skipz
   534     073B  2F3E               	goto	u95
   535     073C  3005               	movlw	5
   536     073D  0220               	subwf	main@x,w
   537     073E                     u95:
   538     073E  1C03               	skipc
   539     073F  2F41               	goto	u91
   540     0740  2F42               	goto	u90
   541     0741                     u91:
   542     0741  2F20               	goto	l763
   543     0742                     u90:
   544     0742                     l769:
   545                           
   546                           ;main.c: 27:         _delay((unsigned long)((500)*(16000000/4000.0)));
   547     0742  300B               	movlw	11
   548     0743  00FC               	movwf	??_main+2
   549     0744  3026               	movlw	38
   550     0745  00FB               	movwf	??_main+1
   551     0746  305D               	movlw	93
   552     0747  00FA               	movwf	??_main
   553     0748                     u137:
   554     0748  0BFA               	decfsz	??_main,f
   555     0749  2F48               	goto	u137
   556     074A  0BFB               	decfsz	??_main+1,f
   557     074B  2F48               	goto	u137
   558     074C  0BFC               	decfsz	??_main+2,f
   559     074D  2F48               	goto	u137
   560     074E  2F4F               	nop2
   561                           
   562                           ;main.c: 28:         for(int x = 5; x <=8; x++){
   563     074F  3005               	movlw	5
   564     0750  1283               	bcf	3,5	;RP0=0, select bank0
   565     0751  1303               	bcf	3,6	;RP1=0, select bank0
   566     0752  00A2               	movwf	main@x_56
   567     0753  3000               	movlw	0
   568     0754  00A3               	movwf	main@x_56+1
   569     0755                     l775:
   570                           
   571                           ;main.c: 29:             SendToSegment(x, 0xf0);
   572     0755  1283               	bcf	3,5	;RP0=0, select bank0
   573     0756  1303               	bcf	3,6	;RP1=0, select bank0
   574     0757  0823               	movf	main@x_56+1,w
   575     0758  00F2               	movwf	SendToSegment@segment+1
   576     0759  0822               	movf	main@x_56,w
   577     075A  00F1               	movwf	SendToSegment@segment
   578     075B  30F0               	movlw	240
   579     075C  00F3               	movwf	SendToSegment@data
   580     075D  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   581     0762                     l777:
   582                           
   583                           ;main.c: 30:         }
   584     0762  3001               	movlw	1
   585     0763  1283               	bcf	3,5	;RP0=0, select bank0
   586     0764  1303               	bcf	3,6	;RP1=0, select bank0
   587     0765  07A2               	addwf	main@x_56,f
   588     0766  1803               	skipnc
   589     0767  0AA3               	incf	main@x_56+1,f
   590     0768  3000               	movlw	0
   591     0769  07A3               	addwf	main@x_56+1,f
   592     076A                     l779:
   593     076A  0823               	movf	main@x_56+1,w
   594     076B  3A80               	xorlw	128
   595     076C  00FF               	movwf	btemp+1
   596     076D  3080               	movlw	128
   597     076E  027F               	subwf	btemp+1,w
   598     076F  1D03               	skipz
   599     0770  2F73               	goto	u105
   600     0771  3009               	movlw	9
   601     0772  0222               	subwf	main@x_56,w
   602     0773                     u105:
   603     0773  1C03               	skipc
   604     0774  2F76               	goto	u101
   605     0775  2F77               	goto	u100
   606     0776                     u101:
   607     0776  2F55               	goto	l775
   608     0777                     u100:
   609     0777                     l781:
   610                           
   611                           ;main.c: 31:         _delay((unsigned long)((500)*(16000000/4000.0)));
   612     0777  300B               	movlw	11
   613     0778  00FC               	movwf	??_main+2
   614     0779  3026               	movlw	38
   615     077A  00FB               	movwf	??_main+1
   616     077B  305D               	movlw	93
   617     077C  00FA               	movwf	??_main
   618     077D                     u147:
   619     077D  0BFA               	decfsz	??_main,f
   620     077E  2F7D               	goto	u147
   621     077F  0BFB               	decfsz	??_main+1,f
   622     0780  2F7D               	goto	u147
   623     0781  0BFC               	decfsz	??_main+2,f
   624     0782  2F7D               	goto	u147
   625     0783  2F84               	nop2
   626     0784                     l783:
   627                           
   628                           ;main.c: 32:         SpiClearMatrix();
   629     0784  120A  118A  26B5  120A  118A  	fcall	_SpiClearMatrix
   630     0789                     l785:
   631                           
   632                           ;main.c: 34:         for(int x = 5; x <=8; x++){
   633     0789  3005               	movlw	5
   634     078A  1283               	bcf	3,5	;RP0=0, select bank0
   635     078B  1303               	bcf	3,6	;RP1=0, select bank0
   636     078C  00A4               	movwf	main@x_57
   637     078D  3000               	movlw	0
   638     078E  00A5               	movwf	main@x_57+1
   639     078F                     l791:
   640                           
   641                           ;main.c: 35:             SendToSegment(x, 0x0f);
   642     078F  1283               	bcf	3,5	;RP0=0, select bank0
   643     0790  1303               	bcf	3,6	;RP1=0, select bank0
   644     0791  0825               	movf	main@x_57+1,w
   645     0792  00F2               	movwf	SendToSegment@segment+1
   646     0793  0824               	movf	main@x_57,w
   647     0794  00F1               	movwf	SendToSegment@segment
   648     0795  300F               	movlw	15
   649     0796  00F3               	movwf	SendToSegment@data
   650     0797  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   651     079C                     l793:
   652                           
   653                           ;main.c: 36:         }
   654     079C  3001               	movlw	1
   655     079D  1283               	bcf	3,5	;RP0=0, select bank0
   656     079E  1303               	bcf	3,6	;RP1=0, select bank0
   657     079F  07A4               	addwf	main@x_57,f
   658     07A0  1803               	skipnc
   659     07A1  0AA5               	incf	main@x_57+1,f
   660     07A2  3000               	movlw	0
   661     07A3  07A5               	addwf	main@x_57+1,f
   662     07A4                     l795:
   663     07A4  0825               	movf	main@x_57+1,w
   664     07A5  3A80               	xorlw	128
   665     07A6  00FF               	movwf	btemp+1
   666     07A7  3080               	movlw	128
   667     07A8  027F               	subwf	btemp+1,w
   668     07A9  1D03               	skipz
   669     07AA  2FAD               	goto	u115
   670     07AB  3009               	movlw	9
   671     07AC  0224               	subwf	main@x_57,w
   672     07AD                     u115:
   673     07AD  1C03               	skipc
   674     07AE  2FB0               	goto	u111
   675     07AF  2FB1               	goto	u110
   676     07B0                     u111:
   677     07B0  2F8F               	goto	l791
   678     07B1                     u110:
   679     07B1                     l797:
   680                           
   681                           ;main.c: 37:         _delay((unsigned long)((500)*(16000000/4000.0)));
   682     07B1  300B               	movlw	11
   683     07B2  00FC               	movwf	??_main+2
   684     07B3  3026               	movlw	38
   685     07B4  00FB               	movwf	??_main+1
   686     07B5  305D               	movlw	93
   687     07B6  00FA               	movwf	??_main
   688     07B7                     u157:
   689     07B7  0BFA               	decfsz	??_main,f
   690     07B8  2FB7               	goto	u157
   691     07B9  0BFB               	decfsz	??_main+1,f
   692     07BA  2FB7               	goto	u157
   693     07BB  0BFC               	decfsz	??_main+2,f
   694     07BC  2FB7               	goto	u157
   695     07BD  2FBE               	nop2
   696                           
   697                           ;main.c: 38:         for(int x = 1; x <=4; x++){
   698     07BE  3001               	movlw	1
   699     07BF  1283               	bcf	3,5	;RP0=0, select bank0
   700     07C0  1303               	bcf	3,6	;RP1=0, select bank0
   701     07C1  00A6               	movwf	main@x_58
   702     07C2  3000               	movlw	0
   703     07C3  00A7               	movwf	main@x_58+1
   704     07C4                     l803:
   705                           
   706                           ;main.c: 39:             SendToSegment(x, 0xf0);
   707     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   708     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   709     07C6  0827               	movf	main@x_58+1,w
   710     07C7  00F2               	movwf	SendToSegment@segment+1
   711     07C8  0826               	movf	main@x_58,w
   712     07C9  00F1               	movwf	SendToSegment@segment
   713     07CA  30F0               	movlw	240
   714     07CB  00F3               	movwf	SendToSegment@data
   715     07CC  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   716     07D1                     l805:
   717                           
   718                           ;main.c: 40:         }
   719     07D1  3001               	movlw	1
   720     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   721     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   722     07D4  07A6               	addwf	main@x_58,f
   723     07D5  1803               	skipnc
   724     07D6  0AA7               	incf	main@x_58+1,f
   725     07D7  3000               	movlw	0
   726     07D8  07A7               	addwf	main@x_58+1,f
   727     07D9                     l807:
   728     07D9  0827               	movf	main@x_58+1,w
   729     07DA  3A80               	xorlw	128
   730     07DB  00FF               	movwf	btemp+1
   731     07DC  3080               	movlw	128
   732     07DD  027F               	subwf	btemp+1,w
   733     07DE  1D03               	skipz
   734     07DF  2FE2               	goto	u125
   735     07E0  3005               	movlw	5
   736     07E1  0226               	subwf	main@x_58,w
   737     07E2                     u125:
   738     07E2  1C03               	skipc
   739     07E3  2FE5               	goto	u121
   740     07E4  2FE6               	goto	u120
   741     07E5                     u121:
   742     07E5  2FC4               	goto	l803
   743     07E6                     u120:
   744     07E6                     l809:
   745                           
   746                           ;main.c: 41:         _delay((unsigned long)((500)*(16000000/4000.0)));
   747     07E6  300B               	movlw	11
   748     07E7  00FC               	movwf	??_main+2
   749     07E8  3026               	movlw	38
   750     07E9  00FB               	movwf	??_main+1
   751     07EA  305D               	movlw	93
   752     07EB  00FA               	movwf	??_main
   753     07EC                     u167:
   754     07EC  0BFA               	decfsz	??_main,f
   755     07ED  2FEC               	goto	u167
   756     07EE  0BFB               	decfsz	??_main+1,f
   757     07EF  2FEC               	goto	u167
   758     07F0  0BFC               	decfsz	??_main+2,f
   759     07F1  2FEC               	goto	u167
   760     07F2  2FF3               	nop2
   761     07F3                     l811:
   762                           
   763                           ;main.c: 42:         SpiClearMatrix();
   764     07F3  120A  118A  26B5  120A  118A  	fcall	_SpiClearMatrix
   765     07F8  2F1A               	goto	l17
   766     07F9  120A  118A  2800   	ljmp	start
   767     07FC                     __end_of_main:
   768                           
   769                           	psect	text1
   770     0690                     __ptext1:	
   771 ;; *************** function _SpiInit *****************
   772 ;; Defined at:
   773 ;;		line 9 in file "spi.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg, status,2, status,0
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   787 ;;      Params:         0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0
   789 ;;      Temps:          0       0       0       0       0
   790 ;;      Totals:         0       0       0       0       0
   791 ;;Total ram usage:        0 bytes
   792 ;; Hardware stack levels used: 1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800     0690                     _SpiInit:	
   801                           ;psect for function _SpiInit
   802                           
   803     0690                     l731:	
   804                           ;incstack = 0
   805                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   806                           
   807                           
   808                           ;spi.c: 10:     TRISC |= 0x10;
   809     0690  1683               	bsf	3,5	;RP0=1, select bank1
   810     0691  1303               	bcf	3,6	;RP1=0, select bank1
   811     0692  1607               	bsf	7,4	;volatile
   812     0693                     l733:
   813                           
   814                           ;spi.c: 11:     TRISC &= ~0x28;
   815     0693  30D7               	movlw	215
   816     0694  0587               	andwf	7,f	;volatile
   817                           
   818                           ;spi.c: 12:     TRISA &= ~0x20;
   819     0695  30DF               	movlw	223
   820     0696  0585               	andwf	5,f	;volatile
   821                           
   822                           ;spi.c: 13:     PORTA &= ~0x20;
   823     0697  30DF               	movlw	223
   824     0698  1283               	bcf	3,5	;RP0=0, select bank0
   825     0699  1303               	bcf	3,6	;RP1=0, select bank0
   826     069A  0585               	andwf	5,f	;volatile
   827     069B                     l735:
   828                           
   829                           ;spi.c: 14:     SSPCON = 0x30;
   830     069B  3030               	movlw	48
   831     069C  0094               	movwf	20	;volatile
   832     069D                     l737:
   833                           
   834                           ;spi.c: 15:     SSPSTAT = 0x80;
   835     069D  3080               	movlw	128
   836     069E  1683               	bsf	3,5	;RP0=1, select bank1
   837     069F  1303               	bcf	3,6	;RP1=0, select bank1
   838     06A0  0094               	movwf	20	;volatile
   839     06A1                     l52:
   840     06A1  0008               	return
   841     06A2                     __end_of_SpiInit:
   842                           
   843                           	psect	text2
   844     067E                     __ptext2:	
   845 ;; *************** function _PortBInit *****************
   846 ;; Defined at:
   847 ;;		line 13 in file "portsinit.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;		None
   850 ;; Auto vars:     Size  Location     Type
   851 ;;		None
   852 ;; Return value:  Size  Location     Type
   853 ;;                  1    wreg      void 
   854 ;; Registers used:
   855 ;;		status,2
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   861 ;;      Params:         0       0       0       0       0
   862 ;;      Locals:         0       0       0       0       0
   863 ;;      Temps:          0       0       0       0       0
   864 ;;      Totals:         0       0       0       0       0
   865 ;;Total ram usage:        0 bytes
   866 ;; Hardware stack levels used: 1
   867 ;; This function calls:
   868 ;;		Nothing
   869 ;; This function is called by:
   870 ;;		_main
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874     067E                     _PortBInit:	
   875                           ;psect for function _PortBInit
   876                           
   877     067E                     l753:	
   878                           ;incstack = 0
   879                           ; Regs used in _PortBInit: [status,2]
   880                           
   881                           
   882                           ;portsinit.c: 14:     TRISB = 0x00;
   883     067E  1683               	bsf	3,5	;RP0=1, select bank1
   884     067F  1303               	bcf	3,6	;RP1=0, select bank1
   885     0680  0186               	clrf	6	;volatile
   886                           
   887                           ;portsinit.c: 15:     PORTB = 0x00;
   888     0681  1283               	bcf	3,5	;RP0=0, select bank0
   889     0682  1303               	bcf	3,6	;RP1=0, select bank0
   890     0683  0186               	clrf	6	;volatile
   891     0684                     l35:
   892     0684  0008               	return
   893     0685                     __end_of_PortBInit:
   894                           
   895                           	psect	text3
   896     06CB                     __ptext3:	
   897 ;; *************** function _MatrixInit *****************
   898 ;; Defined at:
   899 ;;		line 20 in file "matrix.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;		None
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   913 ;;      Params:         0       0       0       0       0
   914 ;;      Locals:         0       0       0       0       0
   915 ;;      Temps:          3       0       0       0       0
   916 ;;      Totals:         3       0       0       0       0
   917 ;;Total ram usage:        3 bytes
   918 ;; Hardware stack levels used: 1
   919 ;; Hardware stack levels required when called: 3
   920 ;; This function calls:
   921 ;;		_SendToSegment
   922 ;;		_SpiClearMatrix
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928     06CB                     _MatrixInit:	
   929                           ;psect for function _MatrixInit
   930                           
   931     06CB                     l739:	
   932                           ;incstack = 0
   933                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
   934                           
   935                           
   936                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
   937     06CB  3003               	movlw	3
   938     06CC  00F9               	movwf	??_MatrixInit+2
   939     06CD  3008               	movlw	8
   940     06CE  00F8               	movwf	??_MatrixInit+1
   941     06CF  3077               	movlw	119
   942     06D0  00F7               	movwf	??_MatrixInit
   943     06D1                     u177:
   944     06D1  0BF7               	decfsz	??_MatrixInit,f
   945     06D2  2ED1               	goto	u177
   946     06D3  0BF8               	decfsz	??_MatrixInit+1,f
   947     06D4  2ED1               	goto	u177
   948     06D5  0BF9               	decfsz	??_MatrixInit+2,f
   949     06D6  2ED1               	goto	u177
   950     06D7                     l741:
   951                           
   952                           ;matrix.c: 22:     RA5=1;
   953     06D7  1283               	bcf	3,5	;RP0=0, select bank0
   954     06D8  1303               	bcf	3,6	;RP1=0, select bank0
   955     06D9  1685               	bsf	5,5	;volatile
   956     06DA                     l743:
   957                           
   958                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
   959     06DA  3009               	movlw	9
   960     06DB  00F1               	movwf	SendToSegment@segment
   961     06DC  3000               	movlw	0
   962     06DD  00F2               	movwf	SendToSegment@segment+1
   963     06DE  01F3               	clrf	SendToSegment@data
   964     06DF  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   965     06E4                     l745:
   966                           
   967                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
   968     06E4  300B               	movlw	11
   969     06E5  00F1               	movwf	SendToSegment@segment
   970     06E6  3000               	movlw	0
   971     06E7  00F2               	movwf	SendToSegment@segment+1
   972     06E8  3007               	movlw	7
   973     06E9  00F3               	movwf	SendToSegment@data
   974     06EA  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   975     06EF                     l747:
   976                           
   977                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
   978     06EF  300A               	movlw	10
   979     06F0  00F1               	movwf	SendToSegment@segment
   980     06F1  3000               	movlw	0
   981     06F2  00F2               	movwf	SendToSegment@segment+1
   982     06F3  3002               	movlw	2
   983     06F4  00F3               	movwf	SendToSegment@data
   984     06F5  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   985     06FA                     l749:
   986                           
   987                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
   988     06FA  300C               	movlw	12
   989     06FB  00F1               	movwf	SendToSegment@segment
   990     06FC  3000               	movlw	0
   991     06FD  00F2               	movwf	SendToSegment@segment+1
   992     06FE  01F3               	clrf	SendToSegment@data
   993     06FF  0AF3               	incf	SendToSegment@data,f
   994     0700  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
   995     0705                     l751:
   996                           
   997                           ;matrix.c: 27:     SpiClearMatrix();
   998     0705  120A  118A  26B5  120A  118A  	fcall	_SpiClearMatrix
   999     070A                     l74:
  1000     070A  0008               	return
  1001     070B                     __end_of_MatrixInit:
  1002                           
  1003                           	psect	text4
  1004     06B5                     __ptext4:	
  1005 ;; *************** function _SpiClearMatrix *****************
  1006 ;; Defined at:
  1007 ;;		line 10 in file "matrix.c"
  1008 ;; Parameters:    Size  Location     Type
  1009 ;;		None
  1010 ;; Auto vars:     Size  Location     Type
  1011 ;;  i               1    6[COMMON] unsigned char 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;                  1    wreg      void 
  1014 ;; Registers used:
  1015 ;;		wreg, status,2, status,0, pclath, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1021 ;;      Params:         0       0       0       0       0
  1022 ;;      Locals:         1       0       0       0       0
  1023 ;;      Temps:          2       0       0       0       0
  1024 ;;      Totals:         3       0       0       0       0
  1025 ;;Total ram usage:        3 bytes
  1026 ;; Hardware stack levels used: 1
  1027 ;; Hardware stack levels required when called: 2
  1028 ;; This function calls:
  1029 ;;		_SendToSegment
  1030 ;; This function is called by:
  1031 ;;		_main
  1032 ;;		_MatrixInit
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036     06B5                     _SpiClearMatrix:	
  1037                           ;psect for function _SpiClearMatrix
  1038                           
  1039     06B5                     l725:	
  1040                           ;incstack = 0
  1041                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  1042                           
  1043                           
  1044                           ;matrix.c: 12:   char i = 8;
  1045     06B5  3008               	movlw	8
  1046     06B6  00F6               	movwf	SpiClearMatrix@i
  1047     06B7                     l727:
  1048                           
  1049                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  1050     06B7  0876               	movf	SpiClearMatrix@i,w
  1051     06B8  00F4               	movwf	??_SpiClearMatrix
  1052     06B9  01F5               	clrf	??_SpiClearMatrix+1
  1053     06BA  0874               	movf	??_SpiClearMatrix,w
  1054     06BB  00F1               	movwf	SendToSegment@segment
  1055     06BC  0875               	movf	??_SpiClearMatrix+1,w
  1056     06BD  00F2               	movwf	SendToSegment@segment+1
  1057     06BE  01F3               	clrf	SendToSegment@data
  1058     06BF  120A  118A  26A2  120A  118A  	fcall	_SendToSegment
  1059     06C4                     l729:
  1060                           
  1061                           ;matrix.c: 16:   } while (--i);
  1062     06C4  3001               	movlw	1
  1063     06C5  02F6               	subwf	SpiClearMatrix@i,f
  1064     06C6  1D03               	btfss	3,2
  1065     06C7  2EC9               	goto	u81
  1066     06C8  2ECA               	goto	u80
  1067     06C9                     u81:
  1068     06C9  2EB7               	goto	l727
  1069     06CA                     u80:
  1070     06CA                     l71:
  1071     06CA  0008               	return
  1072     06CB                     __end_of_SpiClearMatrix:
  1073                           
  1074                           	psect	text5
  1075     06A2                     __ptext5:	
  1076 ;; *************** function _SendToSegment *****************
  1077 ;; Defined at:
  1078 ;;		line 34 in file "matrix.c"
  1079 ;; Parameters:    Size  Location     Type
  1080 ;;  segment         2    1[COMMON] int 
  1081 ;;  data            1    3[COMMON] unsigned char 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;		None
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  1    wreg      void 
  1086 ;; Registers used:
  1087 ;;		wreg, status,2, status,0, pclath, cstack
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1093 ;;      Params:         3       0       0       0       0
  1094 ;;      Locals:         0       0       0       0       0
  1095 ;;      Temps:          0       0       0       0       0
  1096 ;;      Totals:         3       0       0       0       0
  1097 ;;Total ram usage:        3 bytes
  1098 ;; Hardware stack levels used: 1
  1099 ;; Hardware stack levels required when called: 1
  1100 ;; This function calls:
  1101 ;;		_SpiSendByte
  1102 ;; This function is called by:
  1103 ;;		_main
  1104 ;;		_SpiClearMatrix
  1105 ;;		_MatrixInit
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109     06A2                     _SendToSegment:	
  1110                           ;psect for function _SendToSegment
  1111                           
  1112     06A2                     l719:	
  1113                           ;incstack = 0
  1114                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1115                           
  1116                           
  1117                           ;matrix.c: 35:     RA5 = 0;
  1118     06A2  1283               	bcf	3,5	;RP0=0, select bank0
  1119     06A3  1303               	bcf	3,6	;RP1=0, select bank0
  1120     06A4  1285               	bcf	5,5	;volatile
  1121     06A5                     l721:
  1122                           
  1123                           ;matrix.c: 36:     SpiSendByte(segment);
  1124     06A5  0871               	movf	SendToSegment@segment,w
  1125     06A6  120A  118A  2685  120A  118A  	fcall	_SpiSendByte
  1126                           
  1127                           ;matrix.c: 37:     SpiSendByte(data);
  1128     06AB  0873               	movf	SendToSegment@data,w
  1129     06AC  120A  118A  2685  120A  118A  	fcall	_SpiSendByte
  1130     06B1                     l723:
  1131                           
  1132                           ;matrix.c: 38:     RA5 = 1;
  1133     06B1  1283               	bcf	3,5	;RP0=0, select bank0
  1134     06B2  1303               	bcf	3,6	;RP1=0, select bank0
  1135     06B3  1685               	bsf	5,5	;volatile
  1136     06B4                     l77:
  1137     06B4  0008               	return
  1138     06B5                     __end_of_SendToSegment:
  1139                           
  1140                           	psect	text6
  1141     0685                     __ptext6:	
  1142 ;; *************** function _SpiSendByte *****************
  1143 ;; Defined at:
  1144 ;;		line 18 in file "spi.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;  data            1    wreg     unsigned char 
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;  data            1    0[COMMON] unsigned char 
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1158 ;;      Params:         0       0       0       0       0
  1159 ;;      Locals:         1       0       0       0       0
  1160 ;;      Temps:          0       0       0       0       0
  1161 ;;      Totals:         1       0       0       0       0
  1162 ;;Total ram usage:        1 bytes
  1163 ;; Hardware stack levels used: 1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_SendToSegment
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171     0685                     _SpiSendByte:	
  1172                           ;psect for function _SpiSendByte
  1173                           
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _SpiSendByte: [wreg]
  1177                           ;SpiSendByte@data stored from wreg
  1178     0685  00F0               	movwf	SpiSendByte@data
  1179     0686                     l717:
  1180                           
  1181                           ;spi.c: 19:     SSPBUF = data;
  1182     0686  0870               	movf	SpiSendByte@data,w
  1183     0687  1283               	bcf	3,5	;RP0=0, select bank0
  1184     0688  1303               	bcf	3,6	;RP1=0, select bank0
  1185     0689  0093               	movwf	19	;volatile
  1186     068A                     l55:	
  1187                           ;spi.c: 20:     while (!SSPIF);
  1188                           
  1189     068A  1D8C               	btfss	12,3	;volatile
  1190     068B  2E8D               	goto	u71
  1191     068C  2E8E               	goto	u70
  1192     068D                     u71:
  1193     068D  2E8A               	goto	l55
  1194     068E                     u70:
  1195     068E                     l57:
  1196                           
  1197                           ;spi.c: 21:     SSPIF = 0;
  1198     068E  118C               	bcf	12,3	;volatile
  1199     068F                     l58:
  1200     068F  0008               	return
  1201     0690                     __end_of_SpiSendByte:
  1202     0002                     ___latbits      equ	2
  1203     007E                     btemp           set	126	;btemp
  1204     007E                     wtemp0          set	126
  1205                           
  1206                           	psect	config
  1207                           
  1208                           ;Config register CONFIG @ 0x2007
  1209                           ;	Oscillator Selection bits
  1210                           ;	FOSC = HS, HS oscillator
  1211                           ;	Watchdog Timer Enable bit
  1212                           ;	WDTE = OFF, WDT disabled
  1213                           ;	Power-up Timer Enable bit
  1214                           ;	PWRTE = OFF, PWRT disabled
  1215                           ;	FLASH Program Memory Code Protection bits
  1216                           ;	CP = OFF, Code protection off
  1217                           ;	Brown-out Reset Enable bit
  1218                           ;	BOREN = OFF, BOR disabled
  1219                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1220                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1221                           ;	Data EE Memory Code Protection
  1222                           ;	CPD = OFF, Code Protection off
  1223                           ;	FLASH Program Memory Write Enable
  1224                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1225                           ;	In-Circuit Debugger Mode bit
  1226                           ;	DEBUG = 0x1, unprogrammed default
  1227     2007                     	org	8199
  1228     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      8       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_MatrixInit
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0     726
                                             10 COMMON     3     3      0
                                              0 BANK0      8     8      0
                         _MatrixInit
                          _PortBInit
                      _SendToSegment
                     _SpiClearMatrix
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     227
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _SpiClearMatrix                                       3     3      0     136
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _SendToSegment                                        3     0      3      91
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _PortBInit
   _SendToSegment
   _SpiClearMatrix
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80      8       8     10.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      21      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec  5 15:07:59 2024

         _SpiClearMatrix 06B5                       l17 071A                       l35 0684  
                     l52 06A1                       l55 068A                       l71 06CA  
                     l57 068E                       l58 068F                       l74 070A  
                     l77 06B4                       u70 068E                       u71 068D  
                     u80 06CA                       u81 06C9                       u90 0742  
                     u91 0741                       u95 073E          SpiSendByte@data 0070  
                    l721 06A5                      l723 06B1                      l731 0690  
                    l811 07F3                      l803 07C4                      l717 0686  
                    l725 06B5                      l741 06D7                      l733 0693  
                    l805 07D1                      l719 06A2                      l727 06B7  
                    l751 0705                      l743 06DA                      l735 069B  
                    l807 07D9                      l729 06C4                      l745 06E4  
                    l753 067E                      l737 069D                      l809 07E6  
                    l747 06EF                      l739 06CB                      l763 0720  
                    l755 070B                      l749 06FA                      l781 0777  
                    l765 072D                      l757 0715                      l791 078F  
                    l783 0784                      l775 0755                      l767 0735  
                    l793 079C                      l785 0789                      l777 0762  
                    l769 0742                      l795 07A4                      l779 076A  
                    l797 07B1                      _RA5 002D                      u100 0777  
                    u101 0776                      u110 07B1                      u111 07B0  
                    u120 07E6                      u121 07E5                      u105 0773  
                    u115 07AD                      u125 07E2                      u137 0748  
                    u147 077D                      u157 07B7                      u167 07EC  
                    u177 06D1                     _main 070B                     btemp 007E  
                   start 0000   __end_of_SpiClearMatrix 06CB          __end_of_SpiInit 06A2  
                  ?_main 0070                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _SSPIF 0063          SpiClearMatrix@i 0076        SendToSegment@data 0073  
                  main@x 0020                    status 0003                    wtemp0 007E  
        ?_SpiClearMatrix 0070          __initialization 07FC             __end_of_main 07FC  
             _MatrixInit 06CB                   ??_main 007A                   _SSPCON 0014  
                 _SSPBUF 0013                ??_SpiInit 0070            ??_SpiSendByte 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070              ?_MatrixInit 0070  
    __end_of_SpiSendByte 0690        __end_of_PortBInit 0685               __pmaintext 070B  
                _SSPSTAT 0094         ??_SpiClearMatrix 0074                  _SpiInit 0690  
          _SendToSegment 06A2              _SpiSendByte 0685                  __ptext1 0690  
                __ptext2 067E                  __ptext3 06CB                  __ptext4 06B5  
                __ptext5 06A2                  __ptext6 0685     end_of_initialization 07FC  
         ?_SendToSegment 0071             ??_MatrixInit 0077      start_initialization 07FC  
     __end_of_MatrixInit 070B          ??_SendToSegment 0074                _PortBInit 067E  
              ___latbits 0002            __pcstackBANK0 0020                 ?_SpiInit 0070  
             ?_PortBInit 0070             ?_SpiSendByte 0070              ??_PortBInit 0070  
   SendToSegment@segment 0071                 main@x_56 0022                 main@x_57 0024  
               main@x_58 0026    __end_of_SendToSegment 06B5  



Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Dec 18 17:10:54 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38     0000                     
    39                           ; Generated 12/10/2023 GMT
    40                           ; 
    41                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F876 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73     0004                     fsr             equ	4
    74     0004                     fsr0            equ	4
    75     0000                     indf            equ	0
    76     0000                     indf0           equ	0
    77     0002                     pc              equ	2
    78     0002                     pcl             equ	2
    79     000A                     pclath          equ	10
    80     0003                     status          equ	3
    81     0000                     INDF            equ	0	;# 
    82     0001                     TMR0            equ	1	;# 
    83     0002                     PCL             equ	2	;# 
    84     0003                     STATUS          equ	3	;# 
    85     0004                     FSR             equ	4	;# 
    86     0005                     PORTA           equ	5	;# 
    87     0006                     PORTB           equ	6	;# 
    88     0007                     PORTC           equ	7	;# 
    89     000A                     PCLATH          equ	10	;# 
    90     000B                     INTCON          equ	11	;# 
    91     000C                     PIR1            equ	12	;# 
    92     000D                     PIR2            equ	13	;# 
    93     000E                     TMR1            equ	14	;# 
    94     000E                     TMR1L           equ	14	;# 
    95     000F                     TMR1H           equ	15	;# 
    96     0010                     T1CON           equ	16	;# 
    97     0011                     TMR2            equ	17	;# 
    98     0012                     T2CON           equ	18	;# 
    99     0013                     SSPBUF          equ	19	;# 
   100     0014                     SSPCON          equ	20	;# 
   101     0015                     CCPR1           equ	21	;# 
   102     0015                     CCPR1L          equ	21	;# 
   103     0016                     CCPR1H          equ	22	;# 
   104     0017                     CCP1CON         equ	23	;# 
   105     0018                     RCSTA           equ	24	;# 
   106     0019                     TXREG           equ	25	;# 
   107     001A                     RCREG           equ	26	;# 
   108     001B                     CCPR2           equ	27	;# 
   109     001B                     CCPR2L          equ	27	;# 
   110     001C                     CCPR2H          equ	28	;# 
   111     001D                     CCP2CON         equ	29	;# 
   112     001E                     ADRESH          equ	30	;# 
   113     001F                     ADCON0          equ	31	;# 
   114     0081                     OPTION_REG      equ	129	;# 
   115     0085                     TRISA           equ	133	;# 
   116     0086                     TRISB           equ	134	;# 
   117     0087                     TRISC           equ	135	;# 
   118     008C                     PIE1            equ	140	;# 
   119     008D                     PIE2            equ	141	;# 
   120     008E                     PCON            equ	142	;# 
   121     0091                     SSPCON2         equ	145	;# 
   122     0092                     PR2             equ	146	;# 
   123     0093                     SSPADD          equ	147	;# 
   124     0094                     SSPSTAT         equ	148	;# 
   125     0098                     TXSTA           equ	152	;# 
   126     0099                     SPBRG           equ	153	;# 
   127     009E                     ADRESL          equ	158	;# 
   128     009F                     ADCON1          equ	159	;# 
   129     010C                     EEDATA          equ	268	;# 
   130     010D                     EEADR           equ	269	;# 
   131     010E                     EEDATH          equ	270	;# 
   132     010F                     EEADRH          equ	271	;# 
   133     018C                     EECON1          equ	396	;# 
   134     018D                     EECON2          equ	397	;# 
   135     0000                     INDF            equ	0	;# 
   136     0001                     TMR0            equ	1	;# 
   137     0002                     PCL             equ	2	;# 
   138     0003                     STATUS          equ	3	;# 
   139     0004                     FSR             equ	4	;# 
   140     0005                     PORTA           equ	5	;# 
   141     0006                     PORTB           equ	6	;# 
   142     0007                     PORTC           equ	7	;# 
   143     000A                     PCLATH          equ	10	;# 
   144     000B                     INTCON          equ	11	;# 
   145     000C                     PIR1            equ	12	;# 
   146     000D                     PIR2            equ	13	;# 
   147     000E                     TMR1            equ	14	;# 
   148     000E                     TMR1L           equ	14	;# 
   149     000F                     TMR1H           equ	15	;# 
   150     0010                     T1CON           equ	16	;# 
   151     0011                     TMR2            equ	17	;# 
   152     0012                     T2CON           equ	18	;# 
   153     0013                     SSPBUF          equ	19	;# 
   154     0014                     SSPCON          equ	20	;# 
   155     0015                     CCPR1           equ	21	;# 
   156     0015                     CCPR1L          equ	21	;# 
   157     0016                     CCPR1H          equ	22	;# 
   158     0017                     CCP1CON         equ	23	;# 
   159     0018                     RCSTA           equ	24	;# 
   160     0019                     TXREG           equ	25	;# 
   161     001A                     RCREG           equ	26	;# 
   162     001B                     CCPR2           equ	27	;# 
   163     001B                     CCPR2L          equ	27	;# 
   164     001C                     CCPR2H          equ	28	;# 
   165     001D                     CCP2CON         equ	29	;# 
   166     001E                     ADRESH          equ	30	;# 
   167     001F                     ADCON0          equ	31	;# 
   168     0081                     OPTION_REG      equ	129	;# 
   169     0085                     TRISA           equ	133	;# 
   170     0086                     TRISB           equ	134	;# 
   171     0087                     TRISC           equ	135	;# 
   172     008C                     PIE1            equ	140	;# 
   173     008D                     PIE2            equ	141	;# 
   174     008E                     PCON            equ	142	;# 
   175     0091                     SSPCON2         equ	145	;# 
   176     0092                     PR2             equ	146	;# 
   177     0093                     SSPADD          equ	147	;# 
   178     0094                     SSPSTAT         equ	148	;# 
   179     0098                     TXSTA           equ	152	;# 
   180     0099                     SPBRG           equ	153	;# 
   181     009E                     ADRESL          equ	158	;# 
   182     009F                     ADCON1          equ	159	;# 
   183     010C                     EEDATA          equ	268	;# 
   184     010D                     EEADR           equ	269	;# 
   185     010E                     EEDATH          equ	270	;# 
   186     010F                     EEADRH          equ	271	;# 
   187     018C                     EECON1          equ	396	;# 
   188     018D                     EECON2          equ	397	;# 
   189     0000                     INDF            equ	0	;# 
   190     0001                     TMR0            equ	1	;# 
   191     0002                     PCL             equ	2	;# 
   192     0003                     STATUS          equ	3	;# 
   193     0004                     FSR             equ	4	;# 
   194     0005                     PORTA           equ	5	;# 
   195     0006                     PORTB           equ	6	;# 
   196     0007                     PORTC           equ	7	;# 
   197     000A                     PCLATH          equ	10	;# 
   198     000B                     INTCON          equ	11	;# 
   199     000C                     PIR1            equ	12	;# 
   200     000D                     PIR2            equ	13	;# 
   201     000E                     TMR1            equ	14	;# 
   202     000E                     TMR1L           equ	14	;# 
   203     000F                     TMR1H           equ	15	;# 
   204     0010                     T1CON           equ	16	;# 
   205     0011                     TMR2            equ	17	;# 
   206     0012                     T2CON           equ	18	;# 
   207     0013                     SSPBUF          equ	19	;# 
   208     0014                     SSPCON          equ	20	;# 
   209     0015                     CCPR1           equ	21	;# 
   210     0015                     CCPR1L          equ	21	;# 
   211     0016                     CCPR1H          equ	22	;# 
   212     0017                     CCP1CON         equ	23	;# 
   213     0018                     RCSTA           equ	24	;# 
   214     0019                     TXREG           equ	25	;# 
   215     001A                     RCREG           equ	26	;# 
   216     001B                     CCPR2           equ	27	;# 
   217     001B                     CCPR2L          equ	27	;# 
   218     001C                     CCPR2H          equ	28	;# 
   219     001D                     CCP2CON         equ	29	;# 
   220     001E                     ADRESH          equ	30	;# 
   221     001F                     ADCON0          equ	31	;# 
   222     0081                     OPTION_REG      equ	129	;# 
   223     0085                     TRISA           equ	133	;# 
   224     0086                     TRISB           equ	134	;# 
   225     0087                     TRISC           equ	135	;# 
   226     008C                     PIE1            equ	140	;# 
   227     008D                     PIE2            equ	141	;# 
   228     008E                     PCON            equ	142	;# 
   229     0091                     SSPCON2         equ	145	;# 
   230     0092                     PR2             equ	146	;# 
   231     0093                     SSPADD          equ	147	;# 
   232     0094                     SSPSTAT         equ	148	;# 
   233     0098                     TXSTA           equ	152	;# 
   234     0099                     SPBRG           equ	153	;# 
   235     009E                     ADRESL          equ	158	;# 
   236     009F                     ADCON1          equ	159	;# 
   237     010C                     EEDATA          equ	268	;# 
   238     010D                     EEADR           equ	269	;# 
   239     010E                     EEDATH          equ	270	;# 
   240     010F                     EEADRH          equ	271	;# 
   241     018C                     EECON1          equ	396	;# 
   242     018D                     EECON2          equ	397	;# 
   243     0000                     INDF            equ	0	;# 
   244     0001                     TMR0            equ	1	;# 
   245     0002                     PCL             equ	2	;# 
   246     0003                     STATUS          equ	3	;# 
   247     0004                     FSR             equ	4	;# 
   248     0005                     PORTA           equ	5	;# 
   249     0006                     PORTB           equ	6	;# 
   250     0007                     PORTC           equ	7	;# 
   251     000A                     PCLATH          equ	10	;# 
   252     000B                     INTCON          equ	11	;# 
   253     000C                     PIR1            equ	12	;# 
   254     000D                     PIR2            equ	13	;# 
   255     000E                     TMR1            equ	14	;# 
   256     000E                     TMR1L           equ	14	;# 
   257     000F                     TMR1H           equ	15	;# 
   258     0010                     T1CON           equ	16	;# 
   259     0011                     TMR2            equ	17	;# 
   260     0012                     T2CON           equ	18	;# 
   261     0013                     SSPBUF          equ	19	;# 
   262     0014                     SSPCON          equ	20	;# 
   263     0015                     CCPR1           equ	21	;# 
   264     0015                     CCPR1L          equ	21	;# 
   265     0016                     CCPR1H          equ	22	;# 
   266     0017                     CCP1CON         equ	23	;# 
   267     0018                     RCSTA           equ	24	;# 
   268     0019                     TXREG           equ	25	;# 
   269     001A                     RCREG           equ	26	;# 
   270     001B                     CCPR2           equ	27	;# 
   271     001B                     CCPR2L          equ	27	;# 
   272     001C                     CCPR2H          equ	28	;# 
   273     001D                     CCP2CON         equ	29	;# 
   274     001E                     ADRESH          equ	30	;# 
   275     001F                     ADCON0          equ	31	;# 
   276     0081                     OPTION_REG      equ	129	;# 
   277     0085                     TRISA           equ	133	;# 
   278     0086                     TRISB           equ	134	;# 
   279     0087                     TRISC           equ	135	;# 
   280     008C                     PIE1            equ	140	;# 
   281     008D                     PIE2            equ	141	;# 
   282     008E                     PCON            equ	142	;# 
   283     0091                     SSPCON2         equ	145	;# 
   284     0092                     PR2             equ	146	;# 
   285     0093                     SSPADD          equ	147	;# 
   286     0094                     SSPSTAT         equ	148	;# 
   287     0098                     TXSTA           equ	152	;# 
   288     0099                     SPBRG           equ	153	;# 
   289     009E                     ADRESL          equ	158	;# 
   290     009F                     ADCON1          equ	159	;# 
   291     010C                     EEDATA          equ	268	;# 
   292     010D                     EEADR           equ	269	;# 
   293     010E                     EEDATH          equ	270	;# 
   294     010F                     EEADRH          equ	271	;# 
   295     018C                     EECON1          equ	396	;# 
   296     018D                     EECON2          equ	397	;# 
   297     0000                     INDF            equ	0	;# 
   298     0001                     TMR0            equ	1	;# 
   299     0002                     PCL             equ	2	;# 
   300     0003                     STATUS          equ	3	;# 
   301     0004                     FSR             equ	4	;# 
   302     0005                     PORTA           equ	5	;# 
   303     0006                     PORTB           equ	6	;# 
   304     0007                     PORTC           equ	7	;# 
   305     000A                     PCLATH          equ	10	;# 
   306     000B                     INTCON          equ	11	;# 
   307     000C                     PIR1            equ	12	;# 
   308     000D                     PIR2            equ	13	;# 
   309     000E                     TMR1            equ	14	;# 
   310     000E                     TMR1L           equ	14	;# 
   311     000F                     TMR1H           equ	15	;# 
   312     0010                     T1CON           equ	16	;# 
   313     0011                     TMR2            equ	17	;# 
   314     0012                     T2CON           equ	18	;# 
   315     0013                     SSPBUF          equ	19	;# 
   316     0014                     SSPCON          equ	20	;# 
   317     0015                     CCPR1           equ	21	;# 
   318     0015                     CCPR1L          equ	21	;# 
   319     0016                     CCPR1H          equ	22	;# 
   320     0017                     CCP1CON         equ	23	;# 
   321     0018                     RCSTA           equ	24	;# 
   322     0019                     TXREG           equ	25	;# 
   323     001A                     RCREG           equ	26	;# 
   324     001B                     CCPR2           equ	27	;# 
   325     001B                     CCPR2L          equ	27	;# 
   326     001C                     CCPR2H          equ	28	;# 
   327     001D                     CCP2CON         equ	29	;# 
   328     001E                     ADRESH          equ	30	;# 
   329     001F                     ADCON0          equ	31	;# 
   330     0081                     OPTION_REG      equ	129	;# 
   331     0085                     TRISA           equ	133	;# 
   332     0086                     TRISB           equ	134	;# 
   333     0087                     TRISC           equ	135	;# 
   334     008C                     PIE1            equ	140	;# 
   335     008D                     PIE2            equ	141	;# 
   336     008E                     PCON            equ	142	;# 
   337     0091                     SSPCON2         equ	145	;# 
   338     0092                     PR2             equ	146	;# 
   339     0093                     SSPADD          equ	147	;# 
   340     0094                     SSPSTAT         equ	148	;# 
   341     0098                     TXSTA           equ	152	;# 
   342     0099                     SPBRG           equ	153	;# 
   343     009E                     ADRESL          equ	158	;# 
   344     009F                     ADCON1          equ	159	;# 
   345     010C                     EEDATA          equ	268	;# 
   346     010D                     EEADR           equ	269	;# 
   347     010E                     EEDATH          equ	270	;# 
   348     010F                     EEADRH          equ	271	;# 
   349     018C                     EECON1          equ	396	;# 
   350     018D                     EECON2          equ	397	;# 
   351     0000                     INDF            equ	0	;# 
   352     0001                     TMR0            equ	1	;# 
   353     0002                     PCL             equ	2	;# 
   354     0003                     STATUS          equ	3	;# 
   355     0004                     FSR             equ	4	;# 
   356     0005                     PORTA           equ	5	;# 
   357     0006                     PORTB           equ	6	;# 
   358     0007                     PORTC           equ	7	;# 
   359     000A                     PCLATH          equ	10	;# 
   360     000B                     INTCON          equ	11	;# 
   361     000C                     PIR1            equ	12	;# 
   362     000D                     PIR2            equ	13	;# 
   363     000E                     TMR1            equ	14	;# 
   364     000E                     TMR1L           equ	14	;# 
   365     000F                     TMR1H           equ	15	;# 
   366     0010                     T1CON           equ	16	;# 
   367     0011                     TMR2            equ	17	;# 
   368     0012                     T2CON           equ	18	;# 
   369     0013                     SSPBUF          equ	19	;# 
   370     0014                     SSPCON          equ	20	;# 
   371     0015                     CCPR1           equ	21	;# 
   372     0015                     CCPR1L          equ	21	;# 
   373     0016                     CCPR1H          equ	22	;# 
   374     0017                     CCP1CON         equ	23	;# 
   375     0018                     RCSTA           equ	24	;# 
   376     0019                     TXREG           equ	25	;# 
   377     001A                     RCREG           equ	26	;# 
   378     001B                     CCPR2           equ	27	;# 
   379     001B                     CCPR2L          equ	27	;# 
   380     001C                     CCPR2H          equ	28	;# 
   381     001D                     CCP2CON         equ	29	;# 
   382     001E                     ADRESH          equ	30	;# 
   383     001F                     ADCON0          equ	31	;# 
   384     0081                     OPTION_REG      equ	129	;# 
   385     0085                     TRISA           equ	133	;# 
   386     0086                     TRISB           equ	134	;# 
   387     0087                     TRISC           equ	135	;# 
   388     008C                     PIE1            equ	140	;# 
   389     008D                     PIE2            equ	141	;# 
   390     008E                     PCON            equ	142	;# 
   391     0091                     SSPCON2         equ	145	;# 
   392     0092                     PR2             equ	146	;# 
   393     0093                     SSPADD          equ	147	;# 
   394     0094                     SSPSTAT         equ	148	;# 
   395     0098                     TXSTA           equ	152	;# 
   396     0099                     SPBRG           equ	153	;# 
   397     009E                     ADRESL          equ	158	;# 
   398     009F                     ADCON1          equ	159	;# 
   399     010C                     EEDATA          equ	268	;# 
   400     010D                     EEADR           equ	269	;# 
   401     010E                     EEDATH          equ	270	;# 
   402     010F                     EEADRH          equ	271	;# 
   403     018C                     EECON1          equ	396	;# 
   404     018D                     EECON2          equ	397	;# 
   405                           
   406                           	psect	idataBANK1
   407     0FDA                     __pidataBANK1:
   408                           
   409                           ;initializer for main@F928
   410     0FDA  3407               	retlw	7
   411     0FDB  3405               	retlw	5
   412     0FDC  3402               	retlw	2
   413                           
   414                           	psect	strings
   415     0800                     __pstrings:
   416     0800                     stringtab:
   417     0800                     __stringtab:
   418     0800                     stringcode:	
   419                           ;	String table - string pointers are 1 byte each
   420                           
   421     0800                     stringdir:
   422     0800  3008               	movlw	high stringdir
   423     0801  008A               	movwf	10
   424     0802  0804               	movf	4,w
   425     0803  0A84               	incf	4,f
   426     0804  0782               	addwf	2,f
   427     0805                     __stringbase:
   428     0805  3400               	retlw	0
   429     0806                     __end_of__stringtab:
   430     0806                     ChangeOfCoordinates@delay:
   431     0806  3496               	retlw	150
   432     0807  3400               	retlw	0
   433     0808  3400               	retlw	0
   434     0809  3400               	retlw	0
   435     080A                     __end_ofChangeOfCoordinates@delay:
   436     0013                     _SSPBUF         set	19
   437     0014                     _SSPCON         set	20
   438     0005                     _PORTA          set	5
   439     0006                     _PORTB          set	6
   440     002D                     _RA5            set	45
   441     0063                     _SSPIF          set	99
   442     0094                     _SSPSTAT        set	148
   443     0085                     _TRISA          set	133
   444     0087                     _TRISC          set	135
   445     0086                     _TRISB          set	134
   446                           
   447                           	psect	cinit
   448     07D8                     start_initialization:	
   449                           ; #config settings
   450                           
   451     07D8                     __initialization:
   452                           
   453                           ; Initialize objects allocated to BANK1
   454     07D8  1683               	bsf	3,5	;RP0=1, select bank1
   455     07D9  1303               	bcf	3,6	;RP1=0, select bank1
   456     07DA  120A  158A  27DA  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   457     07DF  00A8               	movwf	__pdataBANK1& (0+127)
   458     07E0  120A  158A  27DB  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   459     07E5  00A9               	movwf	(__pdataBANK1+1)& (0+127)
   460     07E6  120A  158A  27DC  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   461     07EB  00AA               	movwf	(__pdataBANK1+2)& (0+127)
   462                           
   463                           ; Clear objects allocated to BANK1
   464     07EC  01A0               	clrf	__pbssBANK1& (0+127)
   465     07ED  01A1               	clrf	(__pbssBANK1+1)& (0+127)
   466     07EE  01A2               	clrf	(__pbssBANK1+2)& (0+127)
   467     07EF  01A3               	clrf	(__pbssBANK1+3)& (0+127)
   468     07F0  01A4               	clrf	(__pbssBANK1+4)& (0+127)
   469     07F1  01A5               	clrf	(__pbssBANK1+5)& (0+127)
   470     07F2  01A6               	clrf	(__pbssBANK1+6)& (0+127)
   471     07F3  01A7               	clrf	(__pbssBANK1+7)& (0+127)
   472                           
   473                           ; Clear objects allocated to BANK0
   474     07F4  1283               	bcf	3,5	;RP0=0, select bank0
   475     07F5  1303               	bcf	3,6	;RP1=0, select bank0
   476     07F6  01E9               	clrf	__pbssBANK0& (0+127)
   477     07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   478     07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   479     07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   480     07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   481     07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
   482     07FC                     end_of_initialization:	
   483                           ;End of C runtime variable initialization code
   484                           
   485     07FC                     __end_of__initialization:
   486     07FC  0183               	clrf	3
   487     07FD  120A  118A  29EF   	ljmp	_main	;jump to C main() function
   488                           
   489                           	psect	bssBANK0
   490     0069                     __pbssBANK0:
   491     0069                     _brkp:
   492     0069                     	ds	2
   493     006B                     malloc@cur:
   494     006B                     	ds	2
   495     006D                     ___freelist:
   496     006D                     	ds	2
   497                           
   498                           	psect	bssBANK1
   499     00A0                     __pbssBANK1:
   500     00A0                     malloc@lock:
   501     00A0                     	ds	4
   502     00A4                     malloc@end:
   503     00A4                     	ds	2
   504     00A6                     _errno:
   505     00A6                     	ds	2
   506                           
   507                           	psect	dataBANK1
   508     00A8                     __pdataBANK1:
   509     00A8                     main@F928:
   510     00A8                     	ds	3
   511                           
   512                           	psect	cstackCOMMON
   513     0070                     __pcstackCOMMON:
   514     0070                     ?_Reverse:
   515     0070                     ?_SpiInit:	
   516                           ; 1 bytes @ 0x0
   517                           
   518     0070                     ?_MatrixInit:	
   519                           ; 1 bytes @ 0x0
   520                           
   521     0070                     ?_PortBInit:	
   522                           ; 1 bytes @ 0x0
   523                           
   524     0070                     ?_SetPosition:	
   525                           ; 1 bytes @ 0x0
   526                           
   527     0070                     ?_free:	
   528                           ; 1 bytes @ 0x0
   529                           
   530     0070                     ?_main:	
   531                           ; 1 bytes @ 0x0
   532                           
   533     0070                     ?_SpiSendByte:	
   534                           ; 1 bytes @ 0x0
   535                           
   536     0070                     ?_SpiClearMatrix:	
   537                           ; 1 bytes @ 0x0
   538                           
   539     0070                     ?_MovieDown:	
   540                           ; 1 bytes @ 0x0
   541                           
   542     0070                     ?_MovieUp:	
   543                           ; 1 bytes @ 0x0
   544                           
   545     0070                     ?_MovieLeft:	
   546                           ; 1 bytes @ 0x0
   547                           
   548     0070                     ?_MovieRigth:	
   549                           ; 1 bytes @ 0x0
   550                           
   551     0070                     ?___simple_search_fl:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     0070                     ?___expand_heap:	
   555                           ; 2 bytes @ 0x0
   556                           
   557     0070                     ?___wmul:	
   558                           ; 2 bytes @ 0x0
   559                           
   560     0070                     SpiSendByte@data:	
   561                           ; 2 bytes @ 0x0
   562                           
   563     0070                     Reverse@array:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     0070                     ___expand_heap@pn:	
   567                           ; 1 bytes @ 0x0
   568                           
   569     0070                     SetPosition@position:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0070                     MovieDown@_shapePosition:	
   573                           ; 2 bytes @ 0x0
   574                           
   575     0070                     MovieUp@_shapePosition:	
   576                           ; 2 bytes @ 0x0
   577                           
   578     0070                     MovieLeft@_shapePosition:	
   579                           ; 2 bytes @ 0x0
   580                           
   581     0070                     MovieRigth@_shapePosition:	
   582                           ; 2 bytes @ 0x0
   583                           
   584     0070                     ___wmul@multiplier:	
   585                           ; 2 bytes @ 0x0
   586                           
   587     0070                     ___simple_search_fl@n:	
   588                           ; 2 bytes @ 0x0
   589                           
   590     0070                     free@ptr:	
   591                           ; 2 bytes @ 0x0
   592                           
   593     0070                     ??_SpiInit:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0070                     ??_PortBInit:	
   597                           ; 1 bytes @ 0x0
   598                           
   599     0070                     ??_SpiSendByte:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604     0070                     	ds	1
   605     0071                     ?_SendToSegment:
   606     0071                     SendToSegment@segment:	
   607                           ; 1 bytes @ 0x1
   608                           
   609     0071                     Reverse@countElemnt:	
   610                           ; 2 bytes @ 0x1
   611                           
   612     0071                     ___expand_heap@n:	
   613                           ; 2 bytes @ 0x1
   614                           
   615     0071                     ??___expand_heap:	
   616                           ; 2 bytes @ 0x1
   617                           
   618                           
   619                           ; 1 bytes @ 0x1
   620     0071                     	ds	1
   621     0072                     SetPosition@x:
   622     0072                     ___wmul@multiplicand:	
   623                           ; 2 bytes @ 0x2
   624                           
   625     0072                     ??_free:	
   626                           ; 2 bytes @ 0x2
   627                           
   628     0072                     ??___simple_search_fl:	
   629                           ; 1 bytes @ 0x2
   630                           
   631     0072                     ??_MovieDown:	
   632                           ; 1 bytes @ 0x2
   633                           
   634     0072                     ??_MovieUp:	
   635                           ; 1 bytes @ 0x2
   636                           
   637     0072                     ??_MovieLeft:	
   638                           ; 1 bytes @ 0x2
   639                           
   640     0072                     ??_MovieRigth:	
   641                           ; 1 bytes @ 0x2
   642                           
   643                           
   644                           ; 1 bytes @ 0x2
   645     0072                     	ds	1
   646     0073                     SendToSegment@data:
   647     0073                     ___expand_heap@new_brkp:	
   648                           ; 1 bytes @ 0x3
   649                           
   650     0073                     ??_Reverse:	
   651                           ; 2 bytes @ 0x3
   652                           
   653                           
   654                           ; 1 bytes @ 0x3
   655     0073                     	ds	1
   656     0074                     ?_ShowShape:
   657     0074                     SetPosition@y:	
   658                           ; 1 bytes @ 0x4
   659                           
   660     0074                     ShowShape@coord:	
   661                           ; 2 bytes @ 0x4
   662                           
   663     0074                     ___wmul@product:	
   664                           ; 2 bytes @ 0x4
   665                           
   666     0074                     ??_SendToSegment:	
   667                           ; 2 bytes @ 0x4
   668                           
   669     0074                     ??_SpiClearMatrix:	
   670                           ; 1 bytes @ 0x4
   671                           
   672     0074                     ??___wmul:	
   673                           ; 1 bytes @ 0x4
   674                           
   675                           
   676                           ; 1 bytes @ 0x4
   677     0074                     	ds	2
   678     0076                     ?_memset:
   679     0076                     SpiClearMatrix@i:	
   680                           ; 2 bytes @ 0x6
   681                           
   682     0076                     Reverse@t:	
   683                           ; 1 bytes @ 0x6
   684                           
   685     0076                     ShowShape@countElemntArray:	
   686                           ; 1 bytes @ 0x6
   687                           
   688     0076                     memset@dest:	
   689                           ; 2 bytes @ 0x6
   690                           
   691     0076                     ??_SetPosition:	
   692                           ; 2 bytes @ 0x6
   693                           
   694                           
   695                           ; 1 bytes @ 0x6
   696     0076                     	ds	1
   697     0077                     Reverse@i:
   698     0077                     ??_MatrixInit:	
   699                           ; 2 bytes @ 0x7
   700                           
   701                           
   702                           ; 1 bytes @ 0x7
   703     0077                     	ds	1
   704     0078                     ?_malloc:
   705     0078                     ShowShape@shapeArray:	
   706                           ; 2 bytes @ 0x8
   707                           
   708     0078                     free@cptr:	
   709                           ; 1 bytes @ 0x8
   710                           
   711     0078                     malloc@n:	
   712                           ; 2 bytes @ 0x8
   713                           
   714     0078                     memset@c:	
   715                           ; 2 bytes @ 0x8
   716                           
   717                           
   718                           ; 2 bytes @ 0x8
   719     0078                     	ds	1
   720     0079                     Reverse@j:
   721     0079                     ??_ShowShape:	
   722                           ; 2 bytes @ 0x9
   723                           
   724                           
   725                           ; 1 bytes @ 0x9
   726     0079                     	ds	1
   727     007A                     free@c:
   728     007A                     memset@n:	
   729                           ; 2 bytes @ 0xA
   730                           
   731     007A                     ??_malloc:	
   732                           ; 2 bytes @ 0xA
   733                           
   734                           
   735                           ; 1 bytes @ 0xA
   736     007A                     	ds	2
   737     007C                     memset@p:
   738     007C                     ??_memset:	
   739                           ; 2 bytes @ 0xC
   740                           
   741                           
   742                           ; 1 bytes @ 0xC
   743     007C                     	ds	2
   744     007E                     ??_calloc:
   745     007E                     ??_main:	
   746                           ; 1 bytes @ 0xE
   747                           
   748                           
   749                           	psect	cstackBANK0
   750     0020                     __pcstackBANK0:	
   751                           ; 1 bytes @ 0xE
   752                           
   753     0020                     ShowShape@_pos:
   754     0020                     ___simple_search_fl@remaining_size:	
   755                           ; 2 bytes @ 0x0
   756                           
   757                           
   758                           ; 2 bytes @ 0x0
   759     0020                     	ds	2
   760     0022                     ShowShape@pos:
   761     0022                     ___simple_search_fl@best_last:	
   762                           ; 2 bytes @ 0x2
   763                           
   764                           
   765                           ; 2 bytes @ 0x2
   766     0022                     	ds	2
   767     0024                     ?_MovieShape:
   768     0024                     MovieShape@_shapePosition:	
   769                           ; 1 bytes @ 0x4
   770                           
   771     0024                     ___simple_search_fl@split:	
   772                           ; 2 bytes @ 0x4
   773                           
   774                           
   775                           ; 2 bytes @ 0x4
   776     0024                     	ds	2
   777     0026                     MovieShape@shapeArray:
   778     0026                     ___simple_search_fl@last:	
   779                           ; 1 bytes @ 0x6
   780                           
   781                           
   782                           ; 2 bytes @ 0x6
   783     0026                     	ds	1
   784     0027                     MovieShape@countElemntArray:
   785                           
   786                           ; 2 bytes @ 0x7
   787     0027                     	ds	1
   788     0028                     ___simple_search_fl@next:
   789                           
   790                           ; 2 bytes @ 0x8
   791     0028                     	ds	1
   792     0029                     ??_MovieShape:
   793                           
   794                           ; 1 bytes @ 0x9
   795     0029                     	ds	1
   796     002A                     ___simple_search_fl@c:
   797                           
   798                           ; 2 bytes @ 0xA
   799     002A                     	ds	1
   800     002B                     MovieShape@dir:
   801                           
   802                           ; 1 bytes @ 0xB
   803     002B                     	ds	1
   804     002C                     ___simple_search_fl@best:
   805                           
   806                           ; 2 bytes @ 0xC
   807     002C                     	ds	2
   808     002E                     malloc@m:
   809                           
   810                           ; 2 bytes @ 0xE
   811     002E                     	ds	2
   812     0030                     malloc@sz:
   813                           
   814                           ; 2 bytes @ 0x10
   815     0030                     	ds	2
   816     0032                     malloc@size:
   817                           
   818                           ; 2 bytes @ 0x12
   819     0032                     	ds	2
   820     0034                     malloc@p:
   821                           
   822                           ; 2 bytes @ 0x14
   823     0034                     	ds	2
   824     0036                     malloc@new:
   825                           
   826                           ; 2 bytes @ 0x16
   827     0036                     	ds	2
   828     0038                     ?_calloc:
   829     0038                     calloc@nmemb:	
   830                           ; 2 bytes @ 0x18
   831                           
   832                           
   833                           ; 2 bytes @ 0x18
   834     0038                     	ds	2
   835     003A                     calloc@size:
   836                           
   837                           ; 2 bytes @ 0x1A
   838     003A                     	ds	2
   839     003C                     calloc@new_ptr:
   840                           
   841                           ; 2 bytes @ 0x1C
   842     003C                     	ds	2
   843     003E                     ?_Rotate:
   844     003E                     Rotate@array_:	
   845                           ; 1 bytes @ 0x1E
   846                           
   847                           
   848                           ; 1 bytes @ 0x1E
   849     003E                     	ds	1
   850     003F                     Rotate@length:
   851                           
   852                           ; 2 bytes @ 0x1F
   853     003F                     	ds	2
   854     0041                     ??_Rotate:
   855                           
   856                           ; 1 bytes @ 0x21
   857     0041                     	ds	7
   858     0048                     Rotate@x:
   859                           
   860                           ; 2 bytes @ 0x28
   861     0048                     	ds	2
   862     004A                     Rotate@i:
   863                           
   864                           ; 2 bytes @ 0x2A
   865     004A                     	ds	2
   866     004C                     Rotate@y:
   867                           
   868                           ; 2 bytes @ 0x2C
   869     004C                     	ds	2
   870     004E                     Rotate@res:
   871                           
   872                           ; 2 bytes @ 0x2E
   873     004E                     	ds	2
   874     0050                     Rotate@_i:
   875                           
   876                           ; 2 bytes @ 0x30
   877     0050                     	ds	2
   878     0052                     ?_ChangeOfCoordinates:
   879     0052                     ChangeOfCoordinates@_shapePosition:	
   880                           ; 1 bytes @ 0x32
   881                           
   882                           
   883                           ; 2 bytes @ 0x32
   884     0052                     	ds	2
   885     0054                     ChangeOfCoordinates@_figure:
   886                           
   887                           ; 1 bytes @ 0x34
   888     0054                     	ds	1
   889     0055                     ChangeOfCoordinates@_countElemntArray:
   890                           
   891                           ; 2 bytes @ 0x35
   892     0055                     	ds	2
   893     0057                     ChangeOfCoordinates@_reverse:
   894                           
   895                           ; 1 bytes @ 0x37
   896     0057                     	ds	1
   897     0058                     ??_ChangeOfCoordinates:
   898                           
   899                           ; 1 bytes @ 0x38
   900     0058                     	ds	3
   901     005B                     ChangeOfCoordinates@i:
   902                           
   903                           ; 2 bytes @ 0x3B
   904     005B                     	ds	2
   905     005D                     ChangeOfCoordinates@step:
   906                           
   907                           ; 2 bytes @ 0x3D
   908     005D                     	ds	2
   909     005F                     main@square_1:
   910                           
   911                           ; 3 bytes @ 0x3F
   912     005F                     	ds	3
   913     0062                     main@countElemntArray:
   914                           
   915                           ; 2 bytes @ 0x42
   916     0062                     	ds	2
   917     0064                     main@reverse:
   918                           
   919                           ; 1 bytes @ 0x44
   920     0064                     	ds	1
   921     0065                     main@shapePosition:
   922                           
   923                           ; 4 bytes @ 0x45
   924     0065                     	ds	4
   925                           
   926                           	psect	maintext
   927     01EF                     __pmaintext:	
   928 ;;
   929 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   930 ;;
   931 ;; *************** function _main *****************
   932 ;; Defined at:
   933 ;;		line 53 in file "main.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  shapePositio    4   69[BANK0 ] struct .
   938 ;;  square_1        3   63[BANK0 ] unsigned char [3]
   939 ;;  countElemntA    2   66[BANK0 ] int 
   940 ;;  reverse         1   68[BANK0 ] _Bool 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : B00/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   950 ;;      Params:         0       0       0       0       0
   951 ;;      Locals:         0      10       0       0       0
   952 ;;      Temps:          0       0       0       0       0
   953 ;;      Totals:         0      10       0       0       0
   954 ;;Total ram usage:       10 bytes
   955 ;; Hardware stack levels required when called: 5
   956 ;; This function calls:
   957 ;;		_ChangeOfCoordinates
   958 ;;		_MatrixInit
   959 ;;		_PortBInit
   960 ;;		_SetPosition
   961 ;;		_SpiInit
   962 ;; This function is called by:
   963 ;;		Startup code after reset
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967     01EF                     _main:	
   968                           ;psect for function _main
   969                           
   970     01EF                     l1577:	
   971                           ;incstack = 0
   972                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   973                           
   974                           
   975                           ;main.c: 54:     SpiInit();
   976     01EF  120A  118A  200F  120A  118A  	fcall	_SpiInit
   977                           
   978                           ;main.c: 55:     MatrixInit();
   979     01F4  120A  118A  20D7  120A  118A  	fcall	_MatrixInit
   980     01F9                     l1579:
   981                           
   982                           ;main.c: 56:     PortBInit();
   983     01F9  120A  158A  27DD  120A  118A  	fcall	_PortBInit
   984                           
   985                           ;main.c: 58:     TCoord shapePosition;;main.c: 59:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
   986     01FE  1683               	bsf	3,5	;RP0=1, select bank1
   987     01FF  1303               	bcf	3,6	;RP1=0, select bank1
   988     0200  0828               	movf	main@F928^(0+128),w
   989     0201  1283               	bcf	3,5	;RP0=0, select bank0
   990     0202  1303               	bcf	3,6	;RP1=0, select bank0
   991     0203  00DF               	movwf	main@square_1
   992     0204  1683               	bsf	3,5	;RP0=1, select bank1
   993     0205  1303               	bcf	3,6	;RP1=0, select bank1
   994     0206  0829               	movf	(main@F928+1)^(0+128),w
   995     0207  1283               	bcf	3,5	;RP0=0, select bank0
   996     0208  1303               	bcf	3,6	;RP1=0, select bank0
   997     0209  00E0               	movwf	main@square_1+1
   998     020A  1683               	bsf	3,5	;RP0=1, select bank1
   999     020B  1303               	bcf	3,6	;RP1=0, select bank1
  1000     020C  082A               	movf	(main@F928+2)^(0+128),w
  1001     020D  1283               	bcf	3,5	;RP0=0, select bank0
  1002     020E  1303               	bcf	3,6	;RP1=0, select bank0
  1003     020F  00E1               	movwf	main@square_1+2
  1004                           
  1005                           ;main.c: 60:     int countElemntArray = 3;
  1006     0210  3003               	movlw	3
  1007     0211  00E2               	movwf	main@countElemntArray
  1008     0212  3000               	movlw	0
  1009     0213  00E3               	movwf	main@countElemntArray+1
  1010     0214                     l1581:
  1011                           
  1012                           ;main.c: 61:     _Bool reverse = 1;
  1013     0214  3001               	movlw	1
  1014     0215  00E4               	movwf	main@reverse
  1015     0216                     l1583:
  1016                           
  1017                           ;main.c: 64:         SetPosition(&shapePosition, 0, 0);
  1018     0216  3065               	movlw	low main@shapePosition
  1019     0217  00F0               	movwf	SetPosition@position
  1020     0218  3000               	movlw	high main@shapePosition
  1021     0219  00F1               	movwf	SetPosition@position+1
  1022     021A  3000               	movlw	0
  1023     021B  00F2               	movwf	SetPosition@x
  1024     021C  00F3               	movwf	SetPosition@x+1
  1025     021D  3000               	movlw	0
  1026     021E  00F4               	movwf	SetPosition@y
  1027     021F  00F5               	movwf	SetPosition@y+1
  1028     0220  120A  118A  2076  120A  118A  	fcall	_SetPosition
  1029     0225                     l1585:
  1030                           
  1031                           ;main.c: 65:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray, &re
      +                          verse);
  1032     0225  3065               	movlw	low main@shapePosition
  1033     0226  1283               	bcf	3,5	;RP0=0, select bank0
  1034     0227  1303               	bcf	3,6	;RP1=0, select bank0
  1035     0228  00D2               	movwf	ChangeOfCoordinates@_shapePosition
  1036     0229  3000               	movlw	high main@shapePosition
  1037     022A  00D3               	movwf	ChangeOfCoordinates@_shapePosition+1
  1038     022B  305F               	movlw	(low (main@square_1| 0))& (0+255)
  1039     022C  00D4               	movwf	ChangeOfCoordinates@_figure
  1040     022D  0863               	movf	main@countElemntArray+1,w
  1041     022E  00D6               	movwf	ChangeOfCoordinates@_countElemntArray+1
  1042     022F  0862               	movf	main@countElemntArray,w
  1043     0230  00D5               	movwf	ChangeOfCoordinates@_countElemntArray
  1044     0231  3064               	movlw	(low (main@reverse| 0))& (0+255)
  1045     0232  00D7               	movwf	ChangeOfCoordinates@_reverse
  1046     0233  120A  118A  23D6  120A  118A  	fcall	_ChangeOfCoordinates
  1047     0238  2A16               	goto	l1583
  1048     0239  120A  118A  2800   	ljmp	start
  1049     023C                     __end_of_main:
  1050                           
  1051                           	psect	text1
  1052     000F                     __ptext1:	
  1053 ;; *************** function _SpiInit *****************
  1054 ;; Defined at:
  1055 ;;		line 9 in file "spi.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1069 ;;      Params:         0       0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used: 1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082     000F                     _SpiInit:	
  1083                           ;psect for function _SpiInit
  1084                           
  1085     000F                     l1549:	
  1086                           ;incstack = 0
  1087                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
  1088                           
  1089                           
  1090                           ;spi.c: 10:     TRISC |= 0x10;
  1091     000F  1683               	bsf	3,5	;RP0=1, select bank1
  1092     0010  1303               	bcf	3,6	;RP1=0, select bank1
  1093     0011  1607               	bsf	7,4	;volatile
  1094     0012                     l1551:
  1095                           
  1096                           ;spi.c: 11:     TRISC &= ~0x28;
  1097     0012  30D7               	movlw	215
  1098     0013  0587               	andwf	7,f	;volatile
  1099                           
  1100                           ;spi.c: 12:     TRISA &= ~0x20;
  1101     0014  30DF               	movlw	223
  1102     0015  0585               	andwf	5,f	;volatile
  1103                           
  1104                           ;spi.c: 13:     PORTA &= ~0x20;
  1105     0016  30DF               	movlw	223
  1106     0017  1283               	bcf	3,5	;RP0=0, select bank0
  1107     0018  1303               	bcf	3,6	;RP1=0, select bank0
  1108     0019  0585               	andwf	5,f	;volatile
  1109     001A                     l1553:
  1110                           
  1111                           ;spi.c: 14:     SSPCON = 0x30;
  1112     001A  3030               	movlw	48
  1113     001B  0094               	movwf	20	;volatile
  1114     001C                     l1555:
  1115                           
  1116                           ;spi.c: 15:     SSPSTAT = 0x80;
  1117     001C  3080               	movlw	128
  1118     001D  1683               	bsf	3,5	;RP0=1, select bank1
  1119     001E  1303               	bcf	3,6	;RP1=0, select bank1
  1120     001F  0094               	movwf	20	;volatile
  1121     0020                     l66:
  1122     0020  0008               	return
  1123     0021                     __end_of_SpiInit:
  1124                           
  1125                           	psect	text2
  1126     0076                     __ptext2:	
  1127 ;; *************** function _SetPosition *****************
  1128 ;; Defined at:
  1129 ;;		line 3 in file "shape.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;  position        2    0[COMMON] PTR struct .
  1132 ;;		 -> main@shapePosition(4), 
  1133 ;;  x               2    2[COMMON] int 
  1134 ;;  y               2    4[COMMON] int 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1146 ;;      Params:         6       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0
  1148 ;;      Temps:          2       0       0       0       0
  1149 ;;      Totals:         8       0       0       0       0
  1150 ;;Total ram usage:        8 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159     0076                     _SetPosition:	
  1160                           ;psect for function _SetPosition
  1161                           
  1162     0076                     l1573:	
  1163                           ;incstack = 0
  1164                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1165                           
  1166                           
  1167                           ;shape.c: 4:     position->x = x;
  1168     0076  0870               	movf	SetPosition@position,w
  1169     0077  0084               	movwf	4
  1170     0078  1783               	bsf	3,7
  1171     0079  1C71               	btfss	SetPosition@position+1,0
  1172     007A  1383               	bcf	3,7
  1173     007B  0872               	movf	SetPosition@x,w
  1174     007C  0080               	movwf	0
  1175     007D  0A84               	incf	4,f
  1176     007E  0873               	movf	SetPosition@x+1,w
  1177     007F  0080               	movwf	0
  1178     0080                     l1575:
  1179                           
  1180                           ;shape.c: 5:     position->y = y;
  1181     0080  0870               	movf	SetPosition@position,w
  1182     0081  3E02               	addlw	2
  1183     0082  00F6               	movwf	??_SetPosition
  1184     0083  0871               	movf	SetPosition@position+1,w
  1185     0084  1803               	skipnc
  1186     0085  3E01               	addlw	1
  1187     0086  3E00               	addlw	0
  1188     0087  00F7               	movwf	??_SetPosition+1
  1189     0088  0876               	movf	??_SetPosition,w
  1190     0089  0084               	movwf	4
  1191     008A  1783               	bsf	3,7
  1192     008B  1C77               	btfss	??_SetPosition+1,0
  1193     008C  1383               	bcf	3,7
  1194     008D  0874               	movf	SetPosition@y,w
  1195     008E  0080               	movwf	0
  1196     008F  0A84               	incf	4,f
  1197     0090  0875               	movf	SetPosition@y+1,w
  1198     0091  0080               	movwf	0
  1199     0092                     l102:
  1200     0092  0008               	return
  1201     0093                     __end_of_SetPosition:
  1202                           
  1203                           	psect	text3
  1204     0FDD                     __ptext3:	
  1205 ;; *************** function _PortBInit *****************
  1206 ;; Defined at:
  1207 ;;		line 13 in file "portsinit.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		status,2
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1221 ;;      Params:         0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0
  1224 ;;      Totals:         0       0       0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used: 1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234     0FDD                     _PortBInit:	
  1235                           ;psect for function _PortBInit
  1236                           
  1237     0FDD                     l1571:	
  1238                           ;incstack = 0
  1239                           ; Regs used in _PortBInit: [status,2]
  1240                           
  1241                           
  1242                           ;portsinit.c: 14:     TRISB = 0x00;
  1243     0FDD  1683               	bsf	3,5	;RP0=1, select bank1
  1244     0FDE  1303               	bcf	3,6	;RP1=0, select bank1
  1245     0FDF  0186               	clrf	6	;volatile
  1246                           
  1247                           ;portsinit.c: 15:     PORTB = 0x00;
  1248     0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  1249     0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  1250     0FE2  0186               	clrf	6	;volatile
  1251     0FE3                     l49:
  1252     0FE3  0008               	return
  1253     0FE4                     __end_of_PortBInit:
  1254                           
  1255                           	psect	text4
  1256     00D7                     __ptext4:	
  1257 ;; *************** function _MatrixInit *****************
  1258 ;; Defined at:
  1259 ;;		line 20 in file "matrix.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2, status,0, pclath, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1273 ;;      Params:         0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0
  1275 ;;      Temps:          3       0       0       0       0
  1276 ;;      Totals:         3       0       0       0       0
  1277 ;;Total ram usage:        3 bytes
  1278 ;; Hardware stack levels used: 1
  1279 ;; Hardware stack levels required when called: 3
  1280 ;; This function calls:
  1281 ;;		_SendToSegment
  1282 ;;		_SpiClearMatrix
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288     00D7                     _MatrixInit:	
  1289                           ;psect for function _MatrixInit
  1290                           
  1291     00D7                     l1557:	
  1292                           ;incstack = 0
  1293                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1294                           
  1295                           
  1296                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1297     00D7  3003               	movlw	3
  1298     00D8  00F9               	movwf	??_MatrixInit+2
  1299     00D9  3008               	movlw	8
  1300     00DA  00F8               	movwf	??_MatrixInit+1
  1301     00DB  3077               	movlw	119
  1302     00DC  00F7               	movwf	??_MatrixInit
  1303     00DD                     u977:
  1304     00DD  0BF7               	decfsz	??_MatrixInit,f
  1305     00DE  28DD               	goto	u977
  1306     00DF  0BF8               	decfsz	??_MatrixInit+1,f
  1307     00E0  28DD               	goto	u977
  1308     00E1  0BF9               	decfsz	??_MatrixInit+2,f
  1309     00E2  28DD               	goto	u977
  1310     00E3                     l1559:
  1311                           
  1312                           ;matrix.c: 22:     RA5=1;
  1313     00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1314     00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1315     00E5  1685               	bsf	5,5	;volatile
  1316     00E6                     l1561:
  1317                           
  1318                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1319     00E6  3009               	movlw	9
  1320     00E7  00F1               	movwf	SendToSegment@segment
  1321     00E8  3000               	movlw	0
  1322     00E9  00F2               	movwf	SendToSegment@segment+1
  1323     00EA  01F3               	clrf	SendToSegment@data
  1324     00EB  120A  118A  2034  120A  118A  	fcall	_SendToSegment
  1325     00F0                     l1563:
  1326                           
  1327                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1328     00F0  300B               	movlw	11
  1329     00F1  00F1               	movwf	SendToSegment@segment
  1330     00F2  3000               	movlw	0
  1331     00F3  00F2               	movwf	SendToSegment@segment+1
  1332     00F4  3007               	movlw	7
  1333     00F5  00F3               	movwf	SendToSegment@data
  1334     00F6  120A  118A  2034  120A  118A  	fcall	_SendToSegment
  1335     00FB                     l1565:
  1336                           
  1337                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1338     00FB  300A               	movlw	10
  1339     00FC  00F1               	movwf	SendToSegment@segment
  1340     00FD  3000               	movlw	0
  1341     00FE  00F2               	movwf	SendToSegment@segment+1
  1342     00FF  3002               	movlw	2
  1343     0100  00F3               	movwf	SendToSegment@data
  1344     0101  120A  118A  2034  120A  118A  	fcall	_SendToSegment
  1345     0106                     l1567:
  1346                           
  1347                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1348     0106  300C               	movlw	12
  1349     0107  00F1               	movwf	SendToSegment@segment
  1350     0108  3000               	movlw	0
  1351     0109  00F2               	movwf	SendToSegment@segment+1
  1352     010A  01F3               	clrf	SendToSegment@data
  1353     010B  0AF3               	incf	SendToSegment@data,f
  1354     010C  120A  118A  2034  120A  118A  	fcall	_SendToSegment
  1355     0111                     l1569:
  1356                           
  1357                           ;matrix.c: 27:     SpiClearMatrix();
  1358     0111  120A  118A  2047  120A  118A  	fcall	_SpiClearMatrix
  1359     0116                     l88:
  1360     0116  0008               	return
  1361     0117                     __end_of_MatrixInit:
  1362                           
  1363                           	psect	text5
  1364     03D6                     __ptext5:	
  1365 ;; *************** function _ChangeOfCoordinates *****************
  1366 ;; Defined at:
  1367 ;;		line 19 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  _shapePositi    2   50[BANK0 ] PTR struct .
  1370 ;;		 -> main@shapePosition(4), 
  1371 ;;  _figure         1   52[BANK0 ] PTR unsigned char 
  1372 ;;		 -> main@square_1(3), 
  1373 ;;  _countElemnt    2   53[BANK0 ] int 
  1374 ;;  _reverse        1   55[BANK0 ] PTR _Bool 
  1375 ;;		 -> main@reverse(1), NULL(0), 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  i               2   59[BANK0 ] int 
  1378 ;;  step            2   61[BANK0 ] int 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         0       6       0       0       0
  1389 ;;      Locals:         0       4       0       0       0
  1390 ;;      Temps:          0       3       0       0       0
  1391 ;;      Totals:         0      13       0       0       0
  1392 ;;Total ram usage:       13 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 4
  1395 ;; This function calls:
  1396 ;;		_MovieShape
  1397 ;;		_Reverse
  1398 ;;		_Rotate
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404     03D6                     _ChangeOfCoordinates:	
  1405                           ;psect for function _ChangeOfCoordinates
  1406                           
  1407     03D6                     l1509:	
  1408                           ;incstack = 0
  1409                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1410                           
  1411                           
  1412                           ;main.c: 20:     const unsigned long delay = 150;;main.c: 22:     int step = 0;
  1413     03D6  1283               	bcf	3,5	;RP0=0, select bank0
  1414     03D7  1303               	bcf	3,6	;RP1=0, select bank0
  1415     03D8  01DD               	clrf	ChangeOfCoordinates@step
  1416     03D9  01DE               	clrf	ChangeOfCoordinates@step+1
  1417     03DA                     l21:	
  1418                           ;main.c: 23:         do{
  1419                           
  1420                           
  1421                           ;main.c: 24:             for(int i = 0; i < 5; i++){
  1422     03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1423     03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1424     03DC  01DB               	clrf	ChangeOfCoordinates@i
  1425     03DD  01DC               	clrf	ChangeOfCoordinates@i+1
  1426     03DE  2C23               	goto	l1525
  1427     03DF                     l1515:
  1428                           
  1429                           ;main.c: 27:                         MovieShape(right, _shapePosition, _figure, _countEl
      +                          emntArray);
  1430     03DF  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1431     03E0  00A4               	movwf	MovieShape@_shapePosition
  1432     03E1  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1433     03E2  00A5               	movwf	MovieShape@_shapePosition+1
  1434     03E3  0854               	movf	ChangeOfCoordinates@_figure,w
  1435     03E4  00A6               	movwf	MovieShape@shapeArray
  1436     03E5  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1437     03E6  00A8               	movwf	MovieShape@countElemntArray+1
  1438     03E7  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1439     03E8  00A7               	movwf	MovieShape@countElemntArray
  1440     03E9  3003               	movlw	3
  1441     03EA  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1442                           
  1443                           ;main.c: 28:                         break;
  1444     03EF  2C38               	goto	l1527
  1445     03F0                     l1517:
  1446                           
  1447                           ;main.c: 30:                         MovieShape(down, _shapePosition, _figure, _countEle
      +                          mntArray);
  1448     03F0  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1449     03F1  00A4               	movwf	MovieShape@_shapePosition
  1450     03F2  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1451     03F3  00A5               	movwf	MovieShape@_shapePosition+1
  1452     03F4  0854               	movf	ChangeOfCoordinates@_figure,w
  1453     03F5  00A6               	movwf	MovieShape@shapeArray
  1454     03F6  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1455     03F7  00A8               	movwf	MovieShape@countElemntArray+1
  1456     03F8  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1457     03F9  00A7               	movwf	MovieShape@countElemntArray
  1458     03FA  3000               	movlw	0
  1459     03FB  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1460                           
  1461                           ;main.c: 31:                         break;
  1462     0400  2C38               	goto	l1527
  1463     0401                     l1519:
  1464                           
  1465                           ;main.c: 33:                         MovieShape(left, _shapePosition, _figure, _countEle
      +                          mntArray);
  1466     0401  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1467     0402  00A4               	movwf	MovieShape@_shapePosition
  1468     0403  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1469     0404  00A5               	movwf	MovieShape@_shapePosition+1
  1470     0405  0854               	movf	ChangeOfCoordinates@_figure,w
  1471     0406  00A6               	movwf	MovieShape@shapeArray
  1472     0407  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1473     0408  00A8               	movwf	MovieShape@countElemntArray+1
  1474     0409  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1475     040A  00A7               	movwf	MovieShape@countElemntArray
  1476     040B  3002               	movlw	2
  1477     040C  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1478                           
  1479                           ;main.c: 34:                         break;
  1480     0411  2C38               	goto	l1527
  1481     0412                     l1521:
  1482                           
  1483                           ;main.c: 36:                         MovieShape(up, _shapePosition, _figure, _countElemn
      +                          tArray);
  1484     0412  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1485     0413  00A4               	movwf	MovieShape@_shapePosition
  1486     0414  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1487     0415  00A5               	movwf	MovieShape@_shapePosition+1
  1488     0416  0854               	movf	ChangeOfCoordinates@_figure,w
  1489     0417  00A6               	movwf	MovieShape@shapeArray
  1490     0418  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1491     0419  00A8               	movwf	MovieShape@countElemntArray+1
  1492     041A  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1493     041B  00A7               	movwf	MovieShape@countElemntArray
  1494     041C  3001               	movlw	1
  1495     041D  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1496                           
  1497                           ;main.c: 37:                         break;
  1498     0422  2C38               	goto	l1527
  1499     0423                     l1525:
  1500                           
  1501                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1502                           ; Switch size 1, requested type "simple"
  1503                           ; Number of cases is 1, Range of values is 0 to 0
  1504                           ; switch strategies available:
  1505                           ; Name         Instructions Cycles
  1506                           ; simple_byte            4     3 (average)
  1507                           ; direct_byte           11     8 (fixed)
  1508                           ; jumptable            260     6 (fixed)
  1509                           ;	Chosen strategy is simple_byte
  1510     0423  1283               	bcf	3,5	;RP0=0, select bank0
  1511     0424  1303               	bcf	3,6	;RP1=0, select bank0
  1512     0425  085E               	movf	ChangeOfCoordinates@step+1,w
  1513     0426  3A00               	xorlw	0	; case 0
  1514     0427  1903               	skipnz
  1515     0428  2C2A               	goto	l1637
  1516     0429  2C38               	goto	l1527
  1517     042A                     l1637:
  1518                           
  1519                           ; Switch size 1, requested type "simple"
  1520                           ; Number of cases is 4, Range of values is 0 to 3
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte           13     7 (average)
  1524                           ; direct_byte           20     8 (fixed)
  1525                           ; jumptable            260     6 (fixed)
  1526                           ;	Chosen strategy is simple_byte
  1527     042A  085D               	movf	ChangeOfCoordinates@step,w
  1528     042B  3A00               	xorlw	0	; case 0
  1529     042C  1903               	skipnz
  1530     042D  2BDF               	goto	l1515
  1531     042E  3A01               	xorlw	1	; case 1
  1532     042F  1903               	skipnz
  1533     0430  2BF0               	goto	l1517
  1534     0431  3A03               	xorlw	3	; case 2
  1535     0432  1903               	skipnz
  1536     0433  2C01               	goto	l1519
  1537     0434  3A01               	xorlw	1	; case 3
  1538     0435  1903               	skipnz
  1539     0436  2C12               	goto	l1521
  1540     0437  2C38               	goto	l1527
  1541     0438                     l1527:
  1542                           
  1543                           ;main.c: 39:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1544     0438  3004               	movlw	4
  1545     0439  1283               	bcf	3,5	;RP0=0, select bank0
  1546     043A  1303               	bcf	3,6	;RP1=0, select bank0
  1547     043B  00DA               	movwf	??_ChangeOfCoordinates+2
  1548     043C  300C               	movlw	12
  1549     043D  00D9               	movwf	??_ChangeOfCoordinates+1
  1550     043E  3033               	movlw	51
  1551     043F  00D8               	movwf	??_ChangeOfCoordinates
  1552     0440                     u987:
  1553     0440  0BD8               	decfsz	??_ChangeOfCoordinates,f
  1554     0441  2C40               	goto	u987
  1555     0442  0BD9               	decfsz	??_ChangeOfCoordinates+1,f
  1556     0443  2C40               	goto	u987
  1557     0444  0BDA               	decfsz	??_ChangeOfCoordinates+2,f
  1558     0445  2C40               	goto	u987
  1559                           
  1560                           ;main.c: 41:             }
  1561     0446  3001               	movlw	1
  1562     0447  1283               	bcf	3,5	;RP0=0, select bank0
  1563     0448  1303               	bcf	3,6	;RP1=0, select bank0
  1564     0449  07DB               	addwf	ChangeOfCoordinates@i,f
  1565     044A  1803               	skipnc
  1566     044B  0ADC               	incf	ChangeOfCoordinates@i+1,f
  1567     044C  3000               	movlw	0
  1568     044D  07DC               	addwf	ChangeOfCoordinates@i+1,f
  1569     044E                     l1529:
  1570     044E  085C               	movf	ChangeOfCoordinates@i+1,w
  1571     044F  3A80               	xorlw	128
  1572     0450  00FF               	movwf	btemp+1
  1573     0451  3080               	movlw	128
  1574     0452  027F               	subwf	btemp+1,w
  1575     0453  1D03               	skipz
  1576     0454  2C57               	goto	u935
  1577     0455  3005               	movlw	5
  1578     0456  025B               	subwf	ChangeOfCoordinates@i,w
  1579     0457                     u935:
  1580     0457  1C03               	skipc
  1581     0458  2C5A               	goto	u931
  1582     0459  2C5B               	goto	u930
  1583     045A                     u931:
  1584     045A  2C23               	goto	l1525
  1585     045B                     u930:
  1586     045B                     l1531:
  1587                           
  1588                           ;main.c: 42:             if(step == 0 && *_reverse) {
  1589     045B  1283               	bcf	3,5	;RP0=0, select bank0
  1590     045C  1303               	bcf	3,6	;RP1=0, select bank0
  1591     045D  085D               	movf	ChangeOfCoordinates@step,w
  1592     045E  045E               	iorwf	ChangeOfCoordinates@step+1,w
  1593     045F  1D03               	btfss	3,2
  1594     0460  2C62               	goto	u941
  1595     0461  2C63               	goto	u940
  1596     0462                     u941:
  1597     0462  2C79               	goto	l1539
  1598     0463                     u940:
  1599     0463                     l1533:
  1600     0463  0857               	movf	ChangeOfCoordinates@_reverse,w
  1601     0464  0084               	movwf	4
  1602     0465  1383               	bcf	3,7	;select IRP bank0
  1603     0466  0800               	movf	0,w
  1604     0467  1903               	btfsc	3,2
  1605     0468  2C6A               	goto	u951
  1606     0469  2C6B               	goto	u950
  1607     046A                     u951:
  1608     046A  2C79               	goto	l1539
  1609     046B                     u950:
  1610     046B                     l1535:
  1611                           
  1612                           ;main.c: 43:                 Reverse(_figure, _countElemntArray);
  1613     046B  0854               	movf	ChangeOfCoordinates@_figure,w
  1614     046C  00F0               	movwf	Reverse@array
  1615     046D  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1616     046E  00F2               	movwf	Reverse@countElemnt+1
  1617     046F  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1618     0470  00F1               	movwf	Reverse@countElemnt
  1619     0471  120A  118A  2117  120A  118A  	fcall	_Reverse
  1620     0476                     l1537:
  1621                           
  1622                           ;main.c: 44:                 _reverse = 0;
  1623     0476  1283               	bcf	3,5	;RP0=0, select bank0
  1624     0477  1303               	bcf	3,6	;RP1=0, select bank0
  1625     0478  01D7               	clrf	ChangeOfCoordinates@_reverse
  1626     0479                     l1539:
  1627                           
  1628                           ;main.c: 46:             Rotate(_figure, _countElemntArray);
  1629     0479  0854               	movf	ChangeOfCoordinates@_figure,w
  1630     047A  00BE               	movwf	Rotate@array_
  1631     047B  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1632     047C  00C0               	movwf	Rotate@length+1
  1633     047D  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1634     047E  00BF               	movwf	Rotate@length
  1635     047F  120A  118A  2319  120A  118A  	fcall	_Rotate
  1636     0484                     l1541:
  1637                           
  1638                           ;main.c: 47:             step++;
  1639     0484  3001               	movlw	1
  1640     0485  1283               	bcf	3,5	;RP0=0, select bank0
  1641     0486  1303               	bcf	3,6	;RP1=0, select bank0
  1642     0487  07DD               	addwf	ChangeOfCoordinates@step,f
  1643     0488  1803               	skipnc
  1644     0489  0ADE               	incf	ChangeOfCoordinates@step+1,f
  1645     048A  3000               	movlw	0
  1646     048B  07DE               	addwf	ChangeOfCoordinates@step+1,f
  1647     048C                     l1543:
  1648                           
  1649                           ;main.c: 48:         } while(step < 4);
  1650     048C  085E               	movf	ChangeOfCoordinates@step+1,w
  1651     048D  3A80               	xorlw	128
  1652     048E  00FF               	movwf	btemp+1
  1653     048F  3080               	movlw	128
  1654     0490  027F               	subwf	btemp+1,w
  1655     0491  1D03               	skipz
  1656     0492  2C95               	goto	u965
  1657     0493  3004               	movlw	4
  1658     0494  025D               	subwf	ChangeOfCoordinates@step,w
  1659     0495                     u965:
  1660     0495  1C03               	skipc
  1661     0496  2C98               	goto	u961
  1662     0497  2C99               	goto	u960
  1663     0498                     u961:
  1664     0498  2BDA               	goto	l21
  1665     0499                     u960:
  1666     0499                     l32:
  1667     0499  0008               	return
  1668     049A                     __end_of_ChangeOfCoordinates:
  1669                           
  1670                           	psect	text6
  1671     0319                     __ptext6:	
  1672 ;; *************** function _Rotate *****************
  1673 ;; Defined at:
  1674 ;;		line 55 in file "shape.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  array_          1   30[BANK0 ] PTR unsigned char 
  1677 ;;		 -> main@square_1(3), 
  1678 ;;  length          2   31[BANK0 ] int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  i               2   42[BANK0 ] int 
  1681 ;;  x               2   40[BANK0 ] int 
  1682 ;;  y               2   44[BANK0 ] int 
  1683 ;;  _i              2   48[BANK0 ] int 
  1684 ;;  res             2   46[BANK0 ] PTR unsigned char 
  1685 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1695 ;;      Params:         0       3       0       0       0
  1696 ;;      Locals:         0      10       0       0       0
  1697 ;;      Temps:          0       7       0       0       0
  1698 ;;      Totals:         0      20       0       0       0
  1699 ;;Total ram usage:       20 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; Hardware stack levels required when called: 3
  1702 ;; This function calls:
  1703 ;;		_calloc
  1704 ;;		_free
  1705 ;; This function is called by:
  1706 ;;		_ChangeOfCoordinates
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710     0319                     _Rotate:	
  1711                           ;psect for function _Rotate
  1712                           
  1713     0319                     l1469:	
  1714                           ;incstack = 0
  1715                           ; Regs used in _Rotate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1716                           
  1717                           
  1718                           ;shape.c: 57:     char * res = calloc((size_t)length, sizeof(char));
  1719     0319  1283               	bcf	3,5	;RP0=0, select bank0
  1720     031A  1303               	bcf	3,6	;RP1=0, select bank0
  1721     031B  0840               	movf	Rotate@length+1,w
  1722     031C  00B9               	movwf	calloc@nmemb+1
  1723     031D  083F               	movf	Rotate@length,w
  1724     031E  00B8               	movwf	calloc@nmemb
  1725     031F  3001               	movlw	1
  1726     0320  00BA               	movwf	calloc@size
  1727     0321  3000               	movlw	0
  1728     0322  00BB               	movwf	calloc@size+1
  1729     0323  120A  118A  215A  120A  118A  	fcall	_calloc
  1730     0328  1283               	bcf	3,5	;RP0=0, select bank0
  1731     0329  1303               	bcf	3,6	;RP1=0, select bank0
  1732     032A  0838               	movf	?_calloc,w
  1733     032B  00CE               	movwf	Rotate@res
  1734     032C  0839               	movf	?_calloc+1,w
  1735     032D  00CF               	movwf	Rotate@res+1
  1736     032E                     l1471:
  1737                           
  1738                           ;shape.c: 59:     if (res){
  1739     032E  084E               	movf	Rotate@res,w
  1740     032F  044F               	iorwf	Rotate@res+1,w
  1741     0330  1903               	btfsc	3,2
  1742     0331  2B33               	goto	u851
  1743     0332  2B34               	goto	u850
  1744     0333                     u851:
  1745     0333  2BCA               	goto	l1507
  1746     0334                     u850:
  1747     0334                     l1473:
  1748                           
  1749                           ;shape.c: 60:         for(int _i = length - 1; _i >= 0; _i--){
  1750     0334  083F               	movf	Rotate@length,w
  1751     0335  3EFF               	addlw	255
  1752     0336  00D0               	movwf	Rotate@_i
  1753     0337  0840               	movf	Rotate@length+1,w
  1754     0338  1803               	skipnc
  1755     0339  3E01               	addlw	1
  1756     033A  3EFF               	addlw	255
  1757     033B  00D1               	movwf	Rotate@_i+1
  1758     033C                     l1475:
  1759     033C  1FD1               	btfss	Rotate@_i+1,7
  1760     033D  2B3F               	goto	u861
  1761     033E  2B40               	goto	u860
  1762     033F                     u861:
  1763     033F  2B41               	goto	l1479
  1764     0340                     u860:
  1765     0340  2B94               	goto	l1499
  1766     0341                     l1479:
  1767                           
  1768                           ;shape.c: 61:             for(int i = length - 1, x = 0; i >= 0; i--, x++){
  1769     0341  083F               	movf	Rotate@length,w
  1770     0342  3EFF               	addlw	255
  1771     0343  00CA               	movwf	Rotate@i
  1772     0344  0840               	movf	Rotate@length+1,w
  1773     0345  1803               	skipnc
  1774     0346  3E01               	addlw	1
  1775     0347  3EFF               	addlw	255
  1776     0348  00CB               	movwf	Rotate@i+1
  1777     0349                     l1481:
  1778     0349  01C8               	clrf	Rotate@x
  1779     034A  01C9               	clrf	Rotate@x+1
  1780     034B                     l1483:
  1781     034B  1FCB               	btfss	Rotate@i+1,7
  1782     034C  2B4E               	goto	u871
  1783     034D  2B4F               	goto	u870
  1784     034E                     u871:
  1785     034E  2B50               	goto	l1487
  1786     034F                     u870:
  1787     034F  2B8D               	goto	l1495
  1788     0350                     l1487:
  1789                           
  1790                           ;shape.c: 62:                 res[_i] |= ((array_[x] >> _i ) & 1) << i;
  1791     0350  0848               	movf	Rotate@x,w
  1792     0351  073E               	addwf	Rotate@array_,w
  1793     0352  00C1               	movwf	??_Rotate
  1794     0353  0841               	movf	??_Rotate,w
  1795     0354  0084               	movwf	4
  1796     0355  1383               	bcf	3,7	;select IRP bank0
  1797     0356  0800               	movf	0,w
  1798     0357  00C2               	movwf	??_Rotate+1
  1799     0358  0A50               	incf	Rotate@_i,w
  1800     0359  2B5C               	goto	u884
  1801     035A                     u885:
  1802     035A  1003               	clrc
  1803     035B  0CC2               	rrf	??_Rotate+1,f
  1804     035C                     u884:
  1805     035C  3EFF               	addlw	-1
  1806     035D  1D03               	skipz
  1807     035E  2B5A               	goto	u885
  1808     035F  0842               	movf	??_Rotate+1,w
  1809     0360  3901               	andlw	1
  1810     0361  00C3               	movwf	??_Rotate+2
  1811     0362  0A4A               	incf	Rotate@i,w
  1812     0363  2B66               	goto	u894
  1813     0364                     u895:
  1814     0364  1003               	clrc
  1815     0365  0DC3               	rlf	??_Rotate+2,f
  1816     0366                     u894:
  1817     0366  3EFF               	addlw	-1
  1818     0367  1D03               	skipz
  1819     0368  2B64               	goto	u895
  1820     0369  0843               	movf	??_Rotate+2,w
  1821     036A  00C4               	movwf	??_Rotate+3
  1822     036B  0850               	movf	Rotate@_i,w
  1823     036C  074E               	addwf	Rotate@res,w
  1824     036D  00C6               	movwf	??_Rotate+5
  1825     036E  084F               	movf	Rotate@res+1,w
  1826     036F  00C5               	movwf	??_Rotate+4
  1827     0370  1803               	skipnc
  1828     0371  0AC5               	incf	??_Rotate+4,f
  1829     0372  1FD0               	btfss	Rotate@_i,7
  1830     0373  2B75               	goto	u900
  1831     0374  03C5               	decf	??_Rotate+4,f
  1832     0375                     u900:
  1833     0375  1283               	bcf	3,5	;RP0=0, select bank0
  1834     0376  1303               	bcf	3,6	;RP1=0, select bank0
  1835     0377  0845               	movf	??_Rotate+4,w
  1836     0378  00C7               	movwf	??_Rotate+6
  1837     0379  0846               	movf	??_Rotate+5,w
  1838     037A  0084               	movwf	4
  1839     037B  1783               	bsf	3,7
  1840     037C  1C47               	btfss	??_Rotate+6,0
  1841     037D  1383               	bcf	3,7
  1842     037E  0844               	movf	??_Rotate+3,w
  1843     037F  0480               	iorwf	0,f
  1844     0380                     l1489:
  1845                           
  1846                           ;shape.c: 63:             }
  1847     0380  30FF               	movlw	255
  1848     0381  07CA               	addwf	Rotate@i,f
  1849     0382  1803               	skipnc
  1850     0383  0ACB               	incf	Rotate@i+1,f
  1851     0384  30FF               	movlw	255
  1852     0385  07CB               	addwf	Rotate@i+1,f
  1853     0386                     l1491:
  1854     0386  3001               	movlw	1
  1855     0387  07C8               	addwf	Rotate@x,f
  1856     0388  1803               	skipnc
  1857     0389  0AC9               	incf	Rotate@x+1,f
  1858     038A  3000               	movlw	0
  1859     038B  07C9               	addwf	Rotate@x+1,f
  1860     038C  2B4B               	goto	l1483
  1861     038D                     l1495:
  1862                           
  1863                           ;shape.c: 64:         }
  1864     038D  30FF               	movlw	255
  1865     038E  07D0               	addwf	Rotate@_i,f
  1866     038F  1803               	skipnc
  1867     0390  0AD1               	incf	Rotate@_i+1,f
  1868     0391  30FF               	movlw	255
  1869     0392  07D1               	addwf	Rotate@_i+1,f
  1870     0393  2B3C               	goto	l1475
  1871     0394                     l1499:
  1872                           
  1873                           ;shape.c: 66:         for(int y = 0; y < length; y++){
  1874     0394  01CC               	clrf	Rotate@y
  1875     0395  01CD               	clrf	Rotate@y+1
  1876     0396  2BBC               	goto	l1505
  1877     0397                     l1501:
  1878                           
  1879                           ;shape.c: 67:             array_[y] = res[y];
  1880     0397  1283               	bcf	3,5	;RP0=0, select bank0
  1881     0398  1303               	bcf	3,6	;RP1=0, select bank0
  1882     0399  084C               	movf	Rotate@y,w
  1883     039A  074E               	addwf	Rotate@res,w
  1884     039B  00C2               	movwf	??_Rotate+1
  1885     039C  084F               	movf	Rotate@res+1,w
  1886     039D  00C1               	movwf	??_Rotate
  1887     039E  1803               	skipnc
  1888     039F  0AC1               	incf	??_Rotate,f
  1889     03A0  1FCC               	btfss	Rotate@y,7
  1890     03A1  2BA3               	goto	u910
  1891     03A2  03C1               	decf	??_Rotate,f
  1892     03A3                     u910:
  1893     03A3  1283               	bcf	3,5	;RP0=0, select bank0
  1894     03A4  1303               	bcf	3,6	;RP1=0, select bank0
  1895     03A5  0841               	movf	??_Rotate,w
  1896     03A6  00C3               	movwf	??_Rotate+2
  1897     03A7  0842               	movf	??_Rotate+1,w
  1898     03A8  0084               	movwf	4
  1899     03A9  1783               	bsf	3,7
  1900     03AA  1C43               	btfss	??_Rotate+2,0
  1901     03AB  1383               	bcf	3,7
  1902     03AC  0800               	movf	0,w
  1903     03AD  00C4               	movwf	??_Rotate+3
  1904     03AE  084C               	movf	Rotate@y,w
  1905     03AF  073E               	addwf	Rotate@array_,w
  1906     03B0  00C5               	movwf	??_Rotate+4
  1907     03B1  0845               	movf	??_Rotate+4,w
  1908     03B2  0084               	movwf	4
  1909     03B3  0844               	movf	??_Rotate+3,w
  1910     03B4  1383               	bcf	3,7	;select IRP bank0
  1911     03B5  0080               	movwf	0
  1912     03B6                     l1503:
  1913                           
  1914                           ;shape.c: 68:         }
  1915     03B6  3001               	movlw	1
  1916     03B7  07CC               	addwf	Rotate@y,f
  1917     03B8  1803               	skipnc
  1918     03B9  0ACD               	incf	Rotate@y+1,f
  1919     03BA  3000               	movlw	0
  1920     03BB  07CD               	addwf	Rotate@y+1,f
  1921     03BC                     l1505:
  1922     03BC  084D               	movf	Rotate@y+1,w
  1923     03BD  3A80               	xorlw	128
  1924     03BE  00C1               	movwf	??_Rotate
  1925     03BF  0840               	movf	Rotate@length+1,w
  1926     03C0  3A80               	xorlw	128
  1927     03C1  0241               	subwf	??_Rotate,w
  1928     03C2  1D03               	skipz
  1929     03C3  2BC6               	goto	u925
  1930     03C4  083F               	movf	Rotate@length,w
  1931     03C5  024C               	subwf	Rotate@y,w
  1932     03C6                     u925:
  1933     03C6  1C03               	skipc
  1934     03C7  2BC9               	goto	u921
  1935     03C8  2BCA               	goto	u920
  1936     03C9                     u921:
  1937     03C9  2B97               	goto	l1501
  1938     03CA                     u920:
  1939     03CA                     l1507:
  1940                           
  1941                           ;shape.c: 70:     free(res);
  1942     03CA  1283               	bcf	3,5	;RP0=0, select bank0
  1943     03CB  1303               	bcf	3,6	;RP1=0, select bank0
  1944     03CC  084E               	movf	Rotate@res,w
  1945     03CD  00F0               	movwf	free@ptr
  1946     03CE  084F               	movf	Rotate@res+1,w
  1947     03CF  00F1               	movwf	free@ptr+1
  1948     03D0  120A  118A  2564  120A  118A  	fcall	_free
  1949     03D5                     l141:
  1950     03D5  0008               	return
  1951     03D6                     __end_of_Rotate:
  1952                           
  1953                           	psect	text7
  1954     0564                     __ptext7:	
  1955 ;; *************** function _free *****************
  1956 ;; Defined at:
  1957 ;;		line 67 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  ptr             2    0[COMMON] PTR void 
  1960 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  c               2   10[COMMON] PTR struct chunk
  1963 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1964 ;;  cptr            2    8[COMMON] PTR unsigned char 
  1965 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1975 ;;      Params:         2       0       0       0       0
  1976 ;;      Locals:         4       0       0       0       0
  1977 ;;      Temps:          6       0       0       0       0
  1978 ;;      Totals:        12       0       0       0       0
  1979 ;;Total ram usage:       12 bytes
  1980 ;; Hardware stack levels used: 1
  1981 ;; This function calls:
  1982 ;;		Nothing
  1983 ;; This function is called by:
  1984 ;;		_Rotate
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988     0564                     _free:	
  1989                           ;psect for function _free
  1990                           
  1991     0564                     l1403:	
  1992                           ;incstack = 0
  1993                           ; Regs used in _free: [wreg-fsr0h+status,2+status,0+btemp+1]
  1994                           
  1995     0564  0870               	movf	free@ptr,w
  1996     0565  00F8               	movwf	free@cptr
  1997     0566  0871               	movf	free@ptr+1,w
  1998     0567  00F9               	movwf	free@cptr+1
  1999     0568  0870               	movf	free@ptr,w
  2000     0569  0471               	iorwf	free@ptr+1,w
  2001     056A  1D03               	btfss	3,2
  2002     056B  2D6D               	goto	u801
  2003     056C  2D6E               	goto	u800
  2004     056D                     u801:
  2005     056D  2D6F               	goto	l1407
  2006     056E                     u800:
  2007     056E  2E51               	goto	l720
  2008     056F                     l1407:
  2009     056F  30FE               	movlw	254
  2010     0570  00F2               	movwf	??_free
  2011     0571  0872               	movf	??_free,w
  2012     0572  0778               	addwf	free@cptr,w
  2013     0573  00FA               	movwf	free@c
  2014     0574  0879               	movf	free@cptr+1,w
  2015     0575  00F3               	movwf	??_free+1
  2016     0576  1803               	skipnc
  2017     0577  0AF3               	incf	??_free+1,f
  2018     0578  1BF2               	btfsc	??_free,7
  2019     0579  03F3               	decf	??_free+1,f
  2020     057A  0873               	movf	??_free+1,w
  2021     057B  00FB               	movwf	free@c+1
  2022     057C  1283               	bcf	3,5	;RP0=0, select bank0
  2023     057D  1303               	bcf	3,6	;RP1=0, select bank0
  2024     057E  086D               	movf	___freelist,w
  2025     057F  046E               	iorwf	___freelist+1,w
  2026     0580  1903               	btfsc	3,2
  2027     0581  2D83               	goto	u811
  2028     0582  2D84               	goto	u810
  2029     0583                     u811:
  2030     0583  2E40               	goto	l1429
  2031     0584                     u810:
  2032     0584                     l1409:
  2033     0584  087A               	movf	free@c,w
  2034     0585  0084               	movwf	4
  2035     0586  1783               	bsf	3,7
  2036     0587  1C7B               	btfss	free@c+1,0
  2037     0588  1383               	bcf	3,7
  2038     0589  0800               	movf	0,w
  2039     058A  0778               	addwf	free@cptr,w
  2040     058B  00F2               	movwf	??_free
  2041     058C  0879               	movf	free@cptr+1,w
  2042     058D  1803               	skipnc
  2043     058E  3E01               	addlw	1
  2044     058F  00F3               	movwf	??_free+1
  2045     0590  0873               	movf	??_free+1,w
  2046     0591  066E               	xorwf	___freelist+1,w
  2047     0592  1D03               	skipz
  2048     0593  2D96               	goto	u825
  2049     0594  0872               	movf	??_free,w
  2050     0595  066D               	xorwf	___freelist,w
  2051     0596                     u825:
  2052     0596  1D03               	skipz
  2053     0597  2D99               	goto	u821
  2054     0598  2D9A               	goto	u820
  2055     0599                     u821:
  2056     0599  2DE6               	goto	l1421
  2057     059A                     u820:
  2058     059A                     l1411:
  2059     059A  086D               	movf	___freelist,w
  2060     059B  3E02               	addlw	2
  2061     059C  00F2               	movwf	??_free
  2062     059D  086E               	movf	___freelist+1,w
  2063     059E  1803               	skipnc
  2064     059F  3E01               	addlw	1
  2065     05A0  3E00               	addlw	0
  2066     05A1  00F3               	movwf	??_free+1
  2067     05A2  0872               	movf	??_free,w
  2068     05A3  0084               	movwf	4
  2069     05A4  1783               	bsf	3,7
  2070     05A5  1C73               	btfss	??_free+1,0
  2071     05A6  1383               	bcf	3,7
  2072     05A7  0800               	movf	0,w
  2073     05A8  00F4               	movwf	??_free+2
  2074     05A9  0A84               	incf	4,f
  2075     05AA  0800               	movf	0,w
  2076     05AB  00F5               	movwf	??_free+3
  2077     05AC  087A               	movf	free@c,w
  2078     05AD  3E02               	addlw	2
  2079     05AE  00F6               	movwf	??_free+4
  2080     05AF  087B               	movf	free@c+1,w
  2081     05B0  1803               	skipnc
  2082     05B1  3E01               	addlw	1
  2083     05B2  3E00               	addlw	0
  2084     05B3  00F7               	movwf	??_free+5
  2085     05B4  0876               	movf	??_free+4,w
  2086     05B5  0084               	movwf	4
  2087     05B6  1783               	bsf	3,7
  2088     05B7  1C77               	btfss	??_free+5,0
  2089     05B8  1383               	bcf	3,7
  2090     05B9  0874               	movf	??_free+2,w
  2091     05BA  0080               	movwf	0
  2092     05BB  0875               	movf	??_free+3,w
  2093     05BC  0A84               	incf	4,f
  2094     05BD  0080               	movwf	0
  2095     05BE  0384               	decf	4,f
  2096     05BF                     l1413:
  2097     05BF  086D               	movf	___freelist,w
  2098     05C0  0084               	movwf	4
  2099     05C1  1783               	bsf	3,7
  2100     05C2  1C6E               	btfss	___freelist+1,0
  2101     05C3  1383               	bcf	3,7
  2102     05C4  0800               	movf	0,w
  2103     05C5  00F2               	movwf	??_free
  2104     05C6  0A84               	incf	4,f
  2105     05C7  0800               	movf	0,w
  2106     05C8  00F3               	movwf	??_free+1
  2107     05C9  0872               	movf	??_free,w
  2108     05CA  3E02               	addlw	2
  2109     05CB  00F4               	movwf	??_free+2
  2110     05CC  0873               	movf	??_free+1,w
  2111     05CD  1803               	skipnc
  2112     05CE  3E01               	addlw	1
  2113     05CF  3E00               	addlw	0
  2114     05D0  00F5               	movwf	??_free+3
  2115     05D1  087A               	movf	free@c,w
  2116     05D2  0084               	movwf	4
  2117     05D3  1783               	bsf	3,7
  2118     05D4  1C7B               	btfss	free@c+1,0
  2119     05D5  1383               	bcf	3,7
  2120     05D6  0874               	movf	??_free+2,w
  2121     05D7  0780               	addwf	0,f
  2122     05D8  0F84               	incfsz	4,f
  2123     05D9  0800               	movf	0,w
  2124     05DA  1803               	skipnc
  2125     05DB  0A00               	incf	0,w
  2126     05DC  00FF               	movwf	btemp+1
  2127     05DD  0875               	movf	??_free+3,w
  2128     05DE  077F               	addwf	btemp+1,w
  2129     05DF  0080               	movwf	0
  2130     05E0  0384               	decf	4,f
  2131     05E1                     l1415:
  2132     05E1  087A               	movf	free@c,w
  2133     05E2  00ED               	movwf	___freelist
  2134     05E3  087B               	movf	free@c+1,w
  2135     05E4  00EE               	movwf	___freelist+1
  2136     05E5  2E51               	goto	l720
  2137     05E6                     l1421:
  2138     05E6  086D               	movf	___freelist,w
  2139     05E7  0084               	movwf	4
  2140     05E8  1783               	bsf	3,7
  2141     05E9  1C6E               	btfss	___freelist+1,0
  2142     05EA  1383               	bcf	3,7
  2143     05EB  0800               	movf	0,w
  2144     05EC  00F2               	movwf	??_free
  2145     05ED  0A84               	incf	4,f
  2146     05EE  0800               	movf	0,w
  2147     05EF  00F3               	movwf	??_free+1
  2148     05F0  0872               	movf	??_free,w
  2149     05F1  076D               	addwf	___freelist,w
  2150     05F2  00F4               	movwf	??_free+2
  2151     05F3  0873               	movf	??_free+1,w
  2152     05F4  1803               	skipnc
  2153     05F5  0A73               	incf	??_free+1,w
  2154     05F6  076E               	addwf	___freelist+1,w
  2155     05F7  00F5               	movwf	??_free+3
  2156     05F8  0874               	movf	??_free+2,w
  2157     05F9  3E02               	addlw	2
  2158     05FA  00F6               	movwf	??_free+4
  2159     05FB  0875               	movf	??_free+3,w
  2160     05FC  1803               	skipnc
  2161     05FD  3E01               	addlw	1
  2162     05FE  3E00               	addlw	0
  2163     05FF  00F7               	movwf	??_free+5
  2164     0600  087B               	movf	free@c+1,w
  2165     0601  0677               	xorwf	??_free+5,w
  2166     0602  1D03               	skipz
  2167     0603  2E06               	goto	u835
  2168     0604  087A               	movf	free@c,w
  2169     0605  0676               	xorwf	??_free+4,w
  2170     0606                     u835:
  2171     0606  1D03               	skipz
  2172     0607  2E09               	goto	u831
  2173     0608  2E0A               	goto	u830
  2174     0609                     u831:
  2175     0609  2E2D               	goto	l1427
  2176     060A                     u830:
  2177     060A                     l1423:
  2178     060A  087A               	movf	free@c,w
  2179     060B  0084               	movwf	4
  2180     060C  1783               	bsf	3,7
  2181     060D  1C7B               	btfss	free@c+1,0
  2182     060E  1383               	bcf	3,7
  2183     060F  0800               	movf	0,w
  2184     0610  00F2               	movwf	??_free
  2185     0611  0A84               	incf	4,f
  2186     0612  0800               	movf	0,w
  2187     0613  00F3               	movwf	??_free+1
  2188     0614  0872               	movf	??_free,w
  2189     0615  3E02               	addlw	2
  2190     0616  00F4               	movwf	??_free+2
  2191     0617  0873               	movf	??_free+1,w
  2192     0618  1803               	skipnc
  2193     0619  3E01               	addlw	1
  2194     061A  3E00               	addlw	0
  2195     061B  00F5               	movwf	??_free+3
  2196     061C  086D               	movf	___freelist,w
  2197     061D  0084               	movwf	4
  2198     061E  1783               	bsf	3,7
  2199     061F  1C6E               	btfss	___freelist+1,0
  2200     0620  1383               	bcf	3,7
  2201     0621  0874               	movf	??_free+2,w
  2202     0622  0780               	addwf	0,f
  2203     0623  0F84               	incfsz	4,f
  2204     0624  0800               	movf	0,w
  2205     0625  1803               	skipnc
  2206     0626  0A00               	incf	0,w
  2207     0627  00FF               	movwf	btemp+1
  2208     0628  0875               	movf	??_free+3,w
  2209     0629  077F               	addwf	btemp+1,w
  2210     062A  0080               	movwf	0
  2211     062B  0384               	decf	4,f
  2212     062C  2E51               	goto	l720
  2213     062D                     l1427:
  2214     062D  087A               	movf	free@c,w
  2215     062E  3E02               	addlw	2
  2216     062F  00F2               	movwf	??_free
  2217     0630  087B               	movf	free@c+1,w
  2218     0631  1803               	skipnc
  2219     0632  3E01               	addlw	1
  2220     0633  3E00               	addlw	0
  2221     0634  00F3               	movwf	??_free+1
  2222     0635  0872               	movf	??_free,w
  2223     0636  0084               	movwf	4
  2224     0637  1783               	bsf	3,7
  2225     0638  1C73               	btfss	??_free+1,0
  2226     0639  1383               	bcf	3,7
  2227     063A  086D               	movf	___freelist,w
  2228     063B  0080               	movwf	0
  2229     063C  0A84               	incf	4,f
  2230     063D  086E               	movf	___freelist+1,w
  2231     063E  0080               	movwf	0
  2232     063F  2DE1               	goto	l1415
  2233     0640                     l1429:
  2234     0640  087A               	movf	free@c,w
  2235     0641  3E02               	addlw	2
  2236     0642  00F2               	movwf	??_free
  2237     0643  087B               	movf	free@c+1,w
  2238     0644  1803               	skipnc
  2239     0645  3E01               	addlw	1
  2240     0646  3E00               	addlw	0
  2241     0647  00F3               	movwf	??_free+1
  2242     0648  0872               	movf	??_free,w
  2243     0649  0084               	movwf	4
  2244     064A  1783               	bsf	3,7
  2245     064B  1C73               	btfss	??_free+1,0
  2246     064C  1383               	bcf	3,7
  2247     064D  0180               	clrf	0
  2248     064E  0A84               	incf	4,f
  2249     064F  0180               	clrf	0
  2250     0650  2DE1               	goto	l1415
  2251     0651                     l720:
  2252     0651  0008               	return
  2253     0652                     __end_of_free:
  2254                           
  2255                           	psect	text8
  2256     015A                     __ptext8:	
  2257 ;; *************** function _calloc *****************
  2258 ;; Defined at:
  2259 ;;		line 10 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_calloc.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  nmemb           2   24[BANK0 ] unsigned int 
  2262 ;;  size            2   26[BANK0 ] unsigned int 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  new_ptr         2   28[BANK0 ] PTR void 
  2265 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2   24[BANK0 ] PTR void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       4       0       0       0
  2276 ;;      Locals:         0       2       0       0       0
  2277 ;;      Temps:          0       0       0       0       0
  2278 ;;      Totals:         0       6       0       0       0
  2279 ;;Total ram usage:        6 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 2
  2282 ;; This function calls:
  2283 ;;		___wmul
  2284 ;;		_malloc
  2285 ;;		_memset
  2286 ;; This function is called by:
  2287 ;;		_Rotate
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291     015A                     _calloc:	
  2292                           ;psect for function _calloc
  2293                           
  2294     015A                     l1393:	
  2295                           ;incstack = 0
  2296                           ; Regs used in _calloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2297                           
  2298     015A  1283               	bcf	3,5	;RP0=0, select bank0
  2299     015B  1303               	bcf	3,6	;RP1=0, select bank0
  2300     015C  0839               	movf	calloc@nmemb+1,w
  2301     015D  00F1               	movwf	___wmul@multiplier+1
  2302     015E  0838               	movf	calloc@nmemb,w
  2303     015F  00F0               	movwf	___wmul@multiplier
  2304     0160  083B               	movf	calloc@size+1,w
  2305     0161  00F3               	movwf	___wmul@multiplicand+1
  2306     0162  083A               	movf	calloc@size,w
  2307     0163  00F2               	movwf	___wmul@multiplicand
  2308     0164  120A  118A  20B2  120A  118A  	fcall	___wmul
  2309     0169  0871               	movf	?___wmul+1,w
  2310     016A  00F9               	movwf	malloc@n+1
  2311     016B  0870               	movf	?___wmul,w
  2312     016C  00F8               	movwf	malloc@n
  2313     016D  120A  118A  249A  120A  118A  	fcall	_malloc
  2314     0172  0878               	movf	?_malloc,w
  2315     0173  1283               	bcf	3,5	;RP0=0, select bank0
  2316     0174  1303               	bcf	3,6	;RP1=0, select bank0
  2317     0175  00BC               	movwf	calloc@new_ptr
  2318     0176  0879               	movf	?_malloc+1,w
  2319     0177  00BD               	movwf	calloc@new_ptr+1
  2320     0178                     l1395:
  2321     0178  083C               	movf	calloc@new_ptr,w
  2322     0179  043D               	iorwf	calloc@new_ptr+1,w
  2323     017A  1903               	btfsc	3,2
  2324     017B  297D               	goto	u791
  2325     017C  297E               	goto	u790
  2326     017D                     u791:
  2327     017D  299B               	goto	l1399
  2328     017E                     u790:
  2329     017E                     l1397:
  2330     017E  083C               	movf	calloc@new_ptr,w
  2331     017F  00F6               	movwf	memset@dest
  2332     0180  083D               	movf	calloc@new_ptr+1,w
  2333     0181  00F7               	movwf	memset@dest+1
  2334     0182  3000               	movlw	0
  2335     0183  00F8               	movwf	memset@c
  2336     0184  00F9               	movwf	memset@c+1
  2337     0185  0839               	movf	calloc@nmemb+1,w
  2338     0186  00F1               	movwf	___wmul@multiplier+1
  2339     0187  0838               	movf	calloc@nmemb,w
  2340     0188  00F0               	movwf	___wmul@multiplier
  2341     0189  083B               	movf	calloc@size+1,w
  2342     018A  00F3               	movwf	___wmul@multiplicand+1
  2343     018B  083A               	movf	calloc@size,w
  2344     018C  00F2               	movwf	___wmul@multiplicand
  2345     018D  120A  118A  20B2  120A  118A  	fcall	___wmul
  2346     0192  0871               	movf	?___wmul+1,w
  2347     0193  00FB               	movwf	memset@n+1
  2348     0194  0870               	movf	?___wmul,w
  2349     0195  00FA               	movwf	memset@n
  2350     0196  120A  118A  2093  120A  118A  	fcall	_memset
  2351     019B                     l1399:
  2352     019B  1283               	bcf	3,5	;RP0=0, select bank0
  2353     019C  1303               	bcf	3,6	;RP1=0, select bank0
  2354     019D  083C               	movf	calloc@new_ptr,w
  2355     019E  00B8               	movwf	?_calloc
  2356     019F  083D               	movf	calloc@new_ptr+1,w
  2357     01A0  00B9               	movwf	?_calloc+1
  2358     01A1                     l697:
  2359     01A1  0008               	return
  2360     01A2                     __end_of_calloc:
  2361                           
  2362                           	psect	text9
  2363     0093                     __ptext9:	
  2364 ;; *************** function _memset *****************
  2365 ;; Defined at:
  2366 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  dest            2    6[COMMON] PTR void 
  2369 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2370 ;;  c               2    8[COMMON] int 
  2371 ;;  n               2   10[COMMON] unsigned int 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  p               2   12[COMMON] PTR unsigned char 
  2374 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  2    6[COMMON] PTR void 
  2377 ;; Registers used:
  2378 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2384 ;;      Params:         6       0       0       0       0
  2385 ;;      Locals:         2       0       0       0       0
  2386 ;;      Temps:          0       0       0       0       0
  2387 ;;      Totals:         8       0       0       0       0
  2388 ;;Total ram usage:        8 bytes
  2389 ;; Hardware stack levels used: 1
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_calloc
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397     0093                     _memset:	
  2398                           ;psect for function _memset
  2399                           
  2400     0093                     l1359:	
  2401                           ;incstack = 0
  2402                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2403                           
  2404     0093  0876               	movf	memset@dest,w
  2405     0094  00FC               	movwf	memset@p
  2406     0095  0877               	movf	memset@dest+1,w
  2407     0096  00FD               	movwf	memset@p+1
  2408     0097  28A3               	goto	l1365
  2409     0098                     l1361:
  2410     0098  087C               	movf	memset@p,w
  2411     0099  0084               	movwf	4
  2412     009A  1783               	bsf	3,7
  2413     009B  1C7D               	btfss	memset@p+1,0
  2414     009C  1383               	bcf	3,7
  2415     009D  0878               	movf	memset@c,w
  2416     009E  0080               	movwf	0
  2417     009F                     l1363:
  2418     009F  3001               	movlw	1
  2419     00A0  07FC               	addwf	memset@p,f
  2420     00A1  1803               	skipnc
  2421     00A2  0AFD               	incf	memset@p+1,f
  2422     00A3                     l1365:
  2423     00A3  3001               	movlw	1
  2424     00A4  02FA               	subwf	memset@n,f
  2425     00A5  3000               	movlw	0
  2426     00A6  1C03               	skipc
  2427     00A7  03FB               	decf	memset@n+1,f
  2428     00A8  02FB               	subwf	memset@n+1,f
  2429     00A9  0A7A               	incf	memset@n,w
  2430     00AA  1D03               	skipz
  2431     00AB  28B0               	goto	u751
  2432     00AC  0A7B               	incf	memset@n+1,w
  2433     00AD  1D03               	btfss	3,2
  2434     00AE  28B0               	goto	u751
  2435     00AF  28B1               	goto	u750
  2436     00B0                     u751:
  2437     00B0  2898               	goto	l1361
  2438     00B1                     u750:
  2439     00B1                     l773:
  2440     00B1  0008               	return
  2441     00B2                     __end_of_memset:
  2442                           
  2443                           	psect	text10
  2444     049A                     __ptext10:	
  2445 ;; *************** function _malloc *****************
  2446 ;; Defined at:
  2447 ;;		line 16 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_malloc.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  n               2    8[COMMON] unsigned int 
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;  sz              2   16[BANK0 ] PTR unsigned int 
  2452 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2453 ;;  new             2   22[BANK0 ] PTR unsigned char 
  2454 ;;		 -> __heap_hi(0), NULL(0), 
  2455 ;;  m               2   14[BANK0 ] unsigned int 
  2456 ;;  p               2   20[BANK0 ] PTR void 
  2457 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2458 ;;  size            2   18[BANK0 ] unsigned int 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  2    8[COMMON] PTR void 
  2461 ;; Registers used:
  2462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/0
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2468 ;;      Params:         2       0       0       0       0
  2469 ;;      Locals:         0      10       0       0       0
  2470 ;;      Temps:          2       0       0       0       0
  2471 ;;      Totals:         4      10       0       0       0
  2472 ;;Total ram usage:       14 bytes
  2473 ;; Hardware stack levels used: 1
  2474 ;; Hardware stack levels required when called: 1
  2475 ;; This function calls:
  2476 ;;		___expand_heap
  2477 ;;		___simple_search_fl
  2478 ;; This function is called by:
  2479 ;;		_calloc
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483     049A                     _malloc:	
  2484                           ;psect for function _malloc
  2485                           
  2486     049A                     l1307:	
  2487                           ;incstack = 0
  2488                           ; Regs used in _malloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2489                           
  2490     049A  1283               	bcf	3,5	;RP0=0, select bank0
  2491     049B  1303               	bcf	3,6	;RP1=0, select bank0
  2492     049C  01B2               	clrf	malloc@size
  2493     049D  01B3               	clrf	malloc@size+1
  2494     049E                     l1309:
  2495     049E  0878               	movf	malloc@n,w
  2496     049F  0479               	iorwf	malloc@n+1,w
  2497     04A0  1D03               	btfss	3,2
  2498     04A1  2CA3               	goto	u681
  2499     04A2  2CA4               	goto	u680
  2500     04A3                     u681:
  2501     04A3  2CAA               	goto	l740
  2502     04A4                     u680:
  2503     04A4                     l1311:
  2504     04A4  3001               	movlw	1
  2505     04A5  07F8               	addwf	malloc@n,f
  2506     04A6  1803               	skipnc
  2507     04A7  0AF9               	incf	malloc@n+1,f
  2508     04A8  3000               	movlw	0
  2509     04A9  07F9               	addwf	malloc@n+1,f
  2510     04AA                     l740:
  2511     04AA  3000               	movlw	0
  2512     04AB  0279               	subwf	malloc@n+1,w
  2513     04AC  3002               	movlw	2
  2514     04AD  1903               	skipnz
  2515     04AE  0278               	subwf	malloc@n,w
  2516     04AF  1803               	skipnc
  2517     04B0  2CB2               	goto	u691
  2518     04B1  2CB3               	goto	u690
  2519     04B2                     u691:
  2520     04B2  2CB8               	goto	l1315
  2521     04B3                     u690:
  2522     04B3                     l1313:
  2523     04B3  3002               	movlw	2
  2524     04B4  00F8               	movwf	malloc@n
  2525     04B5  3000               	movlw	0
  2526     04B6  00F9               	movwf	malloc@n+1
  2527     04B7  2CD0               	goto	l1323
  2528     04B8                     l1315:
  2529     04B8  0879               	movf	malloc@n+1,w
  2530     04B9  00FB               	movwf	??_malloc+1
  2531     04BA  0878               	movf	malloc@n,w
  2532     04BB  00FA               	movwf	??_malloc
  2533     04BC  09FA               	comf	??_malloc,f
  2534     04BD  09FB               	comf	??_malloc+1,f
  2535     04BE  3000               	movlw	0
  2536     04BF  027B               	subwf	??_malloc+1,w
  2537     04C0  3002               	movlw	2
  2538     04C1  1903               	skipnz
  2539     04C2  027A               	subwf	??_malloc,w
  2540     04C3  1803               	skipnc
  2541     04C4  2CC6               	goto	u701
  2542     04C5  2CC7               	goto	u700
  2543     04C6                     u701:
  2544     04C6  2CD0               	goto	l1323
  2545     04C7                     u700:
  2546     04C7                     l1317:
  2547     04C7  300C               	movlw	12
  2548     04C8  1683               	bsf	3,5	;RP0=1, select bank1
  2549     04C9  1303               	bcf	3,6	;RP1=0, select bank1
  2550     04CA  00A6               	movwf	_errno^(0+128)
  2551     04CB  3000               	movlw	0
  2552     04CC  00A7               	movwf	(_errno^(0+128)+1)
  2553     04CD                     l1319:
  2554     04CD  01F8               	clrf	?_malloc
  2555     04CE  01F9               	clrf	?_malloc+1
  2556     04CF  2D63               	goto	l744
  2557     04D0                     l1323:
  2558     04D0                     l1325:
  2559     04D0  0879               	movf	malloc@n+1,w
  2560     04D1  00F1               	movwf	___simple_search_fl@n+1
  2561     04D2  0878               	movf	malloc@n,w
  2562     04D3  00F0               	movwf	___simple_search_fl@n
  2563     04D4  120A  118A  2652  120A  118A  	fcall	___simple_search_fl
  2564     04D9  0870               	movf	?___simple_search_fl,w
  2565     04DA  1283               	bcf	3,5	;RP0=0, select bank0
  2566     04DB  1303               	bcf	3,6	;RP1=0, select bank0
  2567     04DC  00B4               	movwf	malloc@p
  2568     04DD  0871               	movf	?___simple_search_fl+1,w
  2569     04DE  00B5               	movwf	malloc@p+1
  2570     04DF                     l1327:
  2571     04DF  0834               	movf	malloc@p,w
  2572     04E0  0435               	iorwf	malloc@p+1,w
  2573     04E1  1D03               	btfss	3,2
  2574     04E2  2CE4               	goto	u711
  2575     04E3  2CE5               	goto	u710
  2576     04E4                     u711:
  2577     04E4  2D5F               	goto	l1355
  2578     04E5                     u710:
  2579     04E5                     l1329:
  2580     04E5  086B               	movf	malloc@cur,w
  2581     04E6  1683               	bsf	3,5	;RP0=1, select bank1
  2582     04E7  1303               	bcf	3,6	;RP1=0, select bank1
  2583     04E8  0224               	subwf	malloc@end^(0+128),w
  2584     04E9  00FA               	movwf	??_malloc
  2585     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2586     04EB  1303               	bcf	3,6	;RP1=0, select bank0
  2587     04EC  086C               	movf	malloc@cur+1,w
  2588     04ED  1C03               	skipc
  2589     04EE  0A6C               	incf	malloc@cur+1,w
  2590     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  2591     04F0  1303               	bcf	3,6	;RP1=0, select bank1
  2592     04F1  0225               	subwf	(malloc@end+1)^(0+128),w
  2593     04F2  00FB               	movwf	??_malloc+1
  2594     04F3  0879               	movf	malloc@n+1,w
  2595     04F4  027B               	subwf	??_malloc+1,w
  2596     04F5  1D03               	skipz
  2597     04F6  2CF9               	goto	u725
  2598     04F7  0878               	movf	malloc@n,w
  2599     04F8  027A               	subwf	??_malloc,w
  2600     04F9                     u725:
  2601     04F9  1803               	skipnc
  2602     04FA  2CFC               	goto	u721
  2603     04FB  2CFD               	goto	u720
  2604     04FC                     u721:
  2605     04FC  2D3E               	goto	l746
  2606     04FD                     u720:
  2607     04FD                     l1331:
  2608     04FD  0878               	movf	malloc@n,w
  2609     04FE  3E02               	addlw	2
  2610     04FF  1283               	bcf	3,5	;RP0=0, select bank0
  2611     0500  1303               	bcf	3,6	;RP1=0, select bank0
  2612     0501  00AE               	movwf	malloc@m
  2613     0502  0879               	movf	malloc@n+1,w
  2614     0503  1803               	skipnc
  2615     0504  3E01               	addlw	1
  2616     0505  3E00               	addlw	0
  2617     0506  00AF               	movwf	malloc@m+1
  2618     0507                     l1333:
  2619     0507  302E               	movlw	(low (malloc@m| 0))& (0+255)
  2620     0508  00F0               	movwf	___expand_heap@pn
  2621     0509  120A  118A  21A2  120A  118A  	fcall	___expand_heap
  2622     050E  0870               	movf	?___expand_heap,w
  2623     050F  1283               	bcf	3,5	;RP0=0, select bank0
  2624     0510  1303               	bcf	3,6	;RP1=0, select bank0
  2625     0511  00B6               	movwf	malloc@new
  2626     0512  0871               	movf	?___expand_heap+1,w
  2627     0513  00B7               	movwf	malloc@new+1
  2628     0514                     l1335:
  2629     0514  0836               	movf	malloc@new,w
  2630     0515  0437               	iorwf	malloc@new+1,w
  2631     0516  1D03               	btfss	3,2
  2632     0517  2D19               	goto	u731
  2633     0518  2D1A               	goto	u730
  2634     0519                     u731:
  2635     0519  2D1B               	goto	l1341
  2636     051A                     u730:
  2637     051A  2CCD               	goto	l1319
  2638     051B                     l1341:
  2639     051B  1683               	bsf	3,5	;RP0=1, select bank1
  2640     051C  1303               	bcf	3,6	;RP1=0, select bank1
  2641     051D  0825               	movf	(malloc@end+1)^(0+128),w
  2642     051E  1283               	bcf	3,5	;RP0=0, select bank0
  2643     051F  1303               	bcf	3,6	;RP1=0, select bank0
  2644     0520  0637               	xorwf	malloc@new+1,w
  2645     0521  1D03               	skipz
  2646     0522  2D29               	goto	u745
  2647     0523  1683               	bsf	3,5	;RP0=1, select bank1
  2648     0524  1303               	bcf	3,6	;RP1=0, select bank1
  2649     0525  0824               	movf	malloc@end^(0+128),w
  2650     0526  1283               	bcf	3,5	;RP0=0, select bank0
  2651     0527  1303               	bcf	3,6	;RP1=0, select bank0
  2652     0528  0636               	xorwf	malloc@new,w
  2653     0529                     u745:
  2654     0529  1903               	skipnz
  2655     052A  2D2C               	goto	u741
  2656     052B  2D2D               	goto	u740
  2657     052C                     u741:
  2658     052C  2D31               	goto	l748
  2659     052D                     u740:
  2660     052D                     l1343:
  2661     052D  0836               	movf	malloc@new,w
  2662     052E  00EB               	movwf	malloc@cur
  2663     052F  0837               	movf	malloc@new+1,w
  2664     0530  00EC               	movwf	malloc@cur+1
  2665     0531                     l748:
  2666     0531  082E               	movf	malloc@m,w
  2667     0532  0736               	addwf	malloc@new,w
  2668     0533  1683               	bsf	3,5	;RP0=1, select bank1
  2669     0534  1303               	bcf	3,6	;RP1=0, select bank1
  2670     0535  00A4               	movwf	malloc@end^(0+128)
  2671     0536  1283               	bcf	3,5	;RP0=0, select bank0
  2672     0537  1303               	bcf	3,6	;RP1=0, select bank0
  2673     0538  0837               	movf	malloc@new+1,w
  2674     0539  1803               	skipnc
  2675     053A  3E01               	addlw	1
  2676     053B  1683               	bsf	3,5	;RP0=1, select bank1
  2677     053C  1303               	bcf	3,6	;RP1=0, select bank1
  2678     053D  00A5               	movwf	(malloc@end^(0+128)+1)
  2679     053E                     l746:
  2680     053E  1283               	bcf	3,5	;RP0=0, select bank0
  2681     053F  1303               	bcf	3,6	;RP1=0, select bank0
  2682     0540  086B               	movf	malloc@cur,w
  2683     0541  00B4               	movwf	malloc@p
  2684     0542  086C               	movf	malloc@cur+1,w
  2685     0543  00B5               	movwf	malloc@p+1
  2686     0544                     l1345:
  2687     0544  0834               	movf	malloc@p,w
  2688     0545  00B0               	movwf	malloc@sz
  2689     0546  0835               	movf	malloc@p+1,w
  2690     0547  00B1               	movwf	malloc@sz+1
  2691     0548                     l1347:
  2692     0548  0830               	movf	malloc@sz,w
  2693     0549  0084               	movwf	4
  2694     054A  1783               	bsf	3,7
  2695     054B  1C31               	btfss	malloc@sz+1,0
  2696     054C  1383               	bcf	3,7
  2697     054D  0878               	movf	malloc@n,w
  2698     054E  0080               	movwf	0
  2699     054F  0A84               	incf	4,f
  2700     0550  0879               	movf	malloc@n+1,w
  2701     0551  0080               	movwf	0
  2702     0552                     l1349:
  2703     0552  3002               	movlw	2
  2704     0553  07B0               	addwf	malloc@sz,f
  2705     0554  1803               	skipnc
  2706     0555  0AB1               	incf	malloc@sz+1,f
  2707     0556                     l1351:
  2708     0556  0830               	movf	malloc@sz,w
  2709     0557  00B4               	movwf	malloc@p
  2710     0558  0831               	movf	malloc@sz+1,w
  2711     0559  00B5               	movwf	malloc@p+1
  2712     055A                     l1353:
  2713     055A  0878               	movf	malloc@n,w
  2714     055B  3E02               	addlw	2
  2715     055C  07EB               	addwf	malloc@cur,f
  2716     055D  1803               	skipnc
  2717     055E  0AEC               	incf	malloc@cur+1,f
  2718     055F                     l1355:
  2719     055F  0834               	movf	malloc@p,w
  2720     0560  00F8               	movwf	?_malloc
  2721     0561  0835               	movf	malloc@p+1,w
  2722     0562  00F9               	movwf	?_malloc+1
  2723     0563                     l744:
  2724     0563  0008               	return
  2725     0564                     __end_of_malloc:
  2726                           
  2727                           	psect	text11
  2728     0652                     __ptext11:	
  2729 ;; *************** function ___simple_search_fl *****************
  2730 ;; Defined at:
  2731 ;;		line 19 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;  n               2    0[COMMON] unsigned int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  split           2    4[BANK0 ] PTR struct chunk
  2736 ;;		 -> __heap_hi$.$next(2), NULL(0), 
  2737 ;;  remaining_si    2    0[BANK0 ] unsigned int 
  2738 ;;  next            2    8[BANK0 ] PTR struct chunk
  2739 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2740 ;;  best            2   12[BANK0 ] PTR struct chunk
  2741 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2742 ;;  c               2   10[BANK0 ] PTR struct chunk
  2743 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2744 ;;  last            2    6[BANK0 ] PTR struct chunk
  2745 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2746 ;;  best_last       2    2[BANK0 ] PTR struct chunk
  2747 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  2    0[COMMON] PTR void 
  2750 ;; Registers used:
  2751 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2757 ;;      Params:         2       0       0       0       0
  2758 ;;      Locals:         0      14       0       0       0
  2759 ;;      Temps:          6       0       0       0       0
  2760 ;;      Totals:         8      14       0       0       0
  2761 ;;Total ram usage:       22 bytes
  2762 ;; Hardware stack levels used: 1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_malloc
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770     0652                     ___simple_search_fl:	
  2771                           ;psect for function ___simple_search_fl
  2772                           
  2773     0652                     l1201:	
  2774                           ;incstack = 0
  2775                           ; Regs used in ___simple_search_fl: [wreg-fsr0h+status,2+status,0]
  2776                           
  2777     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2778     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2779     0654  01AC               	clrf	___simple_search_fl@best
  2780     0655  01AD               	clrf	___simple_search_fl@best+1
  2781     0656  01A2               	clrf	___simple_search_fl@best_last
  2782     0657  01A3               	clrf	___simple_search_fl@best_last+1
  2783     0658  01A6               	clrf	___simple_search_fl@last
  2784     0659  01A7               	clrf	___simple_search_fl@last+1
  2785     065A                     l1203:
  2786     065A  086D               	movf	___freelist,w
  2787     065B  046E               	iorwf	___freelist+1,w
  2788     065C  1D03               	btfss	3,2
  2789     065D  2E5F               	goto	u501
  2790     065E  2E60               	goto	u500
  2791     065F                     u501:
  2792     065F  2E63               	goto	l1209
  2793     0660                     u500:
  2794     0660                     l1205:
  2795     0660  01F0               	clrf	?___simple_search_fl
  2796     0661  01F1               	clrf	?___simple_search_fl+1
  2797     0662  2FD7               	goto	l703
  2798     0663                     l1209:
  2799     0663  086D               	movf	___freelist,w
  2800     0664  00AA               	movwf	___simple_search_fl@c
  2801     0665  086E               	movf	___freelist+1,w
  2802     0666  00AB               	movwf	___simple_search_fl@c+1
  2803     0667  2F1C               	goto	l1235
  2804     0668                     l1211:
  2805     0668  082A               	movf	___simple_search_fl@c,w
  2806     0669  0084               	movwf	4
  2807     066A  1783               	bsf	3,7
  2808     066B  1C2B               	btfss	___simple_search_fl@c+1,0
  2809     066C  1383               	bcf	3,7
  2810     066D  0800               	movf	0,w
  2811     066E  00F2               	movwf	??___simple_search_fl
  2812     066F  0A84               	incf	4,f
  2813     0670  0800               	movf	0,w
  2814     0671  00F3               	movwf	??___simple_search_fl+1
  2815     0672  0871               	movf	___simple_search_fl@n+1,w
  2816     0673  0673               	xorwf	??___simple_search_fl+1,w
  2817     0674  1D03               	skipz
  2818     0675  2E78               	goto	u515
  2819     0676  0870               	movf	___simple_search_fl@n,w
  2820     0677  0672               	xorwf	??___simple_search_fl,w
  2821     0678                     u515:
  2822     0678  1D03               	skipz
  2823     0679  2E7B               	goto	u511
  2824     067A  2E7C               	goto	u510
  2825     067B                     u511:
  2826     067B  2EC4               	goto	l1223
  2827     067C                     u510:
  2828     067C                     l1213:
  2829     067C  0826               	movf	___simple_search_fl@last,w
  2830     067D  0427               	iorwf	___simple_search_fl@last+1,w
  2831     067E  1903               	btfsc	3,2
  2832     067F  2E81               	goto	u521
  2833     0680  2E82               	goto	u520
  2834     0681                     u521:
  2835     0681  2EA8               	goto	l1217
  2836     0682                     u520:
  2837     0682                     l1215:
  2838     0682  082A               	movf	___simple_search_fl@c,w
  2839     0683  3E02               	addlw	2
  2840     0684  00F2               	movwf	??___simple_search_fl
  2841     0685  082B               	movf	___simple_search_fl@c+1,w
  2842     0686  1803               	skipnc
  2843     0687  3E01               	addlw	1
  2844     0688  3E00               	addlw	0
  2845     0689  00F3               	movwf	??___simple_search_fl+1
  2846     068A  0872               	movf	??___simple_search_fl,w
  2847     068B  0084               	movwf	4
  2848     068C  1783               	bsf	3,7
  2849     068D  1C73               	btfss	??___simple_search_fl+1,0
  2850     068E  1383               	bcf	3,7
  2851     068F  0800               	movf	0,w
  2852     0690  00F4               	movwf	??___simple_search_fl+2
  2853     0691  0A84               	incf	4,f
  2854     0692  0800               	movf	0,w
  2855     0693  00F5               	movwf	??___simple_search_fl+3
  2856     0694  0826               	movf	___simple_search_fl@last,w
  2857     0695  3E02               	addlw	2
  2858     0696  00F6               	movwf	??___simple_search_fl+4
  2859     0697  0827               	movf	___simple_search_fl@last+1,w
  2860     0698  1803               	skipnc
  2861     0699  3E01               	addlw	1
  2862     069A  3E00               	addlw	0
  2863     069B  00F7               	movwf	??___simple_search_fl+5
  2864     069C  0876               	movf	??___simple_search_fl+4,w
  2865     069D  0084               	movwf	4
  2866     069E  1783               	bsf	3,7
  2867     069F  1C77               	btfss	??___simple_search_fl+5,0
  2868     06A0  1383               	bcf	3,7
  2869     06A1  0874               	movf	??___simple_search_fl+2,w
  2870     06A2  0080               	movwf	0
  2871     06A3  0875               	movf	??___simple_search_fl+3,w
  2872     06A4  0A84               	incf	4,f
  2873     06A5  0080               	movwf	0
  2874     06A6  0384               	decf	4,f
  2875     06A7  2EBB               	goto	l1219
  2876     06A8                     l1217:
  2877     06A8  082A               	movf	___simple_search_fl@c,w
  2878     06A9  3E02               	addlw	2
  2879     06AA  00F2               	movwf	??___simple_search_fl
  2880     06AB  082B               	movf	___simple_search_fl@c+1,w
  2881     06AC  1803               	skipnc
  2882     06AD  3E01               	addlw	1
  2883     06AE  3E00               	addlw	0
  2884     06AF  00F3               	movwf	??___simple_search_fl+1
  2885     06B0  0872               	movf	??___simple_search_fl,w
  2886     06B1  0084               	movwf	4
  2887     06B2  1783               	bsf	3,7
  2888     06B3  1C73               	btfss	??___simple_search_fl+1,0
  2889     06B4  1383               	bcf	3,7
  2890     06B5  0800               	movf	0,w
  2891     06B6  00ED               	movwf	___freelist
  2892     06B7  0A84               	incf	4,f
  2893     06B8  0800               	movf	0,w
  2894     06B9  0384               	decf	4,f
  2895     06BA  00EE               	movwf	___freelist+1
  2896     06BB                     l1219:
  2897     06BB  082A               	movf	___simple_search_fl@c,w
  2898     06BC  3E02               	addlw	2
  2899     06BD  00F0               	movwf	?___simple_search_fl
  2900     06BE  082B               	movf	___simple_search_fl@c+1,w
  2901     06BF  1803               	skipnc
  2902     06C0  3E01               	addlw	1
  2903     06C1  3E00               	addlw	0
  2904     06C2  00F1               	movwf	?___simple_search_fl+1
  2905     06C3  2FD7               	goto	l703
  2906     06C4                     l1223:
  2907     06C4  082A               	movf	___simple_search_fl@c,w
  2908     06C5  0084               	movwf	4
  2909     06C6  1783               	bsf	3,7
  2910     06C7  1C2B               	btfss	___simple_search_fl@c+1,0
  2911     06C8  1383               	bcf	3,7
  2912     06C9  0800               	movf	0,w
  2913     06CA  00F2               	movwf	??___simple_search_fl
  2914     06CB  0A84               	incf	4,f
  2915     06CC  0800               	movf	0,w
  2916     06CD  00F3               	movwf	??___simple_search_fl+1
  2917     06CE  0873               	movf	??___simple_search_fl+1,w
  2918     06CF  0271               	subwf	___simple_search_fl@n+1,w
  2919     06D0  1D03               	skipz
  2920     06D1  2ED4               	goto	u535
  2921     06D2  0872               	movf	??___simple_search_fl,w
  2922     06D3  0270               	subwf	___simple_search_fl@n,w
  2923     06D4                     u535:
  2924     06D4  1803               	skipnc
  2925     06D5  2ED7               	goto	u531
  2926     06D6  2ED8               	goto	u530
  2927     06D7                     u531:
  2928     06D7  2F05               	goto	l711
  2929     06D8                     u530:
  2930     06D8                     l1225:
  2931     06D8  082C               	movf	___simple_search_fl@best,w
  2932     06D9  042D               	iorwf	___simple_search_fl@best+1,w
  2933     06DA  1903               	btfsc	3,2
  2934     06DB  2EDD               	goto	u541
  2935     06DC  2EDE               	goto	u540
  2936     06DD                     u541:
  2937     06DD  2EFD               	goto	l1231
  2938     06DE                     u540:
  2939     06DE                     l1227:
  2940     06DE  082C               	movf	___simple_search_fl@best,w
  2941     06DF  0084               	movwf	4
  2942     06E0  1783               	bsf	3,7
  2943     06E1  1C2D               	btfss	___simple_search_fl@best+1,0
  2944     06E2  1383               	bcf	3,7
  2945     06E3  0800               	movf	0,w
  2946     06E4  00F2               	movwf	??___simple_search_fl
  2947     06E5  0A84               	incf	4,f
  2948     06E6  0800               	movf	0,w
  2949     06E7  00F3               	movwf	??___simple_search_fl+1
  2950     06E8  082A               	movf	___simple_search_fl@c,w
  2951     06E9  0084               	movwf	4
  2952     06EA  1783               	bsf	3,7
  2953     06EB  1C2B               	btfss	___simple_search_fl@c+1,0
  2954     06EC  1383               	bcf	3,7
  2955     06ED  0800               	movf	0,w
  2956     06EE  00F4               	movwf	??___simple_search_fl+2
  2957     06EF  0A84               	incf	4,f
  2958     06F0  0800               	movf	0,w
  2959     06F1  00F5               	movwf	??___simple_search_fl+3
  2960     06F2  0873               	movf	??___simple_search_fl+1,w
  2961     06F3  0275               	subwf	??___simple_search_fl+3,w
  2962     06F4  1D03               	skipz
  2963     06F5  2EF8               	goto	u555
  2964     06F6  0872               	movf	??___simple_search_fl,w
  2965     06F7  0274               	subwf	??___simple_search_fl+2,w
  2966     06F8                     u555:
  2967     06F8  1C03               	skipc
  2968     06F9  2EFB               	goto	u551
  2969     06FA  2EFC               	goto	u550
  2970     06FB                     u551:
  2971     06FB  2EFD               	goto	l1231
  2972     06FC                     u550:
  2973     06FC  2F05               	goto	l711
  2974     06FD                     l1231:
  2975     06FD  082A               	movf	___simple_search_fl@c,w
  2976     06FE  00AC               	movwf	___simple_search_fl@best
  2977     06FF  082B               	movf	___simple_search_fl@c+1,w
  2978     0700  00AD               	movwf	___simple_search_fl@best+1
  2979     0701  0826               	movf	___simple_search_fl@last,w
  2980     0702  00A2               	movwf	___simple_search_fl@best_last
  2981     0703  0827               	movf	___simple_search_fl@last+1,w
  2982     0704  00A3               	movwf	___simple_search_fl@best_last+1
  2983     0705                     l711:
  2984     0705  082A               	movf	___simple_search_fl@c,w
  2985     0706  00A6               	movwf	___simple_search_fl@last
  2986     0707  082B               	movf	___simple_search_fl@c+1,w
  2987     0708  00A7               	movwf	___simple_search_fl@last+1
  2988     0709                     l1233:
  2989     0709  082A               	movf	___simple_search_fl@c,w
  2990     070A  3E02               	addlw	2
  2991     070B  00F2               	movwf	??___simple_search_fl
  2992     070C  082B               	movf	___simple_search_fl@c+1,w
  2993     070D  1803               	skipnc
  2994     070E  3E01               	addlw	1
  2995     070F  3E00               	addlw	0
  2996     0710  00F3               	movwf	??___simple_search_fl+1
  2997     0711  0872               	movf	??___simple_search_fl,w
  2998     0712  0084               	movwf	4
  2999     0713  1783               	bsf	3,7
  3000     0714  1C73               	btfss	??___simple_search_fl+1,0
  3001     0715  1383               	bcf	3,7
  3002     0716  0800               	movf	0,w
  3003     0717  00AA               	movwf	___simple_search_fl@c
  3004     0718  0A84               	incf	4,f
  3005     0719  0800               	movf	0,w
  3006     071A  0384               	decf	4,f
  3007     071B  00AB               	movwf	___simple_search_fl@c+1
  3008     071C                     l1235:
  3009     071C  082A               	movf	___simple_search_fl@c,w
  3010     071D  042B               	iorwf	___simple_search_fl@c+1,w
  3011     071E  1D03               	btfss	3,2
  3012     071F  2F21               	goto	u561
  3013     0720  2F22               	goto	u560
  3014     0721                     u561:
  3015     0721  2E68               	goto	l1211
  3016     0722                     u560:
  3017     0722                     l1237:
  3018     0722  082C               	movf	___simple_search_fl@best,w
  3019     0723  042D               	iorwf	___simple_search_fl@best+1,w
  3020     0724  1903               	btfsc	3,2
  3021     0725  2F27               	goto	u571
  3022     0726  2F28               	goto	u570
  3023     0727                     u571:
  3024     0727  2E60               	goto	l1205
  3025     0728                     u570:
  3026     0728                     l1239:
  3027     0728  082C               	movf	___simple_search_fl@best,w
  3028     0729  3E02               	addlw	2
  3029     072A  00F2               	movwf	??___simple_search_fl
  3030     072B  082D               	movf	___simple_search_fl@best+1,w
  3031     072C  1803               	skipnc
  3032     072D  3E01               	addlw	1
  3033     072E  3E00               	addlw	0
  3034     072F  00F3               	movwf	??___simple_search_fl+1
  3035     0730  0872               	movf	??___simple_search_fl,w
  3036     0731  0084               	movwf	4
  3037     0732  1783               	bsf	3,7
  3038     0733  1C73               	btfss	??___simple_search_fl+1,0
  3039     0734  1383               	bcf	3,7
  3040     0735  0800               	movf	0,w
  3041     0736  00A8               	movwf	___simple_search_fl@next
  3042     0737  0A84               	incf	4,f
  3043     0738  0800               	movf	0,w
  3044     0739  0384               	decf	4,f
  3045     073A  00A9               	movwf	___simple_search_fl@next+1
  3046     073B  082C               	movf	___simple_search_fl@best,w
  3047     073C  0084               	movwf	4
  3048     073D  1783               	bsf	3,7
  3049     073E  1C2D               	btfss	___simple_search_fl@best+1,0
  3050     073F  1383               	bcf	3,7
  3051     0740  0800               	movf	0,w
  3052     0741  00F2               	movwf	??___simple_search_fl
  3053     0742  0A84               	incf	4,f
  3054     0743  0800               	movf	0,w
  3055     0744  00F3               	movwf	??___simple_search_fl+1
  3056     0745  0870               	movf	___simple_search_fl@n,w
  3057     0746  0272               	subwf	??___simple_search_fl,w
  3058     0747  00F4               	movwf	??___simple_search_fl+2
  3059     0748  0871               	movf	___simple_search_fl@n+1,w
  3060     0749  1C03               	skipc
  3061     074A  0A71               	incf	___simple_search_fl@n+1,w
  3062     074B  0273               	subwf	??___simple_search_fl+1,w
  3063     074C  00F5               	movwf	??___simple_search_fl+3
  3064     074D  3000               	movlw	0
  3065     074E  0275               	subwf	??___simple_search_fl+3,w
  3066     074F  3005               	movlw	5
  3067     0750  1903               	skipnz
  3068     0751  0274               	subwf	??___simple_search_fl+2,w
  3069     0752  1C03               	skipc
  3070     0753  2F55               	goto	u581
  3071     0754  2F56               	goto	u580
  3072     0755                     u581:
  3073     0755  2FAE               	goto	l714
  3074     0756                     u580:
  3075     0756                     l1241:
  3076     0756  082C               	movf	___simple_search_fl@best,w
  3077     0757  0084               	movwf	4
  3078     0758  1783               	bsf	3,7
  3079     0759  1C2D               	btfss	___simple_search_fl@best+1,0
  3080     075A  1383               	bcf	3,7
  3081     075B  0800               	movf	0,w
  3082     075C  00F2               	movwf	??___simple_search_fl
  3083     075D  0A84               	incf	4,f
  3084     075E  0800               	movf	0,w
  3085     075F  00F3               	movwf	??___simple_search_fl+1
  3086     0760  0870               	movf	___simple_search_fl@n,w
  3087     0761  0272               	subwf	??___simple_search_fl,w
  3088     0762  00F4               	movwf	??___simple_search_fl+2
  3089     0763  0871               	movf	___simple_search_fl@n+1,w
  3090     0764  1C03               	skipc
  3091     0765  0A71               	incf	___simple_search_fl@n+1,w
  3092     0766  0273               	subwf	??___simple_search_fl+1,w
  3093     0767  00F5               	movwf	??___simple_search_fl+3
  3094     0768  0874               	movf	??___simple_search_fl+2,w
  3095     0769  3EFE               	addlw	254
  3096     076A  00A0               	movwf	___simple_search_fl@remaining_size
  3097     076B  0875               	movf	??___simple_search_fl+3,w
  3098     076C  1803               	skipnc
  3099     076D  3E01               	addlw	1
  3100     076E  3EFF               	addlw	255
  3101     076F  00A1               	movwf	___simple_search_fl@remaining_size+1
  3102     0770                     l1243:
  3103     0770  082C               	movf	___simple_search_fl@best,w
  3104     0771  0084               	movwf	4
  3105     0772  1783               	bsf	3,7
  3106     0773  1C2D               	btfss	___simple_search_fl@best+1,0
  3107     0774  1383               	bcf	3,7
  3108     0775  0870               	movf	___simple_search_fl@n,w
  3109     0776  0080               	movwf	0
  3110     0777  0A84               	incf	4,f
  3111     0778  0871               	movf	___simple_search_fl@n+1,w
  3112     0779  0080               	movwf	0
  3113     077A                     l1245:
  3114     077A  082C               	movf	___simple_search_fl@best,w
  3115     077B  0084               	movwf	4
  3116     077C  1783               	bsf	3,7
  3117     077D  1C2D               	btfss	___simple_search_fl@best+1,0
  3118     077E  1383               	bcf	3,7
  3119     077F  0800               	movf	0,w
  3120     0780  072C               	addwf	___simple_search_fl@best,w
  3121     0781  00F2               	movwf	??___simple_search_fl
  3122     0782  082D               	movf	___simple_search_fl@best+1,w
  3123     0783  1803               	skipnc
  3124     0784  3E01               	addlw	1
  3125     0785  00F3               	movwf	??___simple_search_fl+1
  3126     0786  0872               	movf	??___simple_search_fl,w
  3127     0787  3E02               	addlw	2
  3128     0788  00A4               	movwf	___simple_search_fl@split
  3129     0789  0873               	movf	??___simple_search_fl+1,w
  3130     078A  1803               	skipnc
  3131     078B  3E01               	addlw	1
  3132     078C  3E00               	addlw	0
  3133     078D  00A5               	movwf	___simple_search_fl@split+1
  3134     078E  0824               	movf	___simple_search_fl@split,w
  3135     078F  0084               	movwf	4
  3136     0790  1783               	bsf	3,7
  3137     0791  1C25               	btfss	___simple_search_fl@split+1,0
  3138     0792  1383               	bcf	3,7
  3139     0793  0820               	movf	___simple_search_fl@remaining_size,w
  3140     0794  0080               	movwf	0
  3141     0795  0A84               	incf	4,f
  3142     0796  0821               	movf	___simple_search_fl@remaining_size+1,w
  3143     0797  0080               	movwf	0
  3144     0798                     l1247:
  3145     0798  0824               	movf	___simple_search_fl@split,w
  3146     0799  3E02               	addlw	2
  3147     079A  00F2               	movwf	??___simple_search_fl
  3148     079B  0825               	movf	___simple_search_fl@split+1,w
  3149     079C  1803               	skipnc
  3150     079D  3E01               	addlw	1
  3151     079E  3E00               	addlw	0
  3152     079F  00F3               	movwf	??___simple_search_fl+1
  3153     07A0  0872               	movf	??___simple_search_fl,w
  3154     07A1  0084               	movwf	4
  3155     07A2  1783               	bsf	3,7
  3156     07A3  1C73               	btfss	??___simple_search_fl+1,0
  3157     07A4  1383               	bcf	3,7
  3158     07A5  0828               	movf	___simple_search_fl@next,w
  3159     07A6  0080               	movwf	0
  3160     07A7  0A84               	incf	4,f
  3161     07A8  0829               	movf	___simple_search_fl@next+1,w
  3162     07A9  0080               	movwf	0
  3163     07AA                     l1249:
  3164     07AA  0824               	movf	___simple_search_fl@split,w
  3165     07AB  00A8               	movwf	___simple_search_fl@next
  3166     07AC  0825               	movf	___simple_search_fl@split+1,w
  3167     07AD  00A9               	movwf	___simple_search_fl@next+1
  3168     07AE                     l714:
  3169     07AE  082D               	movf	___simple_search_fl@best+1,w
  3170     07AF  066E               	xorwf	___freelist+1,w
  3171     07B0  1D03               	skipz
  3172     07B1  2FB4               	goto	u595
  3173     07B2  082C               	movf	___simple_search_fl@best,w
  3174     07B3  066D               	xorwf	___freelist,w
  3175     07B4                     u595:
  3176     07B4  1D03               	skipz
  3177     07B5  2FB7               	goto	u591
  3178     07B6  2FB8               	goto	u590
  3179     07B7                     u591:
  3180     07B7  2FBD               	goto	l1253
  3181     07B8                     u590:
  3182     07B8                     l1251:
  3183     07B8  0828               	movf	___simple_search_fl@next,w
  3184     07B9  00ED               	movwf	___freelist
  3185     07BA  0829               	movf	___simple_search_fl@next+1,w
  3186     07BB  00EE               	movwf	___freelist+1
  3187     07BC  2FCF               	goto	l1255
  3188     07BD                     l1253:
  3189     07BD  0822               	movf	___simple_search_fl@best_last,w
  3190     07BE  3E02               	addlw	2
  3191     07BF  00F2               	movwf	??___simple_search_fl
  3192     07C0  0823               	movf	___simple_search_fl@best_last+1,w
  3193     07C1  1803               	skipnc
  3194     07C2  3E01               	addlw	1
  3195     07C3  3E00               	addlw	0
  3196     07C4  00F3               	movwf	??___simple_search_fl+1
  3197     07C5  0872               	movf	??___simple_search_fl,w
  3198     07C6  0084               	movwf	4
  3199     07C7  1783               	bsf	3,7
  3200     07C8  1C73               	btfss	??___simple_search_fl+1,0
  3201     07C9  1383               	bcf	3,7
  3202     07CA  0828               	movf	___simple_search_fl@next,w
  3203     07CB  0080               	movwf	0
  3204     07CC  0A84               	incf	4,f
  3205     07CD  0829               	movf	___simple_search_fl@next+1,w
  3206     07CE  0080               	movwf	0
  3207     07CF                     l1255:
  3208     07CF  082C               	movf	___simple_search_fl@best,w
  3209     07D0  3E02               	addlw	2
  3210     07D1  00F0               	movwf	?___simple_search_fl
  3211     07D2  082D               	movf	___simple_search_fl@best+1,w
  3212     07D3  1803               	skipnc
  3213     07D4  3E01               	addlw	1
  3214     07D5  3E00               	addlw	0
  3215     07D6  00F1               	movwf	?___simple_search_fl+1
  3216     07D7                     l703:
  3217     07D7  0008               	return
  3218     07D8                     __end_of___simple_search_fl:
  3219                           
  3220                           	psect	text12
  3221     01A2                     __ptext12:	
  3222 ;; *************** function ___expand_heap *****************
  3223 ;; Defined at:
  3224 ;;		line 14 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/expand_heap.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;  pn              1    0[COMMON] PTR unsigned int 
  3227 ;;		 -> malloc@m(2), 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  new_brkp        2    3[COMMON] PTR unsigned char 
  3230 ;;		 -> __heap_hi(0), NULL(0), 
  3231 ;;  n               2    1[COMMON] unsigned int 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  2    0[COMMON] PTR void 
  3234 ;; Registers used:
  3235 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3241 ;;      Params:         1       0       0       0       0
  3242 ;;      Locals:         4       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0
  3244 ;;      Totals:         5       0       0       0       0
  3245 ;;Total ram usage:        5 bytes
  3246 ;; Hardware stack levels used: 1
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_malloc
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254     01A2                     ___expand_heap:	
  3255                           ;psect for function ___expand_heap
  3256                           
  3257     01A2                     l1263:	
  3258                           ;incstack = 0
  3259                           ; Regs used in ___expand_heap: [wreg-fsr0h+status,2+status,0]
  3260                           
  3261     01A2  0870               	movf	___expand_heap@pn,w
  3262     01A3  0084               	movwf	4
  3263     01A4  1383               	bcf	3,7	;select IRP bank0
  3264     01A5  0800               	movf	0,w
  3265     01A6  00F1               	movwf	___expand_heap@n
  3266     01A7  0A84               	incf	4,f
  3267     01A8  0800               	movf	0,w
  3268     01A9  00F2               	movwf	___expand_heap@n+1
  3269     01AA                     l1265:
  3270     01AA  1283               	bcf	3,5	;RP0=0, select bank0
  3271     01AB  1303               	bcf	3,6	;RP1=0, select bank0
  3272     01AC  0869               	movf	_brkp,w
  3273     01AD  046A               	iorwf	_brkp+1,w
  3274     01AE  1D03               	btfss	3,2
  3275     01AF  29B1               	goto	u601
  3276     01B0  29B2               	goto	u600
  3277     01B1                     u601:
  3278     01B1  29B6               	goto	l762
  3279     01B2                     u600:
  3280     01B2                     l1267:
  3281     01B2  3070               	movlw	low ___heap_hi
  3282     01B3  00E9               	movwf	_brkp
  3283     01B4  3001               	movlw	high ___heap_hi
  3284     01B5  00EA               	movwf	_brkp+1
  3285     01B6                     l762:
  3286     01B6  3000               	movlw	0
  3287     01B7  0272               	subwf	___expand_heap@n+1,w
  3288     01B8  3004               	movlw	4
  3289     01B9  1903               	skipnz
  3290     01BA  0271               	subwf	___expand_heap@n,w
  3291     01BB  1803               	skipnc
  3292     01BC  29BE               	goto	u611
  3293     01BD  29BF               	goto	u610
  3294     01BE                     u611:
  3295     01BE  29C3               	goto	l1271
  3296     01BF                     u610:
  3297     01BF                     l1269:
  3298     01BF  3004               	movlw	4
  3299     01C0  00F1               	movwf	___expand_heap@n
  3300     01C1  3000               	movlw	0
  3301     01C2  00F2               	movwf	___expand_heap@n+1
  3302     01C3                     l1271:
  3303     01C3  0871               	movf	___expand_heap@n,w
  3304     01C4  0269               	subwf	_brkp,w
  3305     01C5  00F3               	movwf	___expand_heap@new_brkp
  3306     01C6  086A               	movf	_brkp+1,w
  3307     01C7  1C03               	skipc
  3308     01C8  036A               	decf	_brkp+1,w
  3309     01C9  00F4               	movwf	___expand_heap@new_brkp+1
  3310     01CA                     l1273:
  3311     01CA  3001               	movlw	high ___heap_lo
  3312     01CB  0274               	subwf	___expand_heap@new_brkp+1,w
  3313     01CC  3010               	movlw	low ___heap_lo
  3314     01CD  1903               	skipnz
  3315     01CE  0273               	subwf	___expand_heap@new_brkp,w
  3316     01CF  1C03               	skipc
  3317     01D0  29D2               	goto	u621
  3318     01D1  29D3               	goto	u620
  3319     01D2                     u621:
  3320     01D2  29DD               	goto	l1277
  3321     01D3                     u620:
  3322     01D3                     l1275:
  3323     01D3  086A               	movf	_brkp+1,w
  3324     01D4  0274               	subwf	___expand_heap@new_brkp+1,w
  3325     01D5  1D03               	skipz
  3326     01D6  29D9               	goto	u635
  3327     01D7  0869               	movf	_brkp,w
  3328     01D8  0273               	subwf	___expand_heap@new_brkp,w
  3329     01D9                     u635:
  3330     01D9  1C03               	skipc
  3331     01DA  29DC               	goto	u631
  3332     01DB  29DD               	goto	u630
  3333     01DC                     u631:
  3334     01DC  29E6               	goto	l1283
  3335     01DD                     u630:
  3336     01DD                     l1277:
  3337     01DD  300C               	movlw	12
  3338     01DE  1683               	bsf	3,5	;RP0=1, select bank1
  3339     01DF  1303               	bcf	3,6	;RP1=0, select bank1
  3340     01E0  00A6               	movwf	_errno^(0+128)
  3341     01E1  3000               	movlw	0
  3342     01E2  00A7               	movwf	(_errno^(0+128)+1)
  3343     01E3                     l1279:
  3344     01E3  01F0               	clrf	?___expand_heap
  3345     01E4  01F1               	clrf	?___expand_heap+1
  3346     01E5  29EE               	goto	l767
  3347     01E6                     l1283:
  3348     01E6  0873               	movf	___expand_heap@new_brkp,w
  3349     01E7  00E9               	movwf	_brkp
  3350     01E8  0874               	movf	___expand_heap@new_brkp+1,w
  3351     01E9  00EA               	movwf	_brkp+1
  3352     01EA  0869               	movf	_brkp,w
  3353     01EB  00F0               	movwf	?___expand_heap
  3354     01EC  086A               	movf	_brkp+1,w
  3355     01ED  00F1               	movwf	?___expand_heap+1
  3356     01EE                     l767:
  3357     01EE  0008               	return
  3358     01EF                     __end_of___expand_heap:
  3359                           
  3360                           	psect	text13
  3361     00B2                     __ptext13:	
  3362 ;; *************** function ___wmul *****************
  3363 ;; Defined at:
  3364 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;  multiplier      2    0[COMMON] unsigned int 
  3367 ;;  multiplicand    2    2[COMMON] unsigned int 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  product         2    4[COMMON] unsigned int 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  2    0[COMMON] unsigned int 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2, status,0
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3379 ;;      Params:         4       0       0       0       0
  3380 ;;      Locals:         2       0       0       0       0
  3381 ;;      Temps:          0       0       0       0       0
  3382 ;;      Totals:         6       0       0       0       0
  3383 ;;Total ram usage:        6 bytes
  3384 ;; Hardware stack levels used: 1
  3385 ;; This function calls:
  3386 ;;		Nothing
  3387 ;; This function is called by:
  3388 ;;		_calloc
  3389 ;; This function uses a non-reentrant model
  3390 ;;
  3391                           
  3392     00B2                     ___wmul:	
  3393                           ;psect for function ___wmul
  3394                           
  3395     00B2                     l1293:	
  3396                           ;incstack = 0
  3397                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3398                           
  3399     00B2  01F4               	clrf	___wmul@product
  3400     00B3  01F5               	clrf	___wmul@product+1
  3401     00B4                     l1295:
  3402     00B4  1C70               	btfss	___wmul@multiplier,0
  3403     00B5  28B7               	goto	u641
  3404     00B6  28B8               	goto	u640
  3405     00B7                     u641:
  3406     00B7  28BE               	goto	l233
  3407     00B8                     u640:
  3408     00B8                     l1297:
  3409     00B8  0872               	movf	___wmul@multiplicand,w
  3410     00B9  07F4               	addwf	___wmul@product,f
  3411     00BA  1803               	skipnc
  3412     00BB  0AF5               	incf	___wmul@product+1,f
  3413     00BC  0873               	movf	___wmul@multiplicand+1,w
  3414     00BD  07F5               	addwf	___wmul@product+1,f
  3415     00BE                     l233:
  3416     00BE  3001               	movlw	1
  3417     00BF                     u655:
  3418     00BF  1003               	clrc
  3419     00C0  0DF2               	rlf	___wmul@multiplicand,f
  3420     00C1  0DF3               	rlf	___wmul@multiplicand+1,f
  3421     00C2  3EFF               	addlw	-1
  3422     00C3  1D03               	skipz
  3423     00C4  28BF               	goto	u655
  3424     00C5                     l1299:
  3425     00C5  3001               	movlw	1
  3426     00C6                     u665:
  3427     00C6  1003               	clrc
  3428     00C7  0CF1               	rrf	___wmul@multiplier+1,f
  3429     00C8  0CF0               	rrf	___wmul@multiplier,f
  3430     00C9  3EFF               	addlw	-1
  3431     00CA  1D03               	skipz
  3432     00CB  28C6               	goto	u665
  3433     00CC                     l1301:
  3434     00CC  0870               	movf	___wmul@multiplier,w
  3435     00CD  0471               	iorwf	___wmul@multiplier+1,w
  3436     00CE  1D03               	btfss	3,2
  3437     00CF  28D1               	goto	u671
  3438     00D0  28D2               	goto	u670
  3439     00D1                     u671:
  3440     00D1  28B4               	goto	l1295
  3441     00D2                     u670:
  3442     00D2                     l1303:
  3443     00D2  0875               	movf	___wmul@product+1,w
  3444     00D3  00F1               	movwf	?___wmul+1
  3445     00D4  0874               	movf	___wmul@product,w
  3446     00D5  00F0               	movwf	?___wmul
  3447     00D6                     l235:
  3448     00D6  0008               	return
  3449     00D7                     __end_of___wmul:
  3450                           
  3451                           	psect	text14
  3452     0117                     __ptext14:	
  3453 ;; *************** function _Reverse *****************
  3454 ;; Defined at:
  3455 ;;		line 73 in file "shape.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  array           1    0[COMMON] PTR unsigned char 
  3458 ;;		 -> main@square_1(3), 
  3459 ;;  countElemnt     2    1[COMMON] int 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  t               1    6[COMMON] unsigned char 
  3462 ;;  j               2    9[COMMON] int 
  3463 ;;  i               2    7[COMMON] int 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3473 ;;      Params:         3       0       0       0       0
  3474 ;;      Locals:         5       0       0       0       0
  3475 ;;      Temps:          3       0       0       0       0
  3476 ;;      Totals:        11       0       0       0       0
  3477 ;;Total ram usage:       11 bytes
  3478 ;; Hardware stack levels used: 1
  3479 ;; This function calls:
  3480 ;;		Nothing
  3481 ;; This function is called by:
  3482 ;;		_ChangeOfCoordinates
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486     0117                     _Reverse:	
  3487                           ;psect for function _Reverse
  3488                           
  3489     0117                     l1457:	
  3490                           ;incstack = 0
  3491                           ; Regs used in _Reverse: [wreg-fsr0h+status,2+status,0]
  3492                           
  3493                           
  3494                           ;shape.c: 73: void Reverse(char * array, int countElemnt);shape.c: 74: {;shape.c: 75:   
      +                            for(int i = 0, j = countElemnt - 1; i < j; i++, j--)
  3495     0117  01F7               	clrf	Reverse@i
  3496     0118  01F8               	clrf	Reverse@i+1
  3497     0119                     l1459:
  3498     0119  0871               	movf	Reverse@countElemnt,w
  3499     011A  3EFF               	addlw	255
  3500     011B  00F9               	movwf	Reverse@j
  3501     011C  0872               	movf	Reverse@countElemnt+1,w
  3502     011D  1803               	skipnc
  3503     011E  3E01               	addlw	1
  3504     011F  3EFF               	addlw	255
  3505     0120  00FA               	movwf	Reverse@j+1
  3506     0121  294B               	goto	l1467
  3507     0122                     l1461:
  3508                           
  3509                           ;shape.c: 76:     {;shape.c: 77:         char t = array[i];
  3510     0122  0877               	movf	Reverse@i,w
  3511     0123  0770               	addwf	Reverse@array,w
  3512     0124  00F3               	movwf	??_Reverse
  3513     0125  0873               	movf	??_Reverse,w
  3514     0126  0084               	movwf	4
  3515     0127  1383               	bcf	3,7	;select IRP bank0
  3516     0128  0800               	movf	0,w
  3517     0129  00F6               	movwf	Reverse@t
  3518                           
  3519                           ;shape.c: 78:         array[i] = array[j];
  3520     012A  0879               	movf	Reverse@j,w
  3521     012B  0770               	addwf	Reverse@array,w
  3522     012C  00F3               	movwf	??_Reverse
  3523     012D  0873               	movf	??_Reverse,w
  3524     012E  0084               	movwf	4
  3525     012F  0800               	movf	0,w
  3526     0130  00F4               	movwf	??_Reverse+1
  3527     0131  0877               	movf	Reverse@i,w
  3528     0132  0770               	addwf	Reverse@array,w
  3529     0133  00F5               	movwf	??_Reverse+2
  3530     0134  0875               	movf	??_Reverse+2,w
  3531     0135  0084               	movwf	4
  3532     0136  0874               	movf	??_Reverse+1,w
  3533     0137  0080               	movwf	0
  3534                           
  3535                           ;shape.c: 79:         array[j] = t;
  3536     0138  0879               	movf	Reverse@j,w
  3537     0139  0770               	addwf	Reverse@array,w
  3538     013A  00F3               	movwf	??_Reverse
  3539     013B  0873               	movf	??_Reverse,w
  3540     013C  0084               	movwf	4
  3541     013D  0876               	movf	Reverse@t,w
  3542     013E  0080               	movwf	0
  3543     013F                     l1463:
  3544                           
  3545                           ;shape.c: 80:     }
  3546     013F  3001               	movlw	1
  3547     0140  07F7               	addwf	Reverse@i,f
  3548     0141  1803               	skipnc
  3549     0142  0AF8               	incf	Reverse@i+1,f
  3550     0143  3000               	movlw	0
  3551     0144  07F8               	addwf	Reverse@i+1,f
  3552     0145                     l1465:
  3553     0145  30FF               	movlw	255
  3554     0146  07F9               	addwf	Reverse@j,f
  3555     0147  1803               	skipnc
  3556     0148  0AFA               	incf	Reverse@j+1,f
  3557     0149  30FF               	movlw	255
  3558     014A  07FA               	addwf	Reverse@j+1,f
  3559     014B                     l1467:
  3560     014B  0878               	movf	Reverse@i+1,w
  3561     014C  3A80               	xorlw	128
  3562     014D  00F3               	movwf	??_Reverse
  3563     014E  087A               	movf	Reverse@j+1,w
  3564     014F  3A80               	xorlw	128
  3565     0150  0273               	subwf	??_Reverse,w
  3566     0151  1D03               	skipz
  3567     0152  2955               	goto	u845
  3568     0153  0879               	movf	Reverse@j,w
  3569     0154  0277               	subwf	Reverse@i,w
  3570     0155                     u845:
  3571     0155  1C03               	skipc
  3572     0156  2958               	goto	u841
  3573     0157  2959               	goto	u840
  3574     0158                     u841:
  3575     0158  2922               	goto	l1461
  3576     0159                     u840:
  3577     0159                     l147:
  3578     0159  0008               	return
  3579     015A                     __end_of_Reverse:
  3580                           
  3581                           	psect	text15
  3582     023C                     __ptext15:	
  3583 ;; *************** function _MovieShape *****************
  3584 ;; Defined at:
  3585 ;;		line 32 in file "shape.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  dir             1    wreg     enum E885
  3588 ;;  _shapePositi    2    4[BANK0 ] PTR struct .
  3589 ;;		 -> main@shapePosition(4), 
  3590 ;;  shapeArray      1    6[BANK0 ] PTR unsigned char 
  3591 ;;		 -> main@square_1(3), 
  3592 ;;  countElemntA    2    7[BANK0 ] int 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  dir             1   11[BANK0 ] enum E885
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      void 
  3597 ;; Registers used:
  3598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3604 ;;      Params:         0       5       0       0       0
  3605 ;;      Locals:         0       1       0       0       0
  3606 ;;      Temps:          0       2       0       0       0
  3607 ;;      Totals:         0       8       0       0       0
  3608 ;;Total ram usage:        8 bytes
  3609 ;; Hardware stack levels used: 1
  3610 ;; Hardware stack levels required when called: 3
  3611 ;; This function calls:
  3612 ;;		_MovieDown
  3613 ;;		_MovieLeft
  3614 ;;		_MovieRigth
  3615 ;;		_MovieUp
  3616 ;;		_ShowShape
  3617 ;;		_SpiClearMatrix
  3618 ;; This function is called by:
  3619 ;;		_ChangeOfCoordinates
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623     023C                     _MovieShape:	
  3624                           ;psect for function _MovieShape
  3625                           
  3626                           
  3627                           ;incstack = 0
  3628                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3629                           ;MovieShape@dir stored from wreg
  3630     023C  1283               	bcf	3,5	;RP0=0, select bank0
  3631     023D  1303               	bcf	3,6	;RP1=0, select bank0
  3632     023E  00AB               	movwf	MovieShape@dir
  3633     023F                     l1433:
  3634                           
  3635                           ;shape.c: 34:     switch (dir){
  3636     023F  2A68               	goto	l1445
  3637     0240                     l1435:
  3638                           
  3639                           ;shape.c: 36:             MovieDown(_shapePosition);
  3640     0240  0824               	movf	MovieShape@_shapePosition,w
  3641     0241  00F0               	movwf	MovieDown@_shapePosition
  3642     0242  0825               	movf	MovieShape@_shapePosition+1,w
  3643     0243  00F1               	movwf	MovieDown@_shapePosition+1
  3644     0244  120A  118A  2021  120A  118A  	fcall	_MovieDown
  3645                           
  3646                           ;shape.c: 37:             break;
  3647     0249  2A81               	goto	l1447
  3648     024A                     l1437:
  3649                           
  3650                           ;shape.c: 39:             MovieUp(_shapePosition);
  3651     024A  0824               	movf	MovieShape@_shapePosition,w
  3652     024B  00F0               	movwf	MovieUp@_shapePosition
  3653     024C  0825               	movf	MovieShape@_shapePosition+1,w
  3654     024D  00F1               	movwf	MovieUp@_shapePosition+1
  3655     024E  120A  118A  205D  120A  118A  	fcall	_MovieUp
  3656                           
  3657                           ;shape.c: 40:             break;
  3658     0253  2A81               	goto	l1447
  3659     0254                     l1439:
  3660                           
  3661                           ;shape.c: 42:             MovieLeft(_shapePosition);
  3662     0254  0824               	movf	MovieShape@_shapePosition,w
  3663     0255  00F0               	movwf	MovieLeft@_shapePosition
  3664     0256  0825               	movf	MovieShape@_shapePosition+1,w
  3665     0257  00F1               	movwf	MovieLeft@_shapePosition+1
  3666     0258  120A  158A  27EF  120A  118A  	fcall	_MovieLeft
  3667                           
  3668                           ;shape.c: 43:             break;
  3669     025D  2A81               	goto	l1447
  3670     025E                     l1441:
  3671                           
  3672                           ;shape.c: 45:             MovieRigth(_shapePosition);
  3673     025E  0824               	movf	MovieShape@_shapePosition,w
  3674     025F  00F0               	movwf	MovieRigth@_shapePosition
  3675     0260  0825               	movf	MovieShape@_shapePosition+1,w
  3676     0261  00F1               	movwf	MovieRigth@_shapePosition+1
  3677     0262  120A  158A  27E4  120A  118A  	fcall	_MovieRigth
  3678                           
  3679                           ;shape.c: 46:             break;
  3680     0267  2A81               	goto	l1447
  3681     0268                     l1445:
  3682     0268  082B               	movf	MovieShape@dir,w
  3683     0269  00A9               	movwf	??_MovieShape
  3684     026A  01AA               	clrf	??_MovieShape+1
  3685                           
  3686                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3687                           ; Switch size 1, requested type "simple"
  3688                           ; Number of cases is 1, Range of values is 0 to 0
  3689                           ; switch strategies available:
  3690                           ; Name         Instructions Cycles
  3691                           ; simple_byte            4     3 (average)
  3692                           ; direct_byte           11     8 (fixed)
  3693                           ; jumptable            260     6 (fixed)
  3694                           ;	Chosen strategy is simple_byte
  3695     026B  082A               	movf	??_MovieShape+1,w
  3696     026C  3A00               	xorlw	0	; case 0
  3697     026D  1903               	skipnz
  3698     026E  2A70               	goto	l1639
  3699     026F  2A81               	goto	l1447
  3700     0270                     l1639:
  3701                           
  3702                           ; Switch size 1, requested type "simple"
  3703                           ; Number of cases is 5, Range of values is 0 to 4
  3704                           ; switch strategies available:
  3705                           ; Name         Instructions Cycles
  3706                           ; simple_byte           16     9 (average)
  3707                           ; direct_byte           23     8 (fixed)
  3708                           ; jumptable            260     6 (fixed)
  3709                           ;	Chosen strategy is simple_byte
  3710     0270  0829               	movf	??_MovieShape,w
  3711     0271  3A00               	xorlw	0	; case 0
  3712     0272  1903               	skipnz
  3713     0273  2A40               	goto	l1435
  3714     0274  3A01               	xorlw	1	; case 1
  3715     0275  1903               	skipnz
  3716     0276  2A4A               	goto	l1437
  3717     0277  3A03               	xorlw	3	; case 2
  3718     0278  1903               	skipnz
  3719     0279  2A54               	goto	l1439
  3720     027A  3A01               	xorlw	1	; case 3
  3721     027B  1903               	skipnz
  3722     027C  2A5E               	goto	l1441
  3723     027D  3A07               	xorlw	7	; case 4
  3724     027E  1903               	skipnz
  3725     027F  2A81               	goto	l1447
  3726     0280  2A81               	goto	l1447
  3727     0281                     l1447:
  3728                           
  3729                           ;shape.c: 51:     SpiClearMatrix();
  3730     0281  120A  118A  2047  120A  118A  	fcall	_SpiClearMatrix
  3731     0286                     l1449:
  3732                           
  3733                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  3734     0286  1283               	bcf	3,5	;RP0=0, select bank0
  3735     0287  1303               	bcf	3,6	;RP1=0, select bank0
  3736     0288  0824               	movf	MovieShape@_shapePosition,w
  3737     0289  00F4               	movwf	ShowShape@coord
  3738     028A  0825               	movf	MovieShape@_shapePosition+1,w
  3739     028B  00F5               	movwf	ShowShape@coord+1
  3740     028C  0828               	movf	MovieShape@countElemntArray+1,w
  3741     028D  00F7               	movwf	ShowShape@countElemntArray+1
  3742     028E  0827               	movf	MovieShape@countElemntArray,w
  3743     028F  00F6               	movwf	ShowShape@countElemntArray
  3744     0290  0826               	movf	MovieShape@shapeArray,w
  3745     0291  00F8               	movwf	ShowShape@shapeArray
  3746     0292  120A  118A  2298  120A  118A  	fcall	_ShowShape
  3747     0297                     l130:
  3748     0297  0008               	return
  3749     0298                     __end_of_MovieShape:
  3750                           
  3751                           	psect	text16
  3752     0047                     __ptext16:	
  3753 ;; *************** function _SpiClearMatrix *****************
  3754 ;; Defined at:
  3755 ;;		line 10 in file "matrix.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;		None
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;  i               1    6[COMMON] unsigned char 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  1    wreg      void 
  3762 ;; Registers used:
  3763 ;;		wreg, status,2, status,0, pclath, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3769 ;;      Params:         0       0       0       0       0
  3770 ;;      Locals:         1       0       0       0       0
  3771 ;;      Temps:          2       0       0       0       0
  3772 ;;      Totals:         3       0       0       0       0
  3773 ;;Total ram usage:        3 bytes
  3774 ;; Hardware stack levels used: 1
  3775 ;; Hardware stack levels required when called: 2
  3776 ;; This function calls:
  3777 ;;		_SendToSegment
  3778 ;; This function is called by:
  3779 ;;		_MatrixInit
  3780 ;;		_MovieShape
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784     0047                     _SpiClearMatrix:	
  3785                           ;psect for function _SpiClearMatrix
  3786                           
  3787     0047                     l1367:	
  3788                           ;incstack = 0
  3789                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  3790                           
  3791                           
  3792                           ;matrix.c: 12:   char i = 8;
  3793     0047  3008               	movlw	8
  3794     0048  00F6               	movwf	SpiClearMatrix@i
  3795     0049                     l1369:
  3796                           
  3797                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  3798     0049  0876               	movf	SpiClearMatrix@i,w
  3799     004A  00F4               	movwf	??_SpiClearMatrix
  3800     004B  01F5               	clrf	??_SpiClearMatrix+1
  3801     004C  0874               	movf	??_SpiClearMatrix,w
  3802     004D  00F1               	movwf	SendToSegment@segment
  3803     004E  0875               	movf	??_SpiClearMatrix+1,w
  3804     004F  00F2               	movwf	SendToSegment@segment+1
  3805     0050  01F3               	clrf	SendToSegment@data
  3806     0051  120A  118A  2034  120A  118A  	fcall	_SendToSegment
  3807     0056                     l1371:
  3808                           
  3809                           ;matrix.c: 16:   } while (--i);
  3810     0056  3001               	movlw	1
  3811     0057  02F6               	subwf	SpiClearMatrix@i,f
  3812     0058  1D03               	btfss	3,2
  3813     0059  285B               	goto	u761
  3814     005A  285C               	goto	u760
  3815     005B                     u761:
  3816     005B  2849               	goto	l1369
  3817     005C                     u760:
  3818     005C                     l85:
  3819     005C  0008               	return
  3820     005D                     __end_of_SpiClearMatrix:
  3821                           
  3822                           	psect	text17
  3823     0298                     __ptext17:	
  3824 ;; *************** function _ShowShape *****************
  3825 ;; Defined at:
  3826 ;;		line 8 in file "shape.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  coord           2    4[COMMON] PTR struct .
  3829 ;;		 -> main@shapePosition(4), 
  3830 ;;  countElemntA    2    6[COMMON] int 
  3831 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
  3832 ;;		 -> main@square_1(3), 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  pos             2    2[BANK0 ] int 
  3835 ;;  _pos            2    0[BANK0 ] int 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3845 ;;      Params:         5       0       0       0       0
  3846 ;;      Locals:         0       4       0       0       0
  3847 ;;      Temps:          5       0       0       0       0
  3848 ;;      Totals:        10       4       0       0       0
  3849 ;;Total ram usage:       14 bytes
  3850 ;; Hardware stack levels used: 1
  3851 ;; Hardware stack levels required when called: 2
  3852 ;; This function calls:
  3853 ;;		_SendToSegment
  3854 ;; This function is called by:
  3855 ;;		_MovieShape
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859     0298                     _ShowShape:	
  3860                           ;psect for function _ShowShape
  3861                           
  3862     0298                     l1373:	
  3863                           ;incstack = 0
  3864                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3865                           
  3866     0298                     l1375:
  3867                           
  3868                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  3869     0298  0874               	movf	ShowShape@coord,w
  3870     0299  0084               	movwf	4
  3871     029A  1783               	bsf	3,7
  3872     029B  1C75               	btfss	ShowShape@coord+1,0
  3873     029C  1383               	bcf	3,7
  3874     029D  0800               	movf	0,w
  3875     029E  00F9               	movwf	??_ShowShape
  3876     029F  0A84               	incf	4,f
  3877     02A0  0800               	movf	0,w
  3878     02A1  00FA               	movwf	??_ShowShape+1
  3879     02A2  0879               	movf	??_ShowShape,w
  3880     02A3  3E01               	addlw	1
  3881     02A4  1283               	bcf	3,5	;RP0=0, select bank0
  3882     02A5  1303               	bcf	3,6	;RP1=0, select bank0
  3883     02A6  00A2               	movwf	ShowShape@pos
  3884     02A7  087A               	movf	??_ShowShape+1,w
  3885     02A8  1803               	skipnc
  3886     02A9  3E01               	addlw	1
  3887     02AA  3E00               	addlw	0
  3888     02AB  00A3               	movwf	ShowShape@pos+1
  3889     02AC  2AF8               	goto	l1383
  3890     02AD                     l1377:
  3891                           
  3892                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  3893     02AD  0874               	movf	ShowShape@coord,w
  3894     02AE  0084               	movwf	4
  3895     02AF  1783               	bsf	3,7
  3896     02B0  1C75               	btfss	ShowShape@coord+1,0
  3897     02B1  1383               	bcf	3,7
  3898     02B2  0800               	movf	0,w
  3899     02B3  00F9               	movwf	??_ShowShape
  3900     02B4  0A84               	incf	4,f
  3901     02B5  0800               	movf	0,w
  3902     02B6  00FA               	movwf	??_ShowShape+1
  3903     02B7  0879               	movf	??_ShowShape,w
  3904     02B8  1283               	bcf	3,5	;RP0=0, select bank0
  3905     02B9  1303               	bcf	3,6	;RP1=0, select bank0
  3906     02BA  0222               	subwf	ShowShape@pos,w
  3907     02BB  00FB               	movwf	??_ShowShape+2
  3908     02BC  087A               	movf	??_ShowShape+1,w
  3909     02BD  1C03               	skipc
  3910     02BE  0A7A               	incf	??_ShowShape+1,w
  3911     02BF  0223               	subwf	ShowShape@pos+1,w
  3912     02C0  00FC               	movwf	??_ShowShape+3
  3913     02C1  087B               	movf	??_ShowShape+2,w
  3914     02C2  3EFF               	addlw	255
  3915     02C3  00A0               	movwf	ShowShape@_pos
  3916     02C4  087C               	movf	??_ShowShape+3,w
  3917     02C5  1803               	skipnc
  3918     02C6  3E01               	addlw	1
  3919     02C7  3EFF               	addlw	255
  3920     02C8  00A1               	movwf	ShowShape@_pos+1
  3921     02C9                     l1379:
  3922                           
  3923                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  3924     02C9  0823               	movf	ShowShape@pos+1,w
  3925     02CA  00F2               	movwf	SendToSegment@segment+1
  3926     02CB  0822               	movf	ShowShape@pos,w
  3927     02CC  00F1               	movwf	SendToSegment@segment
  3928     02CD  0820               	movf	ShowShape@_pos,w
  3929     02CE  0778               	addwf	ShowShape@shapeArray,w
  3930     02CF  00F9               	movwf	??_ShowShape
  3931     02D0  0879               	movf	??_ShowShape,w
  3932     02D1  0084               	movwf	4
  3933     02D2  1383               	bcf	3,7	;select IRP bank0
  3934     02D3  0800               	movf	0,w
  3935     02D4  00FA               	movwf	??_ShowShape+1
  3936     02D5  0874               	movf	ShowShape@coord,w
  3937     02D6  3E02               	addlw	2
  3938     02D7  00FB               	movwf	??_ShowShape+2
  3939     02D8  0875               	movf	ShowShape@coord+1,w
  3940     02D9  1803               	skipnc
  3941     02DA  3E01               	addlw	1
  3942     02DB  3E00               	addlw	0
  3943     02DC  00FC               	movwf	??_ShowShape+3
  3944     02DD  087B               	movf	??_ShowShape+2,w
  3945     02DE  0084               	movwf	4
  3946     02DF  1783               	bsf	3,7
  3947     02E0  1C7C               	btfss	??_ShowShape+3,0
  3948     02E1  1383               	bcf	3,7
  3949     02E2  0A00               	incf	0,w
  3950     02E3  2AE6               	goto	u774
  3951     02E4                     u775:
  3952     02E4  1003               	clrc
  3953     02E5  0DFA               	rlf	??_ShowShape+1,f
  3954     02E6                     u774:
  3955     02E6  3EFF               	addlw	-1
  3956     02E7  1D03               	skipz
  3957     02E8  2AE4               	goto	u775
  3958     02E9  087A               	movf	??_ShowShape+1,w
  3959     02EA  00F3               	movwf	SendToSegment@data
  3960     02EB  120A  118A  2034  120A  118A  	fcall	_SendToSegment
  3961     02F0                     l1381:
  3962                           
  3963                           ;shape.c: 13:     }
  3964     02F0  3001               	movlw	1
  3965     02F1  1283               	bcf	3,5	;RP0=0, select bank0
  3966     02F2  1303               	bcf	3,6	;RP1=0, select bank0
  3967     02F3  07A2               	addwf	ShowShape@pos,f
  3968     02F4  1803               	skipnc
  3969     02F5  0AA3               	incf	ShowShape@pos+1,f
  3970     02F6  3000               	movlw	0
  3971     02F7  07A3               	addwf	ShowShape@pos+1,f
  3972     02F8                     l1383:
  3973     02F8  0874               	movf	ShowShape@coord,w
  3974     02F9  0084               	movwf	4
  3975     02FA  1783               	bsf	3,7
  3976     02FB  1C75               	btfss	ShowShape@coord+1,0
  3977     02FC  1383               	bcf	3,7
  3978     02FD  0800               	movf	0,w
  3979     02FE  00F9               	movwf	??_ShowShape
  3980     02FF  0A84               	incf	4,f
  3981     0300  0800               	movf	0,w
  3982     0301  00FA               	movwf	??_ShowShape+1
  3983     0302  0876               	movf	ShowShape@countElemntArray,w
  3984     0303  0779               	addwf	??_ShowShape,w
  3985     0304  00FB               	movwf	??_ShowShape+2
  3986     0305  0877               	movf	ShowShape@countElemntArray+1,w
  3987     0306  1803               	skipnc
  3988     0307  0A77               	incf	ShowShape@countElemntArray+1,w
  3989     0308  077A               	addwf	??_ShowShape+1,w
  3990     0309  00FC               	movwf	??_ShowShape+3
  3991     030A  087C               	movf	??_ShowShape+3,w
  3992     030B  3A80               	xorlw	128
  3993     030C  00FD               	movwf	??_ShowShape+4
  3994     030D  0823               	movf	ShowShape@pos+1,w
  3995     030E  3A80               	xorlw	128
  3996     030F  027D               	subwf	??_ShowShape+4,w
  3997     0310  1D03               	skipz
  3998     0311  2B14               	goto	u785
  3999     0312  0822               	movf	ShowShape@pos,w
  4000     0313  027B               	subwf	??_ShowShape+2,w
  4001     0314                     u785:
  4002     0314  1803               	skipnc
  4003     0315  2B17               	goto	u781
  4004     0316  2B18               	goto	u780
  4005     0317                     u781:
  4006     0317  2AAD               	goto	l1377
  4007     0318                     u780:
  4008     0318                     l108:
  4009     0318  0008               	return
  4010     0319                     __end_of_ShowShape:
  4011                           
  4012                           	psect	text18
  4013     0034                     __ptext18:	
  4014 ;; *************** function _SendToSegment *****************
  4015 ;; Defined at:
  4016 ;;		line 34 in file "matrix.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  segment         2    1[COMMON] int 
  4019 ;;  data            1    3[COMMON] unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;		None
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2, status,0, pclath, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4031 ;;      Params:         3       0       0       0       0
  4032 ;;      Locals:         0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0
  4034 ;;      Totals:         3       0       0       0       0
  4035 ;;Total ram usage:        3 bytes
  4036 ;; Hardware stack levels used: 1
  4037 ;; Hardware stack levels required when called: 1
  4038 ;; This function calls:
  4039 ;;		_SpiSendByte
  4040 ;; This function is called by:
  4041 ;;		_SpiClearMatrix
  4042 ;;		_MatrixInit
  4043 ;;		_ShowShape
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047     0034                     _SendToSegment:	
  4048                           ;psect for function _SendToSegment
  4049                           
  4050     0034                     l1287:	
  4051                           ;incstack = 0
  4052                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  4053                           
  4054                           
  4055                           ;matrix.c: 35:     RA5 = 0;
  4056     0034  1283               	bcf	3,5	;RP0=0, select bank0
  4057     0035  1303               	bcf	3,6	;RP1=0, select bank0
  4058     0036  1285               	bcf	5,5	;volatile
  4059     0037                     l1289:
  4060                           
  4061                           ;matrix.c: 36:     SpiSendByte((char)segment);
  4062     0037  0871               	movf	SendToSegment@segment,w
  4063     0038  120A  118A  2004  120A  118A  	fcall	_SpiSendByte
  4064                           
  4065                           ;matrix.c: 37:     SpiSendByte(data);
  4066     003D  0873               	movf	SendToSegment@data,w
  4067     003E  120A  118A  2004  120A  118A  	fcall	_SpiSendByte
  4068     0043                     l1291:
  4069                           
  4070                           ;matrix.c: 38:     RA5 = 1;
  4071     0043  1283               	bcf	3,5	;RP0=0, select bank0
  4072     0044  1303               	bcf	3,6	;RP1=0, select bank0
  4073     0045  1685               	bsf	5,5	;volatile
  4074     0046                     l91:
  4075     0046  0008               	return
  4076     0047                     __end_of_SendToSegment:
  4077                           
  4078                           	psect	text19
  4079     0004                     __ptext19:	
  4080 ;; *************** function _SpiSendByte *****************
  4081 ;; Defined at:
  4082 ;;		line 18 in file "spi.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  data            1    wreg     unsigned char 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  data            1    0[COMMON] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;                  1    wreg      void 
  4089 ;; Registers used:
  4090 ;;		wreg
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4096 ;;      Params:         0       0       0       0       0
  4097 ;;      Locals:         1       0       0       0       0
  4098 ;;      Temps:          0       0       0       0       0
  4099 ;;      Totals:         1       0       0       0       0
  4100 ;;Total ram usage:        1 bytes
  4101 ;; Hardware stack levels used: 1
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_SendToSegment
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109     0004                     _SpiSendByte:	
  4110                           ;psect for function _SpiSendByte
  4111                           
  4112                           
  4113                           ;incstack = 0
  4114                           ; Regs used in _SpiSendByte: [wreg]
  4115                           ;SpiSendByte@data stored from wreg
  4116     0004  00F0               	movwf	SpiSendByte@data
  4117     0005                     l1199:
  4118                           
  4119                           ;spi.c: 19:     SSPBUF = data;
  4120     0005  0870               	movf	SpiSendByte@data,w
  4121     0006  1283               	bcf	3,5	;RP0=0, select bank0
  4122     0007  1303               	bcf	3,6	;RP1=0, select bank0
  4123     0008  0093               	movwf	19	;volatile
  4124     0009                     l69:	
  4125                           ;spi.c: 20:     while (!SSPIF);
  4126                           
  4127     0009  1D8C               	btfss	12,3	;volatile
  4128     000A  280C               	goto	u491
  4129     000B  280D               	goto	u490
  4130     000C                     u491:
  4131     000C  2809               	goto	l69
  4132     000D                     u490:
  4133     000D                     l71:
  4134                           
  4135                           ;spi.c: 21:     SSPIF = 0;
  4136     000D  118C               	bcf	12,3	;volatile
  4137     000E                     l72:
  4138     000E  0008               	return
  4139     000F                     __end_of_SpiSendByte:
  4140                           
  4141                           	psect	text20
  4142     005D                     __ptext20:	
  4143 ;; *************** function _MovieUp *****************
  4144 ;; Defined at:
  4145 ;;		line 20 in file "shape.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4148 ;;		 -> main@shapePosition(4), 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4160 ;;      Params:         2       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0
  4162 ;;      Temps:          2       0       0       0       0
  4163 ;;      Totals:         4       0       0       0       0
  4164 ;;Total ram usage:        4 bytes
  4165 ;; Hardware stack levels used: 1
  4166 ;; This function calls:
  4167 ;;		Nothing
  4168 ;; This function is called by:
  4169 ;;		_MovieShape
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173     005D                     _MovieUp:	
  4174                           ;psect for function _MovieUp
  4175                           
  4176     005D                     l1387:	
  4177                           ;incstack = 0
  4178                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4179                           
  4180                           
  4181                           ;shape.c: 21:     _shapePosition->y--;
  4182     005D  0870               	movf	MovieUp@_shapePosition,w
  4183     005E  3E02               	addlw	2
  4184     005F  00F2               	movwf	??_MovieUp
  4185     0060  0871               	movf	MovieUp@_shapePosition+1,w
  4186     0061  1803               	skipnc
  4187     0062  3E01               	addlw	1
  4188     0063  3E00               	addlw	0
  4189     0064  00F3               	movwf	??_MovieUp+1
  4190     0065  0872               	movf	??_MovieUp,w
  4191     0066  0084               	movwf	4
  4192     0067  1783               	bsf	3,7
  4193     0068  1C73               	btfss	??_MovieUp+1,0
  4194     0069  1383               	bcf	3,7
  4195     006A  30FF               	movlw	255
  4196     006B  0780               	addwf	0,f
  4197     006C  0F84               	incfsz	4,f
  4198     006D  0800               	movf	0,w
  4199     006E  1803               	skipnc
  4200     006F  0A00               	incf	0,w
  4201     0070  00FF               	movwf	btemp+1
  4202     0071  30FF               	movlw	255
  4203     0072  077F               	addwf	btemp+1,w
  4204     0073  0080               	movwf	0
  4205     0074  0384               	decf	4,f
  4206     0075                     l114:
  4207     0075  0008               	return
  4208     0076                     __end_of_MovieUp:
  4209                           
  4210                           	psect	text21
  4211     0FE4                     __ptext21:	
  4212 ;; *************** function _MovieRigth *****************
  4213 ;; Defined at:
  4214 ;;		line 28 in file "shape.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4217 ;;		 -> main@shapePosition(4), 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4229 ;;      Params:         2       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0
  4232 ;;      Totals:         2       0       0       0       0
  4233 ;;Total ram usage:        2 bytes
  4234 ;; Hardware stack levels used: 1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_MovieShape
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242     0FE4                     _MovieRigth:	
  4243                           ;psect for function _MovieRigth
  4244                           
  4245     0FE4                     l1391:	
  4246                           ;incstack = 0
  4247                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  4248                           
  4249                           
  4250                           ;shape.c: 29:     _shapePosition->x++;
  4251     0FE4  0870               	movf	MovieRigth@_shapePosition,w
  4252     0FE5  0084               	movwf	4
  4253     0FE6  1783               	bsf	3,7
  4254     0FE7  1C71               	btfss	MovieRigth@_shapePosition+1,0
  4255     0FE8  1383               	bcf	3,7
  4256     0FE9  3001               	movlw	1
  4257     0FEA  0780               	addwf	0,f
  4258     0FEB  0A84               	incf	4,f
  4259     0FEC  1803               	skipnc
  4260     0FED  0A80               	incf	0,f
  4261     0FEE                     l120:
  4262     0FEE  0008               	return
  4263     0FEF                     __end_of_MovieRigth:
  4264                           
  4265                           	psect	text22
  4266     0FEF                     __ptext22:	
  4267 ;; *************** function _MovieLeft *****************
  4268 ;; Defined at:
  4269 ;;		line 24 in file "shape.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4272 ;;		 -> main@shapePosition(4), 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;		None
  4275 ;; Return value:  Size  Location     Type
  4276 ;;                  1    wreg      void 
  4277 ;; Registers used:
  4278 ;;		wreg, fsr0l, fsr0h, btemp+1
  4279 ;; Tracked objects:
  4280 ;;		On entry : 0/0
  4281 ;;		On exit  : 0/0
  4282 ;;		Unchanged: 0/0
  4283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4284 ;;      Params:         2       0       0       0       0
  4285 ;;      Locals:         0       0       0       0       0
  4286 ;;      Temps:          0       0       0       0       0
  4287 ;;      Totals:         2       0       0       0       0
  4288 ;;Total ram usage:        2 bytes
  4289 ;; Hardware stack levels used: 1
  4290 ;; This function calls:
  4291 ;;		Nothing
  4292 ;; This function is called by:
  4293 ;;		_MovieShape
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297     0FEF                     _MovieLeft:	
  4298                           ;psect for function _MovieLeft
  4299                           
  4300     0FEF                     l1389:	
  4301                           ;incstack = 0
  4302                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  4303                           
  4304                           
  4305                           ;shape.c: 25:     _shapePosition->x--;
  4306     0FEF  0870               	movf	MovieLeft@_shapePosition,w
  4307     0FF0  0084               	movwf	4
  4308     0FF1  1783               	bsf	3,7
  4309     0FF2  1C71               	btfss	MovieLeft@_shapePosition+1,0
  4310     0FF3  1383               	bcf	3,7
  4311     0FF4  30FF               	movlw	255
  4312     0FF5  0780               	addwf	0,f
  4313     0FF6  0F84               	incfsz	4,f
  4314     0FF7  0800               	movf	0,w
  4315     0FF8  1803               	skipnc
  4316     0FF9  0A00               	incf	0,w
  4317     0FFA  00FF               	movwf	btemp+1
  4318     0FFB  30FF               	movlw	255
  4319     0FFC  077F               	addwf	btemp+1,w
  4320     0FFD  0080               	movwf	0
  4321     0FFE  0384               	decf	4,f
  4322     0FFF                     l117:
  4323     0FFF  0008               	return
  4324     1000                     __end_of_MovieLeft:
  4325                           
  4326                           	psect	text23
  4327     0021                     __ptext23:	
  4328 ;; *************** function _MovieDown *****************
  4329 ;; Defined at:
  4330 ;;		line 16 in file "shape.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4333 ;;		 -> main@shapePosition(4), 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;		None
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4345 ;;      Params:         2       0       0       0       0
  4346 ;;      Locals:         0       0       0       0       0
  4347 ;;      Temps:          2       0       0       0       0
  4348 ;;      Totals:         4       0       0       0       0
  4349 ;;Total ram usage:        4 bytes
  4350 ;; Hardware stack levels used: 1
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_MovieShape
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358     0021                     _MovieDown:	
  4359                           ;psect for function _MovieDown
  4360                           
  4361     0021                     l1385:	
  4362                           ;incstack = 0
  4363                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  4364                           
  4365                           
  4366                           ;shape.c: 17:     _shapePosition->y++;
  4367     0021  0870               	movf	MovieDown@_shapePosition,w
  4368     0022  3E02               	addlw	2
  4369     0023  00F2               	movwf	??_MovieDown
  4370     0024  0871               	movf	MovieDown@_shapePosition+1,w
  4371     0025  1803               	skipnc
  4372     0026  3E01               	addlw	1
  4373     0027  3E00               	addlw	0
  4374     0028  00F3               	movwf	??_MovieDown+1
  4375     0029  0872               	movf	??_MovieDown,w
  4376     002A  0084               	movwf	4
  4377     002B  1783               	bsf	3,7
  4378     002C  1C73               	btfss	??_MovieDown+1,0
  4379     002D  1383               	bcf	3,7
  4380     002E  3001               	movlw	1
  4381     002F  0780               	addwf	0,f
  4382     0030  0A84               	incf	4,f
  4383     0031  1803               	skipnc
  4384     0032  0A80               	incf	0,f
  4385     0033                     l111:
  4386     0033  0008               	return
  4387     0034                     __end_of_MovieDown:
  4388     0002                     ___latbits      equ	2
  4389     007E                     btemp           set	126	;btemp
  4390     007E                     wtemp0          set	126
  4391                           
  4392                           	psect	config
  4393                           
  4394                           ;Config register CONFIG @ 0x2007
  4395                           ;	Oscillator Selection bits
  4396                           ;	FOSC = HS, HS oscillator
  4397                           ;	Watchdog Timer Enable bit
  4398                           ;	WDTE = OFF, WDT disabled
  4399                           ;	Power-up Timer Enable bit
  4400                           ;	PWRTE = OFF, PWRT disabled
  4401                           ;	FLASH Program Memory Code Protection bits
  4402                           ;	CP = OFF, Code protection off
  4403                           ;	Brown-out Reset Enable bit
  4404                           ;	BOREN = OFF, BOR disabled
  4405                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  4406                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4407                           ;	Data EE Memory Code Protection
  4408                           ;	CPD = OFF, Code Protection off
  4409                           ;	FLASH Program Memory Write Enable
  4410                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  4411                           ;	In-Circuit Debugger Mode bit
  4412                           ;	DEBUG = 0x1, unprogrammed default
  4413     2007                     	org	8199
  4414     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      79
    BANK1            80      0      11
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    calloc@new_ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ChangeOfCoordinates@_reverse	PTR _Bool  size(1) Largest target is 1
		 -> main@reverse(BANK0[1]), NULL(NULL[0]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    __expand_heap@new_brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __expand_heap@pn	PTR unsigned int  size(1) Largest target is 2
		 -> malloc@m(BANK0[2]), 

    free@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@cptr	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@cur	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@end	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@new	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@p	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@sz	PTR unsigned int  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    Reverse@array	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    Rotate@array_	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    Rotate@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    S662$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ?___simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____expand_heap	PTR void  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl	PTR void  size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp__calloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _calloc->_memset
    _memset->___wmul
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_Rotate
    _Rotate->_calloc
    _calloc->_malloc
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    4514
                                             63 BANK0     10    10      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 13     7      6    4068
                                             50 BANK0     13     7      6
                         _MovieShape
                            _Reverse
                             _Rotate
 ---------------------------------------------------------------------------------
 (2) _Rotate                                              20    17      3    2575
                                             30 BANK0     20    17      3
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (3) _free                                                12    10      2     289
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (3) _calloc                                               6     2      4    1813
                                             24 BANK0      6     2      4
                             ___wmul
                             _malloc
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6      99
                                              6 COMMON     8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _malloc                                              14    12      2    1461
                                              8 COMMON     4     2      2
                                             14 BANK0     10    10      0
                      ___expand_heap
                 ___simple_search_fl
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___simple_search_fl                                  22    20      2     827
                                              0 COMMON     8     6      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (5) ___expand_heap                                        5     4      1     136
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4      96
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Reverse                                             11     8      3     271
                                              0 COMMON    11     8      3
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           8     3      5     729
                                              4 BANK0      8     3      5
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           14     9      5     312
                                              4 COMMON    10     5      5
                                              0 BANK0      4     4      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
     _Reverse
     _Rotate
       _calloc
         ___wmul
         _malloc
           ___expand_heap
           ___simple_search_fl
           ___wmul (ARG)
         _memset
           ___wmul (ARG)
       _free
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      11     13.8%
BITBANK1            80      0       0      0.0%
BANK0               80     73      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     104      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Dec 18 17:10:54 2024

                      _SpiClearMatrix 0047                                     pc 0002  
                                  l21 03DA                                    l32 0499  
                                  l71 000D                                    l72 000E  
                                  l49 0FE3                                    l66 0020  
                                  l91 0046                                    l69 0009  
                                  l85 005C                                    l88 0116  
                                  fsr 0004                   ___wmul@multiplicand 0072  
                     SpiSendByte@data 0070                                   l102 0092  
                                 l111 0033                                   l120 0FEE  
                                 l114 0075                                   l130 0297  
                                 l108 0318                                   l117 0FFF  
                                 l141 03D5                                   l233 00BE  
                                 l147 0159                                   l235 00D6  
                                 l711 0705                                   l703 07D7  
                                 l720 0651                                   l714 07AE  
                                 l740 04AA                                   l744 0563  
                                 l762 01B6                                   l746 053E  
                                 l748 0531                                   l773 00B1  
                                 l767 01EE                                   l697 01A1  
                                 _RA5 002D                                   u500 0660  
                                 u501 065F                                   u510 067C  
                                 u511 067B                                   u600 01B2  
                                 u520 0682                                   u601 01B1  
                                 u521 0681                                   u610 01BF  
                                 u530 06D8                                   u611 01BE  
                                 u531 06D7                                   u515 0678  
                                 u620 01D3                                   u540 06DE  
                                 u700 04C7                                   u621 01D2  
                                 u541 06DD                                   u701 04C6  
                                 u630 01DD                                   u550 06FC  
                                 u710 04E5                                   u631 01DC  
                                 u551 06FB                                   u535 06D4  
                                 u711 04E4                                   u640 00B8  
                                 u560 0722                                   u720 04FD  
                                 u800 056E                                   u641 00B7  
                                 u561 0721                                   u721 04FC  
                                 u801 056D                                   u490 000D  
                                 u570 0728                                   u730 051A  
                                 u810 0584                                   u491 000C  
                                 u635 01D9                                   u571 0727  
                                 u555 06F8                                   u731 0519  
                                 u811 0583                                   u580 0756  
                                 u740 052D                                   u820 059A  
                                 u900 0375                                   u581 0755  
                                 u741 052C                                   u725 04F9  
                                 u821 0599                                   u670 00D2  
                                 u590 07B8                                   u750 00B1  
                                 u830 060A                                   u910 03A3  
                                 u671 00D1                                   u655 00BF  
                                 u591 07B7                                   u751 00B0  
                                 u831 0609                                   u760 005C  
                                 u840 0159                                   u680 04A4  
                                 u920 03CA                                   u761 005B  
                                 u841 0158                                   u665 00C6  
                                 u745 0529                                   u681 04A3  
                                 u825 0596                                   u921 03C9  
                                 u690 04B3                                   u850 0334  
                                 u930 045B                                   u595 07B4  
                                 u691 04B2                                   u835 0606  
                                 u851 0333                                   u931 045A  
                                 u780 0318                                   u860 0340  
                                 u940 0463                                   u781 0317  
                                 u845 0155                                   u925 03C6  
                                 u861 033F                                   u941 0462  
                                 u774 02E6                                   u790 017E  
                                 u870 034F                                   u950 046B  
                                 u775 02E4                                   u791 017D  
                                 u871 034E                                   u951 046A  
                                 u935 0457                                   u960 0499  
                                 u785 0314                                   u961 0498  
                                 u884 035C                                   u885 035A  
                                 u965 0495                                   u894 0366  
                                 u895 0364                                   u977 00DD  
                                 u987 0440                                   fsr0 0004  
                                 indf 0000                                  l1201 0652  
                                l1211 0668                                  l1203 065A  
                                l1301 00CC                                  l1213 067C  
                                l1205 0660                                  l1303 00D2  
                                l1231 06FD                                  l1215 0682  
                                l1223 06C4                                  l1311 04A4  
                                l1241 0756                                  l1233 0709  
                                l1225 06D8                                  l1217 06A8  
                                l1209 0663                                  l1313 04B3  
                                l1251 07B8                                  l1243 0770  
                                l1227 06DE                                  l1219 06BB  
                                l1235 071C                                  l1331 04FD  
                                l1323 04D0                                  l1315 04B8  
                                l1307 049A                                  l1411 059A  
                                l1403 0564                                  l1253 07BD  
                                l1245 077A                                  l1237 0722  
                                l1341 051B                                  l1333 0507  
                                l1325 04D0                                  l1317 04C7  
                                l1309 049E                                  l1413 05BF  
                                l1421 05E6                                  l1501 0397  
                                l1271 01C3                                  l1263 01A2  
                                l1255 07CF                                  l1247 0798  
                                l1239 0728                                  l1351 0556  
                                l1343 052D                                  l1335 0514  
                                l1327 04DF                                  l1319 04CD  
                                l1423 060A                                  l1415 05E1  
                                l1407 056F                                  l1503 03B6  
                                l1441 025E                                  l1433 023F  
                                l1273 01CA                                  l1265 01AA  
                                l1249 07AA                                  l1353 055A  
                                l1345 0544                                  l1329 04E5  
                                l1361 0098                                  l1409 0584  
                                l1505 03BC                                  l1521 0412  
                                l1291 0043                                  l1371 0056  
                                l1435 0240                                  l1283 01E6  
                                l1275 01D3                                  l1267 01B2  
                                l1347 0548                                  l1355 055F  
                                l1363 009F                                  l1427 062D  
                                l1507 03CA                                  l1531 045B  
                                l1515 03DF                                  l1381 02F0  
                                l1373 0298                                  l1437 024A  
                                l1445 0268                                  l1461 0122  
                                l1293 00B2                                  l1277 01DD  
                                l1269 01BF                                  l1349 0552  
                                l1365 00A3                                  l1429 0640  
                                l1541 0484                                  l1533 0463  
                                l1517 03F0                                  l1525 0423  
                                l1509 03D6                                  l1391 0FE4  
                                l1199 0005                                  l1287 0034  
                                l1383 02F8                                  l1375 0298  
                                l1367 0047                                  l1439 0254  
                                l1447 0281                                  l1463 013F  
                                l1295 00B4                                  l1279 01E3  
                                l1359 0093                                  l1471 032E  
                                l1543 048C                                  l1535 046B  
                                l1519 0401                                  l1527 0438  
                                l1551 0012                                  l1385 0021  
                                l1289 0037                                  l1377 02AD  
                                l1369 0049                                  l1449 0286  
                                l1465 0145                                  l1457 0117  
                                l1297 00B8                                  l1393 015A  
                                l1481 0349                                  l1473 0334  
                                l1537 0476                                  l1529 044E  
                                l1561 00E6                                  l1553 001A  
                                l1387 005D                                  l1379 02C9  
                                l1467 014B                                  l1459 0119  
                                l1299 00C5                                  l1395 0178  
                                l1491 0386                                  l1483 034B  
                                l1475 033C                                  l1539 0479  
                                l1563 00F0                                  l1571 0FDD  
                                l1555 001C                                  l1389 0FEF  
                                l1397 017E                                  l1469 0319  
                                l1637 042A                                  l1565 00FB  
                                l1557 00D7                                  l1573 0076  
                                l1549 000F                                  l1581 0214  
                                l1639 0270                                  l1399 019B  
                                l1495 038D                                  l1487 0350  
                                l1479 0341                                  l1567 0106  
                                l1559 00E3                                  l1575 0080  
                                l1583 0216                                  l1489 0380  
                                l1569 0111                                  l1585 0225  
                                l1577 01EF                                  l1499 0394  
                                l1579 01F9                                  _brkp 0069  
                                _free 0564                                  _main 01EF  
                                btemp 007E                           main@reverse 0064  
                                start 0000                __end_of_SpiClearMatrix 005D  
                     __end_of_MovieUp 0076                       __end_of_SpiInit 0021  
                     __end_of_Reverse 015A                                 ?_free 0070  
                               ?_main 0070                   _ChangeOfCoordinates 03D6  
                               _PORTA 0005                                 _PORTB 0006  
                               _TRISA 0085                                 _TRISB 0086  
                               _TRISC 0087                                 _SSPIF 0063  
                     SpiClearMatrix@i 0076                     SendToSegment@data 0073  
                               _errno 00A6                                 free@c 007A  
                               pclath 000A                      ___expand_heap@pn 0070  
                               status 0003                                 wtemp0 007E  
                        main@square_1 005F                  ?_ChangeOfCoordinates 0052  
                     ?_SpiClearMatrix 0070                       __initialization 07D8  
                        __end_of_free 0652                          __end_of_main 023C  
                       ___expand_heap 01A2                            _MatrixInit 00D7  
                              ??_free 0072                                ??_main 007E  
                       ??_SetPosition 0076                         calloc@new_ptr 003C  
               ??_ChangeOfCoordinates 0058                                _SSPCON 0014  
                              _SSPBUF 0013                            _MovieShape 023C  
                          _MovieRigth 0FE4                  MovieShape@shapeArray 0026  
                           ??_MovieUp 0072                             ??_SpiInit 0070  
                           ??_Reverse 0073                         ??_SpiSendByte 0070  
                              _Rotate 0319                        ?___expand_heap 0070  
             ___simple_search_fl@best 002C               ___simple_search_fl@last 0026  
             ___simple_search_fl@next 0028                                ___wmul 00B2  
                              _calloc 015A                                _malloc 049A  
                              _memset 0093                        ShowShape@coord 0074  
             __end_of__initialization 07FC                   __end_of_SetPosition 0093  
                          ___freelist 006D                        __pcstackCOMMON 0070  
                        __pidataBANK1 0FDA                           ?_MatrixInit 0070  
                 __end_of_SpiSendByte 000F     ChangeOfCoordinates@_shapePosition 0052  
ChangeOfCoordinates@_countElemntArray 0055            __end_of___simple_search_fl 07D8  
                          __pbssBANK0 0069                            __pbssBANK1 00A0  
                   __end_of_MovieLeft 1000                     __end_of_MovieDown 0034  
            MovieShape@_shapePosition 0024                     __end_of_PortBInit 0FE4  
                   __end_of_ShowShape 0319                           ?_MovieShape 0024  
                   main@shapePosition 0065                           ?_MovieRigth 0070  
                     ??___expand_heap 0071                            __pmaintext 01EF  
                             ?_Rotate 003E                               ?___wmul 0070  
                             ?_calloc 0038                               ?_malloc 0078  
                             ?_memset 0076                         MovieShape@dir 002B  
           ShowShape@countElemntArray 0076                           _SetPosition 0076  
                             _SSPSTAT 0094                            __stringtab 0800  
                    ??_SpiClearMatrix 0074                            calloc@size 003A  
                             _MovieUp 005D                               _SpiInit 000F  
                       _SendToSegment 0034                  ___simple_search_fl@c 002A  
                             _Reverse 0117                  ___simple_search_fl@n 0070  
                         _SpiSendByte 0004                               Rotate@i 004A  
                             Rotate@x 0048                               Rotate@y 004C  
            ___simple_search_fl@split 0024                               __ptext1 000F  
                             __ptext2 0076                               __ptext3 0FDD  
                             __ptext4 00D7                               __ptext5 03D6  
                             __ptext6 0319                               __ptext7 0564  
                             __ptext8 015A                               __ptext9 0093  
             ChangeOfCoordinates@step 005D                               free@ptr 0070  
                end_of_initialization 07FC                               malloc@m 002E  
                             malloc@n 0078                               malloc@p 0034  
              ___expand_heap@new_brkp 0073                               memset@c 0078  
                             memset@n 007A                               memset@p 007C  
                      ?_SendToSegment 0071                   SetPosition@position 0070  
         __end_of_ChangeOfCoordinates 049A               MovieLeft@_shapePosition 0070  
          ChangeOfCoordinates@_figure 0054                        __end_of_Rotate 03D6  
                      __end_of___wmul 00D7                          ??_MatrixInit 0077  
                      __end_of_calloc 01A2                        __end_of_malloc 0564  
                      __end_of_memset 00B2                       ___expand_heap@n 0071  
                 start_initialization 07D8                            malloc@lock 00A0  
                          malloc@size 0032                    __end_of_MatrixInit 0117  
                     ??_SendToSegment 0074                          ??_MovieShape 0029  
                        ??_MovieRigth 0072                             _MovieLeft 0FEF  
                           _MovieDown 0021                    ___simple_search_fl 0652  
                           _PortBInit 0FDD                              ??_Rotate 0041  
                           _ShowShape 0298          ___simple_search_fl@best_last 0022  
                            ??___wmul 0074                              ??_calloc 007E  
                         __pdataBANK1 00A8                              ??_malloc 007A  
                            ??_memset 007C                   ?___simple_search_fl 0070  
                          memset@dest 0076                         ShowShape@_pos 0020  
                        SetPosition@x 0072                          SetPosition@y 0074  
                           Rotate@res 004E                             ___heap_hi 0170  
                           ___heap_lo 0110                             ___latbits 0002  
                       __pcstackBANK0 0020                    __end_of_MovieShape 0298  
                  __end_of_MovieRigth 0FEF                          ?_SetPosition 0070  
                main@countElemntArray 0062                   ShowShape@shapeArray 0078  
                ??___simple_search_fl 0072           ChangeOfCoordinates@_reverse 0057  
                          ?_MovieLeft 0070                            ?_MovieDown 0070  
                            ?_MovieUp 0070                              ?_SpiInit 0070  
                            ?_Reverse 0070                            ?_PortBInit 0070  
               __end_of___expand_heap 01EF                          ?_SpiSendByte 0070  
                          ?_ShowShape 0074                             __pstrings 0800  
             MovieDown@_shapePosition 0070      __end_ofChangeOfCoordinates@delay 080A  
               MovieUp@_shapePosition 0070                        ___wmul@product 0074  
                  Reverse@countElemnt 0071                          Reverse@array 0070  
                         __stringbase 0805                     ___wmul@multiplier 0070  
                           malloc@end 00A4                             malloc@cur 006B  
                           malloc@new 0036                           ??_MovieLeft 0072  
                         ??_MovieDown 0072                           calloc@nmemb 0038  
                            Reverse@i 0077                              Reverse@j 0079  
                            Reverse@t 0076                           ??_PortBInit 0070  
                         ??_ShowShape 0079                          ShowShape@pos 0022  
                            Rotate@_i 0050                    __end_of__stringtab 0806  
                            __ptext10 049A                              __ptext11 0652  
                            __ptext20 005D                              __ptext12 01A2  
                            __ptext21 0FE4                              __ptext13 00B2  
                            __ptext22 0FEF                              __ptext14 0117  
                            __ptext23 0021                              __ptext15 023C  
                            __ptext16 0047                              __ptext17 0298  
                            __ptext18 0034                              __ptext19 0004  
            ChangeOfCoordinates@delay 0806                              main@F928 00A8  
                SendToSegment@segment 0071                              free@cptr 0078  
                            malloc@sz 0030     ___simple_search_fl@remaining_size 0020  
                ChangeOfCoordinates@i 005B                             stringcode 0800  
               __end_of_SendToSegment 0047              MovieRigth@_shapePosition 0070  
          MovieShape@countElemntArray 0027                              stringdir 0800  
                            stringtab 0800                          Rotate@array_ 003E  
                        Rotate@length 003F  

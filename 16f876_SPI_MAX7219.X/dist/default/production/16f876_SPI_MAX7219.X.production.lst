

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Dec  6 11:05:28 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18     0000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F876 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     PORTA           equ	5	;# 
    67     0006                     PORTB           equ	6	;# 
    68     0007                     PORTC           equ	7	;# 
    69     000A                     PCLATH          equ	10	;# 
    70     000B                     INTCON          equ	11	;# 
    71     000C                     PIR1            equ	12	;# 
    72     000D                     PIR2            equ	13	;# 
    73     000E                     TMR1            equ	14	;# 
    74     000E                     TMR1L           equ	14	;# 
    75     000F                     TMR1H           equ	15	;# 
    76     0010                     T1CON           equ	16	;# 
    77     0011                     TMR2            equ	17	;# 
    78     0012                     T2CON           equ	18	;# 
    79     0013                     SSPBUF          equ	19	;# 
    80     0014                     SSPCON          equ	20	;# 
    81     0015                     CCPR1           equ	21	;# 
    82     0015                     CCPR1L          equ	21	;# 
    83     0016                     CCPR1H          equ	22	;# 
    84     0017                     CCP1CON         equ	23	;# 
    85     0018                     RCSTA           equ	24	;# 
    86     0019                     TXREG           equ	25	;# 
    87     001A                     RCREG           equ	26	;# 
    88     001B                     CCPR2           equ	27	;# 
    89     001B                     CCPR2L          equ	27	;# 
    90     001C                     CCPR2H          equ	28	;# 
    91     001D                     CCP2CON         equ	29	;# 
    92     001E                     ADRESH          equ	30	;# 
    93     001F                     ADCON0          equ	31	;# 
    94     0081                     OPTION_REG      equ	129	;# 
    95     0085                     TRISA           equ	133	;# 
    96     0086                     TRISB           equ	134	;# 
    97     0087                     TRISC           equ	135	;# 
    98     008C                     PIE1            equ	140	;# 
    99     008D                     PIE2            equ	141	;# 
   100     008E                     PCON            equ	142	;# 
   101     0091                     SSPCON2         equ	145	;# 
   102     0092                     PR2             equ	146	;# 
   103     0093                     SSPADD          equ	147	;# 
   104     0094                     SSPSTAT         equ	148	;# 
   105     0098                     TXSTA           equ	152	;# 
   106     0099                     SPBRG           equ	153	;# 
   107     009E                     ADRESL          equ	158	;# 
   108     009F                     ADCON1          equ	159	;# 
   109     010C                     EEDATA          equ	268	;# 
   110     010D                     EEADR           equ	269	;# 
   111     010E                     EEDATH          equ	270	;# 
   112     010F                     EEADRH          equ	271	;# 
   113     018C                     EECON1          equ	396	;# 
   114     018D                     EECON2          equ	397	;# 
   115     0000                     INDF            equ	0	;# 
   116     0001                     TMR0            equ	1	;# 
   117     0002                     PCL             equ	2	;# 
   118     0003                     STATUS          equ	3	;# 
   119     0004                     FSR             equ	4	;# 
   120     0005                     PORTA           equ	5	;# 
   121     0006                     PORTB           equ	6	;# 
   122     0007                     PORTC           equ	7	;# 
   123     000A                     PCLATH          equ	10	;# 
   124     000B                     INTCON          equ	11	;# 
   125     000C                     PIR1            equ	12	;# 
   126     000D                     PIR2            equ	13	;# 
   127     000E                     TMR1            equ	14	;# 
   128     000E                     TMR1L           equ	14	;# 
   129     000F                     TMR1H           equ	15	;# 
   130     0010                     T1CON           equ	16	;# 
   131     0011                     TMR2            equ	17	;# 
   132     0012                     T2CON           equ	18	;# 
   133     0013                     SSPBUF          equ	19	;# 
   134     0014                     SSPCON          equ	20	;# 
   135     0015                     CCPR1           equ	21	;# 
   136     0015                     CCPR1L          equ	21	;# 
   137     0016                     CCPR1H          equ	22	;# 
   138     0017                     CCP1CON         equ	23	;# 
   139     0018                     RCSTA           equ	24	;# 
   140     0019                     TXREG           equ	25	;# 
   141     001A                     RCREG           equ	26	;# 
   142     001B                     CCPR2           equ	27	;# 
   143     001B                     CCPR2L          equ	27	;# 
   144     001C                     CCPR2H          equ	28	;# 
   145     001D                     CCP2CON         equ	29	;# 
   146     001E                     ADRESH          equ	30	;# 
   147     001F                     ADCON0          equ	31	;# 
   148     0081                     OPTION_REG      equ	129	;# 
   149     0085                     TRISA           equ	133	;# 
   150     0086                     TRISB           equ	134	;# 
   151     0087                     TRISC           equ	135	;# 
   152     008C                     PIE1            equ	140	;# 
   153     008D                     PIE2            equ	141	;# 
   154     008E                     PCON            equ	142	;# 
   155     0091                     SSPCON2         equ	145	;# 
   156     0092                     PR2             equ	146	;# 
   157     0093                     SSPADD          equ	147	;# 
   158     0094                     SSPSTAT         equ	148	;# 
   159     0098                     TXSTA           equ	152	;# 
   160     0099                     SPBRG           equ	153	;# 
   161     009E                     ADRESL          equ	158	;# 
   162     009F                     ADCON1          equ	159	;# 
   163     010C                     EEDATA          equ	268	;# 
   164     010D                     EEADR           equ	269	;# 
   165     010E                     EEDATH          equ	270	;# 
   166     010F                     EEADRH          equ	271	;# 
   167     018C                     EECON1          equ	396	;# 
   168     018D                     EECON2          equ	397	;# 
   169     0000                     INDF            equ	0	;# 
   170     0001                     TMR0            equ	1	;# 
   171     0002                     PCL             equ	2	;# 
   172     0003                     STATUS          equ	3	;# 
   173     0004                     FSR             equ	4	;# 
   174     0005                     PORTA           equ	5	;# 
   175     0006                     PORTB           equ	6	;# 
   176     0007                     PORTC           equ	7	;# 
   177     000A                     PCLATH          equ	10	;# 
   178     000B                     INTCON          equ	11	;# 
   179     000C                     PIR1            equ	12	;# 
   180     000D                     PIR2            equ	13	;# 
   181     000E                     TMR1            equ	14	;# 
   182     000E                     TMR1L           equ	14	;# 
   183     000F                     TMR1H           equ	15	;# 
   184     0010                     T1CON           equ	16	;# 
   185     0011                     TMR2            equ	17	;# 
   186     0012                     T2CON           equ	18	;# 
   187     0013                     SSPBUF          equ	19	;# 
   188     0014                     SSPCON          equ	20	;# 
   189     0015                     CCPR1           equ	21	;# 
   190     0015                     CCPR1L          equ	21	;# 
   191     0016                     CCPR1H          equ	22	;# 
   192     0017                     CCP1CON         equ	23	;# 
   193     0018                     RCSTA           equ	24	;# 
   194     0019                     TXREG           equ	25	;# 
   195     001A                     RCREG           equ	26	;# 
   196     001B                     CCPR2           equ	27	;# 
   197     001B                     CCPR2L          equ	27	;# 
   198     001C                     CCPR2H          equ	28	;# 
   199     001D                     CCP2CON         equ	29	;# 
   200     001E                     ADRESH          equ	30	;# 
   201     001F                     ADCON0          equ	31	;# 
   202     0081                     OPTION_REG      equ	129	;# 
   203     0085                     TRISA           equ	133	;# 
   204     0086                     TRISB           equ	134	;# 
   205     0087                     TRISC           equ	135	;# 
   206     008C                     PIE1            equ	140	;# 
   207     008D                     PIE2            equ	141	;# 
   208     008E                     PCON            equ	142	;# 
   209     0091                     SSPCON2         equ	145	;# 
   210     0092                     PR2             equ	146	;# 
   211     0093                     SSPADD          equ	147	;# 
   212     0094                     SSPSTAT         equ	148	;# 
   213     0098                     TXSTA           equ	152	;# 
   214     0099                     SPBRG           equ	153	;# 
   215     009E                     ADRESL          equ	158	;# 
   216     009F                     ADCON1          equ	159	;# 
   217     010C                     EEDATA          equ	268	;# 
   218     010D                     EEADR           equ	269	;# 
   219     010E                     EEDATH          equ	270	;# 
   220     010F                     EEADRH          equ	271	;# 
   221     018C                     EECON1          equ	396	;# 
   222     018D                     EECON2          equ	397	;# 
   223     0000                     INDF            equ	0	;# 
   224     0001                     TMR0            equ	1	;# 
   225     0002                     PCL             equ	2	;# 
   226     0003                     STATUS          equ	3	;# 
   227     0004                     FSR             equ	4	;# 
   228     0005                     PORTA           equ	5	;# 
   229     0006                     PORTB           equ	6	;# 
   230     0007                     PORTC           equ	7	;# 
   231     000A                     PCLATH          equ	10	;# 
   232     000B                     INTCON          equ	11	;# 
   233     000C                     PIR1            equ	12	;# 
   234     000D                     PIR2            equ	13	;# 
   235     000E                     TMR1            equ	14	;# 
   236     000E                     TMR1L           equ	14	;# 
   237     000F                     TMR1H           equ	15	;# 
   238     0010                     T1CON           equ	16	;# 
   239     0011                     TMR2            equ	17	;# 
   240     0012                     T2CON           equ	18	;# 
   241     0013                     SSPBUF          equ	19	;# 
   242     0014                     SSPCON          equ	20	;# 
   243     0015                     CCPR1           equ	21	;# 
   244     0015                     CCPR1L          equ	21	;# 
   245     0016                     CCPR1H          equ	22	;# 
   246     0017                     CCP1CON         equ	23	;# 
   247     0018                     RCSTA           equ	24	;# 
   248     0019                     TXREG           equ	25	;# 
   249     001A                     RCREG           equ	26	;# 
   250     001B                     CCPR2           equ	27	;# 
   251     001B                     CCPR2L          equ	27	;# 
   252     001C                     CCPR2H          equ	28	;# 
   253     001D                     CCP2CON         equ	29	;# 
   254     001E                     ADRESH          equ	30	;# 
   255     001F                     ADCON0          equ	31	;# 
   256     0081                     OPTION_REG      equ	129	;# 
   257     0085                     TRISA           equ	133	;# 
   258     0086                     TRISB           equ	134	;# 
   259     0087                     TRISC           equ	135	;# 
   260     008C                     PIE1            equ	140	;# 
   261     008D                     PIE2            equ	141	;# 
   262     008E                     PCON            equ	142	;# 
   263     0091                     SSPCON2         equ	145	;# 
   264     0092                     PR2             equ	146	;# 
   265     0093                     SSPADD          equ	147	;# 
   266     0094                     SSPSTAT         equ	148	;# 
   267     0098                     TXSTA           equ	152	;# 
   268     0099                     SPBRG           equ	153	;# 
   269     009E                     ADRESL          equ	158	;# 
   270     009F                     ADCON1          equ	159	;# 
   271     010C                     EEDATA          equ	268	;# 
   272     010D                     EEADR           equ	269	;# 
   273     010E                     EEDATH          equ	270	;# 
   274     010F                     EEADRH          equ	271	;# 
   275     018C                     EECON1          equ	396	;# 
   276     018D                     EECON2          equ	397	;# 
   277     0000                     INDF            equ	0	;# 
   278     0001                     TMR0            equ	1	;# 
   279     0002                     PCL             equ	2	;# 
   280     0003                     STATUS          equ	3	;# 
   281     0004                     FSR             equ	4	;# 
   282     0005                     PORTA           equ	5	;# 
   283     0006                     PORTB           equ	6	;# 
   284     0007                     PORTC           equ	7	;# 
   285     000A                     PCLATH          equ	10	;# 
   286     000B                     INTCON          equ	11	;# 
   287     000C                     PIR1            equ	12	;# 
   288     000D                     PIR2            equ	13	;# 
   289     000E                     TMR1            equ	14	;# 
   290     000E                     TMR1L           equ	14	;# 
   291     000F                     TMR1H           equ	15	;# 
   292     0010                     T1CON           equ	16	;# 
   293     0011                     TMR2            equ	17	;# 
   294     0012                     T2CON           equ	18	;# 
   295     0013                     SSPBUF          equ	19	;# 
   296     0014                     SSPCON          equ	20	;# 
   297     0015                     CCPR1           equ	21	;# 
   298     0015                     CCPR1L          equ	21	;# 
   299     0016                     CCPR1H          equ	22	;# 
   300     0017                     CCP1CON         equ	23	;# 
   301     0018                     RCSTA           equ	24	;# 
   302     0019                     TXREG           equ	25	;# 
   303     001A                     RCREG           equ	26	;# 
   304     001B                     CCPR2           equ	27	;# 
   305     001B                     CCPR2L          equ	27	;# 
   306     001C                     CCPR2H          equ	28	;# 
   307     001D                     CCP2CON         equ	29	;# 
   308     001E                     ADRESH          equ	30	;# 
   309     001F                     ADCON0          equ	31	;# 
   310     0081                     OPTION_REG      equ	129	;# 
   311     0085                     TRISA           equ	133	;# 
   312     0086                     TRISB           equ	134	;# 
   313     0087                     TRISC           equ	135	;# 
   314     008C                     PIE1            equ	140	;# 
   315     008D                     PIE2            equ	141	;# 
   316     008E                     PCON            equ	142	;# 
   317     0091                     SSPCON2         equ	145	;# 
   318     0092                     PR2             equ	146	;# 
   319     0093                     SSPADD          equ	147	;# 
   320     0094                     SSPSTAT         equ	148	;# 
   321     0098                     TXSTA           equ	152	;# 
   322     0099                     SPBRG           equ	153	;# 
   323     009E                     ADRESL          equ	158	;# 
   324     009F                     ADCON1          equ	159	;# 
   325     010C                     EEDATA          equ	268	;# 
   326     010D                     EEADR           equ	269	;# 
   327     010E                     EEDATH          equ	270	;# 
   328     010F                     EEADRH          equ	271	;# 
   329     018C                     EECON1          equ	396	;# 
   330     018D                     EECON2          equ	397	;# 
   331     0000                     INDF            equ	0	;# 
   332     0001                     TMR0            equ	1	;# 
   333     0002                     PCL             equ	2	;# 
   334     0003                     STATUS          equ	3	;# 
   335     0004                     FSR             equ	4	;# 
   336     0005                     PORTA           equ	5	;# 
   337     0006                     PORTB           equ	6	;# 
   338     0007                     PORTC           equ	7	;# 
   339     000A                     PCLATH          equ	10	;# 
   340     000B                     INTCON          equ	11	;# 
   341     000C                     PIR1            equ	12	;# 
   342     000D                     PIR2            equ	13	;# 
   343     000E                     TMR1            equ	14	;# 
   344     000E                     TMR1L           equ	14	;# 
   345     000F                     TMR1H           equ	15	;# 
   346     0010                     T1CON           equ	16	;# 
   347     0011                     TMR2            equ	17	;# 
   348     0012                     T2CON           equ	18	;# 
   349     0013                     SSPBUF          equ	19	;# 
   350     0014                     SSPCON          equ	20	;# 
   351     0015                     CCPR1           equ	21	;# 
   352     0015                     CCPR1L          equ	21	;# 
   353     0016                     CCPR1H          equ	22	;# 
   354     0017                     CCP1CON         equ	23	;# 
   355     0018                     RCSTA           equ	24	;# 
   356     0019                     TXREG           equ	25	;# 
   357     001A                     RCREG           equ	26	;# 
   358     001B                     CCPR2           equ	27	;# 
   359     001B                     CCPR2L          equ	27	;# 
   360     001C                     CCPR2H          equ	28	;# 
   361     001D                     CCP2CON         equ	29	;# 
   362     001E                     ADRESH          equ	30	;# 
   363     001F                     ADCON0          equ	31	;# 
   364     0081                     OPTION_REG      equ	129	;# 
   365     0085                     TRISA           equ	133	;# 
   366     0086                     TRISB           equ	134	;# 
   367     0087                     TRISC           equ	135	;# 
   368     008C                     PIE1            equ	140	;# 
   369     008D                     PIE2            equ	141	;# 
   370     008E                     PCON            equ	142	;# 
   371     0091                     SSPCON2         equ	145	;# 
   372     0092                     PR2             equ	146	;# 
   373     0093                     SSPADD          equ	147	;# 
   374     0094                     SSPSTAT         equ	148	;# 
   375     0098                     TXSTA           equ	152	;# 
   376     0099                     SPBRG           equ	153	;# 
   377     009E                     ADRESL          equ	158	;# 
   378     009F                     ADCON1          equ	159	;# 
   379     010C                     EEDATA          equ	268	;# 
   380     010D                     EEADR           equ	269	;# 
   381     010E                     EEDATH          equ	270	;# 
   382     010F                     EEADRH          equ	271	;# 
   383     018C                     EECON1          equ	396	;# 
   384     018D                     EECON2          equ	397	;# 
   385     0013                     _SSPBUF         set	19
   386     0014                     _SSPCON         set	20
   387     0005                     _PORTA          set	5
   388     0006                     _PORTB          set	6
   389     002D                     _RA5            set	45
   390     0063                     _SSPIF          set	99
   391     0094                     _SSPSTAT        set	148
   392     0085                     _TRISA          set	133
   393     0087                     _TRISC          set	135
   394     0086                     _TRISB          set	134
   395                           
   396                           	psect	cinit
   397     07FC                     start_initialization:	
   398                           ; #config settings
   399                           
   400     07FC                     __initialization:
   401     07FC                     end_of_initialization:	
   402                           ;End of C runtime variable initialization code
   403                           
   404     07FC                     __end_of__initialization:
   405     07FC  0183               	clrf	3
   406     07FD  120A  118A  2F82   	ljmp	_main	;jump to C main() function
   407                           
   408                           	psect	cstackCOMMON
   409     0070                     __pcstackCOMMON:
   410     0070                     ?_SpiInit:
   411     0070                     ?_MatrixInit:	
   412                           ; 1 bytes @ 0x0
   413                           
   414     0070                     ?_PortBInit:	
   415                           ; 1 bytes @ 0x0
   416                           
   417     0070                     ?_SpiClearMatrix:	
   418                           ; 1 bytes @ 0x0
   419                           
   420     0070                     ?_SetPosition:	
   421                           ; 1 bytes @ 0x0
   422                           
   423     0070                     ?_main:	
   424                           ; 1 bytes @ 0x0
   425                           
   426     0070                     ?_SpiSendByte:	
   427                           ; 1 bytes @ 0x0
   428                           
   429     0070                     SpiSendByte@data:	
   430                           ; 1 bytes @ 0x0
   431                           
   432     0070                     SetPosition@position:	
   433                           ; 1 bytes @ 0x0
   434                           
   435     0070                     ??_SpiInit:	
   436                           ; 2 bytes @ 0x0
   437                           
   438     0070                     ??_PortBInit:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0070                     ??_SpiSendByte:	
   442                           ; 1 bytes @ 0x0
   443                           
   444                           
   445                           ; 1 bytes @ 0x0
   446     0070                     	ds	1
   447     0071                     ?_SendToSegment:
   448     0071                     SendToSegment@segment:	
   449                           ; 1 bytes @ 0x1
   450                           
   451                           
   452                           ; 2 bytes @ 0x1
   453     0071                     	ds	1
   454     0072                     SetPosition@x:
   455                           
   456                           ; 2 bytes @ 0x2
   457     0072                     	ds	1
   458     0073                     SendToSegment@data:
   459                           
   460                           ; 1 bytes @ 0x3
   461     0073                     	ds	1
   462     0074                     ?_ShowShape:
   463     0074                     SetPosition@y:	
   464                           ; 1 bytes @ 0x4
   465                           
   466     0074                     ShowShape@coord:	
   467                           ; 2 bytes @ 0x4
   468                           
   469     0074                     ??_SpiClearMatrix:	
   470                           ; 2 bytes @ 0x4
   471                           
   472     0074                     ??_SendToSegment:	
   473                           ; 1 bytes @ 0x4
   474                           
   475                           
   476                           ; 1 bytes @ 0x4
   477     0074                     	ds	2
   478     0076                     SpiClearMatrix@i:
   479     0076                     ??_SetPosition:	
   480                           ; 1 bytes @ 0x6
   481                           
   482     0076                     ??_ShowShape:	
   483                           ; 1 bytes @ 0x6
   484                           
   485                           
   486                           ; 1 bytes @ 0x6
   487     0076                     	ds	1
   488     0077                     ??_MatrixInit:
   489                           
   490                           ; 1 bytes @ 0x7
   491     0077                     	ds	4
   492     007B                     ShowShape@pos:
   493                           
   494                           ; 2 bytes @ 0xB
   495     007B                     	ds	2
   496                           
   497                           	psect	cstackBANK0
   498     0020                     __pcstackBANK0:
   499     0020                     ??_main:
   500                           
   501                           ; 1 bytes @ 0x0
   502     0020                     	ds	3
   503     0023                     main@k:
   504                           
   505                           ; 2 bytes @ 0x3
   506     0023                     	ds	2
   507     0025                     main@sh:
   508                           
   509                           ; 2 bytes @ 0x5
   510     0025                     	ds	2
   511     0027                     main@pos:
   512                           
   513                           ; 4 bytes @ 0x7
   514     0027                     	ds	4
   515                           
   516                           	psect	maintext
   517     0782                     __pmaintext:	
   518 ;;
   519 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   520 ;;
   521 ;; *************** function _main *****************
   522 ;; Defined at:
   523 ;;		line 18 in file "main.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;		None
   526 ;; Auto vars:     Size  Location     Type
   527 ;;  sh              2    5[BANK0 ] int 
   528 ;;  k               2    3[BANK0 ] int 
   529 ;;  pos             4    7[BANK0 ] struct .
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : B00/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   539 ;;      Params:         0       0       0       0       0
   540 ;;      Locals:         0       8       0       0       0
   541 ;;      Temps:          0       3       0       0       0
   542 ;;      Totals:         0      11       0       0       0
   543 ;;Total ram usage:       11 bytes
   544 ;; Hardware stack levels required when called: 4
   545 ;; This function calls:
   546 ;;		_MatrixInit
   547 ;;		_PortBInit
   548 ;;		_SetPosition
   549 ;;		_ShowShape
   550 ;;		_SpiClearMatrix
   551 ;;		_SpiInit
   552 ;; This function is called by:
   553 ;;		Startup code after reset
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557     0782                     _main:	
   558                           ;psect for function _main
   559                           
   560     0782                     l764:	
   561                           ;incstack = 0
   562                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   563                           
   564                           
   565                           ;main.c: 19:     SpiInit();
   566     0782  120A  118A  268F  120A  118A  	fcall	_SpiInit
   567                           
   568                           ;main.c: 20:     MatrixInit();
   569     0787  120A  118A  26E7  120A  118A  	fcall	_MatrixInit
   570     078C                     l766:
   571                           
   572                           ;main.c: 21:     PortBInit();
   573     078C  120A  118A  267D  120A  118A  	fcall	_PortBInit
   574     0791                     l768:
   575                           
   576                           ;main.c: 25:         for(int k = 0; k <= 6; k++){
   577     0791  1283               	bcf	3,5	;RP0=0, select bank0
   578     0792  1303               	bcf	3,6	;RP1=0, select bank0
   579     0793  01A3               	clrf	main@k
   580     0794  01A4               	clrf	main@k+1
   581     0795                     l774:
   582                           
   583                           ;main.c: 26:             for(int sh = 0; sh <= 8; sh++){
   584     0795  1283               	bcf	3,5	;RP0=0, select bank0
   585     0796  1303               	bcf	3,6	;RP1=0, select bank0
   586     0797  01A5               	clrf	main@sh
   587     0798  01A6               	clrf	main@sh+1
   588     0799                     l780:
   589                           
   590                           ;main.c: 27:                 SpiClearMatrix();
   591     0799  120A  118A  26B4  120A  118A  	fcall	_SpiClearMatrix
   592     079E                     l782:
   593                           
   594                           ;main.c: 28:                 SetPosition(&pos, k, sh);
   595     079E  3027               	movlw	low main@pos
   596     079F  00F0               	movwf	SetPosition@position
   597     07A0  3000               	movlw	high main@pos
   598     07A1  00F1               	movwf	SetPosition@position+1
   599     07A2  1283               	bcf	3,5	;RP0=0, select bank0
   600     07A3  1303               	bcf	3,6	;RP1=0, select bank0
   601     07A4  0824               	movf	main@k+1,w
   602     07A5  00F3               	movwf	SetPosition@x+1
   603     07A6  0823               	movf	main@k,w
   604     07A7  00F2               	movwf	SetPosition@x
   605     07A8  0826               	movf	main@sh+1,w
   606     07A9  00F5               	movwf	SetPosition@y+1
   607     07AA  0825               	movf	main@sh,w
   608     07AB  00F4               	movwf	SetPosition@y
   609     07AC  120A  118A  26CA  120A  118A  	fcall	_SetPosition
   610     07B1                     l784:
   611                           
   612                           ;main.c: 29:                 ShowShape(&pos);
   613     07B1  3027               	movlw	low main@pos
   614     07B2  00F4               	movwf	ShowShape@coord
   615     07B3  3000               	movlw	high main@pos
   616     07B4  00F5               	movwf	ShowShape@coord+1
   617     07B5  120A  118A  2727  120A  118A  	fcall	_ShowShape
   618     07BA                     l786:
   619                           
   620                           ;main.c: 30:                 _delay((unsigned long)((100)*(16000000/4000.0)));
   621     07BA  3003               	movlw	3
   622     07BB  1283               	bcf	3,5	;RP0=0, select bank0
   623     07BC  1303               	bcf	3,6	;RP1=0, select bank0
   624     07BD  00A2               	movwf	??_main+2
   625     07BE  3008               	movlw	8
   626     07BF  00A1               	movwf	??_main+1
   627     07C0  3076               	movlw	118
   628     07C1  00A0               	movwf	??_main
   629     07C2                     u137:
   630     07C2  0BA0               	decfsz	??_main,f
   631     07C3  2FC2               	goto	u137
   632     07C4  0BA1               	decfsz	??_main+1,f
   633     07C5  2FC2               	goto	u137
   634     07C6  0BA2               	decfsz	??_main+2,f
   635     07C7  2FC2               	goto	u137
   636     07C8  0000               	nop
   637     07C9                     l788:
   638                           
   639                           ;main.c: 31:             }
   640     07C9  3001               	movlw	1
   641     07CA  1283               	bcf	3,5	;RP0=0, select bank0
   642     07CB  1303               	bcf	3,6	;RP1=0, select bank0
   643     07CC  07A5               	addwf	main@sh,f
   644     07CD  1803               	skipnc
   645     07CE  0AA6               	incf	main@sh+1,f
   646     07CF  3000               	movlw	0
   647     07D0  07A6               	addwf	main@sh+1,f
   648     07D1                     l790:
   649     07D1  0826               	movf	main@sh+1,w
   650     07D2  3A80               	xorlw	128
   651     07D3  00FF               	movwf	btemp+1
   652     07D4  3080               	movlw	128
   653     07D5  027F               	subwf	btemp+1,w
   654     07D6  1D03               	skipz
   655     07D7  2FDA               	goto	u115
   656     07D8  3009               	movlw	9
   657     07D9  0225               	subwf	main@sh,w
   658     07DA                     u115:
   659     07DA  1C03               	skipc
   660     07DB  2FDD               	goto	u111
   661     07DC  2FDE               	goto	u110
   662     07DD                     u111:
   663     07DD  2F99               	goto	l780
   664     07DE                     u110:
   665     07DE                     l792:
   666                           
   667                           ;main.c: 32:         }
   668     07DE  3001               	movlw	1
   669     07DF  1283               	bcf	3,5	;RP0=0, select bank0
   670     07E0  1303               	bcf	3,6	;RP1=0, select bank0
   671     07E1  07A3               	addwf	main@k,f
   672     07E2  1803               	skipnc
   673     07E3  0AA4               	incf	main@k+1,f
   674     07E4  3000               	movlw	0
   675     07E5  07A4               	addwf	main@k+1,f
   676     07E6                     l794:
   677     07E6  0824               	movf	main@k+1,w
   678     07E7  3A80               	xorlw	128
   679     07E8  00FF               	movwf	btemp+1
   680     07E9  3080               	movlw	128
   681     07EA  027F               	subwf	btemp+1,w
   682     07EB  1D03               	skipz
   683     07EC  2FEF               	goto	u125
   684     07ED  3007               	movlw	7
   685     07EE  0223               	subwf	main@k,w
   686     07EF                     u125:
   687     07EF  1C03               	skipc
   688     07F0  2FF2               	goto	u121
   689     07F1  2FF3               	goto	u120
   690     07F2                     u121:
   691     07F2  2F95               	goto	l774
   692     07F3                     u120:
   693     07F3                     l796:
   694                           
   695                           ;main.c: 33:         SpiClearMatrix();
   696     07F3  120A  118A  26B4  120A  118A  	fcall	_SpiClearMatrix
   697     07F8  2F91               	goto	l768
   698     07F9  120A  118A  2800   	ljmp	start
   699     07FC                     __end_of_main:
   700                           
   701                           	psect	text1
   702     068F                     __ptext1:	
   703 ;; *************** function _SpiInit *****************
   704 ;; Defined at:
   705 ;;		line 9 in file "spi.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  1    wreg      void 
   712 ;; Registers used:
   713 ;;		wreg, status,2, status,0
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   719 ;;      Params:         0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0
   722 ;;      Totals:         0       0       0       0       0
   723 ;;Total ram usage:        0 bytes
   724 ;; Hardware stack levels used: 1
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732     068F                     _SpiInit:	
   733                           ;psect for function _SpiInit
   734                           
   735     068F                     l728:	
   736                           ;incstack = 0
   737                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   738                           
   739                           
   740                           ;spi.c: 10:     TRISC |= 0x10;
   741     068F  1683               	bsf	3,5	;RP0=1, select bank1
   742     0690  1303               	bcf	3,6	;RP1=0, select bank1
   743     0691  1607               	bsf	7,4	;volatile
   744     0692                     l730:
   745                           
   746                           ;spi.c: 11:     TRISC &= ~0x28;
   747     0692  30D7               	movlw	215
   748     0693  0587               	andwf	7,f	;volatile
   749                           
   750                           ;spi.c: 12:     TRISA &= ~0x20;
   751     0694  30DF               	movlw	223
   752     0695  0585               	andwf	5,f	;volatile
   753                           
   754                           ;spi.c: 13:     PORTA &= ~0x20;
   755     0696  30DF               	movlw	223
   756     0697  1283               	bcf	3,5	;RP0=0, select bank0
   757     0698  1303               	bcf	3,6	;RP1=0, select bank0
   758     0699  0585               	andwf	5,f	;volatile
   759     069A                     l732:
   760                           
   761                           ;spi.c: 14:     SSPCON = 0x30;
   762     069A  3030               	movlw	48
   763     069B  0094               	movwf	20	;volatile
   764     069C                     l734:
   765                           
   766                           ;spi.c: 15:     SSPSTAT = 0x80;
   767     069C  3080               	movlw	128
   768     069D  1683               	bsf	3,5	;RP0=1, select bank1
   769     069E  1303               	bcf	3,6	;RP1=0, select bank1
   770     069F  0094               	movwf	20	;volatile
   771     06A0                     l50:
   772     06A0  0008               	return
   773     06A1                     __end_of_SpiInit:
   774                           
   775                           	psect	text2
   776     0727                     __ptext2:	
   777 ;; *************** function _ShowShape *****************
   778 ;; Defined at:
   779 ;;		line 8 in file "shape.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;  coord           2    4[COMMON] PTR struct .
   782 ;;		 -> main@pos(4), 
   783 ;; Auto vars:     Size  Location     Type
   784 ;;  pos             2   11[COMMON] int 
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   794 ;;      Params:         2       0       0       0       0
   795 ;;      Locals:         2       0       0       0       0
   796 ;;      Temps:          5       0       0       0       0
   797 ;;      Totals:         9       0       0       0       0
   798 ;;Total ram usage:        9 bytes
   799 ;; Hardware stack levels used: 1
   800 ;; Hardware stack levels required when called: 2
   801 ;; This function calls:
   802 ;;		_SendToSegment
   803 ;; This function is called by:
   804 ;;		_main
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808     0727                     _ShowShape:	
   809                           ;psect for function _ShowShape
   810                           
   811     0727                     l756:	
   812                           ;incstack = 0
   813                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   814                           
   815                           
   816                           ;shape.c: 9:     for(int pos = 1 + coord->x; pos <= 2 + coord->x; pos++){
   817     0727  0874               	movf	ShowShape@coord,w
   818     0728  0084               	movwf	4
   819     0729  1783               	bsf	3,7
   820     072A  1C75               	btfss	ShowShape@coord+1,0
   821     072B  1383               	bcf	3,7
   822     072C  0800               	movf	0,w
   823     072D  00F6               	movwf	??_ShowShape
   824     072E  0A84               	incf	4,f
   825     072F  0800               	movf	0,w
   826     0730  00F7               	movwf	??_ShowShape+1
   827     0731  0876               	movf	??_ShowShape,w
   828     0732  3E01               	addlw	1
   829     0733  00FB               	movwf	ShowShape@pos
   830     0734  0877               	movf	??_ShowShape+1,w
   831     0735  1803               	skipnc
   832     0736  3E01               	addlw	1
   833     0737  3E00               	addlw	0
   834     0738  00FC               	movwf	ShowShape@pos+1
   835     0739  2F61               	goto	l762
   836     073A                     l758:
   837                           
   838                           ;shape.c: 10:        SendToSegment(pos, (char)(0x03 << coord->y));
   839     073A  087C               	movf	ShowShape@pos+1,w
   840     073B  00F2               	movwf	SendToSegment@segment+1
   841     073C  087B               	movf	ShowShape@pos,w
   842     073D  00F1               	movwf	SendToSegment@segment
   843     073E  3003               	movlw	3
   844     073F  00F6               	movwf	??_ShowShape
   845     0740  0874               	movf	ShowShape@coord,w
   846     0741  3E02               	addlw	2
   847     0742  00F7               	movwf	??_ShowShape+1
   848     0743  0875               	movf	ShowShape@coord+1,w
   849     0744  1803               	skipnc
   850     0745  3E01               	addlw	1
   851     0746  3E00               	addlw	0
   852     0747  00F8               	movwf	??_ShowShape+2
   853     0748  0877               	movf	??_ShowShape+1,w
   854     0749  0084               	movwf	4
   855     074A  1783               	bsf	3,7
   856     074B  1C78               	btfss	??_ShowShape+2,0
   857     074C  1383               	bcf	3,7
   858     074D  0A00               	incf	0,w
   859     074E  2F51               	goto	u94
   860     074F                     u95:
   861     074F  1003               	clrc
   862     0750  0DF6               	rlf	??_ShowShape,f
   863     0751                     u94:
   864     0751  3EFF               	addlw	-1
   865     0752  1D03               	skipz
   866     0753  2F4F               	goto	u95
   867     0754  0876               	movf	??_ShowShape,w
   868     0755  00F3               	movwf	SendToSegment@data
   869     0756  120A  118A  26A1  120A  118A  	fcall	_SendToSegment
   870     075B                     l760:
   871                           
   872                           ;shape.c: 11:     }
   873     075B  3001               	movlw	1
   874     075C  07FB               	addwf	ShowShape@pos,f
   875     075D  1803               	skipnc
   876     075E  0AFC               	incf	ShowShape@pos+1,f
   877     075F  3000               	movlw	0
   878     0760  07FC               	addwf	ShowShape@pos+1,f
   879     0761                     l762:
   880     0761  0874               	movf	ShowShape@coord,w
   881     0762  0084               	movwf	4
   882     0763  1783               	bsf	3,7
   883     0764  1C75               	btfss	ShowShape@coord+1,0
   884     0765  1383               	bcf	3,7
   885     0766  0800               	movf	0,w
   886     0767  00F6               	movwf	??_ShowShape
   887     0768  0A84               	incf	4,f
   888     0769  0800               	movf	0,w
   889     076A  00F7               	movwf	??_ShowShape+1
   890     076B  0876               	movf	??_ShowShape,w
   891     076C  3E02               	addlw	2
   892     076D  00F8               	movwf	??_ShowShape+2
   893     076E  0877               	movf	??_ShowShape+1,w
   894     076F  1803               	skipnc
   895     0770  3E01               	addlw	1
   896     0771  3E00               	addlw	0
   897     0772  00F9               	movwf	??_ShowShape+3
   898     0773  0879               	movf	??_ShowShape+3,w
   899     0774  3A80               	xorlw	128
   900     0775  00FA               	movwf	??_ShowShape+4
   901     0776  087C               	movf	ShowShape@pos+1,w
   902     0777  3A80               	xorlw	128
   903     0778  027A               	subwf	??_ShowShape+4,w
   904     0779  1D03               	skipz
   905     077A  2F7D               	goto	u105
   906     077B  087B               	movf	ShowShape@pos,w
   907     077C  0278               	subwf	??_ShowShape+2,w
   908     077D                     u105:
   909     077D  1803               	skipnc
   910     077E  2F80               	goto	u101
   911     077F  2F81               	goto	u100
   912     0780                     u101:
   913     0780  2F3A               	goto	l758
   914     0781                     u100:
   915     0781                     l86:
   916     0781  0008               	return
   917     0782                     __end_of_ShowShape:
   918                           
   919                           	psect	text3
   920     06CA                     __ptext3:	
   921 ;; *************** function _SetPosition *****************
   922 ;; Defined at:
   923 ;;		line 3 in file "shape.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  position        2    0[COMMON] PTR struct .
   926 ;;		 -> main@pos(4), 
   927 ;;  x               2    2[COMMON] int 
   928 ;;  y               2    4[COMMON] int 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;		None
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   940 ;;      Params:         6       0       0       0       0
   941 ;;      Locals:         0       0       0       0       0
   942 ;;      Temps:          2       0       0       0       0
   943 ;;      Totals:         8       0       0       0       0
   944 ;;Total ram usage:        8 bytes
   945 ;; Hardware stack levels used: 1
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_main
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953     06CA                     _SetPosition:	
   954                           ;psect for function _SetPosition
   955                           
   956     06CA                     l752:	
   957                           ;incstack = 0
   958                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
   959                           
   960                           
   961                           ;shape.c: 4:     position->x = x;
   962     06CA  0870               	movf	SetPosition@position,w
   963     06CB  0084               	movwf	4
   964     06CC  1783               	bsf	3,7
   965     06CD  1C71               	btfss	SetPosition@position+1,0
   966     06CE  1383               	bcf	3,7
   967     06CF  0872               	movf	SetPosition@x,w
   968     06D0  0080               	movwf	0
   969     06D1  0A84               	incf	4,f
   970     06D2  0873               	movf	SetPosition@x+1,w
   971     06D3  0080               	movwf	0
   972     06D4                     l754:
   973                           
   974                           ;shape.c: 5:     position->y = y;
   975     06D4  0870               	movf	SetPosition@position,w
   976     06D5  3E02               	addlw	2
   977     06D6  00F6               	movwf	??_SetPosition
   978     06D7  0871               	movf	SetPosition@position+1,w
   979     06D8  1803               	skipnc
   980     06D9  3E01               	addlw	1
   981     06DA  3E00               	addlw	0
   982     06DB  00F7               	movwf	??_SetPosition+1
   983     06DC  0876               	movf	??_SetPosition,w
   984     06DD  0084               	movwf	4
   985     06DE  1783               	bsf	3,7
   986     06DF  1C77               	btfss	??_SetPosition+1,0
   987     06E0  1383               	bcf	3,7
   988     06E1  0874               	movf	SetPosition@y,w
   989     06E2  0080               	movwf	0
   990     06E3  0A84               	incf	4,f
   991     06E4  0875               	movf	SetPosition@y+1,w
   992     06E5  0080               	movwf	0
   993     06E6                     l80:
   994     06E6  0008               	return
   995     06E7                     __end_of_SetPosition:
   996                           
   997                           	psect	text4
   998     067D                     __ptext4:	
   999 ;; *************** function _PortBInit *****************
  1000 ;; Defined at:
  1001 ;;		line 13 in file "portsinit.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;		None
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		status,2
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         0       0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0
  1017 ;;      Temps:          0       0       0       0       0
  1018 ;;      Totals:         0       0       0       0       0
  1019 ;;Total ram usage:        0 bytes
  1020 ;; Hardware stack levels used: 1
  1021 ;; This function calls:
  1022 ;;		Nothing
  1023 ;; This function is called by:
  1024 ;;		_main
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028     067D                     _PortBInit:	
  1029                           ;psect for function _PortBInit
  1030                           
  1031     067D                     l750:	
  1032                           ;incstack = 0
  1033                           ; Regs used in _PortBInit: [status,2]
  1034                           
  1035                           
  1036                           ;portsinit.c: 14:     TRISB = 0x00;
  1037     067D  1683               	bsf	3,5	;RP0=1, select bank1
  1038     067E  1303               	bcf	3,6	;RP1=0, select bank1
  1039     067F  0186               	clrf	6	;volatile
  1040                           
  1041                           ;portsinit.c: 15:     PORTB = 0x00;
  1042     0680  1283               	bcf	3,5	;RP0=0, select bank0
  1043     0681  1303               	bcf	3,6	;RP1=0, select bank0
  1044     0682  0186               	clrf	6	;volatile
  1045     0683                     l33:
  1046     0683  0008               	return
  1047     0684                     __end_of_PortBInit:
  1048                           
  1049                           	psect	text5
  1050     06E7                     __ptext5:	
  1051 ;; *************** function _MatrixInit *****************
  1052 ;; Defined at:
  1053 ;;		line 20 in file "matrix.c"
  1054 ;; Parameters:    Size  Location     Type
  1055 ;;		None
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;		None
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, status,2, status,0, pclath, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1067 ;;      Params:         0       0       0       0       0
  1068 ;;      Locals:         0       0       0       0       0
  1069 ;;      Temps:          3       0       0       0       0
  1070 ;;      Totals:         3       0       0       0       0
  1071 ;;Total ram usage:        3 bytes
  1072 ;; Hardware stack levels used: 1
  1073 ;; Hardware stack levels required when called: 3
  1074 ;; This function calls:
  1075 ;;		_SendToSegment
  1076 ;;		_SpiClearMatrix
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082     06E7                     _MatrixInit:	
  1083                           ;psect for function _MatrixInit
  1084                           
  1085     06E7                     l736:	
  1086                           ;incstack = 0
  1087                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1088                           
  1089                           
  1090                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1091     06E7  3003               	movlw	3
  1092     06E8  00F9               	movwf	??_MatrixInit+2
  1093     06E9  3008               	movlw	8
  1094     06EA  00F8               	movwf	??_MatrixInit+1
  1095     06EB  3077               	movlw	119
  1096     06EC  00F7               	movwf	??_MatrixInit
  1097     06ED                     u147:
  1098     06ED  0BF7               	decfsz	??_MatrixInit,f
  1099     06EE  2EED               	goto	u147
  1100     06EF  0BF8               	decfsz	??_MatrixInit+1,f
  1101     06F0  2EED               	goto	u147
  1102     06F1  0BF9               	decfsz	??_MatrixInit+2,f
  1103     06F2  2EED               	goto	u147
  1104     06F3                     l738:
  1105                           
  1106                           ;matrix.c: 22:     RA5=1;
  1107     06F3  1283               	bcf	3,5	;RP0=0, select bank0
  1108     06F4  1303               	bcf	3,6	;RP1=0, select bank0
  1109     06F5  1685               	bsf	5,5	;volatile
  1110     06F6                     l740:
  1111                           
  1112                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1113     06F6  3009               	movlw	9
  1114     06F7  00F1               	movwf	SendToSegment@segment
  1115     06F8  3000               	movlw	0
  1116     06F9  00F2               	movwf	SendToSegment@segment+1
  1117     06FA  01F3               	clrf	SendToSegment@data
  1118     06FB  120A  118A  26A1  120A  118A  	fcall	_SendToSegment
  1119     0700                     l742:
  1120                           
  1121                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1122     0700  300B               	movlw	11
  1123     0701  00F1               	movwf	SendToSegment@segment
  1124     0702  3000               	movlw	0
  1125     0703  00F2               	movwf	SendToSegment@segment+1
  1126     0704  3007               	movlw	7
  1127     0705  00F3               	movwf	SendToSegment@data
  1128     0706  120A  118A  26A1  120A  118A  	fcall	_SendToSegment
  1129     070B                     l744:
  1130                           
  1131                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1132     070B  300A               	movlw	10
  1133     070C  00F1               	movwf	SendToSegment@segment
  1134     070D  3000               	movlw	0
  1135     070E  00F2               	movwf	SendToSegment@segment+1
  1136     070F  3002               	movlw	2
  1137     0710  00F3               	movwf	SendToSegment@data
  1138     0711  120A  118A  26A1  120A  118A  	fcall	_SendToSegment
  1139     0716                     l746:
  1140                           
  1141                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1142     0716  300C               	movlw	12
  1143     0717  00F1               	movwf	SendToSegment@segment
  1144     0718  3000               	movlw	0
  1145     0719  00F2               	movwf	SendToSegment@segment+1
  1146     071A  01F3               	clrf	SendToSegment@data
  1147     071B  0AF3               	incf	SendToSegment@data,f
  1148     071C  120A  118A  26A1  120A  118A  	fcall	_SendToSegment
  1149     0721                     l748:
  1150                           
  1151                           ;matrix.c: 27:     SpiClearMatrix();
  1152     0721  120A  118A  26B4  120A  118A  	fcall	_SpiClearMatrix
  1153     0726                     l72:
  1154     0726  0008               	return
  1155     0727                     __end_of_MatrixInit:
  1156                           
  1157                           	psect	text6
  1158     06B4                     __ptext6:	
  1159 ;; *************** function _SpiClearMatrix *****************
  1160 ;; Defined at:
  1161 ;;		line 10 in file "matrix.c"
  1162 ;; Parameters:    Size  Location     Type
  1163 ;;		None
  1164 ;; Auto vars:     Size  Location     Type
  1165 ;;  i               1    6[COMMON] unsigned char 
  1166 ;; Return value:  Size  Location     Type
  1167 ;;                  1    wreg      void 
  1168 ;; Registers used:
  1169 ;;		wreg, status,2, status,0, pclath, cstack
  1170 ;; Tracked objects:
  1171 ;;		On entry : 0/0
  1172 ;;		On exit  : 0/0
  1173 ;;		Unchanged: 0/0
  1174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1175 ;;      Params:         0       0       0       0       0
  1176 ;;      Locals:         1       0       0       0       0
  1177 ;;      Temps:          2       0       0       0       0
  1178 ;;      Totals:         3       0       0       0       0
  1179 ;;Total ram usage:        3 bytes
  1180 ;; Hardware stack levels used: 1
  1181 ;; Hardware stack levels required when called: 2
  1182 ;; This function calls:
  1183 ;;		_SendToSegment
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;;		_MatrixInit
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190     06B4                     _SpiClearMatrix:	
  1191                           ;psect for function _SpiClearMatrix
  1192                           
  1193     06B4                     l722:	
  1194                           ;incstack = 0
  1195                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  1196                           
  1197                           
  1198                           ;matrix.c: 12:   char i = 8;
  1199     06B4  3008               	movlw	8
  1200     06B5  00F6               	movwf	SpiClearMatrix@i
  1201     06B6                     l724:
  1202                           
  1203                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  1204     06B6  0876               	movf	SpiClearMatrix@i,w
  1205     06B7  00F4               	movwf	??_SpiClearMatrix
  1206     06B8  01F5               	clrf	??_SpiClearMatrix+1
  1207     06B9  0874               	movf	??_SpiClearMatrix,w
  1208     06BA  00F1               	movwf	SendToSegment@segment
  1209     06BB  0875               	movf	??_SpiClearMatrix+1,w
  1210     06BC  00F2               	movwf	SendToSegment@segment+1
  1211     06BD  01F3               	clrf	SendToSegment@data
  1212     06BE  120A  118A  26A1  120A  118A  	fcall	_SendToSegment
  1213     06C3                     l726:
  1214                           
  1215                           ;matrix.c: 16:   } while (--i);
  1216     06C3  3001               	movlw	1
  1217     06C4  02F6               	subwf	SpiClearMatrix@i,f
  1218     06C5  1D03               	btfss	3,2
  1219     06C6  2EC8               	goto	u81
  1220     06C7  2EC9               	goto	u80
  1221     06C8                     u81:
  1222     06C8  2EB6               	goto	l724
  1223     06C9                     u80:
  1224     06C9                     l69:
  1225     06C9  0008               	return
  1226     06CA                     __end_of_SpiClearMatrix:
  1227                           
  1228                           	psect	text7
  1229     06A1                     __ptext7:	
  1230 ;; *************** function _SendToSegment *****************
  1231 ;; Defined at:
  1232 ;;		line 34 in file "matrix.c"
  1233 ;; Parameters:    Size  Location     Type
  1234 ;;  segment         2    1[COMMON] int 
  1235 ;;  data            1    3[COMMON] unsigned char 
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		wreg, status,2, status,0, pclath, cstack
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1247 ;;      Params:         3       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0
  1250 ;;      Totals:         3       0       0       0       0
  1251 ;;Total ram usage:        3 bytes
  1252 ;; Hardware stack levels used: 1
  1253 ;; Hardware stack levels required when called: 1
  1254 ;; This function calls:
  1255 ;;		_SpiSendByte
  1256 ;; This function is called by:
  1257 ;;		_SpiClearMatrix
  1258 ;;		_MatrixInit
  1259 ;;		_ShowShape
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263     06A1                     _SendToSegment:	
  1264                           ;psect for function _SendToSegment
  1265                           
  1266     06A1                     l716:	
  1267                           ;incstack = 0
  1268                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1269                           
  1270                           
  1271                           ;matrix.c: 35:     RA5 = 0;
  1272     06A1  1283               	bcf	3,5	;RP0=0, select bank0
  1273     06A2  1303               	bcf	3,6	;RP1=0, select bank0
  1274     06A3  1285               	bcf	5,5	;volatile
  1275     06A4                     l718:
  1276                           
  1277                           ;matrix.c: 36:     SpiSendByte((char)segment);
  1278     06A4  0871               	movf	SendToSegment@segment,w
  1279     06A5  120A  118A  2684  120A  118A  	fcall	_SpiSendByte
  1280                           
  1281                           ;matrix.c: 37:     SpiSendByte(data);
  1282     06AA  0873               	movf	SendToSegment@data,w
  1283     06AB  120A  118A  2684  120A  118A  	fcall	_SpiSendByte
  1284     06B0                     l720:
  1285                           
  1286                           ;matrix.c: 38:     RA5 = 1;
  1287     06B0  1283               	bcf	3,5	;RP0=0, select bank0
  1288     06B1  1303               	bcf	3,6	;RP1=0, select bank0
  1289     06B2  1685               	bsf	5,5	;volatile
  1290     06B3                     l75:
  1291     06B3  0008               	return
  1292     06B4                     __end_of_SendToSegment:
  1293                           
  1294                           	psect	text8
  1295     0684                     __ptext8:	
  1296 ;; *************** function _SpiSendByte *****************
  1297 ;; Defined at:
  1298 ;;		line 18 in file "spi.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  data            1    wreg     unsigned char 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  data            1    0[COMMON] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1312 ;;      Params:         0       0       0       0       0
  1313 ;;      Locals:         1       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0
  1315 ;;      Totals:         1       0       0       0       0
  1316 ;;Total ram usage:        1 bytes
  1317 ;; Hardware stack levels used: 1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_SendToSegment
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325     0684                     _SpiSendByte:	
  1326                           ;psect for function _SpiSendByte
  1327                           
  1328                           
  1329                           ;incstack = 0
  1330                           ; Regs used in _SpiSendByte: [wreg]
  1331                           ;SpiSendByte@data stored from wreg
  1332     0684  00F0               	movwf	SpiSendByte@data
  1333     0685                     l714:
  1334                           
  1335                           ;spi.c: 19:     SSPBUF = data;
  1336     0685  0870               	movf	SpiSendByte@data,w
  1337     0686  1283               	bcf	3,5	;RP0=0, select bank0
  1338     0687  1303               	bcf	3,6	;RP1=0, select bank0
  1339     0688  0093               	movwf	19	;volatile
  1340     0689                     l53:	
  1341                           ;spi.c: 20:     while (!SSPIF);
  1342                           
  1343     0689  1D8C               	btfss	12,3	;volatile
  1344     068A  2E8C               	goto	u71
  1345     068B  2E8D               	goto	u70
  1346     068C                     u71:
  1347     068C  2E89               	goto	l53
  1348     068D                     u70:
  1349     068D                     l55:
  1350                           
  1351                           ;spi.c: 21:     SSPIF = 0;
  1352     068D  118C               	bcf	12,3	;volatile
  1353     068E                     l56:
  1354     068E  0008               	return
  1355     068F                     __end_of_SpiSendByte:
  1356     0002                     ___latbits      equ	2
  1357     007E                     btemp           set	126	;btemp
  1358     007E                     wtemp0          set	126
  1359                           
  1360                           	psect	config
  1361                           
  1362                           ;Config register CONFIG @ 0x2007
  1363                           ;	Oscillator Selection bits
  1364                           ;	FOSC = HS, HS oscillator
  1365                           ;	Watchdog Timer Enable bit
  1366                           ;	WDTE = OFF, WDT disabled
  1367                           ;	Power-up Timer Enable bit
  1368                           ;	PWRTE = OFF, PWRT disabled
  1369                           ;	FLASH Program Memory Code Protection bits
  1370                           ;	CP = OFF, Code protection off
  1371                           ;	Brown-out Reset Enable bit
  1372                           ;	BOREN = OFF, BOR disabled
  1373                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1374                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1375                           ;	Data EE Memory Code Protection
  1376                           ;	CPD = OFF, Code Protection off
  1377                           ;	FLASH Program Memory Write Enable
  1378                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1379                           ;	In-Circuit Debugger Mode bit
  1380                           ;	DEBUG = 0x1, unprogrammed default
  1381     2007                     	org	8199
  1382     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     11      11
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@pos(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@pos(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_ShowShape
    _ShowShape->_SendToSegment
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0     821
                                              0 BANK0     11    11      0
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                          _ShowShape
                     _SpiClearMatrix
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ShowShape                                            9     7      2     198
                                              4 COMMON     9     7      2
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _PortBInit
   _SetPosition
   _ShowShape
     _SendToSegment
   _SpiClearMatrix
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     13      13     92.9%
BANK0               80     11      11     13.8%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      24      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Dec  6 11:05:28 2024

         _SpiClearMatrix 06B4                       l33 0683                       l50 06A0  
                     l53 0689                       l55 068D                       l56 068E  
                     l72 0726                       l80 06E6                       l75 06B3  
                     l69 06C9                       l86 0781                       u70 068D  
                     u71 068C                       u80 06C9                       u81 06C8  
                     u94 0751                       u95 074F          SpiSendByte@data 0070  
                    l720 06B0                      l714 0685                      l722 06B4  
                    l730 0692                      l716 06A1                      l724 06B6  
                    l740 06F6                      l732 069A                      l718 06A4  
                    l726 06C3                      l742 0700                      l750 067D  
                    l734 069C                      l744 070B                      l736 06E7  
                    l752 06CA                      l760 075B                      l728 068F  
                    l746 0716                      l738 06F3                      l754 06D4  
                    l762 0761                      l748 0721                      l756 0727  
                    l780 0799                      l764 0782                      l758 073A  
                    l790 07D1                      l782 079E                      l774 0795  
                    l766 078C                      l792 07DE                      l784 07B1  
                    l768 0791                      l794 07E6                      l786 07BA  
                    l796 07F3                      l788 07C9                      _RA5 002D  
                    u100 0781                      u101 0780                      u110 07DE  
                    u111 07DD                      u120 07F3                      u105 077D  
                    u121 07F2                      u115 07DA                      u125 07EF  
                    u137 07C2                      u147 06ED                      fsr0 0004  
                    indf 0000                     _main 0782                     btemp 007E  
                   start 0000   __end_of_SpiClearMatrix 06CA          __end_of_SpiInit 06A1  
                  ?_main 0070                    _PORTA 0005                    _PORTB 0006  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _SSPIF 0063          SpiClearMatrix@i 0076        SendToSegment@data 0073  
                  main@k 0023                    status 0003                    wtemp0 007E  
        ?_SpiClearMatrix 0070          __initialization 07FC             __end_of_main 07FC  
             _MatrixInit 06E7                   ??_main 0020            ??_SetPosition 0076  
                 _SSPCON 0014                   _SSPBUF 0013                ??_SpiInit 0070  
          ??_SpiSendByte 0070                   main@sh 0025           ShowShape@coord 0074  
__end_of__initialization 07FC      __end_of_SetPosition 06E7           __pcstackCOMMON 0070  
            ?_MatrixInit 0070      __end_of_SpiSendByte 068F        __end_of_PortBInit 0684  
      __end_of_ShowShape 0782               __pmaintext 0782              _SetPosition 06CA  
                _SSPSTAT 0094         ??_SpiClearMatrix 0074                  _SpiInit 068F  
          _SendToSegment 06A1              _SpiSendByte 0684                  __ptext1 068F  
                __ptext2 0727                  __ptext3 06CA                  __ptext4 067D  
                __ptext5 06E7                  __ptext6 06B4                  __ptext7 06A1  
                __ptext8 0684                  main@pos 0027     end_of_initialization 07FC  
         ?_SendToSegment 0071      SetPosition@position 0070             ??_MatrixInit 0077  
    start_initialization 07FC       __end_of_MatrixInit 0727          ??_SendToSegment 0074  
              _PortBInit 067D                _ShowShape 0727             SetPosition@x 0072  
           SetPosition@y 0074                ___latbits 0002            __pcstackBANK0 0020  
           ?_SetPosition 0070                 ?_SpiInit 0070               ?_PortBInit 0070  
           ?_SpiSendByte 0070               ?_ShowShape 0074              ??_PortBInit 0070  
            ??_ShowShape 0076             ShowShape@pos 007B     SendToSegment@segment 0071  
  __end_of_SendToSegment 06B4  

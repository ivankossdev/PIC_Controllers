

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 23 11:54:20 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    14                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41     0000                     
    42                           ; Generated 12/10/2023 GMT
    43                           ; 
    44                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F876 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76     0004                     fsr             equ	4
    77     0004                     fsr0            equ	4
    78     0000                     indf            equ	0
    79     0000                     indf0           equ	0
    80     0002                     pc              equ	2
    81     0002                     pcl             equ	2
    82     000A                     pclath          equ	10
    83     0003                     status          equ	3
    84     0000                     INDF            equ	0	;# 
    85     0001                     TMR0            equ	1	;# 
    86     0002                     PCL             equ	2	;# 
    87     0003                     STATUS          equ	3	;# 
    88     0004                     FSR             equ	4	;# 
    89     0005                     PORTA           equ	5	;# 
    90     0006                     PORTB           equ	6	;# 
    91     0007                     PORTC           equ	7	;# 
    92     000A                     PCLATH          equ	10	;# 
    93     000B                     INTCON          equ	11	;# 
    94     000C                     PIR1            equ	12	;# 
    95     000D                     PIR2            equ	13	;# 
    96     000E                     TMR1            equ	14	;# 
    97     000E                     TMR1L           equ	14	;# 
    98     000F                     TMR1H           equ	15	;# 
    99     0010                     T1CON           equ	16	;# 
   100     0011                     TMR2            equ	17	;# 
   101     0012                     T2CON           equ	18	;# 
   102     0013                     SSPBUF          equ	19	;# 
   103     0014                     SSPCON          equ	20	;# 
   104     0015                     CCPR1           equ	21	;# 
   105     0015                     CCPR1L          equ	21	;# 
   106     0016                     CCPR1H          equ	22	;# 
   107     0017                     CCP1CON         equ	23	;# 
   108     0018                     RCSTA           equ	24	;# 
   109     0019                     TXREG           equ	25	;# 
   110     001A                     RCREG           equ	26	;# 
   111     001B                     CCPR2           equ	27	;# 
   112     001B                     CCPR2L          equ	27	;# 
   113     001C                     CCPR2H          equ	28	;# 
   114     001D                     CCP2CON         equ	29	;# 
   115     001E                     ADRESH          equ	30	;# 
   116     001F                     ADCON0          equ	31	;# 
   117     0081                     OPTION_REG      equ	129	;# 
   118     0085                     TRISA           equ	133	;# 
   119     0086                     TRISB           equ	134	;# 
   120     0087                     TRISC           equ	135	;# 
   121     008C                     PIE1            equ	140	;# 
   122     008D                     PIE2            equ	141	;# 
   123     008E                     PCON            equ	142	;# 
   124     0091                     SSPCON2         equ	145	;# 
   125     0092                     PR2             equ	146	;# 
   126     0093                     SSPADD          equ	147	;# 
   127     0094                     SSPSTAT         equ	148	;# 
   128     0098                     TXSTA           equ	152	;# 
   129     0099                     SPBRG           equ	153	;# 
   130     009E                     ADRESL          equ	158	;# 
   131     009F                     ADCON1          equ	159	;# 
   132     010C                     EEDATA          equ	268	;# 
   133     010D                     EEADR           equ	269	;# 
   134     010E                     EEDATH          equ	270	;# 
   135     010F                     EEADRH          equ	271	;# 
   136     018C                     EECON1          equ	396	;# 
   137     018D                     EECON2          equ	397	;# 
   138     0000                     INDF            equ	0	;# 
   139     0001                     TMR0            equ	1	;# 
   140     0002                     PCL             equ	2	;# 
   141     0003                     STATUS          equ	3	;# 
   142     0004                     FSR             equ	4	;# 
   143     0005                     PORTA           equ	5	;# 
   144     0006                     PORTB           equ	6	;# 
   145     0007                     PORTC           equ	7	;# 
   146     000A                     PCLATH          equ	10	;# 
   147     000B                     INTCON          equ	11	;# 
   148     000C                     PIR1            equ	12	;# 
   149     000D                     PIR2            equ	13	;# 
   150     000E                     TMR1            equ	14	;# 
   151     000E                     TMR1L           equ	14	;# 
   152     000F                     TMR1H           equ	15	;# 
   153     0010                     T1CON           equ	16	;# 
   154     0011                     TMR2            equ	17	;# 
   155     0012                     T2CON           equ	18	;# 
   156     0013                     SSPBUF          equ	19	;# 
   157     0014                     SSPCON          equ	20	;# 
   158     0015                     CCPR1           equ	21	;# 
   159     0015                     CCPR1L          equ	21	;# 
   160     0016                     CCPR1H          equ	22	;# 
   161     0017                     CCP1CON         equ	23	;# 
   162     0018                     RCSTA           equ	24	;# 
   163     0019                     TXREG           equ	25	;# 
   164     001A                     RCREG           equ	26	;# 
   165     001B                     CCPR2           equ	27	;# 
   166     001B                     CCPR2L          equ	27	;# 
   167     001C                     CCPR2H          equ	28	;# 
   168     001D                     CCP2CON         equ	29	;# 
   169     001E                     ADRESH          equ	30	;# 
   170     001F                     ADCON0          equ	31	;# 
   171     0081                     OPTION_REG      equ	129	;# 
   172     0085                     TRISA           equ	133	;# 
   173     0086                     TRISB           equ	134	;# 
   174     0087                     TRISC           equ	135	;# 
   175     008C                     PIE1            equ	140	;# 
   176     008D                     PIE2            equ	141	;# 
   177     008E                     PCON            equ	142	;# 
   178     0091                     SSPCON2         equ	145	;# 
   179     0092                     PR2             equ	146	;# 
   180     0093                     SSPADD          equ	147	;# 
   181     0094                     SSPSTAT         equ	148	;# 
   182     0098                     TXSTA           equ	152	;# 
   183     0099                     SPBRG           equ	153	;# 
   184     009E                     ADRESL          equ	158	;# 
   185     009F                     ADCON1          equ	159	;# 
   186     010C                     EEDATA          equ	268	;# 
   187     010D                     EEADR           equ	269	;# 
   188     010E                     EEDATH          equ	270	;# 
   189     010F                     EEADRH          equ	271	;# 
   190     018C                     EECON1          equ	396	;# 
   191     018D                     EECON2          equ	397	;# 
   192     0000                     INDF            equ	0	;# 
   193     0001                     TMR0            equ	1	;# 
   194     0002                     PCL             equ	2	;# 
   195     0003                     STATUS          equ	3	;# 
   196     0004                     FSR             equ	4	;# 
   197     0005                     PORTA           equ	5	;# 
   198     0006                     PORTB           equ	6	;# 
   199     0007                     PORTC           equ	7	;# 
   200     000A                     PCLATH          equ	10	;# 
   201     000B                     INTCON          equ	11	;# 
   202     000C                     PIR1            equ	12	;# 
   203     000D                     PIR2            equ	13	;# 
   204     000E                     TMR1            equ	14	;# 
   205     000E                     TMR1L           equ	14	;# 
   206     000F                     TMR1H           equ	15	;# 
   207     0010                     T1CON           equ	16	;# 
   208     0011                     TMR2            equ	17	;# 
   209     0012                     T2CON           equ	18	;# 
   210     0013                     SSPBUF          equ	19	;# 
   211     0014                     SSPCON          equ	20	;# 
   212     0015                     CCPR1           equ	21	;# 
   213     0015                     CCPR1L          equ	21	;# 
   214     0016                     CCPR1H          equ	22	;# 
   215     0017                     CCP1CON         equ	23	;# 
   216     0018                     RCSTA           equ	24	;# 
   217     0019                     TXREG           equ	25	;# 
   218     001A                     RCREG           equ	26	;# 
   219     001B                     CCPR2           equ	27	;# 
   220     001B                     CCPR2L          equ	27	;# 
   221     001C                     CCPR2H          equ	28	;# 
   222     001D                     CCP2CON         equ	29	;# 
   223     001E                     ADRESH          equ	30	;# 
   224     001F                     ADCON0          equ	31	;# 
   225     0081                     OPTION_REG      equ	129	;# 
   226     0085                     TRISA           equ	133	;# 
   227     0086                     TRISB           equ	134	;# 
   228     0087                     TRISC           equ	135	;# 
   229     008C                     PIE1            equ	140	;# 
   230     008D                     PIE2            equ	141	;# 
   231     008E                     PCON            equ	142	;# 
   232     0091                     SSPCON2         equ	145	;# 
   233     0092                     PR2             equ	146	;# 
   234     0093                     SSPADD          equ	147	;# 
   235     0094                     SSPSTAT         equ	148	;# 
   236     0098                     TXSTA           equ	152	;# 
   237     0099                     SPBRG           equ	153	;# 
   238     009E                     ADRESL          equ	158	;# 
   239     009F                     ADCON1          equ	159	;# 
   240     010C                     EEDATA          equ	268	;# 
   241     010D                     EEADR           equ	269	;# 
   242     010E                     EEDATH          equ	270	;# 
   243     010F                     EEADRH          equ	271	;# 
   244     018C                     EECON1          equ	396	;# 
   245     018D                     EECON2          equ	397	;# 
   246     0000                     INDF            equ	0	;# 
   247     0001                     TMR0            equ	1	;# 
   248     0002                     PCL             equ	2	;# 
   249     0003                     STATUS          equ	3	;# 
   250     0004                     FSR             equ	4	;# 
   251     0005                     PORTA           equ	5	;# 
   252     0006                     PORTB           equ	6	;# 
   253     0007                     PORTC           equ	7	;# 
   254     000A                     PCLATH          equ	10	;# 
   255     000B                     INTCON          equ	11	;# 
   256     000C                     PIR1            equ	12	;# 
   257     000D                     PIR2            equ	13	;# 
   258     000E                     TMR1            equ	14	;# 
   259     000E                     TMR1L           equ	14	;# 
   260     000F                     TMR1H           equ	15	;# 
   261     0010                     T1CON           equ	16	;# 
   262     0011                     TMR2            equ	17	;# 
   263     0012                     T2CON           equ	18	;# 
   264     0013                     SSPBUF          equ	19	;# 
   265     0014                     SSPCON          equ	20	;# 
   266     0015                     CCPR1           equ	21	;# 
   267     0015                     CCPR1L          equ	21	;# 
   268     0016                     CCPR1H          equ	22	;# 
   269     0017                     CCP1CON         equ	23	;# 
   270     0018                     RCSTA           equ	24	;# 
   271     0019                     TXREG           equ	25	;# 
   272     001A                     RCREG           equ	26	;# 
   273     001B                     CCPR2           equ	27	;# 
   274     001B                     CCPR2L          equ	27	;# 
   275     001C                     CCPR2H          equ	28	;# 
   276     001D                     CCP2CON         equ	29	;# 
   277     001E                     ADRESH          equ	30	;# 
   278     001F                     ADCON0          equ	31	;# 
   279     0081                     OPTION_REG      equ	129	;# 
   280     0085                     TRISA           equ	133	;# 
   281     0086                     TRISB           equ	134	;# 
   282     0087                     TRISC           equ	135	;# 
   283     008C                     PIE1            equ	140	;# 
   284     008D                     PIE2            equ	141	;# 
   285     008E                     PCON            equ	142	;# 
   286     0091                     SSPCON2         equ	145	;# 
   287     0092                     PR2             equ	146	;# 
   288     0093                     SSPADD          equ	147	;# 
   289     0094                     SSPSTAT         equ	148	;# 
   290     0098                     TXSTA           equ	152	;# 
   291     0099                     SPBRG           equ	153	;# 
   292     009E                     ADRESL          equ	158	;# 
   293     009F                     ADCON1          equ	159	;# 
   294     010C                     EEDATA          equ	268	;# 
   295     010D                     EEADR           equ	269	;# 
   296     010E                     EEDATH          equ	270	;# 
   297     010F                     EEADRH          equ	271	;# 
   298     018C                     EECON1          equ	396	;# 
   299     018D                     EECON2          equ	397	;# 
   300     0000                     INDF            equ	0	;# 
   301     0001                     TMR0            equ	1	;# 
   302     0002                     PCL             equ	2	;# 
   303     0003                     STATUS          equ	3	;# 
   304     0004                     FSR             equ	4	;# 
   305     0005                     PORTA           equ	5	;# 
   306     0006                     PORTB           equ	6	;# 
   307     0007                     PORTC           equ	7	;# 
   308     000A                     PCLATH          equ	10	;# 
   309     000B                     INTCON          equ	11	;# 
   310     000C                     PIR1            equ	12	;# 
   311     000D                     PIR2            equ	13	;# 
   312     000E                     TMR1            equ	14	;# 
   313     000E                     TMR1L           equ	14	;# 
   314     000F                     TMR1H           equ	15	;# 
   315     0010                     T1CON           equ	16	;# 
   316     0011                     TMR2            equ	17	;# 
   317     0012                     T2CON           equ	18	;# 
   318     0013                     SSPBUF          equ	19	;# 
   319     0014                     SSPCON          equ	20	;# 
   320     0015                     CCPR1           equ	21	;# 
   321     0015                     CCPR1L          equ	21	;# 
   322     0016                     CCPR1H          equ	22	;# 
   323     0017                     CCP1CON         equ	23	;# 
   324     0018                     RCSTA           equ	24	;# 
   325     0019                     TXREG           equ	25	;# 
   326     001A                     RCREG           equ	26	;# 
   327     001B                     CCPR2           equ	27	;# 
   328     001B                     CCPR2L          equ	27	;# 
   329     001C                     CCPR2H          equ	28	;# 
   330     001D                     CCP2CON         equ	29	;# 
   331     001E                     ADRESH          equ	30	;# 
   332     001F                     ADCON0          equ	31	;# 
   333     0081                     OPTION_REG      equ	129	;# 
   334     0085                     TRISA           equ	133	;# 
   335     0086                     TRISB           equ	134	;# 
   336     0087                     TRISC           equ	135	;# 
   337     008C                     PIE1            equ	140	;# 
   338     008D                     PIE2            equ	141	;# 
   339     008E                     PCON            equ	142	;# 
   340     0091                     SSPCON2         equ	145	;# 
   341     0092                     PR2             equ	146	;# 
   342     0093                     SSPADD          equ	147	;# 
   343     0094                     SSPSTAT         equ	148	;# 
   344     0098                     TXSTA           equ	152	;# 
   345     0099                     SPBRG           equ	153	;# 
   346     009E                     ADRESL          equ	158	;# 
   347     009F                     ADCON1          equ	159	;# 
   348     010C                     EEDATA          equ	268	;# 
   349     010D                     EEADR           equ	269	;# 
   350     010E                     EEDATH          equ	270	;# 
   351     010F                     EEADRH          equ	271	;# 
   352     018C                     EECON1          equ	396	;# 
   353     018D                     EECON2          equ	397	;# 
   354     0000                     INDF            equ	0	;# 
   355     0001                     TMR0            equ	1	;# 
   356     0002                     PCL             equ	2	;# 
   357     0003                     STATUS          equ	3	;# 
   358     0004                     FSR             equ	4	;# 
   359     0005                     PORTA           equ	5	;# 
   360     0006                     PORTB           equ	6	;# 
   361     0007                     PORTC           equ	7	;# 
   362     000A                     PCLATH          equ	10	;# 
   363     000B                     INTCON          equ	11	;# 
   364     000C                     PIR1            equ	12	;# 
   365     000D                     PIR2            equ	13	;# 
   366     000E                     TMR1            equ	14	;# 
   367     000E                     TMR1L           equ	14	;# 
   368     000F                     TMR1H           equ	15	;# 
   369     0010                     T1CON           equ	16	;# 
   370     0011                     TMR2            equ	17	;# 
   371     0012                     T2CON           equ	18	;# 
   372     0013                     SSPBUF          equ	19	;# 
   373     0014                     SSPCON          equ	20	;# 
   374     0015                     CCPR1           equ	21	;# 
   375     0015                     CCPR1L          equ	21	;# 
   376     0016                     CCPR1H          equ	22	;# 
   377     0017                     CCP1CON         equ	23	;# 
   378     0018                     RCSTA           equ	24	;# 
   379     0019                     TXREG           equ	25	;# 
   380     001A                     RCREG           equ	26	;# 
   381     001B                     CCPR2           equ	27	;# 
   382     001B                     CCPR2L          equ	27	;# 
   383     001C                     CCPR2H          equ	28	;# 
   384     001D                     CCP2CON         equ	29	;# 
   385     001E                     ADRESH          equ	30	;# 
   386     001F                     ADCON0          equ	31	;# 
   387     0081                     OPTION_REG      equ	129	;# 
   388     0085                     TRISA           equ	133	;# 
   389     0086                     TRISB           equ	134	;# 
   390     0087                     TRISC           equ	135	;# 
   391     008C                     PIE1            equ	140	;# 
   392     008D                     PIE2            equ	141	;# 
   393     008E                     PCON            equ	142	;# 
   394     0091                     SSPCON2         equ	145	;# 
   395     0092                     PR2             equ	146	;# 
   396     0093                     SSPADD          equ	147	;# 
   397     0094                     SSPSTAT         equ	148	;# 
   398     0098                     TXSTA           equ	152	;# 
   399     0099                     SPBRG           equ	153	;# 
   400     009E                     ADRESL          equ	158	;# 
   401     009F                     ADCON1          equ	159	;# 
   402     010C                     EEDATA          equ	268	;# 
   403     010D                     EEADR           equ	269	;# 
   404     010E                     EEDATH          equ	270	;# 
   405     010F                     EEADRH          equ	271	;# 
   406     018C                     EECON1          equ	396	;# 
   407     018D                     EECON2          equ	397	;# 
   408                           
   409                           	psect	idataBANK1
   410     0ECE                     __pidataBANK1:
   411                           
   412                           ;initializer for main@F932
   413     0ECE  3407               	retlw	7
   414     0ECF  3405               	retlw	5
   415     0ED0  3402               	retlw	2
   416                           
   417                           	psect	strings
   418     0800                     __pstrings:
   419     0800                     stringtab:
   420     0800                     __stringtab:
   421     0800                     stringcode:	
   422                           ;	String table - string pointers are 1 byte each
   423                           
   424     0800                     stringdir:
   425     0800  3008               	movlw	high stringdir
   426     0801  008A               	movwf	10
   427     0802  0804               	movf	4,w
   428     0803  0A84               	incf	4,f
   429     0804  0782               	addwf	2,f
   430     0805                     __stringbase:
   431     0805  3400               	retlw	0
   432     0806                     __end_of__stringtab:
   433     0806                     ChangeOfCoordinates@delay:
   434     0806  3464               	retlw	100
   435     0807  3400               	retlw	0
   436     0808  3400               	retlw	0
   437     0809  3400               	retlw	0
   438     080A                     __end_ofChangeOfCoordinates@delay:
   439     0013                     _SSPBUF         set	19
   440     0014                     _SSPCON         set	20
   441     0005                     _PORTA          set	5
   442     0006                     _PORTB          set	6
   443     002D                     _RA5            set	45
   444     0063                     _SSPIF          set	99
   445     0094                     _SSPSTAT        set	148
   446     0085                     _TRISA          set	133
   447     0087                     _TRISC          set	135
   448     0086                     _TRISB          set	134
   449                           
   450                           	psect	cinit
   451     07D8                     start_initialization:	
   452                           ; #config settings
   453                           
   454     07D8                     __initialization:
   455                           
   456                           ; Initialize objects allocated to BANK1
   457     07D8  1683               	bsf	3,5	;RP0=1, select bank1
   458     07D9  1303               	bcf	3,6	;RP1=0, select bank1
   459     07DA  120A  158A  26CE  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   460     07DF  00B1               	movwf	__pdataBANK1& (0+127)
   461     07E0  120A  158A  26CF  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   462     07E5  00B2               	movwf	(__pdataBANK1+1)& (0+127)
   463     07E6  120A  158A  26D0  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   464     07EB  00B3               	movwf	(__pdataBANK1+2)& (0+127)
   465                           
   466                           ; Clear objects allocated to BANK1
   467     07EC  01A9               	clrf	__pbssBANK1& (0+127)
   468     07ED  01AA               	clrf	(__pbssBANK1+1)& (0+127)
   469     07EE  01AB               	clrf	(__pbssBANK1+2)& (0+127)
   470     07EF  01AC               	clrf	(__pbssBANK1+3)& (0+127)
   471     07F0  01AD               	clrf	(__pbssBANK1+4)& (0+127)
   472     07F1  01AE               	clrf	(__pbssBANK1+5)& (0+127)
   473     07F2  01AF               	clrf	(__pbssBANK1+6)& (0+127)
   474     07F3  01B0               	clrf	(__pbssBANK1+7)& (0+127)
   475                           
   476                           ; Clear objects allocated to BANK0
   477     07F4  1283               	bcf	3,5	;RP0=0, select bank0
   478     07F5  1303               	bcf	3,6	;RP1=0, select bank0
   479     07F6  01E9               	clrf	__pbssBANK0& (0+127)
   480     07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   481     07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   482     07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   483     07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   484     07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
   485     07FC                     end_of_initialization:	
   486                           ;End of C runtime variable initialization code
   487                           
   488     07FC                     __end_of__initialization:
   489     07FC  0183               	clrf	3
   490     07FD  120A  118A  2852   	ljmp	_main	;jump to C main() function
   491                           
   492                           	psect	bssBANK0
   493     0069                     __pbssBANK0:
   494     0069                     _brkp:
   495     0069                     	ds	2
   496     006B                     malloc@cur:
   497     006B                     	ds	2
   498     006D                     ___freelist:
   499     006D                     	ds	2
   500                           
   501                           	psect	bssBANK1
   502     00A9                     __pbssBANK1:
   503     00A9                     malloc@lock:
   504     00A9                     	ds	4
   505     00AD                     malloc@end:
   506     00AD                     	ds	2
   507     00AF                     _errno:
   508     00AF                     	ds	2
   509                           
   510                           	psect	dataBANK1
   511     00B1                     __pdataBANK1:
   512     00B1                     main@F932:
   513     00B1                     	ds	3
   514                           
   515                           	psect	cstackBANK1
   516     00A0                     __pcstackBANK1:
   517     00A0                     main@square_1:
   518                           
   519                           ; 3 bytes @ 0x0
   520     00A0                     	ds	3
   521     00A3                     main@countElemntArray:
   522                           
   523                           ; 2 bytes @ 0x3
   524     00A3                     	ds	2
   525     00A5                     main@shapePosition:
   526                           
   527                           ; 4 bytes @ 0x5
   528     00A5                     	ds	4
   529                           
   530                           	psect	cstackCOMMON
   531     0070                     __pcstackCOMMON:
   532     0070                     ?_SpiInit:
   533     0070                     ?_MatrixInit:	
   534                           ; 1 bytes @ 0x0
   535                           
   536     0070                     ?_PortBInit:	
   537                           ; 1 bytes @ 0x0
   538                           
   539     0070                     ?_SetPosition:	
   540                           ; 1 bytes @ 0x0
   541                           
   542     0070                     ?_CopyArray:	
   543                           ; 1 bytes @ 0x0
   544                           
   545     0070                     ?_free:	
   546                           ; 1 bytes @ 0x0
   547                           
   548     0070                     ?_Reverse:	
   549                           ; 1 bytes @ 0x0
   550                           
   551     0070                     ?_main:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     0070                     ?_SpiSendByte:	
   555                           ; 1 bytes @ 0x0
   556                           
   557     0070                     ?_SpiClearMatrix:	
   558                           ; 1 bytes @ 0x0
   559                           
   560     0070                     ?_MovieDown:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     0070                     ?_MovieUp:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     0070                     ?_MovieLeft:	
   567                           ; 1 bytes @ 0x0
   568                           
   569     0070                     ?_MovieRigth:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0070                     ?___simple_search_fl:	
   573                           ; 1 bytes @ 0x0
   574                           
   575     0070                     ?___expand_heap:	
   576                           ; 2 bytes @ 0x0
   577                           
   578     0070                     ?___wmul:	
   579                           ; 2 bytes @ 0x0
   580                           
   581     0070                     SpiSendByte@data:	
   582                           ; 2 bytes @ 0x0
   583                           
   584     0070                     ___expand_heap@pn:	
   585                           ; 1 bytes @ 0x0
   586                           
   587     0070                     SetPosition@position:	
   588                           ; 1 bytes @ 0x0
   589                           
   590     0070                     MovieDown@_shapePosition:	
   591                           ; 2 bytes @ 0x0
   592                           
   593     0070                     MovieUp@_shapePosition:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0070                     MovieLeft@_shapePosition:	
   597                           ; 2 bytes @ 0x0
   598                           
   599     0070                     MovieRigth@_shapePosition:	
   600                           ; 2 bytes @ 0x0
   601                           
   602     0070                     Reverse@array_:	
   603                           ; 2 bytes @ 0x0
   604                           
   605     0070                     CopyArray@array_:	
   606                           ; 2 bytes @ 0x0
   607                           
   608     0070                     ___wmul@multiplier:	
   609                           ; 2 bytes @ 0x0
   610                           
   611     0070                     ___simple_search_fl@n:	
   612                           ; 2 bytes @ 0x0
   613                           
   614     0070                     free@ptr:	
   615                           ; 2 bytes @ 0x0
   616                           
   617     0070                     ??_SpiInit:	
   618                           ; 2 bytes @ 0x0
   619                           
   620     0070                     ??_PortBInit:	
   621                           ; 1 bytes @ 0x0
   622                           
   623     0070                     ??_SpiSendByte:	
   624                           ; 1 bytes @ 0x0
   625                           
   626                           
   627                           ; 1 bytes @ 0x0
   628     0070                     	ds	1
   629     0071                     ?_SendToSegment:
   630     0071                     SendToSegment@segment:	
   631                           ; 1 bytes @ 0x1
   632                           
   633     0071                     ___expand_heap@n:	
   634                           ; 2 bytes @ 0x1
   635                           
   636     0071                     ??___expand_heap:	
   637                           ; 2 bytes @ 0x1
   638                           
   639                           
   640                           ; 1 bytes @ 0x1
   641     0071                     	ds	1
   642     0072                     SetPosition@x:
   643     0072                     Reverse@countElemntArray:	
   644                           ; 2 bytes @ 0x2
   645                           
   646     0072                     CopyArray@res:	
   647                           ; 2 bytes @ 0x2
   648                           
   649     0072                     ___wmul@multiplicand:	
   650                           ; 2 bytes @ 0x2
   651                           
   652     0072                     ??_free:	
   653                           ; 2 bytes @ 0x2
   654                           
   655     0072                     ??___simple_search_fl:	
   656                           ; 1 bytes @ 0x2
   657                           
   658     0072                     ??_MovieDown:	
   659                           ; 1 bytes @ 0x2
   660                           
   661     0072                     ??_MovieUp:	
   662                           ; 1 bytes @ 0x2
   663                           
   664     0072                     ??_MovieLeft:	
   665                           ; 1 bytes @ 0x2
   666                           
   667     0072                     ??_MovieRigth:	
   668                           ; 1 bytes @ 0x2
   669                           
   670                           
   671                           ; 1 bytes @ 0x2
   672     0072                     	ds	1
   673     0073                     SendToSegment@data:
   674     0073                     ___expand_heap@new_brkp:	
   675                           ; 1 bytes @ 0x3
   676                           
   677                           
   678                           ; 2 bytes @ 0x3
   679     0073                     	ds	1
   680     0074                     ?_ShowShape:
   681     0074                     SetPosition@y:	
   682                           ; 1 bytes @ 0x4
   683                           
   684     0074                     ShowShape@coord:	
   685                           ; 2 bytes @ 0x4
   686                           
   687     0074                     CopyArray@countElemntArray:	
   688                           ; 2 bytes @ 0x4
   689                           
   690     0074                     ___wmul@product:	
   691                           ; 2 bytes @ 0x4
   692                           
   693     0074                     ??_Reverse:	
   694                           ; 2 bytes @ 0x4
   695                           
   696     0074                     ??_SendToSegment:	
   697                           ; 1 bytes @ 0x4
   698                           
   699     0074                     ??_SpiClearMatrix:	
   700                           ; 1 bytes @ 0x4
   701                           
   702     0074                     ??___wmul:	
   703                           ; 1 bytes @ 0x4
   704                           
   705                           
   706                           ; 1 bytes @ 0x4
   707     0074                     	ds	2
   708     0076                     ?_memset:
   709     0076                     SpiClearMatrix@i:	
   710                           ; 2 bytes @ 0x6
   711                           
   712     0076                     ShowShape@countElemntArray:	
   713                           ; 1 bytes @ 0x6
   714                           
   715     0076                     memset@dest:	
   716                           ; 2 bytes @ 0x6
   717                           
   718     0076                     ??_SetPosition:	
   719                           ; 2 bytes @ 0x6
   720                           
   721     0076                     ??_CopyArray:	
   722                           ; 1 bytes @ 0x6
   723                           
   724                           
   725                           ; 1 bytes @ 0x6
   726     0076                     	ds	1
   727     0077                     ??_MatrixInit:
   728                           
   729                           ; 1 bytes @ 0x7
   730     0077                     	ds	1
   731     0078                     ?_malloc:
   732     0078                     ShowShape@shapeArray:	
   733                           ; 2 bytes @ 0x8
   734                           
   735     0078                     free@cptr:	
   736                           ; 2 bytes @ 0x8
   737                           
   738     0078                     malloc@n:	
   739                           ; 2 bytes @ 0x8
   740                           
   741     0078                     memset@c:	
   742                           ; 2 bytes @ 0x8
   743                           
   744                           
   745                           ; 2 bytes @ 0x8
   746     0078                     	ds	2
   747     007A                     ShowShape@_pos:
   748     007A                     free@c:	
   749                           ; 2 bytes @ 0xA
   750                           
   751     007A                     memset@n:	
   752                           ; 2 bytes @ 0xA
   753                           
   754     007A                     ??_malloc:	
   755                           ; 2 bytes @ 0xA
   756                           
   757                           
   758                           ; 1 bytes @ 0xA
   759     007A                     	ds	2
   760     007C                     ShowShape@pos:
   761     007C                     memset@p:	
   762                           ; 2 bytes @ 0xC
   763                           
   764     007C                     ??_memset:	
   765                           ; 2 bytes @ 0xC
   766                           
   767                           
   768                           ; 1 bytes @ 0xC
   769     007C                     	ds	2
   770     007E                     ??_calloc:
   771     007E                     ??_RotateDirection:	
   772                           ; 1 bytes @ 0xE
   773                           
   774     007E                     ??_main:	
   775                           ; 1 bytes @ 0xE
   776                           
   777                           
   778                           	psect	cstackBANK0
   779     0020                     __pcstackBANK0:	
   780                           ; 1 bytes @ 0xE
   781                           
   782     0020                     Reverse@t:
   783     0020                     CopyArray@y:	
   784                           ; 1 bytes @ 0x0
   785                           
   786     0020                     ___simple_search_fl@remaining_size:	
   787                           ; 2 bytes @ 0x0
   788                           
   789     0020                     ??_ShowShape:	
   790                           ; 2 bytes @ 0x0
   791                           
   792                           
   793                           ; 1 bytes @ 0x0
   794     0020                     	ds	1
   795     0021                     Reverse@i:
   796                           
   797                           ; 2 bytes @ 0x1
   798     0021                     	ds	1
   799     0022                     ___simple_search_fl@best_last:
   800                           
   801                           ; 2 bytes @ 0x2
   802     0022                     	ds	1
   803     0023                     Reverse@j:
   804                           
   805                           ; 2 bytes @ 0x3
   806     0023                     	ds	1
   807     0024                     ___simple_search_fl@split:
   808                           
   809                           ; 2 bytes @ 0x4
   810     0024                     	ds	2
   811     0026                     ?_MovieShape:
   812     0026                     MovieShape@_shapePosition:	
   813                           ; 1 bytes @ 0x6
   814                           
   815     0026                     ___simple_search_fl@last:	
   816                           ; 2 bytes @ 0x6
   817                           
   818                           
   819                           ; 2 bytes @ 0x6
   820     0026                     	ds	2
   821     0028                     MovieShape@shapeArray:
   822     0028                     ___simple_search_fl@next:	
   823                           ; 2 bytes @ 0x8
   824                           
   825                           
   826                           ; 2 bytes @ 0x8
   827     0028                     	ds	2
   828     002A                     MovieShape@countElemntArray:
   829     002A                     ___simple_search_fl@c:	
   830                           ; 2 bytes @ 0xA
   831                           
   832                           
   833                           ; 2 bytes @ 0xA
   834     002A                     	ds	2
   835     002C                     ___simple_search_fl@best:
   836     002C                     ??_MovieShape:	
   837                           ; 2 bytes @ 0xC
   838                           
   839                           
   840                           ; 1 bytes @ 0xC
   841     002C                     	ds	2
   842     002E                     MovieShape@dir:
   843     002E                     malloc@m:	
   844                           ; 1 bytes @ 0xE
   845                           
   846                           
   847                           ; 2 bytes @ 0xE
   848     002E                     	ds	2
   849     0030                     malloc@sz:
   850                           
   851                           ; 2 bytes @ 0x10
   852     0030                     	ds	2
   853     0032                     malloc@size:
   854                           
   855                           ; 2 bytes @ 0x12
   856     0032                     	ds	2
   857     0034                     malloc@p:
   858                           
   859                           ; 2 bytes @ 0x14
   860     0034                     	ds	2
   861     0036                     malloc@new:
   862                           
   863                           ; 2 bytes @ 0x16
   864     0036                     	ds	2
   865     0038                     ?_calloc:
   866     0038                     calloc@nmemb:	
   867                           ; 2 bytes @ 0x18
   868                           
   869                           
   870                           ; 2 bytes @ 0x18
   871     0038                     	ds	2
   872     003A                     calloc@size:
   873                           
   874                           ; 2 bytes @ 0x1A
   875     003A                     	ds	2
   876     003C                     calloc@new_ptr:
   877                           
   878                           ; 2 bytes @ 0x1C
   879     003C                     	ds	2
   880     003E                     ?_Rotate:
   881     003E                     Rotate@array_:	
   882                           ; 1 bytes @ 0x1E
   883                           
   884                           
   885                           ; 2 bytes @ 0x1E
   886     003E                     	ds	2
   887     0040                     Rotate@countElemntArray:
   888                           
   889                           ; 2 bytes @ 0x20
   890     0040                     	ds	2
   891     0042                     ??_Rotate:
   892                           
   893                           ; 1 bytes @ 0x22
   894     0042                     	ds	9
   895     004B                     Rotate@x:
   896                           
   897                           ; 2 bytes @ 0x2B
   898     004B                     	ds	2
   899     004D                     Rotate@i:
   900                           
   901                           ; 2 bytes @ 0x2D
   902     004D                     	ds	2
   903     004F                     Rotate@res:
   904                           
   905                           ; 2 bytes @ 0x2F
   906     004F                     	ds	2
   907     0051                     Rotate@_i:
   908                           
   909                           ; 2 bytes @ 0x31
   910     0051                     	ds	2
   911     0053                     ?_RotateDirection:
   912     0053                     RotateDirection@step:	
   913                           ; 1 bytes @ 0x33
   914                           
   915                           
   916                           ; 2 bytes @ 0x33
   917     0053                     	ds	2
   918     0055                     RotateDirection@array_:
   919                           
   920                           ; 2 bytes @ 0x35
   921     0055                     	ds	2
   922     0057                     RotateDirection@_countElemntArray:
   923                           
   924                           ; 2 bytes @ 0x37
   925     0057                     	ds	2
   926     0059                     RotateDirection@i:
   927                           
   928                           ; 2 bytes @ 0x39
   929     0059                     	ds	2
   930     005B                     ?_ChangeOfCoordinates:
   931     005B                     ChangeOfCoordinates@_shapePosition:	
   932                           ; 1 bytes @ 0x3B
   933                           
   934                           
   935                           ; 2 bytes @ 0x3B
   936     005B                     	ds	2
   937     005D                     ChangeOfCoordinates@_figure:
   938                           
   939                           ; 1 bytes @ 0x3D
   940     005D                     	ds	1
   941     005E                     ChangeOfCoordinates@_countElemntArray:
   942                           
   943                           ; 2 bytes @ 0x3E
   944     005E                     	ds	2
   945     0060                     ??_ChangeOfCoordinates:
   946                           
   947                           ; 1 bytes @ 0x40
   948     0060                     	ds	3
   949     0063                     ChangeOfCoordinates@i:
   950                           
   951                           ; 2 bytes @ 0x43
   952     0063                     	ds	2
   953     0065                     ChangeOfCoordinates@step:
   954                           
   955                           ; 2 bytes @ 0x45
   956     0065                     	ds	2
   957     0067                     ChangeOfCoordinates@rotateArray:
   958                           
   959                           ; 2 bytes @ 0x47
   960     0067                     	ds	2
   961                           
   962                           	psect	maintext
   963     0052                     __pmaintext:	
   964 ;;
   965 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   966 ;;
   967 ;; *************** function _main *****************
   968 ;; Defined at:
   969 ;;		line 22 in file "main.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;		None
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  shapePositio    4    5[BANK1 ] struct .
   974 ;;  square_1        3    0[BANK1 ] unsigned char [3]
   975 ;;  countElemntA    2    3[BANK1 ] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : B00/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   985 ;;      Params:         0       0       0       0       0
   986 ;;      Locals:         0       0       9       0       0
   987 ;;      Temps:          0       0       0       0       0
   988 ;;      Totals:         0       0       9       0       0
   989 ;;Total ram usage:        9 bytes
   990 ;; Hardware stack levels required when called: 6
   991 ;; This function calls:
   992 ;;		_ChangeOfCoordinates
   993 ;;		_MatrixInit
   994 ;;		_PortBInit
   995 ;;		_SetPosition
   996 ;;		_SpiInit
   997 ;; This function is called by:
   998 ;;		Startup code after reset
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002     0052                     _main:	
  1003                           ;psect for function _main
  1004                           
  1005     0052                     l1679:	
  1006                           ;incstack = 0
  1007                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1008                           
  1009                           
  1010                           ;main.c: 23:     SpiInit();
  1011     0052  120A  158A  26F8  120A  118A  	fcall	_SpiInit
  1012                           
  1013                           ;main.c: 24:     MatrixInit();
  1014     0057  120A  158A  27C0  120A  118A  	fcall	_MatrixInit
  1015     005C                     l1681:
  1016                           
  1017                           ;main.c: 25:     PortBInit();
  1018     005C  120A  118A  2005  120A  118A  	fcall	_PortBInit
  1019                           
  1020                           ;main.c: 27:     TCoord shapePosition;;main.c: 28:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
  1021     0061  1683               	bsf	3,5	;RP0=1, select bank1
  1022     0062  1303               	bcf	3,6	;RP1=0, select bank1
  1023     0063  0831               	movf	main@F932^(0+128),w
  1024     0064  00A0               	movwf	main@square_1^(0+128)
  1025     0065  0832               	movf	(main@F932+1)^(0+128),w
  1026     0066  00A1               	movwf	(main@square_1+1)^(0+128)
  1027     0067  0833               	movf	(main@F932+2)^(0+128),w
  1028     0068  00A2               	movwf	(main@square_1+2)^(0+128)
  1029                           
  1030                           ;main.c: 29:     int countElemntArray = 3;
  1031     0069  3003               	movlw	3
  1032     006A  00A3               	movwf	main@countElemntArray^(0+128)
  1033     006B  3000               	movlw	0
  1034     006C  00A4               	movwf	(main@countElemntArray^(0+128)+1)
  1035     006D                     l1683:
  1036                           
  1037                           ;main.c: 32:         SetPosition(&shapePosition, 0, 0);
  1038     006D  30A5               	movlw	low main@shapePosition
  1039     006E  00F0               	movwf	SetPosition@position
  1040     006F  3000               	movlw	high main@shapePosition
  1041     0070  00F1               	movwf	SetPosition@position+1
  1042     0071  3000               	movlw	0
  1043     0072  00F2               	movwf	SetPosition@x
  1044     0073  00F3               	movwf	SetPosition@x+1
  1045     0074  3000               	movlw	0
  1046     0075  00F4               	movwf	SetPosition@y
  1047     0076  00F5               	movwf	SetPosition@y+1
  1048     0077  120A  158A  275F  120A  118A  	fcall	_SetPosition
  1049     007C                     l1685:
  1050                           
  1051                           ;main.c: 33:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray);
  1052     007C  30A5               	movlw	low main@shapePosition
  1053     007D  1283               	bcf	3,5	;RP0=0, select bank0
  1054     007E  1303               	bcf	3,6	;RP1=0, select bank0
  1055     007F  00DB               	movwf	ChangeOfCoordinates@_shapePosition
  1056     0080  3000               	movlw	high main@shapePosition
  1057     0081  00DC               	movwf	ChangeOfCoordinates@_shapePosition+1
  1058     0082  30A0               	movlw	(low (main@square_1| 0))& (0+255)
  1059     0083  00DD               	movwf	ChangeOfCoordinates@_figure
  1060     0084  1683               	bsf	3,5	;RP0=1, select bank1
  1061     0085  1303               	bcf	3,6	;RP1=0, select bank1
  1062     0086  0824               	movf	(main@countElemntArray+1)^(0+128),w
  1063     0087  1283               	bcf	3,5	;RP0=0, select bank0
  1064     0088  1303               	bcf	3,6	;RP1=0, select bank0
  1065     0089  00DF               	movwf	ChangeOfCoordinates@_countElemntArray+1
  1066     008A  1683               	bsf	3,5	;RP0=1, select bank1
  1067     008B  1303               	bcf	3,6	;RP1=0, select bank1
  1068     008C  0823               	movf	main@countElemntArray^(0+128),w
  1069     008D  1283               	bcf	3,5	;RP0=0, select bank0
  1070     008E  1303               	bcf	3,6	;RP1=0, select bank0
  1071     008F  00DE               	movwf	ChangeOfCoordinates@_countElemntArray
  1072     0090  120A  118A  247C  120A  118A  	fcall	_ChangeOfCoordinates
  1073     0095  286D               	goto	l1683
  1074     0096  120A  118A  2800   	ljmp	start
  1075     0099                     __end_of_main:
  1076                           
  1077                           	psect	text1
  1078     0EF8                     __ptext1:	
  1079 ;; *************** function _SpiInit *****************
  1080 ;; Defined at:
  1081 ;;		line 9 in file "spi.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1095 ;;      Params:         0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0
  1098 ;;      Totals:         0       0       0       0       0
  1099 ;;Total ram usage:        0 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; This function calls:
  1102 ;;		Nothing
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108     0EF8                     _SpiInit:	
  1109                           ;psect for function _SpiInit
  1110                           
  1111     0EF8                     l1613:	
  1112                           ;incstack = 0
  1113                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
  1114                           
  1115                           
  1116                           ;spi.c: 10:     TRISC |= 0x10;
  1117     0EF8  1683               	bsf	3,5	;RP0=1, select bank1
  1118     0EF9  1303               	bcf	3,6	;RP1=0, select bank1
  1119     0EFA  1607               	bsf	7,4	;volatile
  1120     0EFB                     l1615:
  1121                           
  1122                           ;spi.c: 11:     TRISC &= ~0x28;
  1123     0EFB  30D7               	movlw	215
  1124     0EFC  0587               	andwf	7,f	;volatile
  1125                           
  1126                           ;spi.c: 12:     TRISA &= ~0x20;
  1127     0EFD  30DF               	movlw	223
  1128     0EFE  0585               	andwf	5,f	;volatile
  1129                           
  1130                           ;spi.c: 13:     PORTA &= ~0x20;
  1131     0EFF  30DF               	movlw	223
  1132     0F00  1283               	bcf	3,5	;RP0=0, select bank0
  1133     0F01  1303               	bcf	3,6	;RP1=0, select bank0
  1134     0F02  0585               	andwf	5,f	;volatile
  1135     0F03                     l1617:
  1136                           
  1137                           ;spi.c: 14:     SSPCON = 0x30;
  1138     0F03  3030               	movlw	48
  1139     0F04  0094               	movwf	20	;volatile
  1140     0F05                     l1619:
  1141                           
  1142                           ;spi.c: 15:     SSPSTAT = 0x80;
  1143     0F05  3080               	movlw	128
  1144     0F06  1683               	bsf	3,5	;RP0=1, select bank1
  1145     0F07  1303               	bcf	3,6	;RP1=0, select bank1
  1146     0F08  0094               	movwf	20	;volatile
  1147     0F09                     l85:
  1148     0F09  0008               	return
  1149     0F0A                     __end_of_SpiInit:
  1150                           
  1151                           	psect	text2
  1152     0F5F                     __ptext2:	
  1153 ;; *************** function _SetPosition *****************
  1154 ;; Defined at:
  1155 ;;		line 3 in file "shape.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  position        2    0[COMMON] PTR struct .
  1158 ;;		 -> main@shapePosition(4), 
  1159 ;;  x               2    2[COMMON] int 
  1160 ;;  y               2    4[COMMON] int 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         6       0       0       0       0
  1173 ;;      Locals:         0       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0
  1175 ;;      Totals:         8       0       0       0       0
  1176 ;;Total ram usage:        8 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185     0F5F                     _SetPosition:	
  1186                           ;psect for function _SetPosition
  1187                           
  1188     0F5F                     l1637:	
  1189                           ;incstack = 0
  1190                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1191                           
  1192                           
  1193                           ;shape.c: 4:     position->x = x;
  1194     0F5F  0870               	movf	SetPosition@position,w
  1195     0F60  0084               	movwf	4
  1196     0F61  1783               	bsf	3,7
  1197     0F62  1C71               	btfss	SetPosition@position+1,0
  1198     0F63  1383               	bcf	3,7
  1199     0F64  0872               	movf	SetPosition@x,w
  1200     0F65  0080               	movwf	0
  1201     0F66  0A84               	incf	4,f
  1202     0F67  0873               	movf	SetPosition@x+1,w
  1203     0F68  0080               	movwf	0
  1204     0F69                     l1639:
  1205                           
  1206                           ;shape.c: 5:     position->y = y;
  1207     0F69  0870               	movf	SetPosition@position,w
  1208     0F6A  3E02               	addlw	2
  1209     0F6B  00F6               	movwf	??_SetPosition
  1210     0F6C  0871               	movf	SetPosition@position+1,w
  1211     0F6D  1803               	skipnc
  1212     0F6E  3E01               	addlw	1
  1213     0F6F  3E00               	addlw	0
  1214     0F70  00F7               	movwf	??_SetPosition+1
  1215     0F71  0876               	movf	??_SetPosition,w
  1216     0F72  0084               	movwf	4
  1217     0F73  1783               	bsf	3,7
  1218     0F74  1C77               	btfss	??_SetPosition+1,0
  1219     0F75  1383               	bcf	3,7
  1220     0F76  0874               	movf	SetPosition@y,w
  1221     0F77  0080               	movwf	0
  1222     0F78  0A84               	incf	4,f
  1223     0F79  0875               	movf	SetPosition@y+1,w
  1224     0F7A  0080               	movwf	0
  1225     0F7B                     l123:
  1226     0F7B  0008               	return
  1227     0F7C                     __end_of_SetPosition:
  1228                           
  1229                           	psect	text3
  1230     0005                     __ptext3:	
  1231 ;; *************** function _PortBInit *****************
  1232 ;; Defined at:
  1233 ;;		line 13 in file "portsinit.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		status,2
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1247 ;;      Params:         0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used: 1
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260     0005                     _PortBInit:	
  1261                           ;psect for function _PortBInit
  1262                           
  1263     0005                     l1635:	
  1264                           ;incstack = 0
  1265                           ; Regs used in _PortBInit: [status,2]
  1266                           
  1267                           
  1268                           ;portsinit.c: 14:     TRISB = 0x00;
  1269     0005  1683               	bsf	3,5	;RP0=1, select bank1
  1270     0006  1303               	bcf	3,6	;RP1=0, select bank1
  1271     0007  0186               	clrf	6	;volatile
  1272                           
  1273                           ;portsinit.c: 15:     PORTB = 0x00;
  1274     0008  1283               	bcf	3,5	;RP0=0, select bank0
  1275     0009  1303               	bcf	3,6	;RP1=0, select bank0
  1276     000A  0186               	clrf	6	;volatile
  1277     000B                     l68:
  1278     000B  0008               	return
  1279     000C                     __end_of_PortBInit:
  1280                           
  1281                           	psect	text4
  1282     0FC0                     __ptext4:	
  1283 ;; *************** function _MatrixInit *****************
  1284 ;; Defined at:
  1285 ;;		line 20 in file "matrix.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, pclath, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1299 ;;      Params:         0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0
  1301 ;;      Temps:          3       0       0       0       0
  1302 ;;      Totals:         3       0       0       0       0
  1303 ;;Total ram usage:        3 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; Hardware stack levels required when called: 3
  1306 ;; This function calls:
  1307 ;;		_SendToSegment
  1308 ;;		_SpiClearMatrix
  1309 ;; This function is called by:
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314     0FC0                     _MatrixInit:	
  1315                           ;psect for function _MatrixInit
  1316                           
  1317     0FC0                     l1621:	
  1318                           ;incstack = 0
  1319                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1320                           
  1321                           
  1322                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1323     0FC0  3003               	movlw	3
  1324     0FC1  00F9               	movwf	??_MatrixInit+2
  1325     0FC2  3008               	movlw	8
  1326     0FC3  00F8               	movwf	??_MatrixInit+1
  1327     0FC4  3077               	movlw	119
  1328     0FC5  00F7               	movwf	??_MatrixInit
  1329     0FC6                     u1097:
  1330     0FC6  0BF7               	decfsz	??_MatrixInit,f
  1331     0FC7  2FC6               	goto	u1097
  1332     0FC8  0BF8               	decfsz	??_MatrixInit+1,f
  1333     0FC9  2FC6               	goto	u1097
  1334     0FCA  0BF9               	decfsz	??_MatrixInit+2,f
  1335     0FCB  2FC6               	goto	u1097
  1336     0FCC                     l1623:
  1337                           
  1338                           ;matrix.c: 22:     RA5=1;
  1339     0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  1340     0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  1341     0FCE  1685               	bsf	5,5	;volatile
  1342     0FCF                     l1625:
  1343                           
  1344                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1345     0FCF  3009               	movlw	9
  1346     0FD0  00F1               	movwf	SendToSegment@segment
  1347     0FD1  3000               	movlw	0
  1348     0FD2  00F2               	movwf	SendToSegment@segment+1
  1349     0FD3  01F3               	clrf	SendToSegment@data
  1350     0FD4  120A  158A  271D  120A  158A  	fcall	_SendToSegment
  1351     0FD9                     l1627:
  1352                           
  1353                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1354     0FD9  300B               	movlw	11
  1355     0FDA  00F1               	movwf	SendToSegment@segment
  1356     0FDB  3000               	movlw	0
  1357     0FDC  00F2               	movwf	SendToSegment@segment+1
  1358     0FDD  3007               	movlw	7
  1359     0FDE  00F3               	movwf	SendToSegment@data
  1360     0FDF  120A  158A  271D  120A  158A  	fcall	_SendToSegment
  1361     0FE4                     l1629:
  1362                           
  1363                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1364     0FE4  300A               	movlw	10
  1365     0FE5  00F1               	movwf	SendToSegment@segment
  1366     0FE6  3000               	movlw	0
  1367     0FE7  00F2               	movwf	SendToSegment@segment+1
  1368     0FE8  3002               	movlw	2
  1369     0FE9  00F3               	movwf	SendToSegment@data
  1370     0FEA  120A  158A  271D  120A  158A  	fcall	_SendToSegment
  1371     0FEF                     l1631:
  1372                           
  1373                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1374     0FEF  300C               	movlw	12
  1375     0FF0  00F1               	movwf	SendToSegment@segment
  1376     0FF1  3000               	movlw	0
  1377     0FF2  00F2               	movwf	SendToSegment@segment+1
  1378     0FF3  01F3               	clrf	SendToSegment@data
  1379     0FF4  0AF3               	incf	SendToSegment@data,f
  1380     0FF5  120A  158A  271D  120A  158A  	fcall	_SendToSegment
  1381     0FFA                     l1633:
  1382                           
  1383                           ;matrix.c: 27:     SpiClearMatrix();
  1384     0FFA  120A  158A  2730  120A  158A  	fcall	_SpiClearMatrix
  1385     0FFF                     l107:
  1386     0FFF  0008               	return
  1387     1000                     __end_of_MatrixInit:
  1388                           
  1389                           	psect	text5
  1390     047C                     __ptext5:	
  1391 ;; *************** function _ChangeOfCoordinates *****************
  1392 ;; Defined at:
  1393 ;;		line 39 in file "main.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  _shapePositi    2   59[BANK0 ] PTR struct .
  1396 ;;		 -> main@shapePosition(4), 
  1397 ;;  _figure         1   61[BANK0 ] PTR unsigned char 
  1398 ;;		 -> main@square_1(3), 
  1399 ;;  _countElemnt    2   62[BANK0 ] int 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  i               2   67[BANK0 ] int 
  1402 ;;  rotateArray     2   71[BANK0 ] PTR unsigned char 
  1403 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1404 ;;  step            2   69[BANK0 ] int 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1414 ;;      Params:         0       5       0       0       0
  1415 ;;      Locals:         0       6       0       0       0
  1416 ;;      Temps:          0       3       0       0       0
  1417 ;;      Totals:         0      14       0       0       0
  1418 ;;Total ram usage:       14 bytes
  1419 ;; Hardware stack levels used: 1
  1420 ;; Hardware stack levels required when called: 5
  1421 ;; This function calls:
  1422 ;;		_CopyArray
  1423 ;;		_MovieShape
  1424 ;;		_RotateDirection
  1425 ;;		_calloc
  1426 ;;		_free
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432     047C                     _ChangeOfCoordinates:	
  1433                           ;psect for function _ChangeOfCoordinates
  1434                           
  1435     047C                     l1641:	
  1436                           ;incstack = 0
  1437                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1438                           
  1439                           
  1440                           ;main.c: 40:     const unsigned long delay = 100;;main.c: 41:     char * rotateArray = c
      +                          alloc((size_t)_countElemntArray, sizeof(char));
  1441     047C  1283               	bcf	3,5	;RP0=0, select bank0
  1442     047D  1303               	bcf	3,6	;RP1=0, select bank0
  1443     047E  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1444     047F  00B9               	movwf	calloc@nmemb+1
  1445     0480  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1446     0481  00B8               	movwf	calloc@nmemb
  1447     0482  3001               	movlw	1
  1448     0483  00BA               	movwf	calloc@size
  1449     0484  3000               	movlw	0
  1450     0485  00BB               	movwf	calloc@size+1
  1451     0486  120A  118A  2099  120A  118A  	fcall	_calloc
  1452     048B  1283               	bcf	3,5	;RP0=0, select bank0
  1453     048C  1303               	bcf	3,6	;RP1=0, select bank0
  1454     048D  0838               	movf	?_calloc,w
  1455     048E  00E7               	movwf	ChangeOfCoordinates@rotateArray
  1456     048F  0839               	movf	?_calloc+1,w
  1457     0490  00E8               	movwf	ChangeOfCoordinates@rotateArray+1
  1458                           
  1459                           ;main.c: 42:     CopyArray(rotateArray, _figure, _countElemntArray);
  1460     0491  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1461     0492  00F0               	movwf	CopyArray@array_
  1462     0493  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1463     0494  00F1               	movwf	CopyArray@array_+1
  1464     0495  085D               	movf	ChangeOfCoordinates@_figure,w
  1465     0496  00F2               	movwf	CopyArray@res
  1466     0497  3000               	movlw	0
  1467     0498  00F3               	movwf	CopyArray@res+1
  1468     0499  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1469     049A  00F5               	movwf	CopyArray@countElemntArray+1
  1470     049B  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1471     049C  00F4               	movwf	CopyArray@countElemntArray
  1472     049D  120A  118A  200C  120A  118A  	fcall	_CopyArray
  1473     04A2                     l1643:
  1474                           
  1475                           ;main.c: 44:     int step = 0;
  1476     04A2  1283               	bcf	3,5	;RP0=0, select bank0
  1477     04A3  1303               	bcf	3,6	;RP1=0, select bank0
  1478     04A4  01E5               	clrf	ChangeOfCoordinates@step
  1479     04A5  01E6               	clrf	ChangeOfCoordinates@step+1
  1480     04A6                     l1645:
  1481                           
  1482                           ;main.c: 46:             for(int i = 0; i < 5; i++){
  1483     04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1484     04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1485     04A8  01E3               	clrf	ChangeOfCoordinates@i
  1486     04A9  01E4               	clrf	ChangeOfCoordinates@i+1
  1487     04AA  2CF7               	goto	l1661
  1488     04AB                     l1651:
  1489                           
  1490                           ;main.c: 49:                         MovieShape(right, _shapePosition, rotateArray, _cou
      +                          ntElemntArray);
  1491     04AB  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1492     04AC  00A6               	movwf	MovieShape@_shapePosition
  1493     04AD  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1494     04AE  00A7               	movwf	MovieShape@_shapePosition+1
  1495     04AF  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1496     04B0  00A8               	movwf	MovieShape@shapeArray
  1497     04B1  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1498     04B2  00A9               	movwf	MovieShape@shapeArray+1
  1499     04B3  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1500     04B4  00AB               	movwf	MovieShape@countElemntArray+1
  1501     04B5  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1502     04B6  00AA               	movwf	MovieShape@countElemntArray
  1503     04B7  3003               	movlw	3
  1504     04B8  120A  118A  212E  120A  118A  	fcall	_MovieShape
  1505                           
  1506                           ;main.c: 50:                         break;
  1507     04BD  2D0C               	goto	l1663
  1508     04BE                     l1653:
  1509                           
  1510                           ;main.c: 52:                         MovieShape(down, _shapePosition, rotateArray, _coun
      +                          tElemntArray);
  1511     04BE  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1512     04BF  00A6               	movwf	MovieShape@_shapePosition
  1513     04C0  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1514     04C1  00A7               	movwf	MovieShape@_shapePosition+1
  1515     04C2  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1516     04C3  00A8               	movwf	MovieShape@shapeArray
  1517     04C4  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1518     04C5  00A9               	movwf	MovieShape@shapeArray+1
  1519     04C6  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1520     04C7  00AB               	movwf	MovieShape@countElemntArray+1
  1521     04C8  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1522     04C9  00AA               	movwf	MovieShape@countElemntArray
  1523     04CA  3000               	movlw	0
  1524     04CB  120A  118A  212E  120A  118A  	fcall	_MovieShape
  1525                           
  1526                           ;main.c: 53:                         break;
  1527     04D0  2D0C               	goto	l1663
  1528     04D1                     l1655:
  1529                           
  1530                           ;main.c: 55:                         MovieShape(left, _shapePosition, rotateArray, _coun
      +                          tElemntArray);
  1531     04D1  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1532     04D2  00A6               	movwf	MovieShape@_shapePosition
  1533     04D3  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1534     04D4  00A7               	movwf	MovieShape@_shapePosition+1
  1535     04D5  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1536     04D6  00A8               	movwf	MovieShape@shapeArray
  1537     04D7  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1538     04D8  00A9               	movwf	MovieShape@shapeArray+1
  1539     04D9  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1540     04DA  00AB               	movwf	MovieShape@countElemntArray+1
  1541     04DB  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1542     04DC  00AA               	movwf	MovieShape@countElemntArray
  1543     04DD  3002               	movlw	2
  1544     04DE  120A  118A  212E  120A  118A  	fcall	_MovieShape
  1545                           
  1546                           ;main.c: 56:                         break;
  1547     04E3  2D0C               	goto	l1663
  1548     04E4                     l1657:
  1549                           
  1550                           ;main.c: 58:                         MovieShape(up, _shapePosition, rotateArray, _countE
      +                          lemntArray);
  1551     04E4  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1552     04E5  00A6               	movwf	MovieShape@_shapePosition
  1553     04E6  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1554     04E7  00A7               	movwf	MovieShape@_shapePosition+1
  1555     04E8  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1556     04E9  00A8               	movwf	MovieShape@shapeArray
  1557     04EA  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1558     04EB  00A9               	movwf	MovieShape@shapeArray+1
  1559     04EC  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1560     04ED  00AB               	movwf	MovieShape@countElemntArray+1
  1561     04EE  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1562     04EF  00AA               	movwf	MovieShape@countElemntArray
  1563     04F0  3001               	movlw	1
  1564     04F1  120A  118A  212E  120A  118A  	fcall	_MovieShape
  1565                           
  1566                           ;main.c: 59:                         break;
  1567     04F6  2D0C               	goto	l1663
  1568     04F7                     l1661:
  1569                           
  1570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1571                           ; Switch size 1, requested type "simple"
  1572                           ; Number of cases is 1, Range of values is 0 to 0
  1573                           ; switch strategies available:
  1574                           ; Name         Instructions Cycles
  1575                           ; simple_byte            4     3 (average)
  1576                           ; direct_byte           11     8 (fixed)
  1577                           ; jumptable            260     6 (fixed)
  1578                           ;	Chosen strategy is simple_byte
  1579     04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1580     04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1581     04F9  0866               	movf	ChangeOfCoordinates@step+1,w
  1582     04FA  3A00               	xorlw	0	; case 0
  1583     04FB  1903               	skipnz
  1584     04FC  2CFE               	goto	l1757
  1585     04FD  2D0C               	goto	l1663
  1586     04FE                     l1757:
  1587                           
  1588                           ; Switch size 1, requested type "simple"
  1589                           ; Number of cases is 4, Range of values is 0 to 3
  1590                           ; switch strategies available:
  1591                           ; Name         Instructions Cycles
  1592                           ; simple_byte           13     7 (average)
  1593                           ; direct_byte           20     8 (fixed)
  1594                           ; jumptable            260     6 (fixed)
  1595                           ;	Chosen strategy is simple_byte
  1596     04FE  0865               	movf	ChangeOfCoordinates@step,w
  1597     04FF  3A00               	xorlw	0	; case 0
  1598     0500  1903               	skipnz
  1599     0501  2CAB               	goto	l1651
  1600     0502  3A01               	xorlw	1	; case 1
  1601     0503  1903               	skipnz
  1602     0504  2CBE               	goto	l1653
  1603     0505  3A03               	xorlw	3	; case 2
  1604     0506  1903               	skipnz
  1605     0507  2CD1               	goto	l1655
  1606     0508  3A01               	xorlw	1	; case 3
  1607     0509  1903               	skipnz
  1608     050A  2CE4               	goto	l1657
  1609     050B  2D0C               	goto	l1663
  1610     050C                     l1663:
  1611                           
  1612                           ;main.c: 61:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1613     050C  3003               	movlw	3
  1614     050D  1283               	bcf	3,5	;RP0=0, select bank0
  1615     050E  1303               	bcf	3,6	;RP1=0, select bank0
  1616     050F  00E2               	movwf	??_ChangeOfCoordinates+2
  1617     0510  3008               	movlw	8
  1618     0511  00E1               	movwf	??_ChangeOfCoordinates+1
  1619     0512  3076               	movlw	118
  1620     0513  00E0               	movwf	??_ChangeOfCoordinates
  1621     0514                     u1107:
  1622     0514  0BE0               	decfsz	??_ChangeOfCoordinates,f
  1623     0515  2D14               	goto	u1107
  1624     0516  0BE1               	decfsz	??_ChangeOfCoordinates+1,f
  1625     0517  2D14               	goto	u1107
  1626     0518  0BE2               	decfsz	??_ChangeOfCoordinates+2,f
  1627     0519  2D14               	goto	u1107
  1628     051A  0000               	nop
  1629                           
  1630                           ;main.c: 63:             }
  1631     051B  3001               	movlw	1
  1632     051C  1283               	bcf	3,5	;RP0=0, select bank0
  1633     051D  1303               	bcf	3,6	;RP1=0, select bank0
  1634     051E  07E3               	addwf	ChangeOfCoordinates@i,f
  1635     051F  1803               	skipnc
  1636     0520  0AE4               	incf	ChangeOfCoordinates@i+1,f
  1637     0521  3000               	movlw	0
  1638     0522  07E4               	addwf	ChangeOfCoordinates@i+1,f
  1639     0523                     l1665:
  1640     0523  0864               	movf	ChangeOfCoordinates@i+1,w
  1641     0524  3A80               	xorlw	128
  1642     0525  00FF               	movwf	btemp+1
  1643     0526  3080               	movlw	128
  1644     0527  027F               	subwf	btemp+1,w
  1645     0528  1D03               	skipz
  1646     0529  2D2C               	goto	u1075
  1647     052A  3005               	movlw	5
  1648     052B  0263               	subwf	ChangeOfCoordinates@i,w
  1649     052C                     u1075:
  1650     052C  1C03               	skipc
  1651     052D  2D2F               	goto	u1071
  1652     052E  2D30               	goto	u1070
  1653     052F                     u1071:
  1654     052F  2CF7               	goto	l1661
  1655     0530                     u1070:
  1656     0530                     l1667:
  1657                           
  1658                           ;main.c: 64:             RotateDirection(step, rotateArray, _countElemntArray);
  1659     0530  1283               	bcf	3,5	;RP0=0, select bank0
  1660     0531  1303               	bcf	3,6	;RP1=0, select bank0
  1661     0532  0866               	movf	ChangeOfCoordinates@step+1,w
  1662     0533  00D4               	movwf	RotateDirection@step+1
  1663     0534  0865               	movf	ChangeOfCoordinates@step,w
  1664     0535  00D3               	movwf	RotateDirection@step
  1665     0536  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1666     0537  00D5               	movwf	RotateDirection@array_
  1667     0538  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1668     0539  00D6               	movwf	RotateDirection@array_+1
  1669     053A  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1670     053B  00D8               	movwf	RotateDirection@_countElemntArray+1
  1671     053C  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1672     053D  00D7               	movwf	RotateDirection@_countElemntArray
  1673     053E  120A  118A  218C  120A  118A  	fcall	_RotateDirection
  1674     0543                     l1669:
  1675                           
  1676                           ;main.c: 65:             step++;
  1677     0543  3001               	movlw	1
  1678     0544  1283               	bcf	3,5	;RP0=0, select bank0
  1679     0545  1303               	bcf	3,6	;RP1=0, select bank0
  1680     0546  07E5               	addwf	ChangeOfCoordinates@step,f
  1681     0547  1803               	skipnc
  1682     0548  0AE6               	incf	ChangeOfCoordinates@step+1,f
  1683     0549  3000               	movlw	0
  1684     054A  07E6               	addwf	ChangeOfCoordinates@step+1,f
  1685     054B                     l1671:
  1686                           
  1687                           ;main.c: 66:         } while(step < 4);
  1688     054B  0866               	movf	ChangeOfCoordinates@step+1,w
  1689     054C  3A80               	xorlw	128
  1690     054D  00FF               	movwf	btemp+1
  1691     054E  3080               	movlw	128
  1692     054F  027F               	subwf	btemp+1,w
  1693     0550  1D03               	skipz
  1694     0551  2D54               	goto	u1085
  1695     0552  3004               	movlw	4
  1696     0553  0265               	subwf	ChangeOfCoordinates@step,w
  1697     0554                     u1085:
  1698     0554  1C03               	skipc
  1699     0555  2D57               	goto	u1081
  1700     0556  2D58               	goto	u1080
  1701     0557                     u1081:
  1702     0557  2CA6               	goto	l1645
  1703     0558                     u1080:
  1704     0558                     l1673:
  1705                           
  1706                           ;main.c: 68:         free(rotateArray);
  1707     0558  1283               	bcf	3,5	;RP0=0, select bank0
  1708     0559  1303               	bcf	3,6	;RP1=0, select bank0
  1709     055A  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1710     055B  00F0               	movwf	free@ptr
  1711     055C  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1712     055D  00F1               	movwf	free@ptr+1
  1713     055E  120A  118A  2564  120A  118A  	fcall	_free
  1714     0563                     l51:
  1715     0563  0008               	return
  1716     0564                     __end_of_ChangeOfCoordinates:
  1717                           
  1718                           	psect	text6
  1719     018C                     __ptext6:	
  1720 ;; *************** function _RotateDirection *****************
  1721 ;; Defined at:
  1722 ;;		line 71 in file "main.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  step            2   51[BANK0 ] int 
  1725 ;;  array_          2   53[BANK0 ] PTR unsigned char 
  1726 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1727 ;;  _countElemnt    2   55[BANK0 ] int 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  i               2   57[BANK0 ] int 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       6       0       0       0
  1740 ;;      Locals:         0       2       0       0       0
  1741 ;;      Temps:          0       0       0       0       0
  1742 ;;      Totals:         0       8       0       0       0
  1743 ;;Total ram usage:        8 bytes
  1744 ;; Hardware stack levels used: 1
  1745 ;; Hardware stack levels required when called: 4
  1746 ;; This function calls:
  1747 ;;		_Reverse
  1748 ;;		_Rotate
  1749 ;; This function is called by:
  1750 ;;		_ChangeOfCoordinates
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754     018C                     _RotateDirection:	
  1755                           ;psect for function _RotateDirection
  1756                           
  1757     018C                     l1583:	
  1758                           ;incstack = 0
  1759                           ; Regs used in _RotateDirection: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1760                           
  1761                           
  1762                           ;main.c: 72:     switch (step){
  1763     018C  29EE               	goto	l1607
  1764     018D                     l1585:
  1765                           
  1766                           ;main.c: 74:             Reverse(array_, _countElemntArray);
  1767     018D  0855               	movf	RotateDirection@array_,w
  1768     018E  00F0               	movwf	Reverse@array_
  1769     018F  0856               	movf	RotateDirection@array_+1,w
  1770     0190  00F1               	movwf	Reverse@array_+1
  1771     0191  0858               	movf	RotateDirection@_countElemntArray+1,w
  1772     0192  00F3               	movwf	Reverse@countElemntArray+1
  1773     0193  0857               	movf	RotateDirection@_countElemntArray,w
  1774     0194  00F2               	movwf	Reverse@countElemntArray
  1775     0195  120A  118A  2201  120A  118A  	fcall	_Reverse
  1776     019A                     l1587:
  1777                           
  1778                           ;main.c: 75:             Rotate(array_, _countElemntArray);
  1779     019A  1283               	bcf	3,5	;RP0=0, select bank0
  1780     019B  1303               	bcf	3,6	;RP1=0, select bank0
  1781     019C  0855               	movf	RotateDirection@array_,w
  1782     019D  00BE               	movwf	Rotate@array_
  1783     019E  0856               	movf	RotateDirection@array_+1,w
  1784     019F  00BF               	movwf	Rotate@array_+1
  1785     01A0  0858               	movf	RotateDirection@_countElemntArray+1,w
  1786     01A1  00C1               	movwf	Rotate@countElemntArray+1
  1787     01A2  0857               	movf	RotateDirection@_countElemntArray,w
  1788     01A3  00C0               	movwf	Rotate@countElemntArray
  1789     01A4  120A  118A  230D  120A  118A  	fcall	_Rotate
  1790                           
  1791                           ;main.c: 76:             break;
  1792     01A9  2A00               	goto	l61
  1793     01AA                     l1589:
  1794                           
  1795                           ;main.c: 78:             Rotate(array_, _countElemntArray);
  1796     01AA  0855               	movf	RotateDirection@array_,w
  1797     01AB  00BE               	movwf	Rotate@array_
  1798     01AC  0856               	movf	RotateDirection@array_+1,w
  1799     01AD  00BF               	movwf	Rotate@array_+1
  1800     01AE  0858               	movf	RotateDirection@_countElemntArray+1,w
  1801     01AF  00C1               	movwf	Rotate@countElemntArray+1
  1802     01B0  0857               	movf	RotateDirection@_countElemntArray,w
  1803     01B1  00C0               	movwf	Rotate@countElemntArray
  1804     01B2  120A  118A  230D  120A  118A  	fcall	_Rotate
  1805     01B7                     l1591:
  1806                           
  1807                           ;main.c: 79:             Reverse(array_, _countElemntArray);
  1808     01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1809     01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1810     01B9  0855               	movf	RotateDirection@array_,w
  1811     01BA  00F0               	movwf	Reverse@array_
  1812     01BB  0856               	movf	RotateDirection@array_+1,w
  1813     01BC  00F1               	movwf	Reverse@array_+1
  1814     01BD  0858               	movf	RotateDirection@_countElemntArray+1,w
  1815     01BE  00F3               	movwf	Reverse@countElemntArray+1
  1816     01BF  0857               	movf	RotateDirection@_countElemntArray,w
  1817     01C0  00F2               	movwf	Reverse@countElemntArray
  1818     01C1  120A  118A  2201  120A  118A  	fcall	_Reverse
  1819                           
  1820                           ;main.c: 80:             break;
  1821     01C6  2A00               	goto	l61
  1822     01C7                     l1593:
  1823                           
  1824                           ;main.c: 82:             for(int i = 0; i < 3; i++){
  1825     01C7  01D9               	clrf	RotateDirection@i
  1826     01C8  01DA               	clrf	RotateDirection@i+1
  1827     01C9                     l1599:
  1828                           
  1829                           ;main.c: 83:                 Rotate(array_, _countElemntArray);
  1830     01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1831     01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1832     01CB  0855               	movf	RotateDirection@array_,w
  1833     01CC  00BE               	movwf	Rotate@array_
  1834     01CD  0856               	movf	RotateDirection@array_+1,w
  1835     01CE  00BF               	movwf	Rotate@array_+1
  1836     01CF  0858               	movf	RotateDirection@_countElemntArray+1,w
  1837     01D0  00C1               	movwf	Rotate@countElemntArray+1
  1838     01D1  0857               	movf	RotateDirection@_countElemntArray,w
  1839     01D2  00C0               	movwf	Rotate@countElemntArray
  1840     01D3  120A  118A  230D  120A  118A  	fcall	_Rotate
  1841     01D8                     l1601:
  1842                           
  1843                           ;main.c: 84:             }
  1844     01D8  3001               	movlw	1
  1845     01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1846     01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1847     01DB  07D9               	addwf	RotateDirection@i,f
  1848     01DC  1803               	skipnc
  1849     01DD  0ADA               	incf	RotateDirection@i+1,f
  1850     01DE  3000               	movlw	0
  1851     01DF  07DA               	addwf	RotateDirection@i+1,f
  1852     01E0                     l1603:
  1853     01E0  085A               	movf	RotateDirection@i+1,w
  1854     01E1  3A80               	xorlw	128
  1855     01E2  00FF               	movwf	btemp+1
  1856     01E3  3080               	movlw	128
  1857     01E4  027F               	subwf	btemp+1,w
  1858     01E5  1D03               	skipz
  1859     01E6  29E9               	goto	u1065
  1860     01E7  3003               	movlw	3
  1861     01E8  0259               	subwf	RotateDirection@i,w
  1862     01E9                     u1065:
  1863     01E9  1C03               	skipc
  1864     01EA  29EC               	goto	u1061
  1865     01EB  29ED               	goto	u1060
  1866     01EC                     u1061:
  1867     01EC  29C9               	goto	l1599
  1868     01ED                     u1060:
  1869     01ED  2A00               	goto	l61
  1870     01EE                     l1607:
  1871                           
  1872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1873                           ; Switch size 1, requested type "simple"
  1874                           ; Number of cases is 1, Range of values is 0 to 0
  1875                           ; switch strategies available:
  1876                           ; Name         Instructions Cycles
  1877                           ; simple_byte            4     3 (average)
  1878                           ; direct_byte           11     8 (fixed)
  1879                           ; jumptable            260     6 (fixed)
  1880                           ;	Chosen strategy is simple_byte
  1881     01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1882     01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1883     01F0  0854               	movf	RotateDirection@step+1,w
  1884     01F1  3A00               	xorlw	0	; case 0
  1885     01F2  1903               	skipnz
  1886     01F3  29F5               	goto	l1759
  1887     01F4  2A00               	goto	l61
  1888     01F5                     l1759:
  1889                           
  1890                           ; Switch size 1, requested type "simple"
  1891                           ; Number of cases is 3, Range of values is 0 to 2
  1892                           ; switch strategies available:
  1893                           ; Name         Instructions Cycles
  1894                           ; simple_byte           10     6 (average)
  1895                           ; direct_byte           17     8 (fixed)
  1896                           ; jumptable            260     6 (fixed)
  1897                           ;	Chosen strategy is simple_byte
  1898     01F5  0853               	movf	RotateDirection@step,w
  1899     01F6  3A00               	xorlw	0	; case 0
  1900     01F7  1903               	skipnz
  1901     01F8  298D               	goto	l1585
  1902     01F9  3A01               	xorlw	1	; case 1
  1903     01FA  1903               	skipnz
  1904     01FB  29AA               	goto	l1589
  1905     01FC  3A03               	xorlw	3	; case 2
  1906     01FD  1903               	skipnz
  1907     01FE  29C7               	goto	l1593
  1908     01FF  2A00               	goto	l61
  1909     0200                     l61:
  1910     0200  0008               	return
  1911     0201                     __end_of_RotateDirection:
  1912                           
  1913                           	psect	text7
  1914     030D                     __ptext7:	
  1915 ;; *************** function _Rotate *****************
  1916 ;; Defined at:
  1917 ;;		line 55 in file "shape.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  array_          2   30[BANK0 ] PTR unsigned char 
  1920 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1921 ;;  countElemntA    2   32[BANK0 ] int 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  i               2   45[BANK0 ] int 
  1924 ;;  x               2   43[BANK0 ] int 
  1925 ;;  _i              2   49[BANK0 ] int 
  1926 ;;  res             2   47[BANK0 ] PTR unsigned char 
  1927 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1937 ;;      Params:         0       4       0       0       0
  1938 ;;      Locals:         0       8       0       0       0
  1939 ;;      Temps:          0       9       0       0       0
  1940 ;;      Totals:         0      21       0       0       0
  1941 ;;Total ram usage:       21 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 3
  1944 ;; This function calls:
  1945 ;;		_CopyArray
  1946 ;;		_calloc
  1947 ;;		_free
  1948 ;; This function is called by:
  1949 ;;		_RotateDirection
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953     030D                     _Rotate:	
  1954                           ;psect for function _Rotate
  1955                           
  1956     030D                     l1499:	
  1957                           ;incstack = 0
  1958                           ; Regs used in _Rotate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1959                           
  1960                           
  1961                           ;shape.c: 57:     char * res = calloc((size_t)countElemntArray, sizeof(char));
  1962     030D  1283               	bcf	3,5	;RP0=0, select bank0
  1963     030E  1303               	bcf	3,6	;RP1=0, select bank0
  1964     030F  0841               	movf	Rotate@countElemntArray+1,w
  1965     0310  00B9               	movwf	calloc@nmemb+1
  1966     0311  0840               	movf	Rotate@countElemntArray,w
  1967     0312  00B8               	movwf	calloc@nmemb
  1968     0313  3001               	movlw	1
  1969     0314  00BA               	movwf	calloc@size
  1970     0315  3000               	movlw	0
  1971     0316  00BB               	movwf	calloc@size+1
  1972     0317  120A  118A  2099  120A  118A  	fcall	_calloc
  1973     031C  1283               	bcf	3,5	;RP0=0, select bank0
  1974     031D  1303               	bcf	3,6	;RP1=0, select bank0
  1975     031E  0838               	movf	?_calloc,w
  1976     031F  00CF               	movwf	Rotate@res
  1977     0320  0839               	movf	?_calloc+1,w
  1978     0321  00D0               	movwf	Rotate@res+1
  1979     0322                     l1501:
  1980                           
  1981                           ;shape.c: 59:     if (res){
  1982     0322  084F               	movf	Rotate@res,w
  1983     0323  0450               	iorwf	Rotate@res+1,w
  1984     0324  1903               	btfsc	3,2
  1985     0325  2B27               	goto	u951
  1986     0326  2B28               	goto	u950
  1987     0327                     u951:
  1988     0327  2BA6               	goto	l1531
  1989     0328                     u950:
  1990     0328                     l1503:
  1991                           
  1992                           ;shape.c: 60:         for(int _i = countElemntArray - 1; _i >= 0; _i--){
  1993     0328  0840               	movf	Rotate@countElemntArray,w
  1994     0329  3EFF               	addlw	255
  1995     032A  00D1               	movwf	Rotate@_i
  1996     032B  0841               	movf	Rotate@countElemntArray+1,w
  1997     032C  1803               	skipnc
  1998     032D  3E01               	addlw	1
  1999     032E  3EFF               	addlw	255
  2000     032F  00D2               	movwf	Rotate@_i+1
  2001     0330                     l1505:
  2002     0330  1FD2               	btfss	Rotate@_i+1,7
  2003     0331  2B33               	goto	u961
  2004     0332  2B34               	goto	u960
  2005     0333                     u961:
  2006     0333  2B35               	goto	l1509
  2007     0334                     u960:
  2008     0334  2B95               	goto	l1529
  2009     0335                     l1509:
  2010                           
  2011                           ;shape.c: 61:             for(int i = countElemntArray - 1, x = 0; i >= 0; i--, x++){
  2012     0335  0840               	movf	Rotate@countElemntArray,w
  2013     0336  3EFF               	addlw	255
  2014     0337  00CD               	movwf	Rotate@i
  2015     0338  0841               	movf	Rotate@countElemntArray+1,w
  2016     0339  1803               	skipnc
  2017     033A  3E01               	addlw	1
  2018     033B  3EFF               	addlw	255
  2019     033C  00CE               	movwf	Rotate@i+1
  2020     033D                     l1511:
  2021     033D  01CB               	clrf	Rotate@x
  2022     033E  01CC               	clrf	Rotate@x+1
  2023     033F                     l1513:
  2024     033F  1FCE               	btfss	Rotate@i+1,7
  2025     0340  2B42               	goto	u971
  2026     0341  2B43               	goto	u970
  2027     0342                     u971:
  2028     0342  2B44               	goto	l1517
  2029     0343                     u970:
  2030     0343  2B8E               	goto	l1525
  2031     0344                     l1517:
  2032                           
  2033                           ;shape.c: 62:                 res[_i] |= ((array_[x] >> _i ) & 1) << i;
  2034     0344  084B               	movf	Rotate@x,w
  2035     0345  073E               	addwf	Rotate@array_,w
  2036     0346  00C3               	movwf	??_Rotate+1
  2037     0347  083F               	movf	Rotate@array_+1,w
  2038     0348  00C2               	movwf	??_Rotate
  2039     0349  1803               	skipnc
  2040     034A  0AC2               	incf	??_Rotate,f
  2041     034B  1FCB               	btfss	Rotate@x,7
  2042     034C  2B4E               	goto	u980
  2043     034D  03C2               	decf	??_Rotate,f
  2044     034E                     u980:
  2045     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2046     034F  1303               	bcf	3,6	;RP1=0, select bank0
  2047     0350  0842               	movf	??_Rotate,w
  2048     0351  00C4               	movwf	??_Rotate+2
  2049     0352  0843               	movf	??_Rotate+1,w
  2050     0353  0084               	movwf	4
  2051     0354  1783               	bsf	3,7
  2052     0355  1C44               	btfss	??_Rotate+2,0
  2053     0356  1383               	bcf	3,7
  2054     0357  0800               	movf	0,w
  2055     0358  00C5               	movwf	??_Rotate+3
  2056     0359  0A51               	incf	Rotate@_i,w
  2057     035A  2B5D               	goto	u994
  2058     035B                     u995:
  2059     035B  1003               	clrc
  2060     035C  0CC5               	rrf	??_Rotate+3,f
  2061     035D                     u994:
  2062     035D  3EFF               	addlw	-1
  2063     035E  1D03               	skipz
  2064     035F  2B5B               	goto	u995
  2065     0360  0845               	movf	??_Rotate+3,w
  2066     0361  3901               	andlw	1
  2067     0362  00C6               	movwf	??_Rotate+4
  2068     0363  0A4D               	incf	Rotate@i,w
  2069     0364  2B67               	goto	u1004
  2070     0365                     u1005:
  2071     0365  1003               	clrc
  2072     0366  0DC6               	rlf	??_Rotate+4,f
  2073     0367                     u1004:
  2074     0367  3EFF               	addlw	-1
  2075     0368  1D03               	skipz
  2076     0369  2B65               	goto	u1005
  2077     036A  0846               	movf	??_Rotate+4,w
  2078     036B  00C7               	movwf	??_Rotate+5
  2079     036C  0851               	movf	Rotate@_i,w
  2080     036D  074F               	addwf	Rotate@res,w
  2081     036E  00C9               	movwf	??_Rotate+7
  2082     036F  0850               	movf	Rotate@res+1,w
  2083     0370  00C8               	movwf	??_Rotate+6
  2084     0371  1803               	skipnc
  2085     0372  0AC8               	incf	??_Rotate+6,f
  2086     0373  1FD1               	btfss	Rotate@_i,7
  2087     0374  2B76               	goto	u1010
  2088     0375  03C8               	decf	??_Rotate+6,f
  2089     0376                     u1010:
  2090     0376  1283               	bcf	3,5	;RP0=0, select bank0
  2091     0377  1303               	bcf	3,6	;RP1=0, select bank0
  2092     0378  0848               	movf	??_Rotate+6,w
  2093     0379  00CA               	movwf	??_Rotate+8
  2094     037A  0849               	movf	??_Rotate+7,w
  2095     037B  0084               	movwf	4
  2096     037C  1783               	bsf	3,7
  2097     037D  1C4A               	btfss	??_Rotate+8,0
  2098     037E  1383               	bcf	3,7
  2099     037F  0847               	movf	??_Rotate+5,w
  2100     0380  0480               	iorwf	0,f
  2101     0381                     l1519:
  2102                           
  2103                           ;shape.c: 63:             }
  2104     0381  30FF               	movlw	255
  2105     0382  07CD               	addwf	Rotate@i,f
  2106     0383  1803               	skipnc
  2107     0384  0ACE               	incf	Rotate@i+1,f
  2108     0385  30FF               	movlw	255
  2109     0386  07CE               	addwf	Rotate@i+1,f
  2110     0387                     l1521:
  2111     0387  3001               	movlw	1
  2112     0388  07CB               	addwf	Rotate@x,f
  2113     0389  1803               	skipnc
  2114     038A  0ACC               	incf	Rotate@x+1,f
  2115     038B  3000               	movlw	0
  2116     038C  07CC               	addwf	Rotate@x+1,f
  2117     038D  2B3F               	goto	l1513
  2118     038E                     l1525:
  2119                           
  2120                           ;shape.c: 64:         }
  2121     038E  30FF               	movlw	255
  2122     038F  07D1               	addwf	Rotate@_i,f
  2123     0390  1803               	skipnc
  2124     0391  0AD2               	incf	Rotate@_i+1,f
  2125     0392  30FF               	movlw	255
  2126     0393  07D2               	addwf	Rotate@_i+1,f
  2127     0394  2B30               	goto	l1505
  2128     0395                     l1529:
  2129                           
  2130                           ;shape.c: 65:         CopyArray(array_, res, countElemntArray);
  2131     0395  083E               	movf	Rotate@array_,w
  2132     0396  00F0               	movwf	CopyArray@array_
  2133     0397  083F               	movf	Rotate@array_+1,w
  2134     0398  00F1               	movwf	CopyArray@array_+1
  2135     0399  084F               	movf	Rotate@res,w
  2136     039A  00F2               	movwf	CopyArray@res
  2137     039B  0850               	movf	Rotate@res+1,w
  2138     039C  00F3               	movwf	CopyArray@res+1
  2139     039D  0841               	movf	Rotate@countElemntArray+1,w
  2140     039E  00F5               	movwf	CopyArray@countElemntArray+1
  2141     039F  0840               	movf	Rotate@countElemntArray,w
  2142     03A0  00F4               	movwf	CopyArray@countElemntArray
  2143     03A1  120A  118A  200C  120A  118A  	fcall	_CopyArray
  2144     03A6                     l1531:
  2145                           
  2146                           ;shape.c: 67:     free(res);
  2147     03A6  1283               	bcf	3,5	;RP0=0, select bank0
  2148     03A7  1303               	bcf	3,6	;RP1=0, select bank0
  2149     03A8  084F               	movf	Rotate@res,w
  2150     03A9  00F0               	movwf	free@ptr
  2151     03AA  0850               	movf	Rotate@res+1,w
  2152     03AB  00F1               	movwf	free@ptr+1
  2153     03AC  120A  118A  2564  120A  118A  	fcall	_free
  2154     03B1                     l159:
  2155     03B1  0008               	return
  2156     03B2                     __end_of_Rotate:
  2157                           
  2158                           	psect	text8
  2159     0564                     __ptext8:	
  2160 ;; *************** function _free *****************
  2161 ;; Defined at:
  2162 ;;		line 67 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  ptr             2    0[COMMON] PTR void 
  2165 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  c               2   10[COMMON] PTR struct chunk
  2168 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2169 ;;  cptr            2    8[COMMON] PTR unsigned char 
  2170 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         2       0       0       0       0
  2181 ;;      Locals:         4       0       0       0       0
  2182 ;;      Temps:          6       0       0       0       0
  2183 ;;      Totals:        12       0       0       0       0
  2184 ;;Total ram usage:       12 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_ChangeOfCoordinates
  2190 ;;		_Rotate
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194     0564                     _free:	
  2195                           ;psect for function _free
  2196                           
  2197     0564                     l1451:	
  2198                           ;incstack = 0
  2199                           ; Regs used in _free: [wreg-fsr0h+status,2+status,0+btemp+1]
  2200                           
  2201     0564  0870               	movf	free@ptr,w
  2202     0565  00F8               	movwf	free@cptr
  2203     0566  0871               	movf	free@ptr+1,w
  2204     0567  00F9               	movwf	free@cptr+1
  2205     0568  0870               	movf	free@ptr,w
  2206     0569  0471               	iorwf	free@ptr+1,w
  2207     056A  1D03               	btfss	3,2
  2208     056B  2D6D               	goto	u861
  2209     056C  2D6E               	goto	u860
  2210     056D                     u861:
  2211     056D  2D6F               	goto	l1455
  2212     056E                     u860:
  2213     056E  2E51               	goto	l744
  2214     056F                     l1455:
  2215     056F  30FE               	movlw	254
  2216     0570  00F2               	movwf	??_free
  2217     0571  0872               	movf	??_free,w
  2218     0572  0778               	addwf	free@cptr,w
  2219     0573  00FA               	movwf	free@c
  2220     0574  0879               	movf	free@cptr+1,w
  2221     0575  00F3               	movwf	??_free+1
  2222     0576  1803               	skipnc
  2223     0577  0AF3               	incf	??_free+1,f
  2224     0578  1BF2               	btfsc	??_free,7
  2225     0579  03F3               	decf	??_free+1,f
  2226     057A  0873               	movf	??_free+1,w
  2227     057B  00FB               	movwf	free@c+1
  2228     057C  1283               	bcf	3,5	;RP0=0, select bank0
  2229     057D  1303               	bcf	3,6	;RP1=0, select bank0
  2230     057E  086D               	movf	___freelist,w
  2231     057F  046E               	iorwf	___freelist+1,w
  2232     0580  1903               	btfsc	3,2
  2233     0581  2D83               	goto	u871
  2234     0582  2D84               	goto	u870
  2235     0583                     u871:
  2236     0583  2E40               	goto	l1477
  2237     0584                     u870:
  2238     0584                     l1457:
  2239     0584  087A               	movf	free@c,w
  2240     0585  0084               	movwf	4
  2241     0586  1783               	bsf	3,7
  2242     0587  1C7B               	btfss	free@c+1,0
  2243     0588  1383               	bcf	3,7
  2244     0589  0800               	movf	0,w
  2245     058A  0778               	addwf	free@cptr,w
  2246     058B  00F2               	movwf	??_free
  2247     058C  0879               	movf	free@cptr+1,w
  2248     058D  1803               	skipnc
  2249     058E  3E01               	addlw	1
  2250     058F  00F3               	movwf	??_free+1
  2251     0590  0873               	movf	??_free+1,w
  2252     0591  066E               	xorwf	___freelist+1,w
  2253     0592  1D03               	skipz
  2254     0593  2D96               	goto	u885
  2255     0594  0872               	movf	??_free,w
  2256     0595  066D               	xorwf	___freelist,w
  2257     0596                     u885:
  2258     0596  1D03               	skipz
  2259     0597  2D99               	goto	u881
  2260     0598  2D9A               	goto	u880
  2261     0599                     u881:
  2262     0599  2DE6               	goto	l1469
  2263     059A                     u880:
  2264     059A                     l1459:
  2265     059A  086D               	movf	___freelist,w
  2266     059B  3E02               	addlw	2
  2267     059C  00F2               	movwf	??_free
  2268     059D  086E               	movf	___freelist+1,w
  2269     059E  1803               	skipnc
  2270     059F  3E01               	addlw	1
  2271     05A0  3E00               	addlw	0
  2272     05A1  00F3               	movwf	??_free+1
  2273     05A2  0872               	movf	??_free,w
  2274     05A3  0084               	movwf	4
  2275     05A4  1783               	bsf	3,7
  2276     05A5  1C73               	btfss	??_free+1,0
  2277     05A6  1383               	bcf	3,7
  2278     05A7  0800               	movf	0,w
  2279     05A8  00F4               	movwf	??_free+2
  2280     05A9  0A84               	incf	4,f
  2281     05AA  0800               	movf	0,w
  2282     05AB  00F5               	movwf	??_free+3
  2283     05AC  087A               	movf	free@c,w
  2284     05AD  3E02               	addlw	2
  2285     05AE  00F6               	movwf	??_free+4
  2286     05AF  087B               	movf	free@c+1,w
  2287     05B0  1803               	skipnc
  2288     05B1  3E01               	addlw	1
  2289     05B2  3E00               	addlw	0
  2290     05B3  00F7               	movwf	??_free+5
  2291     05B4  0876               	movf	??_free+4,w
  2292     05B5  0084               	movwf	4
  2293     05B6  1783               	bsf	3,7
  2294     05B7  1C77               	btfss	??_free+5,0
  2295     05B8  1383               	bcf	3,7
  2296     05B9  0874               	movf	??_free+2,w
  2297     05BA  0080               	movwf	0
  2298     05BB  0875               	movf	??_free+3,w
  2299     05BC  0A84               	incf	4,f
  2300     05BD  0080               	movwf	0
  2301     05BE  0384               	decf	4,f
  2302     05BF                     l1461:
  2303     05BF  086D               	movf	___freelist,w
  2304     05C0  0084               	movwf	4
  2305     05C1  1783               	bsf	3,7
  2306     05C2  1C6E               	btfss	___freelist+1,0
  2307     05C3  1383               	bcf	3,7
  2308     05C4  0800               	movf	0,w
  2309     05C5  00F2               	movwf	??_free
  2310     05C6  0A84               	incf	4,f
  2311     05C7  0800               	movf	0,w
  2312     05C8  00F3               	movwf	??_free+1
  2313     05C9  0872               	movf	??_free,w
  2314     05CA  3E02               	addlw	2
  2315     05CB  00F4               	movwf	??_free+2
  2316     05CC  0873               	movf	??_free+1,w
  2317     05CD  1803               	skipnc
  2318     05CE  3E01               	addlw	1
  2319     05CF  3E00               	addlw	0
  2320     05D0  00F5               	movwf	??_free+3
  2321     05D1  087A               	movf	free@c,w
  2322     05D2  0084               	movwf	4
  2323     05D3  1783               	bsf	3,7
  2324     05D4  1C7B               	btfss	free@c+1,0
  2325     05D5  1383               	bcf	3,7
  2326     05D6  0874               	movf	??_free+2,w
  2327     05D7  0780               	addwf	0,f
  2328     05D8  0F84               	incfsz	4,f
  2329     05D9  0800               	movf	0,w
  2330     05DA  1803               	skipnc
  2331     05DB  0A00               	incf	0,w
  2332     05DC  00FF               	movwf	btemp+1
  2333     05DD  0875               	movf	??_free+3,w
  2334     05DE  077F               	addwf	btemp+1,w
  2335     05DF  0080               	movwf	0
  2336     05E0  0384               	decf	4,f
  2337     05E1                     l1463:
  2338     05E1  087A               	movf	free@c,w
  2339     05E2  00ED               	movwf	___freelist
  2340     05E3  087B               	movf	free@c+1,w
  2341     05E4  00EE               	movwf	___freelist+1
  2342     05E5  2E51               	goto	l744
  2343     05E6                     l1469:
  2344     05E6  086D               	movf	___freelist,w
  2345     05E7  0084               	movwf	4
  2346     05E8  1783               	bsf	3,7
  2347     05E9  1C6E               	btfss	___freelist+1,0
  2348     05EA  1383               	bcf	3,7
  2349     05EB  0800               	movf	0,w
  2350     05EC  00F2               	movwf	??_free
  2351     05ED  0A84               	incf	4,f
  2352     05EE  0800               	movf	0,w
  2353     05EF  00F3               	movwf	??_free+1
  2354     05F0  0872               	movf	??_free,w
  2355     05F1  076D               	addwf	___freelist,w
  2356     05F2  00F4               	movwf	??_free+2
  2357     05F3  0873               	movf	??_free+1,w
  2358     05F4  1803               	skipnc
  2359     05F5  0A73               	incf	??_free+1,w
  2360     05F6  076E               	addwf	___freelist+1,w
  2361     05F7  00F5               	movwf	??_free+3
  2362     05F8  0874               	movf	??_free+2,w
  2363     05F9  3E02               	addlw	2
  2364     05FA  00F6               	movwf	??_free+4
  2365     05FB  0875               	movf	??_free+3,w
  2366     05FC  1803               	skipnc
  2367     05FD  3E01               	addlw	1
  2368     05FE  3E00               	addlw	0
  2369     05FF  00F7               	movwf	??_free+5
  2370     0600  087B               	movf	free@c+1,w
  2371     0601  0677               	xorwf	??_free+5,w
  2372     0602  1D03               	skipz
  2373     0603  2E06               	goto	u895
  2374     0604  087A               	movf	free@c,w
  2375     0605  0676               	xorwf	??_free+4,w
  2376     0606                     u895:
  2377     0606  1D03               	skipz
  2378     0607  2E09               	goto	u891
  2379     0608  2E0A               	goto	u890
  2380     0609                     u891:
  2381     0609  2E2D               	goto	l1475
  2382     060A                     u890:
  2383     060A                     l1471:
  2384     060A  087A               	movf	free@c,w
  2385     060B  0084               	movwf	4
  2386     060C  1783               	bsf	3,7
  2387     060D  1C7B               	btfss	free@c+1,0
  2388     060E  1383               	bcf	3,7
  2389     060F  0800               	movf	0,w
  2390     0610  00F2               	movwf	??_free
  2391     0611  0A84               	incf	4,f
  2392     0612  0800               	movf	0,w
  2393     0613  00F3               	movwf	??_free+1
  2394     0614  0872               	movf	??_free,w
  2395     0615  3E02               	addlw	2
  2396     0616  00F4               	movwf	??_free+2
  2397     0617  0873               	movf	??_free+1,w
  2398     0618  1803               	skipnc
  2399     0619  3E01               	addlw	1
  2400     061A  3E00               	addlw	0
  2401     061B  00F5               	movwf	??_free+3
  2402     061C  086D               	movf	___freelist,w
  2403     061D  0084               	movwf	4
  2404     061E  1783               	bsf	3,7
  2405     061F  1C6E               	btfss	___freelist+1,0
  2406     0620  1383               	bcf	3,7
  2407     0621  0874               	movf	??_free+2,w
  2408     0622  0780               	addwf	0,f
  2409     0623  0F84               	incfsz	4,f
  2410     0624  0800               	movf	0,w
  2411     0625  1803               	skipnc
  2412     0626  0A00               	incf	0,w
  2413     0627  00FF               	movwf	btemp+1
  2414     0628  0875               	movf	??_free+3,w
  2415     0629  077F               	addwf	btemp+1,w
  2416     062A  0080               	movwf	0
  2417     062B  0384               	decf	4,f
  2418     062C  2E51               	goto	l744
  2419     062D                     l1475:
  2420     062D  087A               	movf	free@c,w
  2421     062E  3E02               	addlw	2
  2422     062F  00F2               	movwf	??_free
  2423     0630  087B               	movf	free@c+1,w
  2424     0631  1803               	skipnc
  2425     0632  3E01               	addlw	1
  2426     0633  3E00               	addlw	0
  2427     0634  00F3               	movwf	??_free+1
  2428     0635  0872               	movf	??_free,w
  2429     0636  0084               	movwf	4
  2430     0637  1783               	bsf	3,7
  2431     0638  1C73               	btfss	??_free+1,0
  2432     0639  1383               	bcf	3,7
  2433     063A  086D               	movf	___freelist,w
  2434     063B  0080               	movwf	0
  2435     063C  0A84               	incf	4,f
  2436     063D  086E               	movf	___freelist+1,w
  2437     063E  0080               	movwf	0
  2438     063F  2DE1               	goto	l1463
  2439     0640                     l1477:
  2440     0640  087A               	movf	free@c,w
  2441     0641  3E02               	addlw	2
  2442     0642  00F2               	movwf	??_free
  2443     0643  087B               	movf	free@c+1,w
  2444     0644  1803               	skipnc
  2445     0645  3E01               	addlw	1
  2446     0646  3E00               	addlw	0
  2447     0647  00F3               	movwf	??_free+1
  2448     0648  0872               	movf	??_free,w
  2449     0649  0084               	movwf	4
  2450     064A  1783               	bsf	3,7
  2451     064B  1C73               	btfss	??_free+1,0
  2452     064C  1383               	bcf	3,7
  2453     064D  0180               	clrf	0
  2454     064E  0A84               	incf	4,f
  2455     064F  0180               	clrf	0
  2456     0650  2DE1               	goto	l1463
  2457     0651                     l744:
  2458     0651  0008               	return
  2459     0652                     __end_of_free:
  2460                           
  2461                           	psect	text9
  2462     0099                     __ptext9:	
  2463 ;; *************** function _calloc *****************
  2464 ;; Defined at:
  2465 ;;		line 10 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_calloc.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  nmemb           2   24[BANK0 ] unsigned int 
  2468 ;;  size            2   26[BANK0 ] unsigned int 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  new_ptr         2   28[BANK0 ] PTR void 
  2471 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2   24[BANK0 ] PTR void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2481 ;;      Params:         0       4       0       0       0
  2482 ;;      Locals:         0       2       0       0       0
  2483 ;;      Temps:          0       0       0       0       0
  2484 ;;      Totals:         0       6       0       0       0
  2485 ;;Total ram usage:        6 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 2
  2488 ;; This function calls:
  2489 ;;		___wmul
  2490 ;;		_malloc
  2491 ;;		_memset
  2492 ;; This function is called by:
  2493 ;;		_ChangeOfCoordinates
  2494 ;;		_Rotate
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498     0099                     _calloc:	
  2499                           ;psect for function _calloc
  2500                           
  2501     0099                     l1433:	
  2502                           ;incstack = 0
  2503                           ; Regs used in _calloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2504                           
  2505     0099  1283               	bcf	3,5	;RP0=0, select bank0
  2506     009A  1303               	bcf	3,6	;RP1=0, select bank0
  2507     009B  0839               	movf	calloc@nmemb+1,w
  2508     009C  00F1               	movwf	___wmul@multiplier+1
  2509     009D  0838               	movf	calloc@nmemb,w
  2510     009E  00F0               	movwf	___wmul@multiplier
  2511     009F  083B               	movf	calloc@size+1,w
  2512     00A0  00F3               	movwf	___wmul@multiplicand+1
  2513     00A1  083A               	movf	calloc@size,w
  2514     00A2  00F2               	movwf	___wmul@multiplicand
  2515     00A3  120A  158A  279B  120A  118A  	fcall	___wmul
  2516     00A8  0871               	movf	?___wmul+1,w
  2517     00A9  00F9               	movwf	malloc@n+1
  2518     00AA  0870               	movf	?___wmul,w
  2519     00AB  00F8               	movwf	malloc@n
  2520     00AC  120A  118A  23B2  120A  118A  	fcall	_malloc
  2521     00B1  0878               	movf	?_malloc,w
  2522     00B2  1283               	bcf	3,5	;RP0=0, select bank0
  2523     00B3  1303               	bcf	3,6	;RP1=0, select bank0
  2524     00B4  00BC               	movwf	calloc@new_ptr
  2525     00B5  0879               	movf	?_malloc+1,w
  2526     00B6  00BD               	movwf	calloc@new_ptr+1
  2527     00B7                     l1435:
  2528     00B7  083C               	movf	calloc@new_ptr,w
  2529     00B8  043D               	iorwf	calloc@new_ptr+1,w
  2530     00B9  1903               	btfsc	3,2
  2531     00BA  28BC               	goto	u821
  2532     00BB  28BD               	goto	u820
  2533     00BC                     u821:
  2534     00BC  28DA               	goto	l1439
  2535     00BD                     u820:
  2536     00BD                     l1437:
  2537     00BD  083C               	movf	calloc@new_ptr,w
  2538     00BE  00F6               	movwf	memset@dest
  2539     00BF  083D               	movf	calloc@new_ptr+1,w
  2540     00C0  00F7               	movwf	memset@dest+1
  2541     00C1  3000               	movlw	0
  2542     00C2  00F8               	movwf	memset@c
  2543     00C3  00F9               	movwf	memset@c+1
  2544     00C4  0839               	movf	calloc@nmemb+1,w
  2545     00C5  00F1               	movwf	___wmul@multiplier+1
  2546     00C6  0838               	movf	calloc@nmemb,w
  2547     00C7  00F0               	movwf	___wmul@multiplier
  2548     00C8  083B               	movf	calloc@size+1,w
  2549     00C9  00F3               	movwf	___wmul@multiplicand+1
  2550     00CA  083A               	movf	calloc@size,w
  2551     00CB  00F2               	movwf	___wmul@multiplicand
  2552     00CC  120A  158A  279B  120A  118A  	fcall	___wmul
  2553     00D1  0871               	movf	?___wmul+1,w
  2554     00D2  00FB               	movwf	memset@n+1
  2555     00D3  0870               	movf	?___wmul,w
  2556     00D4  00FA               	movwf	memset@n
  2557     00D5  120A  158A  277C  120A  118A  	fcall	_memset
  2558     00DA                     l1439:
  2559     00DA  1283               	bcf	3,5	;RP0=0, select bank0
  2560     00DB  1303               	bcf	3,6	;RP1=0, select bank0
  2561     00DC  083C               	movf	calloc@new_ptr,w
  2562     00DD  00B8               	movwf	?_calloc
  2563     00DE  083D               	movf	calloc@new_ptr+1,w
  2564     00DF  00B9               	movwf	?_calloc+1
  2565     00E0                     l721:
  2566     00E0  0008               	return
  2567     00E1                     __end_of_calloc:
  2568                           
  2569                           	psect	text10
  2570     0F7C                     __ptext10:	
  2571 ;; *************** function _memset *****************
  2572 ;; Defined at:
  2573 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  dest            2    6[COMMON] PTR void 
  2576 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2577 ;;  c               2    8[COMMON] int 
  2578 ;;  n               2   10[COMMON] unsigned int 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  p               2   12[COMMON] PTR unsigned char 
  2581 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2    6[COMMON] PTR void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2591 ;;      Params:         6       0       0       0       0
  2592 ;;      Locals:         2       0       0       0       0
  2593 ;;      Temps:          0       0       0       0       0
  2594 ;;      Totals:         8       0       0       0       0
  2595 ;;Total ram usage:        8 bytes
  2596 ;; Hardware stack levels used: 1
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_calloc
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604     0F7C                     _memset:	
  2605                           ;psect for function _memset
  2606                           
  2607     0F7C                     l1425:	
  2608                           ;incstack = 0
  2609                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2610                           
  2611     0F7C  0876               	movf	memset@dest,w
  2612     0F7D  00FC               	movwf	memset@p
  2613     0F7E  0877               	movf	memset@dest+1,w
  2614     0F7F  00FD               	movwf	memset@p+1
  2615     0F80  2F8C               	goto	l1431
  2616     0F81                     l1427:
  2617     0F81  087C               	movf	memset@p,w
  2618     0F82  0084               	movwf	4
  2619     0F83  1783               	bsf	3,7
  2620     0F84  1C7D               	btfss	memset@p+1,0
  2621     0F85  1383               	bcf	3,7
  2622     0F86  0878               	movf	memset@c,w
  2623     0F87  0080               	movwf	0
  2624     0F88                     l1429:
  2625     0F88  3001               	movlw	1
  2626     0F89  07FC               	addwf	memset@p,f
  2627     0F8A  1803               	skipnc
  2628     0F8B  0AFD               	incf	memset@p+1,f
  2629     0F8C                     l1431:
  2630     0F8C  3001               	movlw	1
  2631     0F8D  02FA               	subwf	memset@n,f
  2632     0F8E  3000               	movlw	0
  2633     0F8F  1C03               	skipc
  2634     0F90  03FB               	decf	memset@n+1,f
  2635     0F91  02FB               	subwf	memset@n+1,f
  2636     0F92  0A7A               	incf	memset@n,w
  2637     0F93  1D03               	skipz
  2638     0F94  2F99               	goto	u811
  2639     0F95  0A7B               	incf	memset@n+1,w
  2640     0F96  1D03               	btfss	3,2
  2641     0F97  2F99               	goto	u811
  2642     0F98  2F9A               	goto	u810
  2643     0F99                     u811:
  2644     0F99  2F81               	goto	l1427
  2645     0F9A                     u810:
  2646     0F9A                     l797:
  2647     0F9A  0008               	return
  2648     0F9B                     __end_of_memset:
  2649                           
  2650                           	psect	text11
  2651     03B2                     __ptext11:	
  2652 ;; *************** function _malloc *****************
  2653 ;; Defined at:
  2654 ;;		line 16 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_malloc.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;  n               2    8[COMMON] unsigned int 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  sz              2   16[BANK0 ] PTR unsigned int 
  2659 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2660 ;;  new             2   22[BANK0 ] PTR unsigned char 
  2661 ;;		 -> __heap_hi(0), NULL(0), 
  2662 ;;  m               2   14[BANK0 ] unsigned int 
  2663 ;;  p               2   20[BANK0 ] PTR void 
  2664 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2665 ;;  size            2   18[BANK0 ] unsigned int 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  2    8[COMMON] PTR void 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2675 ;;      Params:         2       0       0       0       0
  2676 ;;      Locals:         0      10       0       0       0
  2677 ;;      Temps:          2       0       0       0       0
  2678 ;;      Totals:         4      10       0       0       0
  2679 ;;Total ram usage:       14 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 1
  2682 ;; This function calls:
  2683 ;;		___expand_heap
  2684 ;;		___simple_search_fl
  2685 ;; This function is called by:
  2686 ;;		_calloc
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690     03B2                     _malloc:	
  2691                           ;psect for function _malloc
  2692                           
  2693     03B2                     l1373:	
  2694                           ;incstack = 0
  2695                           ; Regs used in _malloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2696                           
  2697     03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2698     03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2699     03B4  01B2               	clrf	malloc@size
  2700     03B5  01B3               	clrf	malloc@size+1
  2701     03B6                     l1375:
  2702     03B6  0878               	movf	malloc@n,w
  2703     03B7  0479               	iorwf	malloc@n+1,w
  2704     03B8  1D03               	btfss	3,2
  2705     03B9  2BBB               	goto	u741
  2706     03BA  2BBC               	goto	u740
  2707     03BB                     u741:
  2708     03BB  2BC2               	goto	l764
  2709     03BC                     u740:
  2710     03BC                     l1377:
  2711     03BC  3001               	movlw	1
  2712     03BD  07F8               	addwf	malloc@n,f
  2713     03BE  1803               	skipnc
  2714     03BF  0AF9               	incf	malloc@n+1,f
  2715     03C0  3000               	movlw	0
  2716     03C1  07F9               	addwf	malloc@n+1,f
  2717     03C2                     l764:
  2718     03C2  3000               	movlw	0
  2719     03C3  0279               	subwf	malloc@n+1,w
  2720     03C4  3002               	movlw	2
  2721     03C5  1903               	skipnz
  2722     03C6  0278               	subwf	malloc@n,w
  2723     03C7  1803               	skipnc
  2724     03C8  2BCA               	goto	u751
  2725     03C9  2BCB               	goto	u750
  2726     03CA                     u751:
  2727     03CA  2BD0               	goto	l1381
  2728     03CB                     u750:
  2729     03CB                     l1379:
  2730     03CB  3002               	movlw	2
  2731     03CC  00F8               	movwf	malloc@n
  2732     03CD  3000               	movlw	0
  2733     03CE  00F9               	movwf	malloc@n+1
  2734     03CF  2BE8               	goto	l1389
  2735     03D0                     l1381:
  2736     03D0  0879               	movf	malloc@n+1,w
  2737     03D1  00FB               	movwf	??_malloc+1
  2738     03D2  0878               	movf	malloc@n,w
  2739     03D3  00FA               	movwf	??_malloc
  2740     03D4  09FA               	comf	??_malloc,f
  2741     03D5  09FB               	comf	??_malloc+1,f
  2742     03D6  3000               	movlw	0
  2743     03D7  027B               	subwf	??_malloc+1,w
  2744     03D8  3002               	movlw	2
  2745     03D9  1903               	skipnz
  2746     03DA  027A               	subwf	??_malloc,w
  2747     03DB  1803               	skipnc
  2748     03DC  2BDE               	goto	u761
  2749     03DD  2BDF               	goto	u760
  2750     03DE                     u761:
  2751     03DE  2BE8               	goto	l1389
  2752     03DF                     u760:
  2753     03DF                     l1383:
  2754     03DF  300C               	movlw	12
  2755     03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2756     03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2757     03E2  00AF               	movwf	_errno^(0+128)
  2758     03E3  3000               	movlw	0
  2759     03E4  00B0               	movwf	(_errno^(0+128)+1)
  2760     03E5                     l1385:
  2761     03E5  01F8               	clrf	?_malloc
  2762     03E6  01F9               	clrf	?_malloc+1
  2763     03E7  2C7B               	goto	l768
  2764     03E8                     l1389:
  2765     03E8                     l1391:
  2766     03E8  0879               	movf	malloc@n+1,w
  2767     03E9  00F1               	movwf	___simple_search_fl@n+1
  2768     03EA  0878               	movf	malloc@n,w
  2769     03EB  00F0               	movwf	___simple_search_fl@n
  2770     03EC  120A  118A  2652  120A  118A  	fcall	___simple_search_fl
  2771     03F1  0870               	movf	?___simple_search_fl,w
  2772     03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2773     03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2774     03F4  00B4               	movwf	malloc@p
  2775     03F5  0871               	movf	?___simple_search_fl+1,w
  2776     03F6  00B5               	movwf	malloc@p+1
  2777     03F7                     l1393:
  2778     03F7  0834               	movf	malloc@p,w
  2779     03F8  0435               	iorwf	malloc@p+1,w
  2780     03F9  1D03               	btfss	3,2
  2781     03FA  2BFC               	goto	u771
  2782     03FB  2BFD               	goto	u770
  2783     03FC                     u771:
  2784     03FC  2C77               	goto	l1421
  2785     03FD                     u770:
  2786     03FD                     l1395:
  2787     03FD  086B               	movf	malloc@cur,w
  2788     03FE  1683               	bsf	3,5	;RP0=1, select bank1
  2789     03FF  1303               	bcf	3,6	;RP1=0, select bank1
  2790     0400  022D               	subwf	malloc@end^(0+128),w
  2791     0401  00FA               	movwf	??_malloc
  2792     0402  1283               	bcf	3,5	;RP0=0, select bank0
  2793     0403  1303               	bcf	3,6	;RP1=0, select bank0
  2794     0404  086C               	movf	malloc@cur+1,w
  2795     0405  1C03               	skipc
  2796     0406  0A6C               	incf	malloc@cur+1,w
  2797     0407  1683               	bsf	3,5	;RP0=1, select bank1
  2798     0408  1303               	bcf	3,6	;RP1=0, select bank1
  2799     0409  022E               	subwf	(malloc@end+1)^(0+128),w
  2800     040A  00FB               	movwf	??_malloc+1
  2801     040B  0879               	movf	malloc@n+1,w
  2802     040C  027B               	subwf	??_malloc+1,w
  2803     040D  1D03               	skipz
  2804     040E  2C11               	goto	u785
  2805     040F  0878               	movf	malloc@n,w
  2806     0410  027A               	subwf	??_malloc,w
  2807     0411                     u785:
  2808     0411  1803               	skipnc
  2809     0412  2C14               	goto	u781
  2810     0413  2C15               	goto	u780
  2811     0414                     u781:
  2812     0414  2C56               	goto	l770
  2813     0415                     u780:
  2814     0415                     l1397:
  2815     0415  0878               	movf	malloc@n,w
  2816     0416  3E02               	addlw	2
  2817     0417  1283               	bcf	3,5	;RP0=0, select bank0
  2818     0418  1303               	bcf	3,6	;RP1=0, select bank0
  2819     0419  00AE               	movwf	malloc@m
  2820     041A  0879               	movf	malloc@n+1,w
  2821     041B  1803               	skipnc
  2822     041C  3E01               	addlw	1
  2823     041D  3E00               	addlw	0
  2824     041E  00AF               	movwf	malloc@m+1
  2825     041F                     l1399:
  2826     041F  302E               	movlw	(low (malloc@m| 0))& (0+255)
  2827     0420  00F0               	movwf	___expand_heap@pn
  2828     0421  120A  118A  20E1  120A  118A  	fcall	___expand_heap
  2829     0426  0870               	movf	?___expand_heap,w
  2830     0427  1283               	bcf	3,5	;RP0=0, select bank0
  2831     0428  1303               	bcf	3,6	;RP1=0, select bank0
  2832     0429  00B6               	movwf	malloc@new
  2833     042A  0871               	movf	?___expand_heap+1,w
  2834     042B  00B7               	movwf	malloc@new+1
  2835     042C                     l1401:
  2836     042C  0836               	movf	malloc@new,w
  2837     042D  0437               	iorwf	malloc@new+1,w
  2838     042E  1D03               	btfss	3,2
  2839     042F  2C31               	goto	u791
  2840     0430  2C32               	goto	u790
  2841     0431                     u791:
  2842     0431  2C33               	goto	l1407
  2843     0432                     u790:
  2844     0432  2BE5               	goto	l1385
  2845     0433                     l1407:
  2846     0433  1683               	bsf	3,5	;RP0=1, select bank1
  2847     0434  1303               	bcf	3,6	;RP1=0, select bank1
  2848     0435  082E               	movf	(malloc@end+1)^(0+128),w
  2849     0436  1283               	bcf	3,5	;RP0=0, select bank0
  2850     0437  1303               	bcf	3,6	;RP1=0, select bank0
  2851     0438  0637               	xorwf	malloc@new+1,w
  2852     0439  1D03               	skipz
  2853     043A  2C41               	goto	u805
  2854     043B  1683               	bsf	3,5	;RP0=1, select bank1
  2855     043C  1303               	bcf	3,6	;RP1=0, select bank1
  2856     043D  082D               	movf	malloc@end^(0+128),w
  2857     043E  1283               	bcf	3,5	;RP0=0, select bank0
  2858     043F  1303               	bcf	3,6	;RP1=0, select bank0
  2859     0440  0636               	xorwf	malloc@new,w
  2860     0441                     u805:
  2861     0441  1903               	skipnz
  2862     0442  2C44               	goto	u801
  2863     0443  2C45               	goto	u800
  2864     0444                     u801:
  2865     0444  2C49               	goto	l772
  2866     0445                     u800:
  2867     0445                     l1409:
  2868     0445  0836               	movf	malloc@new,w
  2869     0446  00EB               	movwf	malloc@cur
  2870     0447  0837               	movf	malloc@new+1,w
  2871     0448  00EC               	movwf	malloc@cur+1
  2872     0449                     l772:
  2873     0449  082E               	movf	malloc@m,w
  2874     044A  0736               	addwf	malloc@new,w
  2875     044B  1683               	bsf	3,5	;RP0=1, select bank1
  2876     044C  1303               	bcf	3,6	;RP1=0, select bank1
  2877     044D  00AD               	movwf	malloc@end^(0+128)
  2878     044E  1283               	bcf	3,5	;RP0=0, select bank0
  2879     044F  1303               	bcf	3,6	;RP1=0, select bank0
  2880     0450  0837               	movf	malloc@new+1,w
  2881     0451  1803               	skipnc
  2882     0452  3E01               	addlw	1
  2883     0453  1683               	bsf	3,5	;RP0=1, select bank1
  2884     0454  1303               	bcf	3,6	;RP1=0, select bank1
  2885     0455  00AE               	movwf	(malloc@end^(0+128)+1)
  2886     0456                     l770:
  2887     0456  1283               	bcf	3,5	;RP0=0, select bank0
  2888     0457  1303               	bcf	3,6	;RP1=0, select bank0
  2889     0458  086B               	movf	malloc@cur,w
  2890     0459  00B4               	movwf	malloc@p
  2891     045A  086C               	movf	malloc@cur+1,w
  2892     045B  00B5               	movwf	malloc@p+1
  2893     045C                     l1411:
  2894     045C  0834               	movf	malloc@p,w
  2895     045D  00B0               	movwf	malloc@sz
  2896     045E  0835               	movf	malloc@p+1,w
  2897     045F  00B1               	movwf	malloc@sz+1
  2898     0460                     l1413:
  2899     0460  0830               	movf	malloc@sz,w
  2900     0461  0084               	movwf	4
  2901     0462  1783               	bsf	3,7
  2902     0463  1C31               	btfss	malloc@sz+1,0
  2903     0464  1383               	bcf	3,7
  2904     0465  0878               	movf	malloc@n,w
  2905     0466  0080               	movwf	0
  2906     0467  0A84               	incf	4,f
  2907     0468  0879               	movf	malloc@n+1,w
  2908     0469  0080               	movwf	0
  2909     046A                     l1415:
  2910     046A  3002               	movlw	2
  2911     046B  07B0               	addwf	malloc@sz,f
  2912     046C  1803               	skipnc
  2913     046D  0AB1               	incf	malloc@sz+1,f
  2914     046E                     l1417:
  2915     046E  0830               	movf	malloc@sz,w
  2916     046F  00B4               	movwf	malloc@p
  2917     0470  0831               	movf	malloc@sz+1,w
  2918     0471  00B5               	movwf	malloc@p+1
  2919     0472                     l1419:
  2920     0472  0878               	movf	malloc@n,w
  2921     0473  3E02               	addlw	2
  2922     0474  07EB               	addwf	malloc@cur,f
  2923     0475  1803               	skipnc
  2924     0476  0AEC               	incf	malloc@cur+1,f
  2925     0477                     l1421:
  2926     0477  0834               	movf	malloc@p,w
  2927     0478  00F8               	movwf	?_malloc
  2928     0479  0835               	movf	malloc@p+1,w
  2929     047A  00F9               	movwf	?_malloc+1
  2930     047B                     l768:
  2931     047B  0008               	return
  2932     047C                     __end_of_malloc:
  2933                           
  2934                           	psect	text12
  2935     0652                     __ptext12:	
  2936 ;; *************** function ___simple_search_fl *****************
  2937 ;; Defined at:
  2938 ;;		line 19 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  n               2    0[COMMON] unsigned int 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;  split           2    4[BANK0 ] PTR struct chunk
  2943 ;;		 -> __heap_hi$.$next(2), NULL(0), 
  2944 ;;  remaining_si    2    0[BANK0 ] unsigned int 
  2945 ;;  next            2    8[BANK0 ] PTR struct chunk
  2946 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2947 ;;  best            2   12[BANK0 ] PTR struct chunk
  2948 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2949 ;;  c               2   10[BANK0 ] PTR struct chunk
  2950 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2951 ;;  last            2    6[BANK0 ] PTR struct chunk
  2952 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2953 ;;  best_last       2    2[BANK0 ] PTR struct chunk
  2954 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  2    0[COMMON] PTR void 
  2957 ;; Registers used:
  2958 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2964 ;;      Params:         2       0       0       0       0
  2965 ;;      Locals:         0      14       0       0       0
  2966 ;;      Temps:          6       0       0       0       0
  2967 ;;      Totals:         8      14       0       0       0
  2968 ;;Total ram usage:       22 bytes
  2969 ;; Hardware stack levels used: 1
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_malloc
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977     0652                     ___simple_search_fl:	
  2978                           ;psect for function ___simple_search_fl
  2979                           
  2980     0652                     l1271:	
  2981                           ;incstack = 0
  2982                           ; Regs used in ___simple_search_fl: [wreg-fsr0h+status,2+status,0]
  2983                           
  2984     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2985     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2986     0654  01AC               	clrf	___simple_search_fl@best
  2987     0655  01AD               	clrf	___simple_search_fl@best+1
  2988     0656  01A2               	clrf	___simple_search_fl@best_last
  2989     0657  01A3               	clrf	___simple_search_fl@best_last+1
  2990     0658  01A6               	clrf	___simple_search_fl@last
  2991     0659  01A7               	clrf	___simple_search_fl@last+1
  2992     065A                     l1273:
  2993     065A  086D               	movf	___freelist,w
  2994     065B  046E               	iorwf	___freelist+1,w
  2995     065C  1D03               	btfss	3,2
  2996     065D  2E5F               	goto	u551
  2997     065E  2E60               	goto	u550
  2998     065F                     u551:
  2999     065F  2E63               	goto	l1279
  3000     0660                     u550:
  3001     0660                     l1275:
  3002     0660  01F0               	clrf	?___simple_search_fl
  3003     0661  01F1               	clrf	?___simple_search_fl+1
  3004     0662  2FD7               	goto	l727
  3005     0663                     l1279:
  3006     0663  086D               	movf	___freelist,w
  3007     0664  00AA               	movwf	___simple_search_fl@c
  3008     0665  086E               	movf	___freelist+1,w
  3009     0666  00AB               	movwf	___simple_search_fl@c+1
  3010     0667  2F1C               	goto	l1305
  3011     0668                     l1281:
  3012     0668  082A               	movf	___simple_search_fl@c,w
  3013     0669  0084               	movwf	4
  3014     066A  1783               	bsf	3,7
  3015     066B  1C2B               	btfss	___simple_search_fl@c+1,0
  3016     066C  1383               	bcf	3,7
  3017     066D  0800               	movf	0,w
  3018     066E  00F2               	movwf	??___simple_search_fl
  3019     066F  0A84               	incf	4,f
  3020     0670  0800               	movf	0,w
  3021     0671  00F3               	movwf	??___simple_search_fl+1
  3022     0672  0871               	movf	___simple_search_fl@n+1,w
  3023     0673  0673               	xorwf	??___simple_search_fl+1,w
  3024     0674  1D03               	skipz
  3025     0675  2E78               	goto	u565
  3026     0676  0870               	movf	___simple_search_fl@n,w
  3027     0677  0672               	xorwf	??___simple_search_fl,w
  3028     0678                     u565:
  3029     0678  1D03               	skipz
  3030     0679  2E7B               	goto	u561
  3031     067A  2E7C               	goto	u560
  3032     067B                     u561:
  3033     067B  2EC4               	goto	l1293
  3034     067C                     u560:
  3035     067C                     l1283:
  3036     067C  0826               	movf	___simple_search_fl@last,w
  3037     067D  0427               	iorwf	___simple_search_fl@last+1,w
  3038     067E  1903               	btfsc	3,2
  3039     067F  2E81               	goto	u571
  3040     0680  2E82               	goto	u570
  3041     0681                     u571:
  3042     0681  2EA8               	goto	l1287
  3043     0682                     u570:
  3044     0682                     l1285:
  3045     0682  082A               	movf	___simple_search_fl@c,w
  3046     0683  3E02               	addlw	2
  3047     0684  00F2               	movwf	??___simple_search_fl
  3048     0685  082B               	movf	___simple_search_fl@c+1,w
  3049     0686  1803               	skipnc
  3050     0687  3E01               	addlw	1
  3051     0688  3E00               	addlw	0
  3052     0689  00F3               	movwf	??___simple_search_fl+1
  3053     068A  0872               	movf	??___simple_search_fl,w
  3054     068B  0084               	movwf	4
  3055     068C  1783               	bsf	3,7
  3056     068D  1C73               	btfss	??___simple_search_fl+1,0
  3057     068E  1383               	bcf	3,7
  3058     068F  0800               	movf	0,w
  3059     0690  00F4               	movwf	??___simple_search_fl+2
  3060     0691  0A84               	incf	4,f
  3061     0692  0800               	movf	0,w
  3062     0693  00F5               	movwf	??___simple_search_fl+3
  3063     0694  0826               	movf	___simple_search_fl@last,w
  3064     0695  3E02               	addlw	2
  3065     0696  00F6               	movwf	??___simple_search_fl+4
  3066     0697  0827               	movf	___simple_search_fl@last+1,w
  3067     0698  1803               	skipnc
  3068     0699  3E01               	addlw	1
  3069     069A  3E00               	addlw	0
  3070     069B  00F7               	movwf	??___simple_search_fl+5
  3071     069C  0876               	movf	??___simple_search_fl+4,w
  3072     069D  0084               	movwf	4
  3073     069E  1783               	bsf	3,7
  3074     069F  1C77               	btfss	??___simple_search_fl+5,0
  3075     06A0  1383               	bcf	3,7
  3076     06A1  0874               	movf	??___simple_search_fl+2,w
  3077     06A2  0080               	movwf	0
  3078     06A3  0875               	movf	??___simple_search_fl+3,w
  3079     06A4  0A84               	incf	4,f
  3080     06A5  0080               	movwf	0
  3081     06A6  0384               	decf	4,f
  3082     06A7  2EBB               	goto	l1289
  3083     06A8                     l1287:
  3084     06A8  082A               	movf	___simple_search_fl@c,w
  3085     06A9  3E02               	addlw	2
  3086     06AA  00F2               	movwf	??___simple_search_fl
  3087     06AB  082B               	movf	___simple_search_fl@c+1,w
  3088     06AC  1803               	skipnc
  3089     06AD  3E01               	addlw	1
  3090     06AE  3E00               	addlw	0
  3091     06AF  00F3               	movwf	??___simple_search_fl+1
  3092     06B0  0872               	movf	??___simple_search_fl,w
  3093     06B1  0084               	movwf	4
  3094     06B2  1783               	bsf	3,7
  3095     06B3  1C73               	btfss	??___simple_search_fl+1,0
  3096     06B4  1383               	bcf	3,7
  3097     06B5  0800               	movf	0,w
  3098     06B6  00ED               	movwf	___freelist
  3099     06B7  0A84               	incf	4,f
  3100     06B8  0800               	movf	0,w
  3101     06B9  0384               	decf	4,f
  3102     06BA  00EE               	movwf	___freelist+1
  3103     06BB                     l1289:
  3104     06BB  082A               	movf	___simple_search_fl@c,w
  3105     06BC  3E02               	addlw	2
  3106     06BD  00F0               	movwf	?___simple_search_fl
  3107     06BE  082B               	movf	___simple_search_fl@c+1,w
  3108     06BF  1803               	skipnc
  3109     06C0  3E01               	addlw	1
  3110     06C1  3E00               	addlw	0
  3111     06C2  00F1               	movwf	?___simple_search_fl+1
  3112     06C3  2FD7               	goto	l727
  3113     06C4                     l1293:
  3114     06C4  082A               	movf	___simple_search_fl@c,w
  3115     06C5  0084               	movwf	4
  3116     06C6  1783               	bsf	3,7
  3117     06C7  1C2B               	btfss	___simple_search_fl@c+1,0
  3118     06C8  1383               	bcf	3,7
  3119     06C9  0800               	movf	0,w
  3120     06CA  00F2               	movwf	??___simple_search_fl
  3121     06CB  0A84               	incf	4,f
  3122     06CC  0800               	movf	0,w
  3123     06CD  00F3               	movwf	??___simple_search_fl+1
  3124     06CE  0873               	movf	??___simple_search_fl+1,w
  3125     06CF  0271               	subwf	___simple_search_fl@n+1,w
  3126     06D0  1D03               	skipz
  3127     06D1  2ED4               	goto	u585
  3128     06D2  0872               	movf	??___simple_search_fl,w
  3129     06D3  0270               	subwf	___simple_search_fl@n,w
  3130     06D4                     u585:
  3131     06D4  1803               	skipnc
  3132     06D5  2ED7               	goto	u581
  3133     06D6  2ED8               	goto	u580
  3134     06D7                     u581:
  3135     06D7  2F05               	goto	l735
  3136     06D8                     u580:
  3137     06D8                     l1295:
  3138     06D8  082C               	movf	___simple_search_fl@best,w
  3139     06D9  042D               	iorwf	___simple_search_fl@best+1,w
  3140     06DA  1903               	btfsc	3,2
  3141     06DB  2EDD               	goto	u591
  3142     06DC  2EDE               	goto	u590
  3143     06DD                     u591:
  3144     06DD  2EFD               	goto	l1301
  3145     06DE                     u590:
  3146     06DE                     l1297:
  3147     06DE  082C               	movf	___simple_search_fl@best,w
  3148     06DF  0084               	movwf	4
  3149     06E0  1783               	bsf	3,7
  3150     06E1  1C2D               	btfss	___simple_search_fl@best+1,0
  3151     06E2  1383               	bcf	3,7
  3152     06E3  0800               	movf	0,w
  3153     06E4  00F2               	movwf	??___simple_search_fl
  3154     06E5  0A84               	incf	4,f
  3155     06E6  0800               	movf	0,w
  3156     06E7  00F3               	movwf	??___simple_search_fl+1
  3157     06E8  082A               	movf	___simple_search_fl@c,w
  3158     06E9  0084               	movwf	4
  3159     06EA  1783               	bsf	3,7
  3160     06EB  1C2B               	btfss	___simple_search_fl@c+1,0
  3161     06EC  1383               	bcf	3,7
  3162     06ED  0800               	movf	0,w
  3163     06EE  00F4               	movwf	??___simple_search_fl+2
  3164     06EF  0A84               	incf	4,f
  3165     06F0  0800               	movf	0,w
  3166     06F1  00F5               	movwf	??___simple_search_fl+3
  3167     06F2  0873               	movf	??___simple_search_fl+1,w
  3168     06F3  0275               	subwf	??___simple_search_fl+3,w
  3169     06F4  1D03               	skipz
  3170     06F5  2EF8               	goto	u605
  3171     06F6  0872               	movf	??___simple_search_fl,w
  3172     06F7  0274               	subwf	??___simple_search_fl+2,w
  3173     06F8                     u605:
  3174     06F8  1C03               	skipc
  3175     06F9  2EFB               	goto	u601
  3176     06FA  2EFC               	goto	u600
  3177     06FB                     u601:
  3178     06FB  2EFD               	goto	l1301
  3179     06FC                     u600:
  3180     06FC  2F05               	goto	l735
  3181     06FD                     l1301:
  3182     06FD  082A               	movf	___simple_search_fl@c,w
  3183     06FE  00AC               	movwf	___simple_search_fl@best
  3184     06FF  082B               	movf	___simple_search_fl@c+1,w
  3185     0700  00AD               	movwf	___simple_search_fl@best+1
  3186     0701  0826               	movf	___simple_search_fl@last,w
  3187     0702  00A2               	movwf	___simple_search_fl@best_last
  3188     0703  0827               	movf	___simple_search_fl@last+1,w
  3189     0704  00A3               	movwf	___simple_search_fl@best_last+1
  3190     0705                     l735:
  3191     0705  082A               	movf	___simple_search_fl@c,w
  3192     0706  00A6               	movwf	___simple_search_fl@last
  3193     0707  082B               	movf	___simple_search_fl@c+1,w
  3194     0708  00A7               	movwf	___simple_search_fl@last+1
  3195     0709                     l1303:
  3196     0709  082A               	movf	___simple_search_fl@c,w
  3197     070A  3E02               	addlw	2
  3198     070B  00F2               	movwf	??___simple_search_fl
  3199     070C  082B               	movf	___simple_search_fl@c+1,w
  3200     070D  1803               	skipnc
  3201     070E  3E01               	addlw	1
  3202     070F  3E00               	addlw	0
  3203     0710  00F3               	movwf	??___simple_search_fl+1
  3204     0711  0872               	movf	??___simple_search_fl,w
  3205     0712  0084               	movwf	4
  3206     0713  1783               	bsf	3,7
  3207     0714  1C73               	btfss	??___simple_search_fl+1,0
  3208     0715  1383               	bcf	3,7
  3209     0716  0800               	movf	0,w
  3210     0717  00AA               	movwf	___simple_search_fl@c
  3211     0718  0A84               	incf	4,f
  3212     0719  0800               	movf	0,w
  3213     071A  0384               	decf	4,f
  3214     071B  00AB               	movwf	___simple_search_fl@c+1
  3215     071C                     l1305:
  3216     071C  082A               	movf	___simple_search_fl@c,w
  3217     071D  042B               	iorwf	___simple_search_fl@c+1,w
  3218     071E  1D03               	btfss	3,2
  3219     071F  2F21               	goto	u611
  3220     0720  2F22               	goto	u610
  3221     0721                     u611:
  3222     0721  2E68               	goto	l1281
  3223     0722                     u610:
  3224     0722                     l1307:
  3225     0722  082C               	movf	___simple_search_fl@best,w
  3226     0723  042D               	iorwf	___simple_search_fl@best+1,w
  3227     0724  1903               	btfsc	3,2
  3228     0725  2F27               	goto	u621
  3229     0726  2F28               	goto	u620
  3230     0727                     u621:
  3231     0727  2E60               	goto	l1275
  3232     0728                     u620:
  3233     0728                     l1309:
  3234     0728  082C               	movf	___simple_search_fl@best,w
  3235     0729  3E02               	addlw	2
  3236     072A  00F2               	movwf	??___simple_search_fl
  3237     072B  082D               	movf	___simple_search_fl@best+1,w
  3238     072C  1803               	skipnc
  3239     072D  3E01               	addlw	1
  3240     072E  3E00               	addlw	0
  3241     072F  00F3               	movwf	??___simple_search_fl+1
  3242     0730  0872               	movf	??___simple_search_fl,w
  3243     0731  0084               	movwf	4
  3244     0732  1783               	bsf	3,7
  3245     0733  1C73               	btfss	??___simple_search_fl+1,0
  3246     0734  1383               	bcf	3,7
  3247     0735  0800               	movf	0,w
  3248     0736  00A8               	movwf	___simple_search_fl@next
  3249     0737  0A84               	incf	4,f
  3250     0738  0800               	movf	0,w
  3251     0739  0384               	decf	4,f
  3252     073A  00A9               	movwf	___simple_search_fl@next+1
  3253     073B  082C               	movf	___simple_search_fl@best,w
  3254     073C  0084               	movwf	4
  3255     073D  1783               	bsf	3,7
  3256     073E  1C2D               	btfss	___simple_search_fl@best+1,0
  3257     073F  1383               	bcf	3,7
  3258     0740  0800               	movf	0,w
  3259     0741  00F2               	movwf	??___simple_search_fl
  3260     0742  0A84               	incf	4,f
  3261     0743  0800               	movf	0,w
  3262     0744  00F3               	movwf	??___simple_search_fl+1
  3263     0745  0870               	movf	___simple_search_fl@n,w
  3264     0746  0272               	subwf	??___simple_search_fl,w
  3265     0747  00F4               	movwf	??___simple_search_fl+2
  3266     0748  0871               	movf	___simple_search_fl@n+1,w
  3267     0749  1C03               	skipc
  3268     074A  0A71               	incf	___simple_search_fl@n+1,w
  3269     074B  0273               	subwf	??___simple_search_fl+1,w
  3270     074C  00F5               	movwf	??___simple_search_fl+3
  3271     074D  3000               	movlw	0
  3272     074E  0275               	subwf	??___simple_search_fl+3,w
  3273     074F  3005               	movlw	5
  3274     0750  1903               	skipnz
  3275     0751  0274               	subwf	??___simple_search_fl+2,w
  3276     0752  1C03               	skipc
  3277     0753  2F55               	goto	u631
  3278     0754  2F56               	goto	u630
  3279     0755                     u631:
  3280     0755  2FAE               	goto	l738
  3281     0756                     u630:
  3282     0756                     l1311:
  3283     0756  082C               	movf	___simple_search_fl@best,w
  3284     0757  0084               	movwf	4
  3285     0758  1783               	bsf	3,7
  3286     0759  1C2D               	btfss	___simple_search_fl@best+1,0
  3287     075A  1383               	bcf	3,7
  3288     075B  0800               	movf	0,w
  3289     075C  00F2               	movwf	??___simple_search_fl
  3290     075D  0A84               	incf	4,f
  3291     075E  0800               	movf	0,w
  3292     075F  00F3               	movwf	??___simple_search_fl+1
  3293     0760  0870               	movf	___simple_search_fl@n,w
  3294     0761  0272               	subwf	??___simple_search_fl,w
  3295     0762  00F4               	movwf	??___simple_search_fl+2
  3296     0763  0871               	movf	___simple_search_fl@n+1,w
  3297     0764  1C03               	skipc
  3298     0765  0A71               	incf	___simple_search_fl@n+1,w
  3299     0766  0273               	subwf	??___simple_search_fl+1,w
  3300     0767  00F5               	movwf	??___simple_search_fl+3
  3301     0768  0874               	movf	??___simple_search_fl+2,w
  3302     0769  3EFE               	addlw	254
  3303     076A  00A0               	movwf	___simple_search_fl@remaining_size
  3304     076B  0875               	movf	??___simple_search_fl+3,w
  3305     076C  1803               	skipnc
  3306     076D  3E01               	addlw	1
  3307     076E  3EFF               	addlw	255
  3308     076F  00A1               	movwf	___simple_search_fl@remaining_size+1
  3309     0770                     l1313:
  3310     0770  082C               	movf	___simple_search_fl@best,w
  3311     0771  0084               	movwf	4
  3312     0772  1783               	bsf	3,7
  3313     0773  1C2D               	btfss	___simple_search_fl@best+1,0
  3314     0774  1383               	bcf	3,7
  3315     0775  0870               	movf	___simple_search_fl@n,w
  3316     0776  0080               	movwf	0
  3317     0777  0A84               	incf	4,f
  3318     0778  0871               	movf	___simple_search_fl@n+1,w
  3319     0779  0080               	movwf	0
  3320     077A                     l1315:
  3321     077A  082C               	movf	___simple_search_fl@best,w
  3322     077B  0084               	movwf	4
  3323     077C  1783               	bsf	3,7
  3324     077D  1C2D               	btfss	___simple_search_fl@best+1,0
  3325     077E  1383               	bcf	3,7
  3326     077F  0800               	movf	0,w
  3327     0780  072C               	addwf	___simple_search_fl@best,w
  3328     0781  00F2               	movwf	??___simple_search_fl
  3329     0782  082D               	movf	___simple_search_fl@best+1,w
  3330     0783  1803               	skipnc
  3331     0784  3E01               	addlw	1
  3332     0785  00F3               	movwf	??___simple_search_fl+1
  3333     0786  0872               	movf	??___simple_search_fl,w
  3334     0787  3E02               	addlw	2
  3335     0788  00A4               	movwf	___simple_search_fl@split
  3336     0789  0873               	movf	??___simple_search_fl+1,w
  3337     078A  1803               	skipnc
  3338     078B  3E01               	addlw	1
  3339     078C  3E00               	addlw	0
  3340     078D  00A5               	movwf	___simple_search_fl@split+1
  3341     078E  0824               	movf	___simple_search_fl@split,w
  3342     078F  0084               	movwf	4
  3343     0790  1783               	bsf	3,7
  3344     0791  1C25               	btfss	___simple_search_fl@split+1,0
  3345     0792  1383               	bcf	3,7
  3346     0793  0820               	movf	___simple_search_fl@remaining_size,w
  3347     0794  0080               	movwf	0
  3348     0795  0A84               	incf	4,f
  3349     0796  0821               	movf	___simple_search_fl@remaining_size+1,w
  3350     0797  0080               	movwf	0
  3351     0798                     l1317:
  3352     0798  0824               	movf	___simple_search_fl@split,w
  3353     0799  3E02               	addlw	2
  3354     079A  00F2               	movwf	??___simple_search_fl
  3355     079B  0825               	movf	___simple_search_fl@split+1,w
  3356     079C  1803               	skipnc
  3357     079D  3E01               	addlw	1
  3358     079E  3E00               	addlw	0
  3359     079F  00F3               	movwf	??___simple_search_fl+1
  3360     07A0  0872               	movf	??___simple_search_fl,w
  3361     07A1  0084               	movwf	4
  3362     07A2  1783               	bsf	3,7
  3363     07A3  1C73               	btfss	??___simple_search_fl+1,0
  3364     07A4  1383               	bcf	3,7
  3365     07A5  0828               	movf	___simple_search_fl@next,w
  3366     07A6  0080               	movwf	0
  3367     07A7  0A84               	incf	4,f
  3368     07A8  0829               	movf	___simple_search_fl@next+1,w
  3369     07A9  0080               	movwf	0
  3370     07AA                     l1319:
  3371     07AA  0824               	movf	___simple_search_fl@split,w
  3372     07AB  00A8               	movwf	___simple_search_fl@next
  3373     07AC  0825               	movf	___simple_search_fl@split+1,w
  3374     07AD  00A9               	movwf	___simple_search_fl@next+1
  3375     07AE                     l738:
  3376     07AE  082D               	movf	___simple_search_fl@best+1,w
  3377     07AF  066E               	xorwf	___freelist+1,w
  3378     07B0  1D03               	skipz
  3379     07B1  2FB4               	goto	u645
  3380     07B2  082C               	movf	___simple_search_fl@best,w
  3381     07B3  066D               	xorwf	___freelist,w
  3382     07B4                     u645:
  3383     07B4  1D03               	skipz
  3384     07B5  2FB7               	goto	u641
  3385     07B6  2FB8               	goto	u640
  3386     07B7                     u641:
  3387     07B7  2FBD               	goto	l1323
  3388     07B8                     u640:
  3389     07B8                     l1321:
  3390     07B8  0828               	movf	___simple_search_fl@next,w
  3391     07B9  00ED               	movwf	___freelist
  3392     07BA  0829               	movf	___simple_search_fl@next+1,w
  3393     07BB  00EE               	movwf	___freelist+1
  3394     07BC  2FCF               	goto	l1325
  3395     07BD                     l1323:
  3396     07BD  0822               	movf	___simple_search_fl@best_last,w
  3397     07BE  3E02               	addlw	2
  3398     07BF  00F2               	movwf	??___simple_search_fl
  3399     07C0  0823               	movf	___simple_search_fl@best_last+1,w
  3400     07C1  1803               	skipnc
  3401     07C2  3E01               	addlw	1
  3402     07C3  3E00               	addlw	0
  3403     07C4  00F3               	movwf	??___simple_search_fl+1
  3404     07C5  0872               	movf	??___simple_search_fl,w
  3405     07C6  0084               	movwf	4
  3406     07C7  1783               	bsf	3,7
  3407     07C8  1C73               	btfss	??___simple_search_fl+1,0
  3408     07C9  1383               	bcf	3,7
  3409     07CA  0828               	movf	___simple_search_fl@next,w
  3410     07CB  0080               	movwf	0
  3411     07CC  0A84               	incf	4,f
  3412     07CD  0829               	movf	___simple_search_fl@next+1,w
  3413     07CE  0080               	movwf	0
  3414     07CF                     l1325:
  3415     07CF  082C               	movf	___simple_search_fl@best,w
  3416     07D0  3E02               	addlw	2
  3417     07D1  00F0               	movwf	?___simple_search_fl
  3418     07D2  082D               	movf	___simple_search_fl@best+1,w
  3419     07D3  1803               	skipnc
  3420     07D4  3E01               	addlw	1
  3421     07D5  3E00               	addlw	0
  3422     07D6  00F1               	movwf	?___simple_search_fl+1
  3423     07D7                     l727:
  3424     07D7  0008               	return
  3425     07D8                     __end_of___simple_search_fl:
  3426                           
  3427                           	psect	text13
  3428     00E1                     __ptext13:	
  3429 ;; *************** function ___expand_heap *****************
  3430 ;; Defined at:
  3431 ;;		line 14 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/expand_heap.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;  pn              1    0[COMMON] PTR unsigned int 
  3434 ;;		 -> malloc@m(2), 
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  new_brkp        2    3[COMMON] PTR unsigned char 
  3437 ;;		 -> __heap_hi(0), NULL(0), 
  3438 ;;  n               2    1[COMMON] unsigned int 
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  2    0[COMMON] PTR void 
  3441 ;; Registers used:
  3442 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 0/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3448 ;;      Params:         1       0       0       0       0
  3449 ;;      Locals:         4       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0
  3451 ;;      Totals:         5       0       0       0       0
  3452 ;;Total ram usage:        5 bytes
  3453 ;; Hardware stack levels used: 1
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_malloc
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461     00E1                     ___expand_heap:	
  3462                           ;psect for function ___expand_heap
  3463                           
  3464     00E1                     l1333:	
  3465                           ;incstack = 0
  3466                           ; Regs used in ___expand_heap: [wreg-fsr0h+status,2+status,0]
  3467                           
  3468     00E1  0870               	movf	___expand_heap@pn,w
  3469     00E2  0084               	movwf	4
  3470     00E3  1383               	bcf	3,7	;select IRP bank0
  3471     00E4  0800               	movf	0,w
  3472     00E5  00F1               	movwf	___expand_heap@n
  3473     00E6  0A84               	incf	4,f
  3474     00E7  0800               	movf	0,w
  3475     00E8  00F2               	movwf	___expand_heap@n+1
  3476     00E9                     l1335:
  3477     00E9  1283               	bcf	3,5	;RP0=0, select bank0
  3478     00EA  1303               	bcf	3,6	;RP1=0, select bank0
  3479     00EB  0869               	movf	_brkp,w
  3480     00EC  046A               	iorwf	_brkp+1,w
  3481     00ED  1D03               	btfss	3,2
  3482     00EE  28F0               	goto	u651
  3483     00EF  28F1               	goto	u650
  3484     00F0                     u651:
  3485     00F0  28F5               	goto	l786
  3486     00F1                     u650:
  3487     00F1                     l1337:
  3488     00F1  3070               	movlw	low ___heap_hi
  3489     00F2  00E9               	movwf	_brkp
  3490     00F3  3001               	movlw	high ___heap_hi
  3491     00F4  00EA               	movwf	_brkp+1
  3492     00F5                     l786:
  3493     00F5  3000               	movlw	0
  3494     00F6  0272               	subwf	___expand_heap@n+1,w
  3495     00F7  3004               	movlw	4
  3496     00F8  1903               	skipnz
  3497     00F9  0271               	subwf	___expand_heap@n,w
  3498     00FA  1803               	skipnc
  3499     00FB  28FD               	goto	u661
  3500     00FC  28FE               	goto	u660
  3501     00FD                     u661:
  3502     00FD  2902               	goto	l1341
  3503     00FE                     u660:
  3504     00FE                     l1339:
  3505     00FE  3004               	movlw	4
  3506     00FF  00F1               	movwf	___expand_heap@n
  3507     0100  3000               	movlw	0
  3508     0101  00F2               	movwf	___expand_heap@n+1
  3509     0102                     l1341:
  3510     0102  0871               	movf	___expand_heap@n,w
  3511     0103  0269               	subwf	_brkp,w
  3512     0104  00F3               	movwf	___expand_heap@new_brkp
  3513     0105  086A               	movf	_brkp+1,w
  3514     0106  1C03               	skipc
  3515     0107  036A               	decf	_brkp+1,w
  3516     0108  00F4               	movwf	___expand_heap@new_brkp+1
  3517     0109                     l1343:
  3518     0109  3001               	movlw	high ___heap_lo
  3519     010A  0274               	subwf	___expand_heap@new_brkp+1,w
  3520     010B  3010               	movlw	low ___heap_lo
  3521     010C  1903               	skipnz
  3522     010D  0273               	subwf	___expand_heap@new_brkp,w
  3523     010E  1C03               	skipc
  3524     010F  2911               	goto	u671
  3525     0110  2912               	goto	u670
  3526     0111                     u671:
  3527     0111  291C               	goto	l1347
  3528     0112                     u670:
  3529     0112                     l1345:
  3530     0112  086A               	movf	_brkp+1,w
  3531     0113  0274               	subwf	___expand_heap@new_brkp+1,w
  3532     0114  1D03               	skipz
  3533     0115  2918               	goto	u685
  3534     0116  0869               	movf	_brkp,w
  3535     0117  0273               	subwf	___expand_heap@new_brkp,w
  3536     0118                     u685:
  3537     0118  1C03               	skipc
  3538     0119  291B               	goto	u681
  3539     011A  291C               	goto	u680
  3540     011B                     u681:
  3541     011B  2925               	goto	l1353
  3542     011C                     u680:
  3543     011C                     l1347:
  3544     011C  300C               	movlw	12
  3545     011D  1683               	bsf	3,5	;RP0=1, select bank1
  3546     011E  1303               	bcf	3,6	;RP1=0, select bank1
  3547     011F  00AF               	movwf	_errno^(0+128)
  3548     0120  3000               	movlw	0
  3549     0121  00B0               	movwf	(_errno^(0+128)+1)
  3550     0122                     l1349:
  3551     0122  01F0               	clrf	?___expand_heap
  3552     0123  01F1               	clrf	?___expand_heap+1
  3553     0124  292D               	goto	l791
  3554     0125                     l1353:
  3555     0125  0873               	movf	___expand_heap@new_brkp,w
  3556     0126  00E9               	movwf	_brkp
  3557     0127  0874               	movf	___expand_heap@new_brkp+1,w
  3558     0128  00EA               	movwf	_brkp+1
  3559     0129  0869               	movf	_brkp,w
  3560     012A  00F0               	movwf	?___expand_heap
  3561     012B  086A               	movf	_brkp+1,w
  3562     012C  00F1               	movwf	?___expand_heap+1
  3563     012D                     l791:
  3564     012D  0008               	return
  3565     012E                     __end_of___expand_heap:
  3566                           
  3567                           	psect	text14
  3568     0F9B                     __ptext14:	
  3569 ;; *************** function ___wmul *****************
  3570 ;; Defined at:
  3571 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  3572 ;; Parameters:    Size  Location     Type
  3573 ;;  multiplier      2    0[COMMON] unsigned int 
  3574 ;;  multiplicand    2    2[COMMON] unsigned int 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  product         2    4[COMMON] unsigned int 
  3577 ;; Return value:  Size  Location     Type
  3578 ;;                  2    0[COMMON] unsigned int 
  3579 ;; Registers used:
  3580 ;;		wreg, status,2, status,0
  3581 ;; Tracked objects:
  3582 ;;		On entry : 0/0
  3583 ;;		On exit  : 0/0
  3584 ;;		Unchanged: 0/0
  3585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3586 ;;      Params:         4       0       0       0       0
  3587 ;;      Locals:         2       0       0       0       0
  3588 ;;      Temps:          0       0       0       0       0
  3589 ;;      Totals:         6       0       0       0       0
  3590 ;;Total ram usage:        6 bytes
  3591 ;; Hardware stack levels used: 1
  3592 ;; This function calls:
  3593 ;;		Nothing
  3594 ;; This function is called by:
  3595 ;;		_calloc
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599     0F9B                     ___wmul:	
  3600                           ;psect for function ___wmul
  3601                           
  3602     0F9B                     l1359:	
  3603                           ;incstack = 0
  3604                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3605                           
  3606     0F9B  01F4               	clrf	___wmul@product
  3607     0F9C  01F5               	clrf	___wmul@product+1
  3608     0F9D                     l1361:
  3609     0F9D  1C70               	btfss	___wmul@multiplier,0
  3610     0F9E  2FA0               	goto	u701
  3611     0F9F  2FA1               	goto	u700
  3612     0FA0                     u701:
  3613     0FA0  2FA7               	goto	l257
  3614     0FA1                     u700:
  3615     0FA1                     l1363:
  3616     0FA1  0872               	movf	___wmul@multiplicand,w
  3617     0FA2  07F4               	addwf	___wmul@product,f
  3618     0FA3  1803               	skipnc
  3619     0FA4  0AF5               	incf	___wmul@product+1,f
  3620     0FA5  0873               	movf	___wmul@multiplicand+1,w
  3621     0FA6  07F5               	addwf	___wmul@product+1,f
  3622     0FA7                     l257:
  3623     0FA7  3001               	movlw	1
  3624     0FA8                     u715:
  3625     0FA8  1003               	clrc
  3626     0FA9  0DF2               	rlf	___wmul@multiplicand,f
  3627     0FAA  0DF3               	rlf	___wmul@multiplicand+1,f
  3628     0FAB  3EFF               	addlw	-1
  3629     0FAC  1D03               	skipz
  3630     0FAD  2FA8               	goto	u715
  3631     0FAE                     l1365:
  3632     0FAE  3001               	movlw	1
  3633     0FAF                     u725:
  3634     0FAF  1003               	clrc
  3635     0FB0  0CF1               	rrf	___wmul@multiplier+1,f
  3636     0FB1  0CF0               	rrf	___wmul@multiplier,f
  3637     0FB2  3EFF               	addlw	-1
  3638     0FB3  1D03               	skipz
  3639     0FB4  2FAF               	goto	u725
  3640     0FB5                     l1367:
  3641     0FB5  0870               	movf	___wmul@multiplier,w
  3642     0FB6  0471               	iorwf	___wmul@multiplier+1,w
  3643     0FB7  1D03               	btfss	3,2
  3644     0FB8  2FBA               	goto	u731
  3645     0FB9  2FBB               	goto	u730
  3646     0FBA                     u731:
  3647     0FBA  2F9D               	goto	l1361
  3648     0FBB                     u730:
  3649     0FBB                     l1369:
  3650     0FBB  0875               	movf	___wmul@product+1,w
  3651     0FBC  00F1               	movwf	?___wmul+1
  3652     0FBD  0874               	movf	___wmul@product,w
  3653     0FBE  00F0               	movwf	?___wmul
  3654     0FBF                     l259:
  3655     0FBF  0008               	return
  3656     0FC0                     __end_of___wmul:
  3657                           
  3658                           	psect	text15
  3659     000C                     __ptext15:	
  3660 ;; *************** function _CopyArray *****************
  3661 ;; Defined at:
  3662 ;;		line 80 in file "shape.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  array_          2    0[COMMON] PTR unsigned char 
  3665 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3666 ;;  res             2    2[COMMON] PTR unsigned char 
  3667 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), main@square_1(3), 
  3668 ;;  countElemntA    2    4[COMMON] int 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;  y               2    0[BANK0 ] int 
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3680 ;;      Params:         6       0       0       0       0
  3681 ;;      Locals:         0       2       0       0       0
  3682 ;;      Temps:          7       0       0       0       0
  3683 ;;      Totals:        13       2       0       0       0
  3684 ;;Total ram usage:       15 bytes
  3685 ;; Hardware stack levels used: 1
  3686 ;; This function calls:
  3687 ;;		Nothing
  3688 ;; This function is called by:
  3689 ;;		_ChangeOfCoordinates
  3690 ;;		_Rotate
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694     000C                     _CopyArray:	
  3695                           ;psect for function _CopyArray
  3696                           
  3697     000C                     l1443:	
  3698                           ;incstack = 0
  3699                           ; Regs used in _CopyArray: [wreg-fsr0h+status,2+status,0]
  3700                           
  3701                           
  3702                           ;shape.c: 81:     for(int y = 0; y < countElemntArray; y++){
  3703     000C  1283               	bcf	3,5	;RP0=0, select bank0
  3704     000D  1303               	bcf	3,6	;RP1=0, select bank0
  3705     000E  01A0               	clrf	CopyArray@y
  3706     000F  01A1               	clrf	CopyArray@y+1
  3707     0010  2843               	goto	l1449
  3708     0011                     l1445:
  3709                           
  3710                           ;shape.c: 82:         array_[y] = res[y];
  3711     0011  1283               	bcf	3,5	;RP0=0, select bank0
  3712     0012  1303               	bcf	3,6	;RP1=0, select bank0
  3713     0013  0820               	movf	CopyArray@y,w
  3714     0014  0772               	addwf	CopyArray@res,w
  3715     0015  00F7               	movwf	??_CopyArray+1
  3716     0016  0873               	movf	CopyArray@res+1,w
  3717     0017  00F6               	movwf	??_CopyArray
  3718     0018  1803               	skipnc
  3719     0019  0AF6               	incf	??_CopyArray,f
  3720     001A  1FA0               	btfss	CopyArray@y,7
  3721     001B  281D               	goto	u830
  3722     001C  03F6               	decf	??_CopyArray,f
  3723     001D                     u830:
  3724     001D  0876               	movf	??_CopyArray,w
  3725     001E  00F8               	movwf	??_CopyArray+2
  3726     001F  0877               	movf	??_CopyArray+1,w
  3727     0020  0084               	movwf	4
  3728     0021  1783               	bsf	3,7
  3729     0022  1C78               	btfss	??_CopyArray+2,0
  3730     0023  1383               	bcf	3,7
  3731     0024  0800               	movf	0,w
  3732     0025  00F9               	movwf	??_CopyArray+3
  3733     0026  1283               	bcf	3,5	;RP0=0, select bank0
  3734     0027  1303               	bcf	3,6	;RP1=0, select bank0
  3735     0028  0820               	movf	CopyArray@y,w
  3736     0029  0770               	addwf	CopyArray@array_,w
  3737     002A  00FB               	movwf	??_CopyArray+5
  3738     002B  0871               	movf	CopyArray@array_+1,w
  3739     002C  00FA               	movwf	??_CopyArray+4
  3740     002D  1803               	skipnc
  3741     002E  0AFA               	incf	??_CopyArray+4,f
  3742     002F  1FA0               	btfss	CopyArray@y,7
  3743     0030  2832               	goto	u840
  3744     0031  03FA               	decf	??_CopyArray+4,f
  3745     0032                     u840:
  3746     0032  087A               	movf	??_CopyArray+4,w
  3747     0033  00FC               	movwf	??_CopyArray+6
  3748     0034  087B               	movf	??_CopyArray+5,w
  3749     0035  0084               	movwf	4
  3750     0036  1783               	bsf	3,7
  3751     0037  1C7C               	btfss	??_CopyArray+6,0
  3752     0038  1383               	bcf	3,7
  3753     0039  0879               	movf	??_CopyArray+3,w
  3754     003A  0080               	movwf	0
  3755     003B                     l1447:
  3756                           
  3757                           ;shape.c: 83:     }
  3758     003B  3001               	movlw	1
  3759     003C  1283               	bcf	3,5	;RP0=0, select bank0
  3760     003D  1303               	bcf	3,6	;RP1=0, select bank0
  3761     003E  07A0               	addwf	CopyArray@y,f
  3762     003F  1803               	skipnc
  3763     0040  0AA1               	incf	CopyArray@y+1,f
  3764     0041  3000               	movlw	0
  3765     0042  07A1               	addwf	CopyArray@y+1,f
  3766     0043                     l1449:
  3767     0043  0821               	movf	CopyArray@y+1,w
  3768     0044  3A80               	xorlw	128
  3769     0045  00F6               	movwf	??_CopyArray
  3770     0046  0875               	movf	CopyArray@countElemntArray+1,w
  3771     0047  3A80               	xorlw	128
  3772     0048  0276               	subwf	??_CopyArray,w
  3773     0049  1D03               	skipz
  3774     004A  284D               	goto	u855
  3775     004B  0874               	movf	CopyArray@countElemntArray,w
  3776     004C  0220               	subwf	CopyArray@y,w
  3777     004D                     u855:
  3778     004D  1C03               	skipc
  3779     004E  2850               	goto	u851
  3780     004F  2851               	goto	u850
  3781     0050                     u851:
  3782     0050  2811               	goto	l1445
  3783     0051                     u850:
  3784     0051                     l171:
  3785     0051  0008               	return
  3786     0052                     __end_of_CopyArray:
  3787                           
  3788                           	psect	text16
  3789     0201                     __ptext16:	
  3790 ;; *************** function _Reverse *****************
  3791 ;; Defined at:
  3792 ;;		line 70 in file "shape.c"
  3793 ;; Parameters:    Size  Location     Type
  3794 ;;  array_          2    0[COMMON] PTR unsigned char 
  3795 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3796 ;;  countElemntA    2    2[COMMON] int 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  t               1    0[BANK0 ] unsigned char 
  3799 ;;  j               2    3[BANK0 ] int 
  3800 ;;  i               2    1[BANK0 ] int 
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3810 ;;      Params:         4       0       0       0       0
  3811 ;;      Locals:         0       5       0       0       0
  3812 ;;      Temps:          7       0       0       0       0
  3813 ;;      Totals:        11       5       0       0       0
  3814 ;;Total ram usage:       16 bytes
  3815 ;; Hardware stack levels used: 1
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_RotateDirection
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823     0201                     _Reverse:	
  3824                           ;psect for function _Reverse
  3825                           
  3826     0201                     l1487:	
  3827                           ;incstack = 0
  3828                           ; Regs used in _Reverse: [wreg-fsr0h+status,2+status,0]
  3829                           
  3830                           
  3831                           ;shape.c: 70: void Reverse(char * array_, int countElemntArray);shape.c: 71: {;shape.c: 
      +                          72:     for(int i = 0, j = countElemntArray - 1; i < j; i++, j--)
  3832     0201  1283               	bcf	3,5	;RP0=0, select bank0
  3833     0202  1303               	bcf	3,6	;RP1=0, select bank0
  3834     0203  01A1               	clrf	Reverse@i
  3835     0204  01A2               	clrf	Reverse@i+1
  3836     0205                     l1489:
  3837     0205  0872               	movf	Reverse@countElemntArray,w
  3838     0206  3EFF               	addlw	255
  3839     0207  00A3               	movwf	Reverse@j
  3840     0208  0873               	movf	Reverse@countElemntArray+1,w
  3841     0209  1803               	skipnc
  3842     020A  3E01               	addlw	1
  3843     020B  3EFF               	addlw	255
  3844     020C  00A4               	movwf	Reverse@j+1
  3845     020D  2A70               	goto	l1497
  3846     020E                     l1491:
  3847                           
  3848                           ;shape.c: 73:     {;shape.c: 74:         char t = array_[i];
  3849     020E  1283               	bcf	3,5	;RP0=0, select bank0
  3850     020F  1303               	bcf	3,6	;RP1=0, select bank0
  3851     0210  0821               	movf	Reverse@i,w
  3852     0211  0770               	addwf	Reverse@array_,w
  3853     0212  00F5               	movwf	??_Reverse+1
  3854     0213  0871               	movf	Reverse@array_+1,w
  3855     0214  00F4               	movwf	??_Reverse
  3856     0215  1803               	skipnc
  3857     0216  0AF4               	incf	??_Reverse,f
  3858     0217  1FA1               	btfss	Reverse@i,7
  3859     0218  2A1A               	goto	u900
  3860     0219  03F4               	decf	??_Reverse,f
  3861     021A                     u900:
  3862     021A  0874               	movf	??_Reverse,w
  3863     021B  00F6               	movwf	??_Reverse+2
  3864     021C  0875               	movf	??_Reverse+1,w
  3865     021D  0084               	movwf	4
  3866     021E  1783               	bsf	3,7
  3867     021F  1C76               	btfss	??_Reverse+2,0
  3868     0220  1383               	bcf	3,7
  3869     0221  0800               	movf	0,w
  3870     0222  1283               	bcf	3,5	;RP0=0, select bank0
  3871     0223  1303               	bcf	3,6	;RP1=0, select bank0
  3872     0224  00A0               	movwf	Reverse@t
  3873                           
  3874                           ;shape.c: 75:         array_[i] = array_[j];
  3875     0225  0823               	movf	Reverse@j,w
  3876     0226  0770               	addwf	Reverse@array_,w
  3877     0227  00F5               	movwf	??_Reverse+1
  3878     0228  0871               	movf	Reverse@array_+1,w
  3879     0229  00F4               	movwf	??_Reverse
  3880     022A  1803               	skipnc
  3881     022B  0AF4               	incf	??_Reverse,f
  3882     022C  1FA3               	btfss	Reverse@j,7
  3883     022D  2A2F               	goto	u910
  3884     022E  03F4               	decf	??_Reverse,f
  3885     022F                     u910:
  3886     022F  0874               	movf	??_Reverse,w
  3887     0230  00F6               	movwf	??_Reverse+2
  3888     0231  0875               	movf	??_Reverse+1,w
  3889     0232  0084               	movwf	4
  3890     0233  1783               	bsf	3,7
  3891     0234  1C76               	btfss	??_Reverse+2,0
  3892     0235  1383               	bcf	3,7
  3893     0236  0800               	movf	0,w
  3894     0237  00F7               	movwf	??_Reverse+3
  3895     0238  1283               	bcf	3,5	;RP0=0, select bank0
  3896     0239  1303               	bcf	3,6	;RP1=0, select bank0
  3897     023A  0821               	movf	Reverse@i,w
  3898     023B  0770               	addwf	Reverse@array_,w
  3899     023C  00F9               	movwf	??_Reverse+5
  3900     023D  0871               	movf	Reverse@array_+1,w
  3901     023E  00F8               	movwf	??_Reverse+4
  3902     023F  1803               	skipnc
  3903     0240  0AF8               	incf	??_Reverse+4,f
  3904     0241  1FA1               	btfss	Reverse@i,7
  3905     0242  2A44               	goto	u920
  3906     0243  03F8               	decf	??_Reverse+4,f
  3907     0244                     u920:
  3908     0244  0878               	movf	??_Reverse+4,w
  3909     0245  00FA               	movwf	??_Reverse+6
  3910     0246  0879               	movf	??_Reverse+5,w
  3911     0247  0084               	movwf	4
  3912     0248  1783               	bsf	3,7
  3913     0249  1C7A               	btfss	??_Reverse+6,0
  3914     024A  1383               	bcf	3,7
  3915     024B  0877               	movf	??_Reverse+3,w
  3916     024C  0080               	movwf	0
  3917                           
  3918                           ;shape.c: 76:         array_[j] = t;
  3919     024D  1283               	bcf	3,5	;RP0=0, select bank0
  3920     024E  1303               	bcf	3,6	;RP1=0, select bank0
  3921     024F  0823               	movf	Reverse@j,w
  3922     0250  0770               	addwf	Reverse@array_,w
  3923     0251  00F5               	movwf	??_Reverse+1
  3924     0252  0871               	movf	Reverse@array_+1,w
  3925     0253  00F4               	movwf	??_Reverse
  3926     0254  1803               	skipnc
  3927     0255  0AF4               	incf	??_Reverse,f
  3928     0256  1FA3               	btfss	Reverse@j,7
  3929     0257  2A59               	goto	u930
  3930     0258  03F4               	decf	??_Reverse,f
  3931     0259                     u930:
  3932     0259  0874               	movf	??_Reverse,w
  3933     025A  00F6               	movwf	??_Reverse+2
  3934     025B  0875               	movf	??_Reverse+1,w
  3935     025C  0084               	movwf	4
  3936     025D  1783               	bsf	3,7
  3937     025E  1C76               	btfss	??_Reverse+2,0
  3938     025F  1383               	bcf	3,7
  3939     0260  1283               	bcf	3,5	;RP0=0, select bank0
  3940     0261  1303               	bcf	3,6	;RP1=0, select bank0
  3941     0262  0820               	movf	Reverse@t,w
  3942     0263  0080               	movwf	0
  3943     0264                     l1493:
  3944                           
  3945                           ;shape.c: 77:     }
  3946     0264  3001               	movlw	1
  3947     0265  07A1               	addwf	Reverse@i,f
  3948     0266  1803               	skipnc
  3949     0267  0AA2               	incf	Reverse@i+1,f
  3950     0268  3000               	movlw	0
  3951     0269  07A2               	addwf	Reverse@i+1,f
  3952     026A                     l1495:
  3953     026A  30FF               	movlw	255
  3954     026B  07A3               	addwf	Reverse@j,f
  3955     026C  1803               	skipnc
  3956     026D  0AA4               	incf	Reverse@j+1,f
  3957     026E  30FF               	movlw	255
  3958     026F  07A4               	addwf	Reverse@j+1,f
  3959     0270                     l1497:
  3960     0270  0822               	movf	Reverse@i+1,w
  3961     0271  3A80               	xorlw	128
  3962     0272  00F4               	movwf	??_Reverse
  3963     0273  0824               	movf	Reverse@j+1,w
  3964     0274  3A80               	xorlw	128
  3965     0275  0274               	subwf	??_Reverse,w
  3966     0276  1D03               	skipz
  3967     0277  2A7A               	goto	u945
  3968     0278  0823               	movf	Reverse@j,w
  3969     0279  0221               	subwf	Reverse@i,w
  3970     027A                     u945:
  3971     027A  1C03               	skipc
  3972     027B  2A7D               	goto	u941
  3973     027C  2A7E               	goto	u940
  3974     027D                     u941:
  3975     027D  2A0E               	goto	l1491
  3976     027E                     u940:
  3977     027E                     l165:
  3978     027E  0008               	return
  3979     027F                     __end_of_Reverse:
  3980                           
  3981                           	psect	text17
  3982     012E                     __ptext17:	
  3983 ;; *************** function _MovieShape *****************
  3984 ;; Defined at:
  3985 ;;		line 32 in file "shape.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;  dir             1    wreg     enum E885
  3988 ;;  _shapePositi    2    6[BANK0 ] PTR struct .
  3989 ;;		 -> main@shapePosition(4), 
  3990 ;;  shapeArray      2    8[BANK0 ] PTR unsigned char 
  3991 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3992 ;;  countElemntA    2   10[BANK0 ] int 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  dir             1   14[BANK0 ] enum E885
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4004 ;;      Params:         0       6       0       0       0
  4005 ;;      Locals:         0       1       0       0       0
  4006 ;;      Temps:          0       2       0       0       0
  4007 ;;      Totals:         0       9       0       0       0
  4008 ;;Total ram usage:        9 bytes
  4009 ;; Hardware stack levels used: 1
  4010 ;; Hardware stack levels required when called: 3
  4011 ;; This function calls:
  4012 ;;		_MovieDown
  4013 ;;		_MovieLeft
  4014 ;;		_MovieRigth
  4015 ;;		_MovieUp
  4016 ;;		_ShowShape
  4017 ;;		_SpiClearMatrix
  4018 ;; This function is called by:
  4019 ;;		_ChangeOfCoordinates
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023     012E                     _MovieShape:	
  4024                           ;psect for function _MovieShape
  4025                           
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4029                           ;MovieShape@dir stored from wreg
  4030     012E  1283               	bcf	3,5	;RP0=0, select bank0
  4031     012F  1303               	bcf	3,6	;RP1=0, select bank0
  4032     0130  00AE               	movwf	MovieShape@dir
  4033     0131                     l1559:
  4034                           
  4035                           ;shape.c: 34:     switch (dir){
  4036     0131  295A               	goto	l1571
  4037     0132                     l1561:
  4038                           
  4039                           ;shape.c: 36:             MovieDown(_shapePosition);
  4040     0132  0826               	movf	MovieShape@_shapePosition,w
  4041     0133  00F0               	movwf	MovieDown@_shapePosition
  4042     0134  0827               	movf	MovieShape@_shapePosition+1,w
  4043     0135  00F1               	movwf	MovieDown@_shapePosition+1
  4044     0136  120A  158A  270A  120A  118A  	fcall	_MovieDown
  4045                           
  4046                           ;shape.c: 37:             break;
  4047     013B  2973               	goto	l1573
  4048     013C                     l1563:
  4049                           
  4050                           ;shape.c: 39:             MovieUp(_shapePosition);
  4051     013C  0826               	movf	MovieShape@_shapePosition,w
  4052     013D  00F0               	movwf	MovieUp@_shapePosition
  4053     013E  0827               	movf	MovieShape@_shapePosition+1,w
  4054     013F  00F1               	movwf	MovieUp@_shapePosition+1
  4055     0140  120A  158A  2746  120A  118A  	fcall	_MovieUp
  4056                           
  4057                           ;shape.c: 40:             break;
  4058     0145  2973               	goto	l1573
  4059     0146                     l1565:
  4060                           
  4061                           ;shape.c: 42:             MovieLeft(_shapePosition);
  4062     0146  0826               	movf	MovieShape@_shapePosition,w
  4063     0147  00F0               	movwf	MovieLeft@_shapePosition
  4064     0148  0827               	movf	MovieShape@_shapePosition+1,w
  4065     0149  00F1               	movwf	MovieLeft@_shapePosition+1
  4066     014A  120A  158A  26E7  120A  118A  	fcall	_MovieLeft
  4067                           
  4068                           ;shape.c: 43:             break;
  4069     014F  2973               	goto	l1573
  4070     0150                     l1567:
  4071                           
  4072                           ;shape.c: 45:             MovieRigth(_shapePosition);
  4073     0150  0826               	movf	MovieShape@_shapePosition,w
  4074     0151  00F0               	movwf	MovieRigth@_shapePosition
  4075     0152  0827               	movf	MovieShape@_shapePosition+1,w
  4076     0153  00F1               	movwf	MovieRigth@_shapePosition+1
  4077     0154  120A  158A  26D1  120A  118A  	fcall	_MovieRigth
  4078                           
  4079                           ;shape.c: 46:             break;
  4080     0159  2973               	goto	l1573
  4081     015A                     l1571:
  4082     015A  082E               	movf	MovieShape@dir,w
  4083     015B  00AC               	movwf	??_MovieShape
  4084     015C  01AD               	clrf	??_MovieShape+1
  4085                           
  4086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4087                           ; Switch size 1, requested type "simple"
  4088                           ; Number of cases is 1, Range of values is 0 to 0
  4089                           ; switch strategies available:
  4090                           ; Name         Instructions Cycles
  4091                           ; simple_byte            4     3 (average)
  4092                           ; direct_byte           11     8 (fixed)
  4093                           ; jumptable            260     6 (fixed)
  4094                           ;	Chosen strategy is simple_byte
  4095     015D  082D               	movf	??_MovieShape+1,w
  4096     015E  3A00               	xorlw	0	; case 0
  4097     015F  1903               	skipnz
  4098     0160  2962               	goto	l1761
  4099     0161  2973               	goto	l1573
  4100     0162                     l1761:
  4101                           
  4102                           ; Switch size 1, requested type "simple"
  4103                           ; Number of cases is 5, Range of values is 0 to 4
  4104                           ; switch strategies available:
  4105                           ; Name         Instructions Cycles
  4106                           ; simple_byte           16     9 (average)
  4107                           ; direct_byte           23     8 (fixed)
  4108                           ; jumptable            260     6 (fixed)
  4109                           ;	Chosen strategy is simple_byte
  4110     0162  082C               	movf	??_MovieShape,w
  4111     0163  3A00               	xorlw	0	; case 0
  4112     0164  1903               	skipnz
  4113     0165  2932               	goto	l1561
  4114     0166  3A01               	xorlw	1	; case 1
  4115     0167  1903               	skipnz
  4116     0168  293C               	goto	l1563
  4117     0169  3A03               	xorlw	3	; case 2
  4118     016A  1903               	skipnz
  4119     016B  2946               	goto	l1565
  4120     016C  3A01               	xorlw	1	; case 3
  4121     016D  1903               	skipnz
  4122     016E  2950               	goto	l1567
  4123     016F  3A07               	xorlw	7	; case 4
  4124     0170  1903               	skipnz
  4125     0171  2973               	goto	l1573
  4126     0172  2973               	goto	l1573
  4127     0173                     l1573:
  4128                           
  4129                           ;shape.c: 51:     SpiClearMatrix();
  4130     0173  120A  158A  2730  120A  118A  	fcall	_SpiClearMatrix
  4131     0178                     l1575:
  4132                           
  4133                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  4134     0178  1283               	bcf	3,5	;RP0=0, select bank0
  4135     0179  1303               	bcf	3,6	;RP1=0, select bank0
  4136     017A  0826               	movf	MovieShape@_shapePosition,w
  4137     017B  00F4               	movwf	ShowShape@coord
  4138     017C  0827               	movf	MovieShape@_shapePosition+1,w
  4139     017D  00F5               	movwf	ShowShape@coord+1
  4140     017E  082B               	movf	MovieShape@countElemntArray+1,w
  4141     017F  00F7               	movwf	ShowShape@countElemntArray+1
  4142     0180  082A               	movf	MovieShape@countElemntArray,w
  4143     0181  00F6               	movwf	ShowShape@countElemntArray
  4144     0182  0828               	movf	MovieShape@shapeArray,w
  4145     0183  00F8               	movwf	ShowShape@shapeArray
  4146     0184  0829               	movf	MovieShape@shapeArray+1,w
  4147     0185  00F9               	movwf	ShowShape@shapeArray+1
  4148     0186  120A  118A  227F  120A  118A  	fcall	_ShowShape
  4149     018B                     l151:
  4150     018B  0008               	return
  4151     018C                     __end_of_MovieShape:
  4152                           
  4153                           	psect	text18
  4154     0F30                     __ptext18:	
  4155 ;; *************** function _SpiClearMatrix *****************
  4156 ;; Defined at:
  4157 ;;		line 10 in file "matrix.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;  i               1    6[COMMON] unsigned char 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0, pclath, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4171 ;;      Params:         0       0       0       0       0
  4172 ;;      Locals:         1       0       0       0       0
  4173 ;;      Temps:          2       0       0       0       0
  4174 ;;      Totals:         3       0       0       0       0
  4175 ;;Total ram usage:        3 bytes
  4176 ;; Hardware stack levels used: 1
  4177 ;; Hardware stack levels required when called: 2
  4178 ;; This function calls:
  4179 ;;		_SendToSegment
  4180 ;; This function is called by:
  4181 ;;		_MatrixInit
  4182 ;;		_MovieShape
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186     0F30                     _SpiClearMatrix:	
  4187                           ;psect for function _SpiClearMatrix
  4188                           
  4189     0F30                     l1533:	
  4190                           ;incstack = 0
  4191                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  4192                           
  4193                           
  4194                           ;matrix.c: 12:   char i = 8;
  4195     0F30  3008               	movlw	8
  4196     0F31  00F6               	movwf	SpiClearMatrix@i
  4197     0F32                     l1535:
  4198                           
  4199                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  4200     0F32  0876               	movf	SpiClearMatrix@i,w
  4201     0F33  00F4               	movwf	??_SpiClearMatrix
  4202     0F34  01F5               	clrf	??_SpiClearMatrix+1
  4203     0F35  0874               	movf	??_SpiClearMatrix,w
  4204     0F36  00F1               	movwf	SendToSegment@segment
  4205     0F37  0875               	movf	??_SpiClearMatrix+1,w
  4206     0F38  00F2               	movwf	SendToSegment@segment+1
  4207     0F39  01F3               	clrf	SendToSegment@data
  4208     0F3A  120A  158A  271D  120A  158A  	fcall	_SendToSegment
  4209     0F3F                     l1537:
  4210                           
  4211                           ;matrix.c: 16:   } while (--i);
  4212     0F3F  3001               	movlw	1
  4213     0F40  02F6               	subwf	SpiClearMatrix@i,f
  4214     0F41  1D03               	btfss	3,2
  4215     0F42  2F44               	goto	u1021
  4216     0F43  2F45               	goto	u1020
  4217     0F44                     u1021:
  4218     0F44  2F32               	goto	l1535
  4219     0F45                     u1020:
  4220     0F45                     l104:
  4221     0F45  0008               	return
  4222     0F46                     __end_of_SpiClearMatrix:
  4223                           
  4224                           	psect	text19
  4225     027F                     __ptext19:	
  4226 ;; *************** function _ShowShape *****************
  4227 ;; Defined at:
  4228 ;;		line 8 in file "shape.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;  coord           2    4[COMMON] PTR struct .
  4231 ;;		 -> main@shapePosition(4), 
  4232 ;;  countElemntA    2    6[COMMON] int 
  4233 ;;  shapeArray      2    8[COMMON] PTR unsigned char 
  4234 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  pos             2   12[COMMON] int 
  4237 ;;  _pos            2   10[COMMON] int 
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  1    wreg      void 
  4240 ;; Registers used:
  4241 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4247 ;;      Params:         6       0       0       0       0
  4248 ;;      Locals:         4       0       0       0       0
  4249 ;;      Temps:          0       6       0       0       0
  4250 ;;      Totals:        10       6       0       0       0
  4251 ;;Total ram usage:       16 bytes
  4252 ;; Hardware stack levels used: 1
  4253 ;; Hardware stack levels required when called: 2
  4254 ;; This function calls:
  4255 ;;		_SendToSegment
  4256 ;; This function is called by:
  4257 ;;		_MovieShape
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261     027F                     _ShowShape:	
  4262                           ;psect for function _ShowShape
  4263                           
  4264     027F                     l1539:	
  4265                           ;incstack = 0
  4266                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4267                           
  4268     027F                     l1541:
  4269                           
  4270                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  4271     027F  0874               	movf	ShowShape@coord,w
  4272     0280  0084               	movwf	4
  4273     0281  1783               	bsf	3,7
  4274     0282  1C75               	btfss	ShowShape@coord+1,0
  4275     0283  1383               	bcf	3,7
  4276     0284  0800               	movf	0,w
  4277     0285  1283               	bcf	3,5	;RP0=0, select bank0
  4278     0286  1303               	bcf	3,6	;RP1=0, select bank0
  4279     0287  00A0               	movwf	??_ShowShape
  4280     0288  0A84               	incf	4,f
  4281     0289  0800               	movf	0,w
  4282     028A  00A1               	movwf	??_ShowShape+1
  4283     028B  0820               	movf	??_ShowShape,w
  4284     028C  3E01               	addlw	1
  4285     028D  00FC               	movwf	ShowShape@pos
  4286     028E  0821               	movf	??_ShowShape+1,w
  4287     028F  1803               	skipnc
  4288     0290  3E01               	addlw	1
  4289     0291  3E00               	addlw	0
  4290     0292  00FD               	movwf	ShowShape@pos+1
  4291     0293  2AEA               	goto	l1549
  4292     0294                     l1543:
  4293                           
  4294                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  4295     0294  0874               	movf	ShowShape@coord,w
  4296     0295  0084               	movwf	4
  4297     0296  1783               	bsf	3,7
  4298     0297  1C75               	btfss	ShowShape@coord+1,0
  4299     0298  1383               	bcf	3,7
  4300     0299  0800               	movf	0,w
  4301     029A  1283               	bcf	3,5	;RP0=0, select bank0
  4302     029B  1303               	bcf	3,6	;RP1=0, select bank0
  4303     029C  00A0               	movwf	??_ShowShape
  4304     029D  0A84               	incf	4,f
  4305     029E  0800               	movf	0,w
  4306     029F  00A1               	movwf	??_ShowShape+1
  4307     02A0  0820               	movf	??_ShowShape,w
  4308     02A1  027C               	subwf	ShowShape@pos,w
  4309     02A2  00A2               	movwf	??_ShowShape+2
  4310     02A3  0821               	movf	??_ShowShape+1,w
  4311     02A4  1C03               	skipc
  4312     02A5  0A21               	incf	??_ShowShape+1,w
  4313     02A6  027D               	subwf	ShowShape@pos+1,w
  4314     02A7  00A3               	movwf	??_ShowShape+3
  4315     02A8  0822               	movf	??_ShowShape+2,w
  4316     02A9  3EFF               	addlw	255
  4317     02AA  00FA               	movwf	ShowShape@_pos
  4318     02AB  0823               	movf	??_ShowShape+3,w
  4319     02AC  1803               	skipnc
  4320     02AD  3E01               	addlw	1
  4321     02AE  3EFF               	addlw	255
  4322     02AF  00FB               	movwf	ShowShape@_pos+1
  4323     02B0                     l1545:
  4324                           
  4325                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  4326     02B0  087D               	movf	ShowShape@pos+1,w
  4327     02B1  00F2               	movwf	SendToSegment@segment+1
  4328     02B2  087C               	movf	ShowShape@pos,w
  4329     02B3  00F1               	movwf	SendToSegment@segment
  4330     02B4  087A               	movf	ShowShape@_pos,w
  4331     02B5  0778               	addwf	ShowShape@shapeArray,w
  4332     02B6  00A1               	movwf	??_ShowShape+1
  4333     02B7  0879               	movf	ShowShape@shapeArray+1,w
  4334     02B8  00A0               	movwf	??_ShowShape
  4335     02B9  1803               	skipnc
  4336     02BA  0AA0               	incf	??_ShowShape,f
  4337     02BB  1FFA               	btfss	ShowShape@_pos,7
  4338     02BC  2ABE               	goto	u1030
  4339     02BD  03A0               	decf	??_ShowShape,f
  4340     02BE                     u1030:
  4341     02BE  1283               	bcf	3,5	;RP0=0, select bank0
  4342     02BF  1303               	bcf	3,6	;RP1=0, select bank0
  4343     02C0  0820               	movf	??_ShowShape,w
  4344     02C1  00A2               	movwf	??_ShowShape+2
  4345     02C2  0821               	movf	??_ShowShape+1,w
  4346     02C3  0084               	movwf	4
  4347     02C4  1783               	bsf	3,7
  4348     02C5  1C22               	btfss	??_ShowShape+2,0
  4349     02C6  1383               	bcf	3,7
  4350     02C7  0800               	movf	0,w
  4351     02C8  00A3               	movwf	??_ShowShape+3
  4352     02C9  0874               	movf	ShowShape@coord,w
  4353     02CA  3E02               	addlw	2
  4354     02CB  00A4               	movwf	??_ShowShape+4
  4355     02CC  0875               	movf	ShowShape@coord+1,w
  4356     02CD  1803               	skipnc
  4357     02CE  3E01               	addlw	1
  4358     02CF  3E00               	addlw	0
  4359     02D0  00A5               	movwf	??_ShowShape+5
  4360     02D1  0824               	movf	??_ShowShape+4,w
  4361     02D2  0084               	movwf	4
  4362     02D3  1783               	bsf	3,7
  4363     02D4  1C25               	btfss	??_ShowShape+5,0
  4364     02D5  1383               	bcf	3,7
  4365     02D6  0A00               	incf	0,w
  4366     02D7  2ADA               	goto	u1044
  4367     02D8                     u1045:
  4368     02D8  1003               	clrc
  4369     02D9  0DA3               	rlf	??_ShowShape+3,f
  4370     02DA                     u1044:
  4371     02DA  3EFF               	addlw	-1
  4372     02DB  1D03               	skipz
  4373     02DC  2AD8               	goto	u1045
  4374     02DD  0823               	movf	??_ShowShape+3,w
  4375     02DE  00F3               	movwf	SendToSegment@data
  4376     02DF  120A  158A  271D  120A  118A  	fcall	_SendToSegment
  4377     02E4                     l1547:
  4378                           
  4379                           ;shape.c: 13:     }
  4380     02E4  3001               	movlw	1
  4381     02E5  07FC               	addwf	ShowShape@pos,f
  4382     02E6  1803               	skipnc
  4383     02E7  0AFD               	incf	ShowShape@pos+1,f
  4384     02E8  3000               	movlw	0
  4385     02E9  07FD               	addwf	ShowShape@pos+1,f
  4386     02EA                     l1549:
  4387     02EA  0874               	movf	ShowShape@coord,w
  4388     02EB  0084               	movwf	4
  4389     02EC  1783               	bsf	3,7
  4390     02ED  1C75               	btfss	ShowShape@coord+1,0
  4391     02EE  1383               	bcf	3,7
  4392     02EF  0800               	movf	0,w
  4393     02F0  1283               	bcf	3,5	;RP0=0, select bank0
  4394     02F1  1303               	bcf	3,6	;RP1=0, select bank0
  4395     02F2  00A0               	movwf	??_ShowShape
  4396     02F3  0A84               	incf	4,f
  4397     02F4  0800               	movf	0,w
  4398     02F5  00A1               	movwf	??_ShowShape+1
  4399     02F6  0876               	movf	ShowShape@countElemntArray,w
  4400     02F7  0720               	addwf	??_ShowShape,w
  4401     02F8  00A2               	movwf	??_ShowShape+2
  4402     02F9  0877               	movf	ShowShape@countElemntArray+1,w
  4403     02FA  1803               	skipnc
  4404     02FB  0A77               	incf	ShowShape@countElemntArray+1,w
  4405     02FC  0721               	addwf	??_ShowShape+1,w
  4406     02FD  00A3               	movwf	??_ShowShape+3
  4407     02FE  0823               	movf	??_ShowShape+3,w
  4408     02FF  3A80               	xorlw	128
  4409     0300  00A4               	movwf	??_ShowShape+4
  4410     0301  087D               	movf	ShowShape@pos+1,w
  4411     0302  3A80               	xorlw	128
  4412     0303  0224               	subwf	??_ShowShape+4,w
  4413     0304  1D03               	skipz
  4414     0305  2B08               	goto	u1055
  4415     0306  087C               	movf	ShowShape@pos,w
  4416     0307  0222               	subwf	??_ShowShape+2,w
  4417     0308                     u1055:
  4418     0308  1803               	skipnc
  4419     0309  2B0B               	goto	u1051
  4420     030A  2B0C               	goto	u1050
  4421     030B                     u1051:
  4422     030B  2A94               	goto	l1543
  4423     030C                     u1050:
  4424     030C                     l129:
  4425     030C  0008               	return
  4426     030D                     __end_of_ShowShape:
  4427                           
  4428                           	psect	text20
  4429     0F1D                     __ptext20:	
  4430 ;; *************** function _SendToSegment *****************
  4431 ;; Defined at:
  4432 ;;		line 34 in file "matrix.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  segment         2    1[COMMON] int 
  4435 ;;  data            1    3[COMMON] unsigned char 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;		None
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0, pclath, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4447 ;;      Params:         3       0       0       0       0
  4448 ;;      Locals:         0       0       0       0       0
  4449 ;;      Temps:          0       0       0       0       0
  4450 ;;      Totals:         3       0       0       0       0
  4451 ;;Total ram usage:        3 bytes
  4452 ;; Hardware stack levels used: 1
  4453 ;; Hardware stack levels required when called: 1
  4454 ;; This function calls:
  4455 ;;		_SpiSendByte
  4456 ;; This function is called by:
  4457 ;;		_SpiClearMatrix
  4458 ;;		_MatrixInit
  4459 ;;		_ShowShape
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463     0F1D                     _SendToSegment:	
  4464                           ;psect for function _SendToSegment
  4465                           
  4466     0F1D                     l1481:	
  4467                           ;incstack = 0
  4468                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  4469                           
  4470                           
  4471                           ;matrix.c: 35:     RA5 = 0;
  4472     0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  4473     0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  4474     0F1F  1285               	bcf	5,5	;volatile
  4475     0F20                     l1483:
  4476                           
  4477                           ;matrix.c: 36:     SpiSendByte((char)segment);
  4478     0F20  0871               	movf	SendToSegment@segment,w
  4479     0F21  120A  158A  26DC  120A  158A  	fcall	_SpiSendByte
  4480                           
  4481                           ;matrix.c: 37:     SpiSendByte(data);
  4482     0F26  0873               	movf	SendToSegment@data,w
  4483     0F27  120A  158A  26DC  120A  158A  	fcall	_SpiSendByte
  4484     0F2C                     l1485:
  4485                           
  4486                           ;matrix.c: 38:     RA5 = 1;
  4487     0F2C  1283               	bcf	3,5	;RP0=0, select bank0
  4488     0F2D  1303               	bcf	3,6	;RP1=0, select bank0
  4489     0F2E  1685               	bsf	5,5	;volatile
  4490     0F2F                     l110:
  4491     0F2F  0008               	return
  4492     0F30                     __end_of_SendToSegment:
  4493                           
  4494                           	psect	text21
  4495     0EDC                     __ptext21:	
  4496 ;; *************** function _SpiSendByte *****************
  4497 ;; Defined at:
  4498 ;;		line 18 in file "spi.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  data            1    wreg     unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  data            1    0[COMMON] unsigned char 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4512 ;;      Params:         0       0       0       0       0
  4513 ;;      Locals:         1       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0
  4515 ;;      Totals:         1       0       0       0       0
  4516 ;;Total ram usage:        1 bytes
  4517 ;; Hardware stack levels used: 1
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_SendToSegment
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525     0EDC                     _SpiSendByte:	
  4526                           ;psect for function _SpiSendByte
  4527                           
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _SpiSendByte: [wreg]
  4531                           ;SpiSendByte@data stored from wreg
  4532     0EDC  00F0               	movwf	SpiSendByte@data
  4533     0EDD                     l1357:
  4534                           
  4535                           ;spi.c: 19:     SSPBUF = data;
  4536     0EDD  0870               	movf	SpiSendByte@data,w
  4537     0EDE  1283               	bcf	3,5	;RP0=0, select bank0
  4538     0EDF  1303               	bcf	3,6	;RP1=0, select bank0
  4539     0EE0  0093               	movwf	19	;volatile
  4540     0EE1                     l88:	
  4541                           ;spi.c: 20:     while (!SSPIF);
  4542                           
  4543     0EE1  1D8C               	btfss	12,3	;volatile
  4544     0EE2  2EE4               	goto	u691
  4545     0EE3  2EE5               	goto	u690
  4546     0EE4                     u691:
  4547     0EE4  2EE1               	goto	l88
  4548     0EE5                     u690:
  4549     0EE5                     l90:
  4550                           
  4551                           ;spi.c: 21:     SSPIF = 0;
  4552     0EE5  118C               	bcf	12,3	;volatile
  4553     0EE6                     l91:
  4554     0EE6  0008               	return
  4555     0EE7                     __end_of_SpiSendByte:
  4556                           
  4557                           	psect	text22
  4558     0F46                     __ptext22:	
  4559 ;; *************** function _MovieUp *****************
  4560 ;; Defined at:
  4561 ;;		line 20 in file "shape.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4564 ;;		 -> main@shapePosition(4), 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  1    wreg      void 
  4569 ;; Registers used:
  4570 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4576 ;;      Params:         2       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0
  4578 ;;      Temps:          2       0       0       0       0
  4579 ;;      Totals:         4       0       0       0       0
  4580 ;;Total ram usage:        4 bytes
  4581 ;; Hardware stack levels used: 1
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_MovieShape
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589     0F46                     _MovieUp:	
  4590                           ;psect for function _MovieUp
  4591                           
  4592     0F46                     l1553:	
  4593                           ;incstack = 0
  4594                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4595                           
  4596                           
  4597                           ;shape.c: 21:     _shapePosition->y--;
  4598     0F46  0870               	movf	MovieUp@_shapePosition,w
  4599     0F47  3E02               	addlw	2
  4600     0F48  00F2               	movwf	??_MovieUp
  4601     0F49  0871               	movf	MovieUp@_shapePosition+1,w
  4602     0F4A  1803               	skipnc
  4603     0F4B  3E01               	addlw	1
  4604     0F4C  3E00               	addlw	0
  4605     0F4D  00F3               	movwf	??_MovieUp+1
  4606     0F4E  0872               	movf	??_MovieUp,w
  4607     0F4F  0084               	movwf	4
  4608     0F50  1783               	bsf	3,7
  4609     0F51  1C73               	btfss	??_MovieUp+1,0
  4610     0F52  1383               	bcf	3,7
  4611     0F53  30FF               	movlw	255
  4612     0F54  0780               	addwf	0,f
  4613     0F55  0F84               	incfsz	4,f
  4614     0F56  0800               	movf	0,w
  4615     0F57  1803               	skipnc
  4616     0F58  0A00               	incf	0,w
  4617     0F59  00FF               	movwf	btemp+1
  4618     0F5A  30FF               	movlw	255
  4619     0F5B  077F               	addwf	btemp+1,w
  4620     0F5C  0080               	movwf	0
  4621     0F5D  0384               	decf	4,f
  4622     0F5E                     l135:
  4623     0F5E  0008               	return
  4624     0F5F                     __end_of_MovieUp:
  4625                           
  4626                           	psect	text23
  4627     0ED1                     __ptext23:	
  4628 ;; *************** function _MovieRigth *****************
  4629 ;; Defined at:
  4630 ;;		line 28 in file "shape.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4633 ;;		 -> main@shapePosition(4), 
  4634 ;; Auto vars:     Size  Location     Type
  4635 ;;		None
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4645 ;;      Params:         2       0       0       0       0
  4646 ;;      Locals:         0       0       0       0       0
  4647 ;;      Temps:          0       0       0       0       0
  4648 ;;      Totals:         2       0       0       0       0
  4649 ;;Total ram usage:        2 bytes
  4650 ;; Hardware stack levels used: 1
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_MovieShape
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658     0ED1                     _MovieRigth:	
  4659                           ;psect for function _MovieRigth
  4660                           
  4661     0ED1                     l1557:	
  4662                           ;incstack = 0
  4663                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  4664                           
  4665                           
  4666                           ;shape.c: 29:     _shapePosition->x++;
  4667     0ED1  0870               	movf	MovieRigth@_shapePosition,w
  4668     0ED2  0084               	movwf	4
  4669     0ED3  1783               	bsf	3,7
  4670     0ED4  1C71               	btfss	MovieRigth@_shapePosition+1,0
  4671     0ED5  1383               	bcf	3,7
  4672     0ED6  3001               	movlw	1
  4673     0ED7  0780               	addwf	0,f
  4674     0ED8  0A84               	incf	4,f
  4675     0ED9  1803               	skipnc
  4676     0EDA  0A80               	incf	0,f
  4677     0EDB                     l141:
  4678     0EDB  0008               	return
  4679     0EDC                     __end_of_MovieRigth:
  4680                           
  4681                           	psect	text24
  4682     0EE7                     __ptext24:	
  4683 ;; *************** function _MovieLeft *****************
  4684 ;; Defined at:
  4685 ;;		line 24 in file "shape.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4688 ;;		 -> main@shapePosition(4), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr0l, fsr0h, btemp+1
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4700 ;;      Params:         2       0       0       0       0
  4701 ;;      Locals:         0       0       0       0       0
  4702 ;;      Temps:          0       0       0       0       0
  4703 ;;      Totals:         2       0       0       0       0
  4704 ;;Total ram usage:        2 bytes
  4705 ;; Hardware stack levels used: 1
  4706 ;; This function calls:
  4707 ;;		Nothing
  4708 ;; This function is called by:
  4709 ;;		_MovieShape
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713     0EE7                     _MovieLeft:	
  4714                           ;psect for function _MovieLeft
  4715                           
  4716     0EE7                     l1555:	
  4717                           ;incstack = 0
  4718                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  4719                           
  4720                           
  4721                           ;shape.c: 25:     _shapePosition->x--;
  4722     0EE7  0870               	movf	MovieLeft@_shapePosition,w
  4723     0EE8  0084               	movwf	4
  4724     0EE9  1783               	bsf	3,7
  4725     0EEA  1C71               	btfss	MovieLeft@_shapePosition+1,0
  4726     0EEB  1383               	bcf	3,7
  4727     0EEC  30FF               	movlw	255
  4728     0EED  0780               	addwf	0,f
  4729     0EEE  0F84               	incfsz	4,f
  4730     0EEF  0800               	movf	0,w
  4731     0EF0  1803               	skipnc
  4732     0EF1  0A00               	incf	0,w
  4733     0EF2  00FF               	movwf	btemp+1
  4734     0EF3  30FF               	movlw	255
  4735     0EF4  077F               	addwf	btemp+1,w
  4736     0EF5  0080               	movwf	0
  4737     0EF6  0384               	decf	4,f
  4738     0EF7                     l138:
  4739     0EF7  0008               	return
  4740     0EF8                     __end_of_MovieLeft:
  4741                           
  4742                           	psect	text25
  4743     0F0A                     __ptext25:	
  4744 ;; *************** function _MovieDown *****************
  4745 ;; Defined at:
  4746 ;;		line 16 in file "shape.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4749 ;;		 -> main@shapePosition(4), 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4761 ;;      Params:         2       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0
  4763 ;;      Temps:          2       0       0       0       0
  4764 ;;      Totals:         4       0       0       0       0
  4765 ;;Total ram usage:        4 bytes
  4766 ;; Hardware stack levels used: 1
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_MovieShape
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774     0F0A                     _MovieDown:	
  4775                           ;psect for function _MovieDown
  4776                           
  4777     0F0A                     l1551:	
  4778                           ;incstack = 0
  4779                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  4780                           
  4781                           
  4782                           ;shape.c: 17:     _shapePosition->y++;
  4783     0F0A  0870               	movf	MovieDown@_shapePosition,w
  4784     0F0B  3E02               	addlw	2
  4785     0F0C  00F2               	movwf	??_MovieDown
  4786     0F0D  0871               	movf	MovieDown@_shapePosition+1,w
  4787     0F0E  1803               	skipnc
  4788     0F0F  3E01               	addlw	1
  4789     0F10  3E00               	addlw	0
  4790     0F11  00F3               	movwf	??_MovieDown+1
  4791     0F12  0872               	movf	??_MovieDown,w
  4792     0F13  0084               	movwf	4
  4793     0F14  1783               	bsf	3,7
  4794     0F15  1C73               	btfss	??_MovieDown+1,0
  4795     0F16  1383               	bcf	3,7
  4796     0F17  3001               	movlw	1
  4797     0F18  0780               	addwf	0,f
  4798     0F19  0A84               	incf	4,f
  4799     0F1A  1803               	skipnc
  4800     0F1B  0A80               	incf	0,f
  4801     0F1C                     l132:
  4802     0F1C  0008               	return
  4803     0F1D                     __end_of_MovieDown:
  4804     0002                     ___latbits      equ	2
  4805     007E                     btemp           set	126	;btemp
  4806     007E                     wtemp0          set	126
  4807                           
  4808                           	psect	config
  4809                           
  4810                           ;Config register CONFIG @ 0x2007
  4811                           ;	Oscillator Selection bits
  4812                           ;	FOSC = HS, HS oscillator
  4813                           ;	Watchdog Timer Enable bit
  4814                           ;	WDTE = OFF, WDT disabled
  4815                           ;	Power-up Timer Enable bit
  4816                           ;	PWRTE = OFF, PWRT disabled
  4817                           ;	FLASH Program Memory Code Protection bits
  4818                           ;	CP = OFF, Code protection off
  4819                           ;	Brown-out Reset Enable bit
  4820                           ;	BOREN = OFF, BOR disabled
  4821                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  4822                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4823                           ;	Data EE Memory Code Protection
  4824                           ;	CPD = OFF, Code Protection off
  4825                           ;	FLASH Program Memory Write Enable
  4826                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  4827                           ;	In-Circuit Debugger Mode bit
  4828                           ;	DEBUG = 0x1, unprogrammed default
  4829     2007                     	org	8199
  4830     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     73      79
    BANK1            80      9      20
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    calloc@new_ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK1[3]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ChangeOfCoordinates@rotateArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    CopyArray@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    CopyArray@res	PTR unsigned char  size(2) Largest target is 3
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), main@square_1(BANK1[3]), NULL(NULL[0]), 

    __expand_heap@new_brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __expand_heap@pn	PTR unsigned int  size(1) Largest target is 2
		 -> malloc@m(BANK0[2]), 

    free@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@cptr	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@cur	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@end	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@new	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@p	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@sz	PTR unsigned int  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    Reverse@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    Rotate@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    Rotate@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    RotateDirection@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    S693$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ?___simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____expand_heap	PTR void  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl	PTR void  size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp__calloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _calloc->_memset
    _memset->___wmul
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_RotateDirection
    _RotateDirection->_Rotate
    _Rotate->_calloc
    _calloc->_malloc
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    7141
                                              0 BANK1      9     9      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 14     9      5    6728
                                             59 BANK0     14     9      5
                          _CopyArray
                         _MovieShape
                    _RotateDirection
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (2) _RotateDirection                                      8     2      6    3218
                                             51 BANK0      8     2      6
                            _Reverse
                             _Rotate
 ---------------------------------------------------------------------------------
 (3) _Rotate                                              21    17      4    2654
                                             30 BANK0     21    17      4
                          _CopyArray
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (2) _free                                                12    10      2     290
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (2) _calloc                                               6     2      4    1815
                                             24 BANK0      6     2      4
                             ___wmul
                             _malloc
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6      99
                                              6 COMMON     8     2      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _malloc                                              14    12      2    1461
                                              8 COMMON     4     2      2
                                             14 BANK0     10    10      0
                      ___expand_heap
                 ___simple_search_fl
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___simple_search_fl                                  22    20      2     827
                                              0 COMMON     8     6      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (4) ___expand_heap                                        5     4      1     136
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      96
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _CopyArray                                           15     9      6     140
                                              0 COMMON    13     7      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Reverse                                             16    12      4     273
                                              0 COMMON    11     7      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           9     3      6     729
                                              6 BANK0      9     3      6
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           16    10      6     312
                                              4 COMMON    10     4      6
                                              0 BANK0      6     6      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _CopyArray
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
     _RotateDirection
       _Reverse
       _Rotate
         _CopyArray
         _calloc
           ___wmul
           _malloc
             ___expand_heap
             ___simple_search_fl
             ___wmul (ARG)
           _memset
             ___wmul (ARG)
         _free
     _calloc
     _free
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      9      20     25.0%
BITBANK1            80      0       0      0.0%
BANK0               80     73      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     113      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 23 11:54:20 2024

                      _SpiClearMatrix 0F30                                     pc 0002  
                                  l51 0563                                    l61 0200  
                                  l90 0EE5                                    l91 0EE6  
                                  l68 000B                                    l85 0F09  
                                  l88 0EE1                                    fsr 0004  
                 ___wmul@multiplicand 0072                       SpiSendByte@data 0070  
                                 l110 0F2F                                   l104 0F45  
                                 l107 0FFF                                   l123 0F7B  
                                 l132 0F1C                                   l141 0EDB  
                                 l135 0F5E                                   l151 018B  
                                 l129 030C                                   l138 0EF7  
                                 l171 0051                                   l165 027E  
                                 l159 03B1                                   l257 0FA7  
                                 l259 0FBF                                   l721 00E0  
                                 l735 0705                                   l727 07D7  
                                 l744 0651                                   l738 07AE  
                                 l770 0456                                   l772 0449  
                                 l764 03C2                                   l791 012D  
                                 l768 047B                                   l786 00F5  
                                 l797 0F9A                                   _RA5 002D  
                                 u600 06FC                                   u601 06FB  
                                 u610 0722                                   u611 0721  
                                 u700 0FA1                                   u620 0728  
                                 u701 0FA0                                   u621 0727  
                                 u605 06F8                                   u630 0756  
                                 u550 0660                                   u631 0755  
                                 u551 065F                                   u640 07B8  
                                 u560 067C                                   u800 0445  
                                 u641 07B7                                   u561 067B  
                                 u801 0444                                   u730 0FBB  
                                 u650 00F1                                   u570 0682  
                                 u810 0F9A                                   u731 0FBA  
                                 u715 0FA8                                   u651 00F0  
                                 u571 0681                                   u811 0F99  
                                 u900 021A                                   u660 00FE  
                                 u580 06D8                                   u740 03BC  
                                 u820 00BD                                   u725 0FAF  
                                 u661 00FD                                   u645 07B4  
                                 u581 06D7                                   u565 0678  
                                 u805 0441                                   u741 03BB  
                                 u821 00BC                                   u910 022F  
                                 u830 001D                                   u670 0112  
                                 u590 06DE                                   u750 03CB  
                                 u671 0111                                   u591 06DD  
                                 u751 03CA                                   u920 0244  
                                 u840 0032                                   u680 011C  
                                 u760 03DF                                   u681 011B  
                                 u585 06D4                                   u761 03DE  
                                 u690 0EE5                                   u930 0259  
                                 u850 0051                                   u770 03FD  
                                 u691 0EE4                                   u851 0050  
                                 u771 03FC                                   u940 027E  
                                 u780 0415                                   u860 056E  
                                 u941 027D                                   u685 0118  
                                 u781 0414                                   u861 056D  
                                 u790 0432                                   u870 0584  
                                 u950 0328                                   u855 004D  
                                 u791 0431                                   u871 0583  
                                 u951 0327                                   u880 059A  
                                 u960 0334                                   u945 027A  
                                 u785 0411                                   u881 0599  
                                 u961 0333                                   u890 060A  
                                 u970 0343                                   u891 0609  
                                 u971 0342                                   u980 034E  
                                 u885 0596                                   u895 0606  
                                 u994 035D                                   u995 035B  
                                 fsr0 0004                                   indf 0000  
    RotateDirection@_countElemntArray 0057                                  l1301 06FD  
                                l1311 0756                                  l1303 0709  
                                l1321 07B8                                  l1313 0770  
                                l1305 071C                                  l1401 042C  
                                l1323 07BD                                  l1315 077A  
                                l1307 0722                                  l1411 045C  
                                l1341 0102                                  l1333 00E1  
                                l1325 07CF                                  l1317 0798  
                                l1309 0728                                  l1413 0460  
                                l1421 0477                                  l1501 0322  
                                l1343 0109                                  l1335 00E9  
                                l1319 07AA                                  l1271 0652  
                                l1415 046A                                  l1407 0433  
                                l1431 0F8C                                  l1511 033D  
                                l1503 0328                                  l1361 0F9D  
                                l1353 0125                                  l1345 0112  
                                l1337 00F1                                  l1281 0668  
                                l1273 065A                                  l1417 046E  
                                l1409 0445                                  l1425 0F7C  
                                l1433 0099                                  l1521 0387  
                                l1513 033F                                  l1505 0330  
                                l1601 01D8                                  l1443 000C  
                                l1363 0FA1                                  l1347 011C  
                                l1339 00FE                                  l1283 067C  
                                l1275 0660                                  l1419 0472  
                                l1427 0F81                                  l1435 00B7  
                                l1451 0564                                  l1531 03A6  
                                l1603 01E0                                  l1357 0EDD  
                                l1541 027F                                  l1533 0F30  
                                l1445 0011                                  l1365 0FAE  
                                l1349 0122                                  l1285 0682  
                                l1293 06C4                                  l1381 03D0  
                                l1373 03B2                                  l1429 0F88  
                                l1437 00BD                                  l1461 05BF  
                                l1525 038E                                  l1517 0344  
                                l1509 0335                                  l1621 0FC0  
                                l1613 0EF8                                  l1551 0F0A  
                                l1543 0294                                  l1535 0F32  
                                l1447 003B                                  l1367 0FB5  
                                l1359 0F9B                                  l1295 06D8  
                                l1287 06A8                                  l1279 0663  
                                l1391 03E8                                  l1383 03DF  
                                l1375 03B6                                  l1439 00DA  
                                l1471 060A                                  l1463 05E1  
                                l1455 056F                                  l1519 0381  
                                l1607 01EE                                  l1631 0FEF  
                                l1623 0FCC                                  l1615 0EFB  
                                l1553 0F46                                  l1481 0F1D  
                                l1545 02B0                                  l1537 0F3F  
                                l1561 0132                                  l1449 0043  
                                l1369 0FBB                                  l1297 06DE  
                                l1289 06BB                                  l1393 03F7  
                                l1385 03E5                                  l1377 03BC  
                                l1457 0584                                  l1529 0395  
                                l1641 047C                                  l1633 0FFA  
                                l1625 0FCF                                  l1617 0F03  
                                l1555 0EE7                                  l1483 0F20  
                                l1547 02E4                                  l1539 027F  
                                l1563 013C                                  l1571 015A  
                                l1491 020E                                  l1395 03FD  
                                l1379 03CB                                  l1475 062D  
                                l1459 059A                                  l1651 04AB  
                                l1643 04A2                                  l1627 0FD9  
                                l1635 0005                                  l1619 0F05  
                                l1557 0ED1                                  l1485 0F2C  
                                l1549 02EA                                  l1565 0146  
                                l1573 0173                                  l1493 0264  
                                l1397 0415                                  l1389 03E8  
                                l1469 05E6                                  l1477 0640  
                                l1653 04BE                                  l1661 04F7  
                                l1645 04A6                                  l1629 0FE4  
                                l1637 0F5F                                  l1575 0178  
                                l1567 0150                                  l1559 0131  
                                l1495 026A                                  l1487 0201  
                                l1399 041F                                  l1591 01B7  
                                l1583 018C                                  l1671 054B  
                                l1655 04D1                                  l1663 050C  
                                l1639 0F69                                  l1761 0162  
                                l1497 0270                                  l1489 0205  
                                l1593 01C7                                  l1585 018D  
                                l1673 0558                                  l1665 0523  
                                l1657 04E4                                  l1681 005C  
                                l1499 030D                                  l1587 019A  
                                l1667 0530                                  l1683 006D  
                                l1589 01AA                                  l1669 0543  
                                l1757 04FE                                  l1685 007C  
                                l1759 01F5                                  l1599 01C9  
                                l1679 0052                                  u1010 0376  
                                u1020 0F45                                  u1004 0367  
                                u1021 0F44                                  u1005 0365  
                                u1030 02BE                                  u1050 030C  
                                u1051 030B                                  u1107 0514  
                                u1044 02DA                                  u1060 01ED  
                                u1045 02D8                                  u1061 01EC  
                                u1070 0530                                  u1055 0308  
                                u1071 052F                                  u1080 0558  
                                u1065 01E9                                  u1081 0557  
                                u1075 052C                                  u1085 0554  
                                u1097 0FC6                                  _brkp 0069  
                                _free 0564                                  _main 0052  
                                btemp 007E                                  start 0000  
              __end_of_SpiClearMatrix 0F46                       __end_of_MovieUp 0F5F  
                     __end_of_SpiInit 0F0A                       __end_of_Reverse 027F  
                               ?_free 0070                                 ?_main 0070  
                 _ChangeOfCoordinates 047C                                 _PORTA 0005  
                               _PORTB 0006                                 _TRISA 0085  
                               _TRISB 0086                                 _TRISC 0087  
                               _SSPIF 0063                       SpiClearMatrix@i 0076  
                   SendToSegment@data 0073                                 _errno 00AF  
                               free@c 007A                                 pclath 000A  
                    ___expand_heap@pn 0070                                 status 0003  
                               wtemp0 007E                          main@square_1 00A0  
                ?_ChangeOfCoordinates 005B                       ?_SpiClearMatrix 0070  
                     __initialization 07D8                          __end_of_free 0652  
                        __end_of_main 0099                         ___expand_heap 00E1  
                          _MatrixInit 0FC0                                ??_free 0072  
                              ??_main 007E                     ??_RotateDirection 007E  
           CopyArray@countElemntArray 0074                         ??_SetPosition 0076  
                       calloc@new_ptr 003C                 ??_ChangeOfCoordinates 0060  
                              _SSPCON 0014                                _SSPBUF 0013  
                          _MovieShape 012E                            _MovieRigth 0ED1  
                MovieShape@shapeArray 0028                             ??_MovieUp 0072  
                           ??_SpiInit 0070                             ??_Reverse 0074  
                       ??_SpiSendByte 0070                                _Rotate 030D  
                      ?___expand_heap 0070               ___simple_search_fl@best 002C  
             ___simple_search_fl@last 0026               ___simple_search_fl@next 0028  
                              ___wmul 0F9B                                _calloc 0099  
                              _malloc 03B2                                _memset 0F7C  
                      ShowShape@coord 0074               __end_of__initialization 07FC  
                 __end_of_SetPosition 0F7C                            ___freelist 006D  
                      __pcstackCOMMON 0070                          __pidataBANK1 0ECE  
                   __end_of_CopyArray 0052                           ?_MatrixInit 0070  
                 __end_of_SpiSendByte 0EE7     ChangeOfCoordinates@_shapePosition 005B  
ChangeOfCoordinates@_countElemntArray 005E            __end_of___simple_search_fl 07D8  
                          __pbssBANK0 0069                            __pbssBANK1 00A9  
                   __end_of_MovieLeft 0EF8                     __end_of_MovieDown 0F1D  
            MovieShape@_shapePosition 0026                     __end_of_PortBInit 000C  
                   __end_of_ShowShape 030D                           ?_MovieShape 0026  
                   main@shapePosition 00A5                           ?_MovieRigth 0070  
                     ??___expand_heap 0071                            __pmaintext 0052  
                             ?_Rotate 003E                               ?___wmul 0070  
                             ?_calloc 0038                               ?_malloc 0078  
                             ?_memset 0076                         MovieShape@dir 002E  
           ShowShape@countElemntArray 0076                           _SetPosition 0F5F  
                             _SSPSTAT 0094                            __stringtab 0800  
                    ??_SpiClearMatrix 0074                       _RotateDirection 018C  
                          calloc@size 003A                               _MovieUp 0F46  
                             _SpiInit 0EF8                         _SendToSegment 0F1D  
                ___simple_search_fl@c 002A                               _Reverse 0201  
                ___simple_search_fl@n 0070                           _SpiSendByte 0EDC  
                             Rotate@i 004D                               Rotate@x 004B  
            ___simple_search_fl@split 0024                               __ptext1 0EF8  
                             __ptext2 0F5F                               __ptext3 0005  
                             __ptext4 0FC0                               __ptext5 047C  
                             __ptext6 018C                               __ptext7 030D  
                             __ptext8 0564                               __ptext9 0099  
             ChangeOfCoordinates@step 0065                               free@ptr 0070  
                end_of_initialization 07FC                               malloc@m 002E  
                             malloc@n 0078                               malloc@p 0034  
              ___expand_heap@new_brkp 0073                               memset@c 0078  
                             memset@n 007A                               memset@p 007C  
                      ?_SendToSegment 0071                         Reverse@array_ 0070  
                 SetPosition@position 0070           __end_of_ChangeOfCoordinates 0564  
             __end_of_RotateDirection 0201               MovieLeft@_shapePosition 0070  
          ChangeOfCoordinates@_figure 005D                        __end_of_Rotate 03B2  
                      __end_of___wmul 0FC0                          ??_MatrixInit 0077  
                      __end_of_calloc 00E1                             _CopyArray 000C  
                      __end_of_malloc 047C                        __end_of_memset 0F9B  
                     ___expand_heap@n 0071                   start_initialization 07D8  
                          malloc@lock 00A9                            malloc@size 0032  
                  __end_of_MatrixInit 1000                       ??_SendToSegment 0074  
                        ??_MovieShape 002C                          ??_MovieRigth 0072  
                           _MovieLeft 0EE7                             _MovieDown 0F0A  
                  ___simple_search_fl 0652                             _PortBInit 0005  
                            ??_Rotate 0042                             _ShowShape 027F  
        ___simple_search_fl@best_last 0022                              ??___wmul 0074  
                            ??_calloc 007E                           __pdataBANK1 00B1  
                            ??_malloc 007A                              ??_memset 007C  
                 ?___simple_search_fl 0070                            memset@dest 0076  
                       ShowShape@_pos 007A                            ?_CopyArray 0070  
                        SetPosition@x 0072                          SetPosition@y 0074  
                           Rotate@res 004F                             ___heap_hi 0170  
                           ___heap_lo 0110                             ___latbits 0002  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                  __end_of_MovieShape 018C                    __end_of_MovieRigth 0EDC  
                        ?_SetPosition 0070                  main@countElemntArray 00A3  
                 ShowShape@shapeArray 0078                  ??___simple_search_fl 0072  
                    ?_RotateDirection 0053                       CopyArray@array_ 0070  
                          ?_MovieLeft 0070                            ?_MovieDown 0070  
                            ?_MovieUp 0070                              ?_SpiInit 0070  
                            ?_Reverse 0070                            ?_PortBInit 0070  
               __end_of___expand_heap 012E                          ?_SpiSendByte 0070  
                          ?_ShowShape 0074                             __pstrings 0800  
             MovieDown@_shapePosition 0070      __end_ofChangeOfCoordinates@delay 080A  
               MovieUp@_shapePosition 0070                        ___wmul@product 0074  
      ChangeOfCoordinates@rotateArray 0067                      RotateDirection@i 0059  
                         ??_CopyArray 0076                           __stringbase 0805  
                   ___wmul@multiplier 0070                Rotate@countElemntArray 0040  
                           malloc@end 00AD                             malloc@cur 006B  
                           malloc@new 0036                           ??_MovieLeft 0072  
                         ??_MovieDown 0072                           calloc@nmemb 0038  
                            Reverse@i 0021                              Reverse@j 0023  
                            Reverse@t 0020                           ??_PortBInit 0070  
             Reverse@countElemntArray 0072                           ??_ShowShape 0020  
                        ShowShape@pos 007C                              Rotate@_i 0051  
                  __end_of__stringtab 0806                              __ptext10 0F7C  
                            __ptext11 03B2                              __ptext20 0F1D  
                            __ptext12 0652                              __ptext21 0EDC  
                            __ptext13 00E1                              __ptext22 0F46  
                            __ptext14 0F9B                              __ptext23 0ED1  
                            __ptext15 000C                              __ptext24 0EE7  
                            __ptext16 0201                              __ptext25 0F0A  
                            __ptext17 012E                              __ptext18 0F30  
                            __ptext19 027F              ChangeOfCoordinates@delay 0806  
                            main@F932 00B1                  SendToSegment@segment 0071  
                            free@cptr 0078                              malloc@sz 0030  
   ___simple_search_fl@remaining_size 0020                 RotateDirection@array_ 0055  
                ChangeOfCoordinates@i 0063                             stringcode 0800  
               __end_of_SendToSegment 0F30              MovieRigth@_shapePosition 0070  
                        CopyArray@res 0072            MovieShape@countElemntArray 002A  
                            stringdir 0800                              stringtab 0800  
                        Rotate@array_ 003E                   RotateDirection@step 0053  
                          CopyArray@y 0020  

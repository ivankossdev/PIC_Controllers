

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec  5 16:22:52 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F876 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     008C                     PIE1            equ	140	;# 
    97     008D                     PIE2            equ	141	;# 
    98     008E                     PCON            equ	142	;# 
    99     0091                     SSPCON2         equ	145	;# 
   100     0092                     PR2             equ	146	;# 
   101     0093                     SSPADD          equ	147	;# 
   102     0094                     SSPSTAT         equ	148	;# 
   103     0098                     TXSTA           equ	152	;# 
   104     0099                     SPBRG           equ	153	;# 
   105     009E                     ADRESL          equ	158	;# 
   106     009F                     ADCON1          equ	159	;# 
   107     010C                     EEDATA          equ	268	;# 
   108     010D                     EEADR           equ	269	;# 
   109     010E                     EEDATH          equ	270	;# 
   110     010F                     EEADRH          equ	271	;# 
   111     018C                     EECON1          equ	396	;# 
   112     018D                     EECON2          equ	397	;# 
   113     0000                     INDF            equ	0	;# 
   114     0001                     TMR0            equ	1	;# 
   115     0002                     PCL             equ	2	;# 
   116     0003                     STATUS          equ	3	;# 
   117     0004                     FSR             equ	4	;# 
   118     0005                     PORTA           equ	5	;# 
   119     0006                     PORTB           equ	6	;# 
   120     0007                     PORTC           equ	7	;# 
   121     000A                     PCLATH          equ	10	;# 
   122     000B                     INTCON          equ	11	;# 
   123     000C                     PIR1            equ	12	;# 
   124     000D                     PIR2            equ	13	;# 
   125     000E                     TMR1            equ	14	;# 
   126     000E                     TMR1L           equ	14	;# 
   127     000F                     TMR1H           equ	15	;# 
   128     0010                     T1CON           equ	16	;# 
   129     0011                     TMR2            equ	17	;# 
   130     0012                     T2CON           equ	18	;# 
   131     0013                     SSPBUF          equ	19	;# 
   132     0014                     SSPCON          equ	20	;# 
   133     0015                     CCPR1           equ	21	;# 
   134     0015                     CCPR1L          equ	21	;# 
   135     0016                     CCPR1H          equ	22	;# 
   136     0017                     CCP1CON         equ	23	;# 
   137     0018                     RCSTA           equ	24	;# 
   138     0019                     TXREG           equ	25	;# 
   139     001A                     RCREG           equ	26	;# 
   140     001B                     CCPR2           equ	27	;# 
   141     001B                     CCPR2L          equ	27	;# 
   142     001C                     CCPR2H          equ	28	;# 
   143     001D                     CCP2CON         equ	29	;# 
   144     001E                     ADRESH          equ	30	;# 
   145     001F                     ADCON0          equ	31	;# 
   146     0081                     OPTION_REG      equ	129	;# 
   147     0085                     TRISA           equ	133	;# 
   148     0086                     TRISB           equ	134	;# 
   149     0087                     TRISC           equ	135	;# 
   150     008C                     PIE1            equ	140	;# 
   151     008D                     PIE2            equ	141	;# 
   152     008E                     PCON            equ	142	;# 
   153     0091                     SSPCON2         equ	145	;# 
   154     0092                     PR2             equ	146	;# 
   155     0093                     SSPADD          equ	147	;# 
   156     0094                     SSPSTAT         equ	148	;# 
   157     0098                     TXSTA           equ	152	;# 
   158     0099                     SPBRG           equ	153	;# 
   159     009E                     ADRESL          equ	158	;# 
   160     009F                     ADCON1          equ	159	;# 
   161     010C                     EEDATA          equ	268	;# 
   162     010D                     EEADR           equ	269	;# 
   163     010E                     EEDATH          equ	270	;# 
   164     010F                     EEADRH          equ	271	;# 
   165     018C                     EECON1          equ	396	;# 
   166     018D                     EECON2          equ	397	;# 
   167     0000                     INDF            equ	0	;# 
   168     0001                     TMR0            equ	1	;# 
   169     0002                     PCL             equ	2	;# 
   170     0003                     STATUS          equ	3	;# 
   171     0004                     FSR             equ	4	;# 
   172     0005                     PORTA           equ	5	;# 
   173     0006                     PORTB           equ	6	;# 
   174     0007                     PORTC           equ	7	;# 
   175     000A                     PCLATH          equ	10	;# 
   176     000B                     INTCON          equ	11	;# 
   177     000C                     PIR1            equ	12	;# 
   178     000D                     PIR2            equ	13	;# 
   179     000E                     TMR1            equ	14	;# 
   180     000E                     TMR1L           equ	14	;# 
   181     000F                     TMR1H           equ	15	;# 
   182     0010                     T1CON           equ	16	;# 
   183     0011                     TMR2            equ	17	;# 
   184     0012                     T2CON           equ	18	;# 
   185     0013                     SSPBUF          equ	19	;# 
   186     0014                     SSPCON          equ	20	;# 
   187     0015                     CCPR1           equ	21	;# 
   188     0015                     CCPR1L          equ	21	;# 
   189     0016                     CCPR1H          equ	22	;# 
   190     0017                     CCP1CON         equ	23	;# 
   191     0018                     RCSTA           equ	24	;# 
   192     0019                     TXREG           equ	25	;# 
   193     001A                     RCREG           equ	26	;# 
   194     001B                     CCPR2           equ	27	;# 
   195     001B                     CCPR2L          equ	27	;# 
   196     001C                     CCPR2H          equ	28	;# 
   197     001D                     CCP2CON         equ	29	;# 
   198     001E                     ADRESH          equ	30	;# 
   199     001F                     ADCON0          equ	31	;# 
   200     0081                     OPTION_REG      equ	129	;# 
   201     0085                     TRISA           equ	133	;# 
   202     0086                     TRISB           equ	134	;# 
   203     0087                     TRISC           equ	135	;# 
   204     008C                     PIE1            equ	140	;# 
   205     008D                     PIE2            equ	141	;# 
   206     008E                     PCON            equ	142	;# 
   207     0091                     SSPCON2         equ	145	;# 
   208     0092                     PR2             equ	146	;# 
   209     0093                     SSPADD          equ	147	;# 
   210     0094                     SSPSTAT         equ	148	;# 
   211     0098                     TXSTA           equ	152	;# 
   212     0099                     SPBRG           equ	153	;# 
   213     009E                     ADRESL          equ	158	;# 
   214     009F                     ADCON1          equ	159	;# 
   215     010C                     EEDATA          equ	268	;# 
   216     010D                     EEADR           equ	269	;# 
   217     010E                     EEDATH          equ	270	;# 
   218     010F                     EEADRH          equ	271	;# 
   219     018C                     EECON1          equ	396	;# 
   220     018D                     EECON2          equ	397	;# 
   221     0000                     INDF            equ	0	;# 
   222     0001                     TMR0            equ	1	;# 
   223     0002                     PCL             equ	2	;# 
   224     0003                     STATUS          equ	3	;# 
   225     0004                     FSR             equ	4	;# 
   226     0005                     PORTA           equ	5	;# 
   227     0006                     PORTB           equ	6	;# 
   228     0007                     PORTC           equ	7	;# 
   229     000A                     PCLATH          equ	10	;# 
   230     000B                     INTCON          equ	11	;# 
   231     000C                     PIR1            equ	12	;# 
   232     000D                     PIR2            equ	13	;# 
   233     000E                     TMR1            equ	14	;# 
   234     000E                     TMR1L           equ	14	;# 
   235     000F                     TMR1H           equ	15	;# 
   236     0010                     T1CON           equ	16	;# 
   237     0011                     TMR2            equ	17	;# 
   238     0012                     T2CON           equ	18	;# 
   239     0013                     SSPBUF          equ	19	;# 
   240     0014                     SSPCON          equ	20	;# 
   241     0015                     CCPR1           equ	21	;# 
   242     0015                     CCPR1L          equ	21	;# 
   243     0016                     CCPR1H          equ	22	;# 
   244     0017                     CCP1CON         equ	23	;# 
   245     0018                     RCSTA           equ	24	;# 
   246     0019                     TXREG           equ	25	;# 
   247     001A                     RCREG           equ	26	;# 
   248     001B                     CCPR2           equ	27	;# 
   249     001B                     CCPR2L          equ	27	;# 
   250     001C                     CCPR2H          equ	28	;# 
   251     001D                     CCP2CON         equ	29	;# 
   252     001E                     ADRESH          equ	30	;# 
   253     001F                     ADCON0          equ	31	;# 
   254     0081                     OPTION_REG      equ	129	;# 
   255     0085                     TRISA           equ	133	;# 
   256     0086                     TRISB           equ	134	;# 
   257     0087                     TRISC           equ	135	;# 
   258     008C                     PIE1            equ	140	;# 
   259     008D                     PIE2            equ	141	;# 
   260     008E                     PCON            equ	142	;# 
   261     0091                     SSPCON2         equ	145	;# 
   262     0092                     PR2             equ	146	;# 
   263     0093                     SSPADD          equ	147	;# 
   264     0094                     SSPSTAT         equ	148	;# 
   265     0098                     TXSTA           equ	152	;# 
   266     0099                     SPBRG           equ	153	;# 
   267     009E                     ADRESL          equ	158	;# 
   268     009F                     ADCON1          equ	159	;# 
   269     010C                     EEDATA          equ	268	;# 
   270     010D                     EEADR           equ	269	;# 
   271     010E                     EEDATH          equ	270	;# 
   272     010F                     EEADRH          equ	271	;# 
   273     018C                     EECON1          equ	396	;# 
   274     018D                     EECON2          equ	397	;# 
   275     0000                     INDF            equ	0	;# 
   276     0001                     TMR0            equ	1	;# 
   277     0002                     PCL             equ	2	;# 
   278     0003                     STATUS          equ	3	;# 
   279     0004                     FSR             equ	4	;# 
   280     0005                     PORTA           equ	5	;# 
   281     0006                     PORTB           equ	6	;# 
   282     0007                     PORTC           equ	7	;# 
   283     000A                     PCLATH          equ	10	;# 
   284     000B                     INTCON          equ	11	;# 
   285     000C                     PIR1            equ	12	;# 
   286     000D                     PIR2            equ	13	;# 
   287     000E                     TMR1            equ	14	;# 
   288     000E                     TMR1L           equ	14	;# 
   289     000F                     TMR1H           equ	15	;# 
   290     0010                     T1CON           equ	16	;# 
   291     0011                     TMR2            equ	17	;# 
   292     0012                     T2CON           equ	18	;# 
   293     0013                     SSPBUF          equ	19	;# 
   294     0014                     SSPCON          equ	20	;# 
   295     0015                     CCPR1           equ	21	;# 
   296     0015                     CCPR1L          equ	21	;# 
   297     0016                     CCPR1H          equ	22	;# 
   298     0017                     CCP1CON         equ	23	;# 
   299     0018                     RCSTA           equ	24	;# 
   300     0019                     TXREG           equ	25	;# 
   301     001A                     RCREG           equ	26	;# 
   302     001B                     CCPR2           equ	27	;# 
   303     001B                     CCPR2L          equ	27	;# 
   304     001C                     CCPR2H          equ	28	;# 
   305     001D                     CCP2CON         equ	29	;# 
   306     001E                     ADRESH          equ	30	;# 
   307     001F                     ADCON0          equ	31	;# 
   308     0081                     OPTION_REG      equ	129	;# 
   309     0085                     TRISA           equ	133	;# 
   310     0086                     TRISB           equ	134	;# 
   311     0087                     TRISC           equ	135	;# 
   312     008C                     PIE1            equ	140	;# 
   313     008D                     PIE2            equ	141	;# 
   314     008E                     PCON            equ	142	;# 
   315     0091                     SSPCON2         equ	145	;# 
   316     0092                     PR2             equ	146	;# 
   317     0093                     SSPADD          equ	147	;# 
   318     0094                     SSPSTAT         equ	148	;# 
   319     0098                     TXSTA           equ	152	;# 
   320     0099                     SPBRG           equ	153	;# 
   321     009E                     ADRESL          equ	158	;# 
   322     009F                     ADCON1          equ	159	;# 
   323     010C                     EEDATA          equ	268	;# 
   324     010D                     EEADR           equ	269	;# 
   325     010E                     EEDATH          equ	270	;# 
   326     010F                     EEADRH          equ	271	;# 
   327     018C                     EECON1          equ	396	;# 
   328     018D                     EECON2          equ	397	;# 
   329     0013                     _SSPBUF         set	19
   330     0014                     _SSPCON         set	20
   331     0005                     _PORTA          set	5
   332     0006                     _PORTB          set	6
   333     002D                     _RA5            set	45
   334     0063                     _SSPIF          set	99
   335     0094                     _SSPSTAT        set	148
   336     0085                     _TRISA          set	133
   337     0087                     _TRISC          set	135
   338     0086                     _TRISB          set	134
   339                           
   340                           	psect	cinit
   341     07FC                     start_initialization:	
   342                           ; #config settings
   343                           
   344     07FC                     __initialization:
   345     07FC                     end_of_initialization:	
   346                           ;End of C runtime variable initialization code
   347                           
   348     07FC                     __end_of__initialization:
   349     07FC  0183               	clrf	3
   350     07FD  120A  118A  2F60   	ljmp	_main	;jump to C main() function
   351                           
   352                           	psect	cstackCOMMON
   353     0071                     __pcstackCOMMON:
   354     0071                     ?_SpiInit:
   355     0071                     ?_MatrixInit:	
   356                           ; 1 bytes @ 0x0
   357                           
   358     0071                     ?_PortBInit:	
   359                           ; 1 bytes @ 0x0
   360                           
   361     0071                     ?_SpiClearMatrix:	
   362                           ; 1 bytes @ 0x0
   363                           
   364     0071                     ?_main:	
   365                           ; 1 bytes @ 0x0
   366                           
   367     0071                     ?_SpiSendByte:	
   368                           ; 1 bytes @ 0x0
   369                           
   370     0071                     SpiSendByte@data:	
   371                           ; 1 bytes @ 0x0
   372                           
   373     0071                     ??_SpiInit:	
   374                           ; 1 bytes @ 0x0
   375                           
   376     0071                     ??_PortBInit:	
   377                           ; 1 bytes @ 0x0
   378                           
   379     0071                     ??_SpiSendByte:	
   380                           ; 1 bytes @ 0x0
   381                           
   382                           
   383                           ; 1 bytes @ 0x0
   384     0071                     	ds	1
   385     0072                     ?_SendToSegment:
   386     0072                     SendToSegment@segment:	
   387                           ; 1 bytes @ 0x1
   388                           
   389                           
   390                           ; 2 bytes @ 0x1
   391     0072                     	ds	2
   392     0074                     SendToSegment@data:
   393                           
   394                           ; 1 bytes @ 0x3
   395     0074                     	ds	1
   396     0075                     ??_SpiClearMatrix:
   397     0075                     ??_SendToSegment:	
   398                           ; 1 bytes @ 0x4
   399                           
   400                           
   401                           ; 1 bytes @ 0x4
   402     0075                     	ds	2
   403     0077                     SpiClearMatrix@i:
   404                           
   405                           ; 1 bytes @ 0x6
   406     0077                     	ds	1
   407     0078                     ??_MatrixInit:
   408                           
   409                           ; 1 bytes @ 0x7
   410     0078                     	ds	3
   411     007B                     ??_main:
   412                           
   413                           ; 1 bytes @ 0xA
   414     007B                     	ds	3
   415                           
   416                           	psect	cstackBANK0
   417     0020                     __pcstackBANK0:
   418     0020                     main@y_coord:
   419                           
   420                           ; 2 bytes @ 0x0
   421     0020                     	ds	2
   422     0022                     main@sh:
   423                           
   424                           ; 2 bytes @ 0x2
   425     0022                     	ds	2
   426     0024                     main@k:
   427                           
   428                           ; 2 bytes @ 0x4
   429     0024                     	ds	2
   430                           
   431                           	psect	maintext
   432     0760                     __pmaintext:	
   433 ;;
   434 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   435 ;;
   436 ;; *************** function _main *****************
   437 ;; Defined at:
   438 ;;		line 17 in file "main.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;		None
   441 ;; Auto vars:     Size  Location     Type
   442 ;;  y_coord         2    0[BANK0 ] int 
   443 ;;  sh              2    2[BANK0 ] int 
   444 ;;  k               2    4[BANK0 ] int 
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : B00/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   454 ;;      Params:         0       0       0       0       0
   455 ;;      Locals:         0       6       0       0       0
   456 ;;      Temps:          3       0       0       0       0
   457 ;;      Totals:         3       6       0       0       0
   458 ;;Total ram usage:        9 bytes
   459 ;; Hardware stack levels required when called: 4
   460 ;; This function calls:
   461 ;;		_MatrixInit
   462 ;;		_PortBInit
   463 ;;		_SendToSegment
   464 ;;		_SpiClearMatrix
   465 ;;		_SpiInit
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471     0760                     _main:	
   472                           ;psect for function _main
   473                           
   474     0760                     l732:	
   475                           ;incstack = 0
   476                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   477                           
   478                           
   479                           ;main.c: 18:     SpiInit();
   480     0760  120A  118A  26E5  120A  118A  	fcall	_SpiInit
   481                           
   482                           ;main.c: 19:     MatrixInit();
   483     0765  120A  118A  2720  120A  118A  	fcall	_MatrixInit
   484     076A                     l734:
   485                           
   486                           ;main.c: 20:     PortBInit();
   487     076A  120A  118A  26D3  120A  118A  	fcall	_PortBInit
   488     076F                     l736:
   489                           
   490                           ;main.c: 23:         for(int k = 0; k <= 6; k++){
   491     076F  1283               	bcf	3,5	;RP0=0, select bank0
   492     0770  1303               	bcf	3,6	;RP1=0, select bank0
   493     0771  01A4               	clrf	main@k
   494     0772  01A5               	clrf	main@k+1
   495     0773                     l742:
   496                           
   497                           ;main.c: 24:             for(int sh = 0; sh <= 8; sh++){
   498     0773  1283               	bcf	3,5	;RP0=0, select bank0
   499     0774  1303               	bcf	3,6	;RP1=0, select bank0
   500     0775  01A2               	clrf	main@sh
   501     0776  01A3               	clrf	main@sh+1
   502     0777                     l744:
   503     0777  0823               	movf	main@sh+1,w
   504     0778  3A80               	xorlw	128
   505     0779  00FF               	movwf	btemp+1
   506     077A  3080               	movlw	128
   507     077B  027F               	subwf	btemp+1,w
   508     077C  1D03               	skipz
   509     077D  2F80               	goto	u95
   510     077E  3009               	movlw	9
   511     077F  0222               	subwf	main@sh,w
   512     0780                     u95:
   513     0780  1C03               	skipc
   514     0781  2F83               	goto	u91
   515     0782  2F84               	goto	u90
   516     0783                     u91:
   517     0783  2F85               	goto	l748
   518     0784                     u90:
   519     0784  2FDE               	goto	l762
   520     0785                     l748:
   521                           
   522                           ;main.c: 25:                 SpiClearMatrix();
   523     0785  120A  118A  270A  120A  118A  	fcall	_SpiClearMatrix
   524     078A                     l750:
   525                           
   526                           ;main.c: 26:                 for(int y_coord = 1 + k; y_coord <=2 + k; y_coord++){
   527     078A  1283               	bcf	3,5	;RP0=0, select bank0
   528     078B  1303               	bcf	3,6	;RP1=0, select bank0
   529     078C  0824               	movf	main@k,w
   530     078D  3E01               	addlw	1
   531     078E  00A0               	movwf	main@y_coord
   532     078F  0825               	movf	main@k+1,w
   533     0790  1803               	skipnc
   534     0791  3E01               	addlw	1
   535     0792  3E00               	addlw	0
   536     0793  00A1               	movwf	main@y_coord+1
   537     0794  2FB3               	goto	l756
   538     0795                     l752:
   539                           
   540                           ;main.c: 27:                    SendToSegment(y_coord, (char)(0x03 << sh));
   541     0795  1283               	bcf	3,5	;RP0=0, select bank0
   542     0796  1303               	bcf	3,6	;RP1=0, select bank0
   543     0797  0821               	movf	main@y_coord+1,w
   544     0798  00F3               	movwf	SendToSegment@segment+1
   545     0799  0820               	movf	main@y_coord,w
   546     079A  00F2               	movwf	SendToSegment@segment
   547     079B  3003               	movlw	3
   548     079C  00FB               	movwf	??_main
   549     079D  0A22               	incf	main@sh,w
   550     079E  2FA1               	goto	u104
   551     079F                     u105:
   552     079F  1003               	clrc
   553     07A0  0DFB               	rlf	??_main,f
   554     07A1                     u104:
   555     07A1  3EFF               	addlw	-1
   556     07A2  1D03               	skipz
   557     07A3  2F9F               	goto	u105
   558     07A4  087B               	movf	??_main,w
   559     07A5  00F4               	movwf	SendToSegment@data
   560     07A6  120A  118A  26F7  120A  118A  	fcall	_SendToSegment
   561     07AB                     l754:
   562                           
   563                           ;main.c: 28:                 }
   564     07AB  3001               	movlw	1
   565     07AC  1283               	bcf	3,5	;RP0=0, select bank0
   566     07AD  1303               	bcf	3,6	;RP1=0, select bank0
   567     07AE  07A0               	addwf	main@y_coord,f
   568     07AF  1803               	skipnc
   569     07B0  0AA1               	incf	main@y_coord+1,f
   570     07B1  3000               	movlw	0
   571     07B2  07A1               	addwf	main@y_coord+1,f
   572     07B3                     l756:
   573     07B3  0824               	movf	main@k,w
   574     07B4  3E02               	addlw	2
   575     07B5  00FB               	movwf	??_main
   576     07B6  0825               	movf	main@k+1,w
   577     07B7  1803               	skipnc
   578     07B8  3E01               	addlw	1
   579     07B9  3E00               	addlw	0
   580     07BA  00FC               	movwf	??_main+1
   581     07BB  087C               	movf	??_main+1,w
   582     07BC  3A80               	xorlw	128
   583     07BD  00FD               	movwf	??_main+2
   584     07BE  0821               	movf	main@y_coord+1,w
   585     07BF  3A80               	xorlw	128
   586     07C0  027D               	subwf	??_main+2,w
   587     07C1  1D03               	skipz
   588     07C2  2FC5               	goto	u115
   589     07C3  0820               	movf	main@y_coord,w
   590     07C4  027B               	subwf	??_main,w
   591     07C5                     u115:
   592     07C5  1803               	skipnc
   593     07C6  2FC8               	goto	u111
   594     07C7  2FC9               	goto	u110
   595     07C8                     u111:
   596     07C8  2F95               	goto	l752
   597     07C9                     u110:
   598     07C9                     l758:
   599                           
   600                           ;main.c: 29:                 _delay((unsigned long)((100)*(16000000/4000.0)));
   601     07C9  3003               	movlw	3
   602     07CA  00FD               	movwf	??_main+2
   603     07CB  3008               	movlw	8
   604     07CC  00FC               	movwf	??_main+1
   605     07CD  3077               	movlw	119
   606     07CE  00FB               	movwf	??_main
   607     07CF                     u137:
   608     07CF  0BFB               	decfsz	??_main,f
   609     07D0  2FCF               	goto	u137
   610     07D1  0BFC               	decfsz	??_main+1,f
   611     07D2  2FCF               	goto	u137
   612     07D3  0BFD               	decfsz	??_main+2,f
   613     07D4  2FCF               	goto	u137
   614                           
   615                           ;main.c: 30:             }
   616     07D5  3001               	movlw	1
   617     07D6  1283               	bcf	3,5	;RP0=0, select bank0
   618     07D7  1303               	bcf	3,6	;RP1=0, select bank0
   619     07D8  07A2               	addwf	main@sh,f
   620     07D9  1803               	skipnc
   621     07DA  0AA3               	incf	main@sh+1,f
   622     07DB  3000               	movlw	0
   623     07DC  07A3               	addwf	main@sh+1,f
   624     07DD  2F77               	goto	l744
   625     07DE                     l762:
   626                           
   627                           ;main.c: 31:         }
   628     07DE  3001               	movlw	1
   629     07DF  1283               	bcf	3,5	;RP0=0, select bank0
   630     07E0  1303               	bcf	3,6	;RP1=0, select bank0
   631     07E1  07A4               	addwf	main@k,f
   632     07E2  1803               	skipnc
   633     07E3  0AA5               	incf	main@k+1,f
   634     07E4  3000               	movlw	0
   635     07E5  07A5               	addwf	main@k+1,f
   636     07E6                     l764:
   637     07E6  0825               	movf	main@k+1,w
   638     07E7  3A80               	xorlw	128
   639     07E8  00FF               	movwf	btemp+1
   640     07E9  3080               	movlw	128
   641     07EA  027F               	subwf	btemp+1,w
   642     07EB  1D03               	skipz
   643     07EC  2FEF               	goto	u125
   644     07ED  3007               	movlw	7
   645     07EE  0224               	subwf	main@k,w
   646     07EF                     u125:
   647     07EF  1C03               	skipc
   648     07F0  2FF2               	goto	u121
   649     07F1  2FF3               	goto	u120
   650     07F2                     u121:
   651     07F2  2F73               	goto	l742
   652     07F3                     u120:
   653     07F3                     l766:
   654                           
   655                           ;main.c: 32:         SpiClearMatrix();
   656     07F3  120A  118A  270A  120A  118A  	fcall	_SpiClearMatrix
   657     07F8  2F6F               	goto	l736
   658     07F9  120A  118A  2800   	ljmp	start
   659     07FC                     __end_of_main:
   660                           
   661                           	psect	text1
   662     06E5                     __ptext1:	
   663 ;; *************** function _SpiInit *****************
   664 ;; Defined at:
   665 ;;		line 9 in file "spi.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   679 ;;      Params:         0       0       0       0       0
   680 ;;      Locals:         0       0       0       0       0
   681 ;;      Temps:          0       0       0       0       0
   682 ;;      Totals:         0       0       0       0       0
   683 ;;Total ram usage:        0 bytes
   684 ;; Hardware stack levels used: 1
   685 ;; This function calls:
   686 ;;		Nothing
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692     06E5                     _SpiInit:	
   693                           ;psect for function _SpiInit
   694                           
   695     06E5                     l708:	
   696                           ;incstack = 0
   697                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   698                           
   699                           
   700                           ;spi.c: 10:     TRISC |= 0x10;
   701     06E5  1683               	bsf	3,5	;RP0=1, select bank1
   702     06E6  1303               	bcf	3,6	;RP1=0, select bank1
   703     06E7  1607               	bsf	7,4	;volatile
   704     06E8                     l710:
   705                           
   706                           ;spi.c: 11:     TRISC &= ~0x28;
   707     06E8  30D7               	movlw	215
   708     06E9  0587               	andwf	7,f	;volatile
   709                           
   710                           ;spi.c: 12:     TRISA &= ~0x20;
   711     06EA  30DF               	movlw	223
   712     06EB  0585               	andwf	5,f	;volatile
   713                           
   714                           ;spi.c: 13:     PORTA &= ~0x20;
   715     06EC  30DF               	movlw	223
   716     06ED  1283               	bcf	3,5	;RP0=0, select bank0
   717     06EE  1303               	bcf	3,6	;RP1=0, select bank0
   718     06EF  0585               	andwf	5,f	;volatile
   719     06F0                     l712:
   720                           
   721                           ;spi.c: 14:     SSPCON = 0x30;
   722     06F0  3030               	movlw	48
   723     06F1  0094               	movwf	20	;volatile
   724     06F2                     l714:
   725                           
   726                           ;spi.c: 15:     SSPSTAT = 0x80;
   727     06F2  3080               	movlw	128
   728     06F3  1683               	bsf	3,5	;RP0=1, select bank1
   729     06F4  1303               	bcf	3,6	;RP1=0, select bank1
   730     06F5  0094               	movwf	20	;volatile
   731     06F6                     l51:
   732     06F6  0008               	return
   733     06F7                     __end_of_SpiInit:
   734                           
   735                           	psect	text2
   736     06D3                     __ptext2:	
   737 ;; *************** function _PortBInit *****************
   738 ;; Defined at:
   739 ;;		line 13 in file "portsinit.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		status,2
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   753 ;;      Params:         0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0
   756 ;;      Totals:         0       0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels used: 1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766     06D3                     _PortBInit:	
   767                           ;psect for function _PortBInit
   768                           
   769     06D3                     l730:	
   770                           ;incstack = 0
   771                           ; Regs used in _PortBInit: [status,2]
   772                           
   773                           
   774                           ;portsinit.c: 14:     TRISB = 0x00;
   775     06D3  1683               	bsf	3,5	;RP0=1, select bank1
   776     06D4  1303               	bcf	3,6	;RP1=0, select bank1
   777     06D5  0186               	clrf	6	;volatile
   778                           
   779                           ;portsinit.c: 15:     PORTB = 0x00;
   780     06D6  1283               	bcf	3,5	;RP0=0, select bank0
   781     06D7  1303               	bcf	3,6	;RP1=0, select bank0
   782     06D8  0186               	clrf	6	;volatile
   783     06D9                     l34:
   784     06D9  0008               	return
   785     06DA                     __end_of_PortBInit:
   786                           
   787                           	psect	text3
   788     0720                     __ptext3:	
   789 ;; *************** function _MatrixInit *****************
   790 ;; Defined at:
   791 ;;		line 20 in file "matrix.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, status,2, status,0, pclath, cstack
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   805 ;;      Params:         0       0       0       0       0
   806 ;;      Locals:         0       0       0       0       0
   807 ;;      Temps:          3       0       0       0       0
   808 ;;      Totals:         3       0       0       0       0
   809 ;;Total ram usage:        3 bytes
   810 ;; Hardware stack levels used: 1
   811 ;; Hardware stack levels required when called: 3
   812 ;; This function calls:
   813 ;;		_SendToSegment
   814 ;;		_SpiClearMatrix
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820     0720                     _MatrixInit:	
   821                           ;psect for function _MatrixInit
   822                           
   823     0720                     l716:	
   824                           ;incstack = 0
   825                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
   826                           
   827                           
   828                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
   829     0720  3003               	movlw	3
   830     0721  00FA               	movwf	??_MatrixInit+2
   831     0722  3008               	movlw	8
   832     0723  00F9               	movwf	??_MatrixInit+1
   833     0724  3077               	movlw	119
   834     0725  00F8               	movwf	??_MatrixInit
   835     0726                     u147:
   836     0726  0BF8               	decfsz	??_MatrixInit,f
   837     0727  2F26               	goto	u147
   838     0728  0BF9               	decfsz	??_MatrixInit+1,f
   839     0729  2F26               	goto	u147
   840     072A  0BFA               	decfsz	??_MatrixInit+2,f
   841     072B  2F26               	goto	u147
   842     072C                     l718:
   843                           
   844                           ;matrix.c: 22:     RA5=1;
   845     072C  1283               	bcf	3,5	;RP0=0, select bank0
   846     072D  1303               	bcf	3,6	;RP1=0, select bank0
   847     072E  1685               	bsf	5,5	;volatile
   848     072F                     l720:
   849                           
   850                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
   851     072F  3009               	movlw	9
   852     0730  00F2               	movwf	SendToSegment@segment
   853     0731  3000               	movlw	0
   854     0732  00F3               	movwf	SendToSegment@segment+1
   855     0733  01F4               	clrf	SendToSegment@data
   856     0734  120A  118A  26F7  120A  118A  	fcall	_SendToSegment
   857     0739                     l722:
   858                           
   859                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
   860     0739  300B               	movlw	11
   861     073A  00F2               	movwf	SendToSegment@segment
   862     073B  3000               	movlw	0
   863     073C  00F3               	movwf	SendToSegment@segment+1
   864     073D  3007               	movlw	7
   865     073E  00F4               	movwf	SendToSegment@data
   866     073F  120A  118A  26F7  120A  118A  	fcall	_SendToSegment
   867     0744                     l724:
   868                           
   869                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
   870     0744  300A               	movlw	10
   871     0745  00F2               	movwf	SendToSegment@segment
   872     0746  3000               	movlw	0
   873     0747  00F3               	movwf	SendToSegment@segment+1
   874     0748  3002               	movlw	2
   875     0749  00F4               	movwf	SendToSegment@data
   876     074A  120A  118A  26F7  120A  118A  	fcall	_SendToSegment
   877     074F                     l726:
   878                           
   879                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
   880     074F  300C               	movlw	12
   881     0750  00F2               	movwf	SendToSegment@segment
   882     0751  3000               	movlw	0
   883     0752  00F3               	movwf	SendToSegment@segment+1
   884     0753  01F4               	clrf	SendToSegment@data
   885     0754  0AF4               	incf	SendToSegment@data,f
   886     0755  120A  118A  26F7  120A  118A  	fcall	_SendToSegment
   887     075A                     l728:
   888                           
   889                           ;matrix.c: 27:     SpiClearMatrix();
   890     075A  120A  118A  270A  120A  118A  	fcall	_SpiClearMatrix
   891     075F                     l73:
   892     075F  0008               	return
   893     0760                     __end_of_MatrixInit:
   894                           
   895                           	psect	text4
   896     070A                     __ptext4:	
   897 ;; *************** function _SpiClearMatrix *****************
   898 ;; Defined at:
   899 ;;		line 10 in file "matrix.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  i               1    6[COMMON] unsigned char 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, status,2, status,0, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   913 ;;      Params:         0       0       0       0       0
   914 ;;      Locals:         1       0       0       0       0
   915 ;;      Temps:          2       0       0       0       0
   916 ;;      Totals:         3       0       0       0       0
   917 ;;Total ram usage:        3 bytes
   918 ;; Hardware stack levels used: 1
   919 ;; Hardware stack levels required when called: 2
   920 ;; This function calls:
   921 ;;		_SendToSegment
   922 ;; This function is called by:
   923 ;;		_main
   924 ;;		_MatrixInit
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928     070A                     _SpiClearMatrix:	
   929                           ;psect for function _SpiClearMatrix
   930                           
   931     070A                     l702:	
   932                           ;incstack = 0
   933                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
   934                           
   935                           
   936                           ;matrix.c: 12:   char i = 8;
   937     070A  3008               	movlw	8
   938     070B  00F7               	movwf	SpiClearMatrix@i
   939     070C                     l704:
   940                           
   941                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
   942     070C  0877               	movf	SpiClearMatrix@i,w
   943     070D  00F5               	movwf	??_SpiClearMatrix
   944     070E  01F6               	clrf	??_SpiClearMatrix+1
   945     070F  0875               	movf	??_SpiClearMatrix,w
   946     0710  00F2               	movwf	SendToSegment@segment
   947     0711  0876               	movf	??_SpiClearMatrix+1,w
   948     0712  00F3               	movwf	SendToSegment@segment+1
   949     0713  01F4               	clrf	SendToSegment@data
   950     0714  120A  118A  26F7  120A  118A  	fcall	_SendToSegment
   951     0719                     l706:
   952                           
   953                           ;matrix.c: 16:   } while (--i);
   954     0719  3001               	movlw	1
   955     071A  02F7               	subwf	SpiClearMatrix@i,f
   956     071B  1D03               	btfss	3,2
   957     071C  2F1E               	goto	u81
   958     071D  2F1F               	goto	u80
   959     071E                     u81:
   960     071E  2F0C               	goto	l704
   961     071F                     u80:
   962     071F                     l70:
   963     071F  0008               	return
   964     0720                     __end_of_SpiClearMatrix:
   965                           
   966                           	psect	text5
   967     06F7                     __ptext5:	
   968 ;; *************** function _SendToSegment *****************
   969 ;; Defined at:
   970 ;;		line 34 in file "matrix.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;  segment         2    1[COMMON] int 
   973 ;;  data            1    3[COMMON] unsigned char 
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, status,2, status,0, pclath, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   985 ;;      Params:         3       0       0       0       0
   986 ;;      Locals:         0       0       0       0       0
   987 ;;      Temps:          0       0       0       0       0
   988 ;;      Totals:         3       0       0       0       0
   989 ;;Total ram usage:        3 bytes
   990 ;; Hardware stack levels used: 1
   991 ;; Hardware stack levels required when called: 1
   992 ;; This function calls:
   993 ;;		_SpiSendByte
   994 ;; This function is called by:
   995 ;;		_main
   996 ;;		_SpiClearMatrix
   997 ;;		_MatrixInit
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001     06F7                     _SendToSegment:	
  1002                           ;psect for function _SendToSegment
  1003                           
  1004     06F7                     l696:	
  1005                           ;incstack = 0
  1006                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1007                           
  1008                           
  1009                           ;matrix.c: 35:     RA5 = 0;
  1010     06F7  1283               	bcf	3,5	;RP0=0, select bank0
  1011     06F8  1303               	bcf	3,6	;RP1=0, select bank0
  1012     06F9  1285               	bcf	5,5	;volatile
  1013     06FA                     l698:
  1014                           
  1015                           ;matrix.c: 36:     SpiSendByte(segment);
  1016     06FA  0872               	movf	SendToSegment@segment,w
  1017     06FB  120A  118A  26DA  120A  118A  	fcall	_SpiSendByte
  1018                           
  1019                           ;matrix.c: 37:     SpiSendByte(data);
  1020     0700  0874               	movf	SendToSegment@data,w
  1021     0701  120A  118A  26DA  120A  118A  	fcall	_SpiSendByte
  1022     0706                     l700:
  1023                           
  1024                           ;matrix.c: 38:     RA5 = 1;
  1025     0706  1283               	bcf	3,5	;RP0=0, select bank0
  1026     0707  1303               	bcf	3,6	;RP1=0, select bank0
  1027     0708  1685               	bsf	5,5	;volatile
  1028     0709                     l76:
  1029     0709  0008               	return
  1030     070A                     __end_of_SendToSegment:
  1031                           
  1032                           	psect	text6
  1033     06DA                     __ptext6:	
  1034 ;; *************** function _SpiSendByte *****************
  1035 ;; Defined at:
  1036 ;;		line 18 in file "spi.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;  data            1    wreg     unsigned char 
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  data            1    0[COMMON] unsigned char 
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1050 ;;      Params:         0       0       0       0       0
  1051 ;;      Locals:         1       0       0       0       0
  1052 ;;      Temps:          0       0       0       0       0
  1053 ;;      Totals:         1       0       0       0       0
  1054 ;;Total ram usage:        1 bytes
  1055 ;; Hardware stack levels used: 1
  1056 ;; This function calls:
  1057 ;;		Nothing
  1058 ;; This function is called by:
  1059 ;;		_SendToSegment
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063     06DA                     _SpiSendByte:	
  1064                           ;psect for function _SpiSendByte
  1065                           
  1066                           
  1067                           ;incstack = 0
  1068                           ; Regs used in _SpiSendByte: [wreg]
  1069                           ;SpiSendByte@data stored from wreg
  1070     06DA  00F1               	movwf	SpiSendByte@data
  1071     06DB                     l694:
  1072                           
  1073                           ;spi.c: 19:     SSPBUF = data;
  1074     06DB  0871               	movf	SpiSendByte@data,w
  1075     06DC  1283               	bcf	3,5	;RP0=0, select bank0
  1076     06DD  1303               	bcf	3,6	;RP1=0, select bank0
  1077     06DE  0093               	movwf	19	;volatile
  1078     06DF                     l54:	
  1079                           ;spi.c: 20:     while (!SSPIF);
  1080                           
  1081     06DF  1D8C               	btfss	12,3	;volatile
  1082     06E0  2EE2               	goto	u71
  1083     06E1  2EE3               	goto	u70
  1084     06E2                     u71:
  1085     06E2  2EDF               	goto	l54
  1086     06E3                     u70:
  1087     06E3                     l56:
  1088                           
  1089                           ;spi.c: 21:     SSPIF = 0;
  1090     06E3  118C               	bcf	12,3	;volatile
  1091     06E4                     l57:
  1092     06E4  0008               	return
  1093     06E5                     __end_of_SpiSendByte:
  1094     0002                     ___latbits      equ	2
  1095     007E                     btemp           set	126	;btemp
  1096     007E                     wtemp0          set	126
  1097                           
  1098                           	psect	config
  1099                           
  1100                           ;Config register CONFIG @ 0x2007
  1101                           ;	Oscillator Selection bits
  1102                           ;	FOSC = HS, HS oscillator
  1103                           ;	Watchdog Timer Enable bit
  1104                           ;	WDTE = OFF, WDT disabled
  1105                           ;	Power-up Timer Enable bit
  1106                           ;	PWRTE = OFF, PWRT disabled
  1107                           ;	FLASH Program Memory Code Protection bits
  1108                           ;	CP = OFF, Code protection off
  1109                           ;	Brown-out Reset Enable bit
  1110                           ;	BOREN = OFF, BOR disabled
  1111                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1112                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1113                           ;	Data EE Memory Code Protection
  1114                           ;	CPD = OFF, Code Protection off
  1115                           ;	FLASH Program Memory Write Enable
  1116                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1117                           ;	In-Circuit Debugger Mode bit
  1118                           ;	DEBUG = 0x1, unprogrammed default
  1119     2007                     	org	8199
  1120     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80      6       6
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_MatrixInit
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     634
                                             10 COMMON     3     3      0
                                              0 BANK0      6     6      0
                         _MatrixInit
                          _PortBInit
                      _SendToSegment
                     _SpiClearMatrix
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _PortBInit
   _SendToSegment
   _SpiClearMatrix
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           13      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            85      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              13     13      13    100.0%
BANK0               80      6       6      7.5%
BANK1               80      0       0      0.0%
BANK3               85      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      19      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec  5 16:22:52 2024

         _SpiClearMatrix 070A                       l34 06D9                       l51 06F6  
                     l54 06DF                       l70 071F                       l56 06E3  
                     l57 06E4                       l73 075F                       l76 0709  
                     u70 06E3                       u71 06E2                       u80 071F  
                     u81 071E                       u90 0784                       u91 0783  
                     u95 0780          SpiSendByte@data 0071                      l700 0706  
                    l702 070A                      l710 06E8                      l704 070C  
                    l720 072F                      l712 06F0                      l706 0719  
                    l722 0739                      l730 06D3                      l714 06F2  
                    l724 0744                      l716 0720                      l708 06E5  
                    l732 0760                      l726 074F                      l718 072C  
                    l750 078A                      l742 0773                      l734 076A  
                    l728 075A                      l752 0795                      l744 0777  
                    l736 076F                      l754 07AB                      l762 07DE  
                    l764 07E6                      l756 07B3                      l748 0785  
                    l694 06DB                      l766 07F3                      l758 07C9  
                    l696 06F7                      l698 06FA                      _RA5 002D  
                    u110 07C9                      u111 07C8                      u120 07F3  
                    u104 07A1                      u121 07F2                      u105 079F  
                    u115 07C5                      u125 07EF                      u137 07CF  
                    u147 0726                     _main 0760                     btemp 007E  
            main@y_coord 0020                     start 0000   __end_of_SpiClearMatrix 0720  
        __end_of_SpiInit 06F7                    ?_main 0071                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _SSPIF 0063          SpiClearMatrix@i 0077  
      SendToSegment@data 0074                    main@k 0024                    status 0003  
                  wtemp0 007E          ?_SpiClearMatrix 0071          __initialization 07FC  
           __end_of_main 07FC               _MatrixInit 0720                   ??_main 007B  
                 _SSPCON 0014                   _SSPBUF 0013                ??_SpiInit 0071  
          ??_SpiSendByte 0071                   main@sh 0022  __end_of__initialization 07FC  
         __pcstackCOMMON 0071              ?_MatrixInit 0071      __end_of_SpiSendByte 06E5  
      __end_of_PortBInit 06DA               __pmaintext 0760                  _SSPSTAT 0094  
       ??_SpiClearMatrix 0075                  _SpiInit 06E5            _SendToSegment 06F7  
            _SpiSendByte 06DA                  __ptext1 06E5                  __ptext2 06D3  
                __ptext3 0720                  __ptext4 070A                  __ptext5 06F7  
                __ptext6 06DA     end_of_initialization 07FC           ?_SendToSegment 0072  
           ??_MatrixInit 0078      start_initialization 07FC       __end_of_MatrixInit 0760  
        ??_SendToSegment 0075                _PortBInit 06D3                ___latbits 0002  
          __pcstackBANK0 0020                 ?_SpiInit 0071               ?_PortBInit 0071  
           ?_SpiSendByte 0071              ??_PortBInit 0071     SendToSegment@segment 0072  
  __end_of_SendToSegment 070A  



Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec  5 14:50:02 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,space=0,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 12/10/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F876 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0004                     fsr             equ	4
    55     0004                     fsr0            equ	4
    56     0000                     indf            equ	0
    57     0000                     indf0           equ	0
    58     0002                     pc              equ	2
    59     0002                     pcl             equ	2
    60     000A                     pclath          equ	10
    61     0003                     status          equ	3
    62     0000                     INDF            equ	0	;# 
    63     0001                     TMR0            equ	1	;# 
    64     0002                     PCL             equ	2	;# 
    65     0003                     STATUS          equ	3	;# 
    66     0004                     FSR             equ	4	;# 
    67     0005                     PORTA           equ	5	;# 
    68     0006                     PORTB           equ	6	;# 
    69     0007                     PORTC           equ	7	;# 
    70     000A                     PCLATH          equ	10	;# 
    71     000B                     INTCON          equ	11	;# 
    72     000C                     PIR1            equ	12	;# 
    73     000D                     PIR2            equ	13	;# 
    74     000E                     TMR1            equ	14	;# 
    75     000E                     TMR1L           equ	14	;# 
    76     000F                     TMR1H           equ	15	;# 
    77     0010                     T1CON           equ	16	;# 
    78     0011                     TMR2            equ	17	;# 
    79     0012                     T2CON           equ	18	;# 
    80     0013                     SSPBUF          equ	19	;# 
    81     0014                     SSPCON          equ	20	;# 
    82     0015                     CCPR1           equ	21	;# 
    83     0015                     CCPR1L          equ	21	;# 
    84     0016                     CCPR1H          equ	22	;# 
    85     0017                     CCP1CON         equ	23	;# 
    86     0018                     RCSTA           equ	24	;# 
    87     0019                     TXREG           equ	25	;# 
    88     001A                     RCREG           equ	26	;# 
    89     001B                     CCPR2           equ	27	;# 
    90     001B                     CCPR2L          equ	27	;# 
    91     001C                     CCPR2H          equ	28	;# 
    92     001D                     CCP2CON         equ	29	;# 
    93     001E                     ADRESH          equ	30	;# 
    94     001F                     ADCON0          equ	31	;# 
    95     0081                     OPTION_REG      equ	129	;# 
    96     0085                     TRISA           equ	133	;# 
    97     0086                     TRISB           equ	134	;# 
    98     0087                     TRISC           equ	135	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009E                     ADRESL          equ	158	;# 
   109     009F                     ADCON1          equ	159	;# 
   110     010C                     EEDATA          equ	268	;# 
   111     010D                     EEADR           equ	269	;# 
   112     010E                     EEDATH          equ	270	;# 
   113     010F                     EEADRH          equ	271	;# 
   114     018C                     EECON1          equ	396	;# 
   115     018D                     EECON2          equ	397	;# 
   116     0000                     INDF            equ	0	;# 
   117     0001                     TMR0            equ	1	;# 
   118     0002                     PCL             equ	2	;# 
   119     0003                     STATUS          equ	3	;# 
   120     0004                     FSR             equ	4	;# 
   121     0005                     PORTA           equ	5	;# 
   122     0006                     PORTB           equ	6	;# 
   123     0007                     PORTC           equ	7	;# 
   124     000A                     PCLATH          equ	10	;# 
   125     000B                     INTCON          equ	11	;# 
   126     000C                     PIR1            equ	12	;# 
   127     000D                     PIR2            equ	13	;# 
   128     000E                     TMR1            equ	14	;# 
   129     000E                     TMR1L           equ	14	;# 
   130     000F                     TMR1H           equ	15	;# 
   131     0010                     T1CON           equ	16	;# 
   132     0011                     TMR2            equ	17	;# 
   133     0012                     T2CON           equ	18	;# 
   134     0013                     SSPBUF          equ	19	;# 
   135     0014                     SSPCON          equ	20	;# 
   136     0015                     CCPR1           equ	21	;# 
   137     0015                     CCPR1L          equ	21	;# 
   138     0016                     CCPR1H          equ	22	;# 
   139     0017                     CCP1CON         equ	23	;# 
   140     0018                     RCSTA           equ	24	;# 
   141     0019                     TXREG           equ	25	;# 
   142     001A                     RCREG           equ	26	;# 
   143     001B                     CCPR2           equ	27	;# 
   144     001B                     CCPR2L          equ	27	;# 
   145     001C                     CCPR2H          equ	28	;# 
   146     001D                     CCP2CON         equ	29	;# 
   147     001E                     ADRESH          equ	30	;# 
   148     001F                     ADCON0          equ	31	;# 
   149     0081                     OPTION_REG      equ	129	;# 
   150     0085                     TRISA           equ	133	;# 
   151     0086                     TRISB           equ	134	;# 
   152     0087                     TRISC           equ	135	;# 
   153     008C                     PIE1            equ	140	;# 
   154     008D                     PIE2            equ	141	;# 
   155     008E                     PCON            equ	142	;# 
   156     0091                     SSPCON2         equ	145	;# 
   157     0092                     PR2             equ	146	;# 
   158     0093                     SSPADD          equ	147	;# 
   159     0094                     SSPSTAT         equ	148	;# 
   160     0098                     TXSTA           equ	152	;# 
   161     0099                     SPBRG           equ	153	;# 
   162     009E                     ADRESL          equ	158	;# 
   163     009F                     ADCON1          equ	159	;# 
   164     010C                     EEDATA          equ	268	;# 
   165     010D                     EEADR           equ	269	;# 
   166     010E                     EEDATH          equ	270	;# 
   167     010F                     EEADRH          equ	271	;# 
   168     018C                     EECON1          equ	396	;# 
   169     018D                     EECON2          equ	397	;# 
   170     0000                     INDF            equ	0	;# 
   171     0001                     TMR0            equ	1	;# 
   172     0002                     PCL             equ	2	;# 
   173     0003                     STATUS          equ	3	;# 
   174     0004                     FSR             equ	4	;# 
   175     0005                     PORTA           equ	5	;# 
   176     0006                     PORTB           equ	6	;# 
   177     0007                     PORTC           equ	7	;# 
   178     000A                     PCLATH          equ	10	;# 
   179     000B                     INTCON          equ	11	;# 
   180     000C                     PIR1            equ	12	;# 
   181     000D                     PIR2            equ	13	;# 
   182     000E                     TMR1            equ	14	;# 
   183     000E                     TMR1L           equ	14	;# 
   184     000F                     TMR1H           equ	15	;# 
   185     0010                     T1CON           equ	16	;# 
   186     0011                     TMR2            equ	17	;# 
   187     0012                     T2CON           equ	18	;# 
   188     0013                     SSPBUF          equ	19	;# 
   189     0014                     SSPCON          equ	20	;# 
   190     0015                     CCPR1           equ	21	;# 
   191     0015                     CCPR1L          equ	21	;# 
   192     0016                     CCPR1H          equ	22	;# 
   193     0017                     CCP1CON         equ	23	;# 
   194     0018                     RCSTA           equ	24	;# 
   195     0019                     TXREG           equ	25	;# 
   196     001A                     RCREG           equ	26	;# 
   197     001B                     CCPR2           equ	27	;# 
   198     001B                     CCPR2L          equ	27	;# 
   199     001C                     CCPR2H          equ	28	;# 
   200     001D                     CCP2CON         equ	29	;# 
   201     001E                     ADRESH          equ	30	;# 
   202     001F                     ADCON0          equ	31	;# 
   203     0081                     OPTION_REG      equ	129	;# 
   204     0085                     TRISA           equ	133	;# 
   205     0086                     TRISB           equ	134	;# 
   206     0087                     TRISC           equ	135	;# 
   207     008C                     PIE1            equ	140	;# 
   208     008D                     PIE2            equ	141	;# 
   209     008E                     PCON            equ	142	;# 
   210     0091                     SSPCON2         equ	145	;# 
   211     0092                     PR2             equ	146	;# 
   212     0093                     SSPADD          equ	147	;# 
   213     0094                     SSPSTAT         equ	148	;# 
   214     0098                     TXSTA           equ	152	;# 
   215     0099                     SPBRG           equ	153	;# 
   216     009E                     ADRESL          equ	158	;# 
   217     009F                     ADCON1          equ	159	;# 
   218     010C                     EEDATA          equ	268	;# 
   219     010D                     EEADR           equ	269	;# 
   220     010E                     EEDATH          equ	270	;# 
   221     010F                     EEADRH          equ	271	;# 
   222     018C                     EECON1          equ	396	;# 
   223     018D                     EECON2          equ	397	;# 
   224     0000                     INDF            equ	0	;# 
   225     0001                     TMR0            equ	1	;# 
   226     0002                     PCL             equ	2	;# 
   227     0003                     STATUS          equ	3	;# 
   228     0004                     FSR             equ	4	;# 
   229     0005                     PORTA           equ	5	;# 
   230     0006                     PORTB           equ	6	;# 
   231     0007                     PORTC           equ	7	;# 
   232     000A                     PCLATH          equ	10	;# 
   233     000B                     INTCON          equ	11	;# 
   234     000C                     PIR1            equ	12	;# 
   235     000D                     PIR2            equ	13	;# 
   236     000E                     TMR1            equ	14	;# 
   237     000E                     TMR1L           equ	14	;# 
   238     000F                     TMR1H           equ	15	;# 
   239     0010                     T1CON           equ	16	;# 
   240     0011                     TMR2            equ	17	;# 
   241     0012                     T2CON           equ	18	;# 
   242     0013                     SSPBUF          equ	19	;# 
   243     0014                     SSPCON          equ	20	;# 
   244     0015                     CCPR1           equ	21	;# 
   245     0015                     CCPR1L          equ	21	;# 
   246     0016                     CCPR1H          equ	22	;# 
   247     0017                     CCP1CON         equ	23	;# 
   248     0018                     RCSTA           equ	24	;# 
   249     0019                     TXREG           equ	25	;# 
   250     001A                     RCREG           equ	26	;# 
   251     001B                     CCPR2           equ	27	;# 
   252     001B                     CCPR2L          equ	27	;# 
   253     001C                     CCPR2H          equ	28	;# 
   254     001D                     CCP2CON         equ	29	;# 
   255     001E                     ADRESH          equ	30	;# 
   256     001F                     ADCON0          equ	31	;# 
   257     0081                     OPTION_REG      equ	129	;# 
   258     0085                     TRISA           equ	133	;# 
   259     0086                     TRISB           equ	134	;# 
   260     0087                     TRISC           equ	135	;# 
   261     008C                     PIE1            equ	140	;# 
   262     008D                     PIE2            equ	141	;# 
   263     008E                     PCON            equ	142	;# 
   264     0091                     SSPCON2         equ	145	;# 
   265     0092                     PR2             equ	146	;# 
   266     0093                     SSPADD          equ	147	;# 
   267     0094                     SSPSTAT         equ	148	;# 
   268     0098                     TXSTA           equ	152	;# 
   269     0099                     SPBRG           equ	153	;# 
   270     009E                     ADRESL          equ	158	;# 
   271     009F                     ADCON1          equ	159	;# 
   272     010C                     EEDATA          equ	268	;# 
   273     010D                     EEADR           equ	269	;# 
   274     010E                     EEDATH          equ	270	;# 
   275     010F                     EEADRH          equ	271	;# 
   276     018C                     EECON1          equ	396	;# 
   277     018D                     EECON2          equ	397	;# 
   278     0000                     INDF            equ	0	;# 
   279     0001                     TMR0            equ	1	;# 
   280     0002                     PCL             equ	2	;# 
   281     0003                     STATUS          equ	3	;# 
   282     0004                     FSR             equ	4	;# 
   283     0005                     PORTA           equ	5	;# 
   284     0006                     PORTB           equ	6	;# 
   285     0007                     PORTC           equ	7	;# 
   286     000A                     PCLATH          equ	10	;# 
   287     000B                     INTCON          equ	11	;# 
   288     000C                     PIR1            equ	12	;# 
   289     000D                     PIR2            equ	13	;# 
   290     000E                     TMR1            equ	14	;# 
   291     000E                     TMR1L           equ	14	;# 
   292     000F                     TMR1H           equ	15	;# 
   293     0010                     T1CON           equ	16	;# 
   294     0011                     TMR2            equ	17	;# 
   295     0012                     T2CON           equ	18	;# 
   296     0013                     SSPBUF          equ	19	;# 
   297     0014                     SSPCON          equ	20	;# 
   298     0015                     CCPR1           equ	21	;# 
   299     0015                     CCPR1L          equ	21	;# 
   300     0016                     CCPR1H          equ	22	;# 
   301     0017                     CCP1CON         equ	23	;# 
   302     0018                     RCSTA           equ	24	;# 
   303     0019                     TXREG           equ	25	;# 
   304     001A                     RCREG           equ	26	;# 
   305     001B                     CCPR2           equ	27	;# 
   306     001B                     CCPR2L          equ	27	;# 
   307     001C                     CCPR2H          equ	28	;# 
   308     001D                     CCP2CON         equ	29	;# 
   309     001E                     ADRESH          equ	30	;# 
   310     001F                     ADCON0          equ	31	;# 
   311     0081                     OPTION_REG      equ	129	;# 
   312     0085                     TRISA           equ	133	;# 
   313     0086                     TRISB           equ	134	;# 
   314     0087                     TRISC           equ	135	;# 
   315     008C                     PIE1            equ	140	;# 
   316     008D                     PIE2            equ	141	;# 
   317     008E                     PCON            equ	142	;# 
   318     0091                     SSPCON2         equ	145	;# 
   319     0092                     PR2             equ	146	;# 
   320     0093                     SSPADD          equ	147	;# 
   321     0094                     SSPSTAT         equ	148	;# 
   322     0098                     TXSTA           equ	152	;# 
   323     0099                     SPBRG           equ	153	;# 
   324     009E                     ADRESL          equ	158	;# 
   325     009F                     ADCON1          equ	159	;# 
   326     010C                     EEDATA          equ	268	;# 
   327     010D                     EEADR           equ	269	;# 
   328     010E                     EEDATH          equ	270	;# 
   329     010F                     EEADRH          equ	271	;# 
   330     018C                     EECON1          equ	396	;# 
   331     018D                     EECON2          equ	397	;# 
   332     0013                     _SSPBUF         set	19
   333     0014                     _SSPCON         set	20
   334     0005                     _PORTA          set	5
   335     0006                     _PORTB          set	6
   336     002D                     _RA5            set	45
   337     0063                     _SSPIF          set	99
   338     0094                     _SSPSTAT        set	148
   339     0085                     _TRISA          set	133
   340     0087                     _TRISC          set	135
   341     0086                     _TRISB          set	134
   342                           
   343                           	psect	cinit
   344     07F3                     start_initialization:	
   345                           ; #config settings
   346                           
   347     07F3                     __initialization:
   348                           
   349                           ; Clear objects allocated to BANK0
   350     07F3  1383               	bcf	3,7	;select IRP bank0
   351     07F4  3020               	movlw	low __pbssBANK0
   352     07F5  0084               	movwf	4
   353     07F6  3060               	movlw	low (__pbssBANK0+64)
   354     07F7  120A  118A  26EB  120A  118A  	fcall	clear_ram0
   355     07FC                     end_of_initialization:	
   356                           ;End of C runtime variable initialization code
   357                           
   358     07FC                     __end_of__initialization:
   359     07FC  0183               	clrf	3
   360     07FD  120A  118A  2F8E   	ljmp	_main	;jump to C main() function
   361                           
   362                           	psect	bssBANK0
   363     0020                     __pbssBANK0:
   364     0020                     _arrayMatrix:
   365     0020                     	ds	64
   366                           
   367                           	psect	clrtext
   368     06EB                     clear_ram0:	
   369                           ;	Called with FSR containing the base address, and
   370                           ;	W with the last address+1
   371                           
   372     06EB  0064               	clrwdt	;clear the watchdog before getting into this loop
   373     06EC                     clrloop0:
   374     06EC  0180               	clrf	0	;clear RAM location pointed to by FSR
   375     06ED  0A84               	incf	4,f	;increment pointer
   376     06EE  0604               	xorwf	4,w	;XOR with final address
   377     06EF  1903               	btfsc	3,2	;have we reached the end yet?
   378     06F0  3400               	retlw	0	;all done for this memory range, return
   379     06F1  0604               	xorwf	4,w	;XOR again to restore value
   380     06F2  2EEC               	goto	clrloop0	;do the next byte
   381                           
   382                           	psect	cstackCOMMON
   383     0071                     __pcstackCOMMON:
   384     0071                     ?_SpiInit:
   385     0071                     ?_MatrixInit:	
   386                           ; 1 bytes @ 0x0
   387                           
   388     0071                     ?_PortBInit:	
   389                           ; 1 bytes @ 0x0
   390                           
   391     0071                     ?_SetObject:	
   392                           ; 1 bytes @ 0x0
   393                           
   394     0071                     ?_SpiClearMatrix:	
   395                           ; 1 bytes @ 0x0
   396                           
   397     0071                     ?_main:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0071                     ?_SpiSendByte:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0071                     SpiSendByte@data:	
   404                           ; 1 bytes @ 0x0
   405                           
   406     0071                     SetObject@_point:	
   407                           ; 1 bytes @ 0x0
   408                           
   409     0071                     ??_SpiInit:	
   410                           ; 2 bytes @ 0x0
   411                           
   412     0071                     ??_PortBInit:	
   413                           ; 1 bytes @ 0x0
   414                           
   415     0071                     ??_SpiSendByte:	
   416                           ; 1 bytes @ 0x0
   417                           
   418                           
   419                           ; 1 bytes @ 0x0
   420     0071                     	ds	1
   421     0072                     ?_SendToSegment:
   422     0072                     SendToSegment@data:	
   423                           ; 1 bytes @ 0x1
   424                           
   425                           
   426                           ; 1 bytes @ 0x1
   427     0072                     	ds	1
   428     0073                     SendToSegment@segment:
   429     0073                     SetObject@ch:	
   430                           ; 1 bytes @ 0x2
   431                           
   432     0073                     ??_SendToSegment:	
   433                           ; 1 bytes @ 0x2
   434                           
   435                           
   436                           ; 1 bytes @ 0x2
   437     0073                     	ds	1
   438     0074                     SpiClearMatrix@i:
   439     0074                     ??_SetObject:	
   440                           ; 1 bytes @ 0x3
   441                           
   442     0074                     ??_SpiClearMatrix:	
   443                           ; 1 bytes @ 0x3
   444                           
   445                           
   446                           ; 1 bytes @ 0x3
   447     0074                     	ds	1
   448     0075                     ??_MatrixInit:
   449                           
   450                           ; 1 bytes @ 0x4
   451     0075                     	ds	4
   452     0079                     ??_main:
   453                           
   454                           ; 1 bytes @ 0x8
   455     0079                     	ds	3
   456                           
   457                           	psect	cstackBANK0
   458     0060                     __pcstackBANK0:
   459     0060                     main@pt:
   460                           
   461                           ; 4 bytes @ 0x0
   462     0060                     	ds	4
   463                           
   464                           	psect	maintext
   465     078E                     __pmaintext:	
   466 ;;
   467 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   468 ;;
   469 ;; *************** function _main *****************
   470 ;; Defined at:
   471 ;;		line 17 in file "main.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  pt              4    0[BANK0 ] struct .
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : B00/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   485 ;;      Params:         0       0       0       0       0
   486 ;;      Locals:         0       4       0       0       0
   487 ;;      Temps:          3       0       0       0       0
   488 ;;      Totals:         3       4       0       0       0
   489 ;;Total ram usage:        7 bytes
   490 ;; Hardware stack levels required when called: 4
   491 ;; This function calls:
   492 ;;		_MatrixInit
   493 ;;		_PortBInit
   494 ;;		_SendToSegment
   495 ;;		_SetObject
   496 ;;		_SpiClearMatrix
   497 ;;		_SpiInit
   498 ;; This function is called by:
   499 ;;		Startup code after reset
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503     078E                     _main:	
   504                           ;psect for function _main
   505                           
   506     078E                     l720:	
   507                           ;incstack = 0
   508                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   509                           
   510                           
   511                           ;main.c: 18:     SpiInit();
   512     078E  120A  118A  270E  120A  118A  	fcall	_SpiInit
   513                           
   514                           ;main.c: 19:     MatrixInit();
   515     0793  120A  118A  275A  120A  118A  	fcall	_MatrixInit
   516     0798                     l722:
   517                           
   518                           ;main.c: 20:     PortBInit();
   519     0798  120A  118A  26E4  120A  118A  	fcall	_PortBInit
   520     079D                     l21:	
   521                           ;main.c: 21:     TCoord pt;;main.c: 23:     while(1){
   522                           
   523                           
   524                           ;main.c: 24:         pt.x = 3;
   525     079D  3003               	movlw	3
   526     079E  1283               	bcf	3,5	;RP0=0, select bank0
   527     079F  1303               	bcf	3,6	;RP1=0, select bank0
   528     07A0  00E0               	movwf	main@pt
   529     07A1  3000               	movlw	0
   530     07A2  00E1               	movwf	main@pt+1
   531                           
   532                           ;main.c: 25:         pt.y = 2;
   533     07A3  3002               	movlw	2
   534     07A4  00E2               	movwf	main@pt+2
   535     07A5  3000               	movlw	0
   536     07A6  00E3               	movwf	main@pt+3
   537     07A7                     l724:
   538                           
   539                           ;main.c: 26:         SetObject(&pt, 0x01);
   540     07A7  3060               	movlw	low main@pt
   541     07A8  00F1               	movwf	SetObject@_point
   542     07A9  3000               	movlw	high main@pt
   543     07AA  00F2               	movwf	SetObject@_point+1
   544     07AB  01F3               	clrf	SetObject@ch
   545     07AC  0AF3               	incf	SetObject@ch,f
   546     07AD  120A  118A  2734  120A  118A  	fcall	_SetObject
   547     07B2                     l726:
   548                           
   549                           ;main.c: 27:         SendToSegment(1, arrayMatrix[0][0]);
   550     07B2  1283               	bcf	3,5	;RP0=0, select bank0
   551     07B3  1303               	bcf	3,6	;RP1=0, select bank0
   552     07B4  0820               	movf	_arrayMatrix,w
   553     07B5  00F2               	movwf	SendToSegment@data
   554     07B6  3001               	movlw	1
   555     07B7  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   556     07BC                     l728:
   557                           
   558                           ;main.c: 28:         SendToSegment(2, arrayMatrix[0][1]);
   559     07BC  1283               	bcf	3,5	;RP0=0, select bank0
   560     07BD  1303               	bcf	3,6	;RP1=0, select bank0
   561     07BE  0821               	movf	_arrayMatrix+1,w
   562     07BF  00F2               	movwf	SendToSegment@data
   563     07C0  3002               	movlw	2
   564     07C1  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   565     07C6                     l730:
   566                           
   567                           ;main.c: 29:         SendToSegment(3, arrayMatrix[0][2]);
   568     07C6  1283               	bcf	3,5	;RP0=0, select bank0
   569     07C7  1303               	bcf	3,6	;RP1=0, select bank0
   570     07C8  0822               	movf	_arrayMatrix+2,w
   571     07C9  00F2               	movwf	SendToSegment@data
   572     07CA  3003               	movlw	3
   573     07CB  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   574     07D0                     l732:
   575                           
   576                           ;main.c: 30:         _delay((unsigned long)((500)*(16000000/4000.0)));
   577     07D0  300B               	movlw	11
   578     07D1  00FB               	movwf	??_main+2
   579     07D2  3026               	movlw	38
   580     07D3  00FA               	movwf	??_main+1
   581     07D4  305D               	movlw	93
   582     07D5  00F9               	movwf	??_main
   583     07D6                     u77:
   584     07D6  0BF9               	decfsz	??_main,f
   585     07D7  2FD6               	goto	u77
   586     07D8  0BFA               	decfsz	??_main+1,f
   587     07D9  2FD6               	goto	u77
   588     07DA  0BFB               	decfsz	??_main+2,f
   589     07DB  2FD6               	goto	u77
   590     07DC  2FDD               	nop2
   591     07DD                     l734:
   592                           
   593                           ;main.c: 31:         SpiClearMatrix();
   594     07DD  120A  118A  26FE  120A  118A  	fcall	_SpiClearMatrix
   595     07E2                     l736:
   596                           
   597                           ;main.c: 32:         _delay((unsigned long)((500)*(16000000/4000.0)));
   598     07E2  300B               	movlw	11
   599     07E3  00FB               	movwf	??_main+2
   600     07E4  3026               	movlw	38
   601     07E5  00FA               	movwf	??_main+1
   602     07E6  305D               	movlw	93
   603     07E7  00F9               	movwf	??_main
   604     07E8                     u87:
   605     07E8  0BF9               	decfsz	??_main,f
   606     07E9  2FE8               	goto	u87
   607     07EA  0BFA               	decfsz	??_main+1,f
   608     07EB  2FE8               	goto	u87
   609     07EC  0BFB               	decfsz	??_main+2,f
   610     07ED  2FE8               	goto	u87
   611     07EE  2FEF               	nop2
   612     07EF  2F9D               	goto	l21
   613     07F0  120A  118A  2800   	ljmp	start
   614     07F3                     __end_of_main:
   615                           
   616                           	psect	text1
   617     070E                     __ptext1:	
   618 ;; *************** function _SpiInit *****************
   619 ;; Defined at:
   620 ;;		line 9 in file "spi.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  1    wreg      void 
   627 ;; Registers used:
   628 ;;		wreg, status,2, status,0
   629 ;; Tracked objects:
   630 ;;		On entry : 0/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         0       0       0       0       0
   635 ;;      Locals:         0       0       0       0       0
   636 ;;      Temps:          0       0       0       0       0
   637 ;;      Totals:         0       0       0       0       0
   638 ;;Total ram usage:        0 bytes
   639 ;; Hardware stack levels used: 1
   640 ;; This function calls:
   641 ;;		Nothing
   642 ;; This function is called by:
   643 ;;		_main
   644 ;; This function uses a non-reentrant model
   645 ;;
   646                           
   647     070E                     _SpiInit:	
   648                           ;psect for function _SpiInit
   649                           
   650     070E                     l694:	
   651                           ;incstack = 0
   652                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   653                           
   654                           
   655                           ;spi.c: 10:     TRISC |= 0x10;
   656     070E  1683               	bsf	3,5	;RP0=1, select bank1
   657     070F  1303               	bcf	3,6	;RP1=0, select bank1
   658     0710  1607               	bsf	7,4	;volatile
   659     0711                     l696:
   660                           
   661                           ;spi.c: 11:     TRISC &= ~0x28;
   662     0711  30D7               	movlw	215
   663     0712  0587               	andwf	7,f	;volatile
   664                           
   665                           ;spi.c: 12:     TRISA &= ~0x20;
   666     0713  30DF               	movlw	223
   667     0714  0585               	andwf	5,f	;volatile
   668                           
   669                           ;spi.c: 13:     PORTA &= ~0x20;
   670     0715  30DF               	movlw	223
   671     0716  1283               	bcf	3,5	;RP0=0, select bank0
   672     0717  1303               	bcf	3,6	;RP1=0, select bank0
   673     0718  0585               	andwf	5,f	;volatile
   674     0719                     l698:
   675                           
   676                           ;spi.c: 14:     SSPCON = 0x30;
   677     0719  3030               	movlw	48
   678     071A  0094               	movwf	20	;volatile
   679     071B                     l700:
   680                           
   681                           ;spi.c: 15:     SSPSTAT = 0x80;
   682     071B  3080               	movlw	128
   683     071C  1683               	bsf	3,5	;RP0=1, select bank1
   684     071D  1303               	bcf	3,6	;RP1=0, select bank1
   685     071E  0094               	movwf	20	;volatile
   686     071F                     l48:
   687     071F  0008               	return
   688     0720                     __end_of_SpiInit:
   689                           
   690                           	psect	text2
   691     0734                     __ptext2:	
   692 ;; *************** function _SetObject *****************
   693 ;; Defined at:
   694 ;;		line 41 in file "matrix.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;  _point          2    0[COMMON] PTR struct .
   697 ;;		 -> main@pt(4), 
   698 ;;  ch              1    2[COMMON] unsigned char 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;		None
   701 ;; Return value:  Size  Location     Type
   702 ;;                  1    wreg      void 
   703 ;; Registers used:
   704 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   710 ;;      Params:         3       0       0       0       0
   711 ;;      Locals:         0       0       0       0       0
   712 ;;      Temps:          5       0       0       0       0
   713 ;;      Totals:         8       0       0       0       0
   714 ;;Total ram usage:        8 bytes
   715 ;; Hardware stack levels used: 1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723     0734                     _SetObject:	
   724                           ;psect for function _SetObject
   725                           
   726     0734                     l718:	
   727                           ;incstack = 0
   728                           ; Regs used in _SetObject: [wreg-fsr0h+status,2+status,0]
   729                           
   730                           
   731                           ;matrix.c: 42:     arrayMatrix[_point->y][_point->x] = ch;
   732     0734  0871               	movf	SetObject@_point,w
   733     0735  3E02               	addlw	2
   734     0736  00F4               	movwf	??_SetObject
   735     0737  0872               	movf	SetObject@_point+1,w
   736     0738  1803               	skipnc
   737     0739  3E01               	addlw	1
   738     073A  3E00               	addlw	0
   739     073B  00F5               	movwf	??_SetObject+1
   740     073C  0874               	movf	??_SetObject,w
   741     073D  0084               	movwf	4
   742     073E  1783               	bsf	3,7
   743     073F  1C75               	btfss	??_SetObject+1,0
   744     0740  1383               	bcf	3,7
   745     0741  0800               	movf	0,w
   746     0742  00F6               	movwf	??_SetObject+2
   747     0743  3003               	movlw	3
   748     0744                     u65:
   749     0744  1003               	clrc
   750     0745  0DF6               	rlf	??_SetObject+2,f
   751     0746  3EFF               	addlw	-1
   752     0747  1D03               	skipz
   753     0748  2F44               	goto	u65
   754     0749  3020               	movlw	(low (_arrayMatrix| 0))& (0+255)
   755     074A  0776               	addwf	??_SetObject+2,w
   756     074B  00F7               	movwf	??_SetObject+3
   757     074C  0871               	movf	SetObject@_point,w
   758     074D  0084               	movwf	4
   759     074E  1783               	bsf	3,7
   760     074F  1C72               	btfss	SetObject@_point+1,0
   761     0750  1383               	bcf	3,7
   762     0751  0800               	movf	0,w
   763     0752  0777               	addwf	??_SetObject+3,w
   764     0753  00F8               	movwf	??_SetObject+4
   765     0754  0878               	movf	??_SetObject+4,w
   766     0755  0084               	movwf	4
   767     0756  0873               	movf	SetObject@ch,w
   768     0757  1383               	bcf	3,7	;select IRP bank0
   769     0758  0080               	movwf	0
   770     0759                     l78:
   771     0759  0008               	return
   772     075A                     __end_of_SetObject:
   773                           
   774                           	psect	text3
   775     06E4                     __ptext3:	
   776 ;; *************** function _PortBInit *****************
   777 ;; Defined at:
   778 ;;		line 13 in file "portsinit.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;		None
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		status,2
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   792 ;;      Params:         0       0       0       0       0
   793 ;;      Locals:         0       0       0       0       0
   794 ;;      Temps:          0       0       0       0       0
   795 ;;      Totals:         0       0       0       0       0
   796 ;;Total ram usage:        0 bytes
   797 ;; Hardware stack levels used: 1
   798 ;; This function calls:
   799 ;;		Nothing
   800 ;; This function is called by:
   801 ;;		_main
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805     06E4                     _PortBInit:	
   806                           ;psect for function _PortBInit
   807                           
   808     06E4                     l716:	
   809                           ;incstack = 0
   810                           ; Regs used in _PortBInit: [status,2]
   811                           
   812                           
   813                           ;portsinit.c: 14:     TRISB = 0x00;
   814     06E4  1683               	bsf	3,5	;RP0=1, select bank1
   815     06E5  1303               	bcf	3,6	;RP1=0, select bank1
   816     06E6  0186               	clrf	6	;volatile
   817                           
   818                           ;portsinit.c: 15:     PORTB = 0x00;
   819     06E7  1283               	bcf	3,5	;RP0=0, select bank0
   820     06E8  1303               	bcf	3,6	;RP1=0, select bank0
   821     06E9  0186               	clrf	6	;volatile
   822     06EA                     l31:
   823     06EA  0008               	return
   824     06EB                     __end_of_PortBInit:
   825                           
   826                           	psect	text4
   827     075A                     __ptext4:	
   828 ;; *************** function _MatrixInit *****************
   829 ;; Defined at:
   830 ;;		line 20 in file "matrix.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, status,2, status,0, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   844 ;;      Params:         0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0
   846 ;;      Temps:          3       0       0       0       0
   847 ;;      Totals:         3       0       0       0       0
   848 ;;Total ram usage:        3 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 3
   851 ;; This function calls:
   852 ;;		_SendToSegment
   853 ;;		_SpiClearMatrix
   854 ;; This function is called by:
   855 ;;		_main
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859     075A                     _MatrixInit:	
   860                           ;psect for function _MatrixInit
   861                           
   862     075A                     l702:	
   863                           ;incstack = 0
   864                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
   865                           
   866                           
   867                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
   868     075A  3003               	movlw	3
   869     075B  00F7               	movwf	??_MatrixInit+2
   870     075C  3008               	movlw	8
   871     075D  00F6               	movwf	??_MatrixInit+1
   872     075E  3077               	movlw	119
   873     075F  00F5               	movwf	??_MatrixInit
   874     0760                     u97:
   875     0760  0BF5               	decfsz	??_MatrixInit,f
   876     0761  2F60               	goto	u97
   877     0762  0BF6               	decfsz	??_MatrixInit+1,f
   878     0763  2F60               	goto	u97
   879     0764  0BF7               	decfsz	??_MatrixInit+2,f
   880     0765  2F60               	goto	u97
   881     0766                     l704:
   882                           
   883                           ;matrix.c: 22:     RA5=1;
   884     0766  1283               	bcf	3,5	;RP0=0, select bank0
   885     0767  1303               	bcf	3,6	;RP1=0, select bank0
   886     0768  1685               	bsf	5,5	;volatile
   887     0769                     l706:
   888                           
   889                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
   890     0769  01F2               	clrf	SendToSegment@data
   891     076A  3009               	movlw	9
   892     076B  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   893     0770                     l708:
   894                           
   895                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
   896     0770  3007               	movlw	7
   897     0771  00F2               	movwf	SendToSegment@data
   898     0772  300B               	movlw	11
   899     0773  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   900     0778                     l710:
   901                           
   902                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
   903     0778  3002               	movlw	2
   904     0779  00F2               	movwf	SendToSegment@data
   905     077A  300A               	movlw	10
   906     077B  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   907     0780                     l712:
   908                           
   909                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
   910     0780  01F2               	clrf	SendToSegment@data
   911     0781  0AF2               	incf	SendToSegment@data,f
   912     0782  300C               	movlw	12
   913     0783  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   914     0788                     l714:
   915                           
   916                           ;matrix.c: 27:     SpiClearMatrix();
   917     0788  120A  118A  26FE  120A  118A  	fcall	_SpiClearMatrix
   918     078D                     l72:
   919     078D  0008               	return
   920     078E                     __end_of_MatrixInit:
   921                           
   922                           	psect	text5
   923     06FE                     __ptext5:	
   924 ;; *************** function _SpiClearMatrix *****************
   925 ;; Defined at:
   926 ;;		line 10 in file "matrix.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;		None
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  i               1    3[COMMON] unsigned char 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  1    wreg      void 
   933 ;; Registers used:
   934 ;;		wreg, status,2, status,0, pclath, cstack
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   940 ;;      Params:         0       0       0       0       0
   941 ;;      Locals:         1       0       0       0       0
   942 ;;      Temps:          0       0       0       0       0
   943 ;;      Totals:         1       0       0       0       0
   944 ;;Total ram usage:        1 bytes
   945 ;; Hardware stack levels used: 1
   946 ;; Hardware stack levels required when called: 2
   947 ;; This function calls:
   948 ;;		_SendToSegment
   949 ;; This function is called by:
   950 ;;		_main
   951 ;;		_MatrixInit
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955     06FE                     _SpiClearMatrix:	
   956                           ;psect for function _SpiClearMatrix
   957                           
   958     06FE                     l688:	
   959                           ;incstack = 0
   960                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
   961                           
   962                           
   963                           ;matrix.c: 12:   char i = 8;
   964     06FE  3008               	movlw	8
   965     06FF  00F4               	movwf	SpiClearMatrix@i
   966     0700                     l690:
   967                           
   968                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
   969     0700  01F2               	clrf	SendToSegment@data
   970     0701  0874               	movf	SpiClearMatrix@i,w
   971     0702  120A  118A  2720  120A  118A  	fcall	_SendToSegment
   972     0707                     l692:
   973                           
   974                           ;matrix.c: 16:   } while (--i);
   975     0707  3001               	movlw	1
   976     0708  02F4               	subwf	SpiClearMatrix@i,f
   977     0709  1D03               	btfss	3,2
   978     070A  2F0C               	goto	u51
   979     070B  2F0D               	goto	u50
   980     070C                     u51:
   981     070C  2F00               	goto	l690
   982     070D                     u50:
   983     070D                     l69:
   984     070D  0008               	return
   985     070E                     __end_of_SpiClearMatrix:
   986                           
   987                           	psect	text6
   988     0720                     __ptext6:	
   989 ;; *************** function _SendToSegment *****************
   990 ;; Defined at:
   991 ;;		line 34 in file "matrix.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  segment         1    wreg     unsigned char 
   994 ;;  data            1    1[COMMON] unsigned char 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  segment         1    2[COMMON] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, pclath, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1006 ;;      Params:         1       0       0       0       0
  1007 ;;      Locals:         1       0       0       0       0
  1008 ;;      Temps:          0       0       0       0       0
  1009 ;;      Totals:         2       0       0       0       0
  1010 ;;Total ram usage:        2 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 1
  1013 ;; This function calls:
  1014 ;;		_SpiSendByte
  1015 ;; This function is called by:
  1016 ;;		_main
  1017 ;;		_SpiClearMatrix
  1018 ;;		_MatrixInit
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022     0720                     _SendToSegment:	
  1023                           ;psect for function _SendToSegment
  1024                           
  1025                           
  1026                           ;incstack = 0
  1027                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1028                           ;SendToSegment@segment stored from wreg
  1029     0720  00F3               	movwf	SendToSegment@segment
  1030     0721                     l682:
  1031                           
  1032                           ;matrix.c: 35:     RA5 = 0;
  1033     0721  1283               	bcf	3,5	;RP0=0, select bank0
  1034     0722  1303               	bcf	3,6	;RP1=0, select bank0
  1035     0723  1285               	bcf	5,5	;volatile
  1036     0724                     l684:
  1037                           
  1038                           ;matrix.c: 36:     SpiSendByte(segment);
  1039     0724  0873               	movf	SendToSegment@segment,w
  1040     0725  120A  118A  26F3  120A  118A  	fcall	_SpiSendByte
  1041                           
  1042                           ;matrix.c: 37:     SpiSendByte(data);
  1043     072A  0872               	movf	SendToSegment@data,w
  1044     072B  120A  118A  26F3  120A  118A  	fcall	_SpiSendByte
  1045     0730                     l686:
  1046                           
  1047                           ;matrix.c: 38:     RA5 = 1;
  1048     0730  1283               	bcf	3,5	;RP0=0, select bank0
  1049     0731  1303               	bcf	3,6	;RP1=0, select bank0
  1050     0732  1685               	bsf	5,5	;volatile
  1051     0733                     l75:
  1052     0733  0008               	return
  1053     0734                     __end_of_SendToSegment:
  1054                           
  1055                           	psect	text7
  1056     06F3                     __ptext7:	
  1057 ;; *************** function _SpiSendByte *****************
  1058 ;; Defined at:
  1059 ;;		line 18 in file "spi.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  data            1    wreg     unsigned char 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  data            1    0[COMMON] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         0       0       0       0       0
  1074 ;;      Locals:         1       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0
  1076 ;;      Totals:         1       0       0       0       0
  1077 ;;Total ram usage:        1 bytes
  1078 ;; Hardware stack levels used: 1
  1079 ;; This function calls:
  1080 ;;		Nothing
  1081 ;; This function is called by:
  1082 ;;		_SendToSegment
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086     06F3                     _SpiSendByte:	
  1087                           ;psect for function _SpiSendByte
  1088                           
  1089                           
  1090                           ;incstack = 0
  1091                           ; Regs used in _SpiSendByte: [wreg]
  1092                           ;SpiSendByte@data stored from wreg
  1093     06F3  00F1               	movwf	SpiSendByte@data
  1094     06F4                     l680:
  1095                           
  1096                           ;spi.c: 19:     SSPBUF = data;
  1097     06F4  0871               	movf	SpiSendByte@data,w
  1098     06F5  1283               	bcf	3,5	;RP0=0, select bank0
  1099     06F6  1303               	bcf	3,6	;RP1=0, select bank0
  1100     06F7  0093               	movwf	19	;volatile
  1101     06F8                     l51:	
  1102                           ;spi.c: 20:     while (!SSPIF);
  1103                           
  1104     06F8  1D8C               	btfss	12,3	;volatile
  1105     06F9  2EFB               	goto	u41
  1106     06FA  2EFC               	goto	u40
  1107     06FB                     u41:
  1108     06FB  2EF8               	goto	l51
  1109     06FC                     u40:
  1110     06FC                     l53:
  1111                           
  1112                           ;spi.c: 21:     SSPIF = 0;
  1113     06FC  118C               	bcf	12,3	;volatile
  1114     06FD                     l54:
  1115     06FD  0008               	return
  1116     06FE                     __end_of_SpiSendByte:
  1117     0002                     ___latbits      equ	2
  1118     007E                     btemp           set	126	;btemp
  1119     007E                     wtemp0          set	126
  1120                           
  1121                           	psect	config
  1122                           
  1123                           ;Config register CONFIG @ 0x2007
  1124                           ;	Oscillator Selection bits
  1125                           ;	FOSC = HS, HS oscillator
  1126                           ;	Watchdog Timer Enable bit
  1127                           ;	WDTE = OFF, WDT disabled
  1128                           ;	Power-up Timer Enable bit
  1129                           ;	PWRTE = OFF, PWRT disabled
  1130                           ;	FLASH Program Memory Code Protection bits
  1131                           ;	CP = OFF, Code protection off
  1132                           ;	Brown-out Reset Enable bit
  1133                           ;	BOREN = OFF, BOR disabled
  1134                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1135                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1136                           ;	Data EE Memory Code Protection
  1137                           ;	CPD = OFF, Code Protection off
  1138                           ;	FLASH Program Memory Write Enable
  1139                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1140                           ;	In-Circuit Debugger Mode bit
  1141                           ;	DEBUG = 0x1, unprogrammed default
  1142     2007                     	org	8199
  1143     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     11      11
    BANK0            80      4      68
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    SetObject@_point	PTR struct . size(2) Largest target is 4
		 -> main@pt(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_SetObject
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0     559
                                              8 COMMON     3     3      0
                                              0 BANK0      4     4      0
                         _MatrixInit
                          _PortBInit
                      _SendToSegment
                          _SetObject
                     _SpiClearMatrix
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetObject                                            8     5      3      68
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     221
                                              4 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _SpiClearMatrix                                       1     1      0     133
                                              3 COMMON     1     1      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _SendToSegment                                        2     1      1      88
                                              1 COMMON     2     1      1
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _PortBInit
   _SendToSegment
   _SetObject
   _SpiClearMatrix
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           13      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            85      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              13     11      11     84.6%
BANK0               80      4      68     85.0%
BANK1               80      0       0      0.0%
BANK3               85      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      78      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec  5 14:50:02 2024

         _SpiClearMatrix 06FE                       l21 079D                       l31 06EA  
                     l51 06F8                       l53 06FC                       l54 06FD  
                     l72 078D                       l48 071F                       l75 0733  
                     l69 070D                       l78 0759                       u40 06FC  
                     u41 06FB                       u50 070D                       u51 070C  
                     u65 0744                       u77 07D6                       u87 07E8  
                     u97 0760                       fsr 0004          SpiSendByte@data 0071  
                    l700 071B                      l710 0778                      l702 075A  
                    l712 0780                      l704 0766                      l720 078E  
                    l714 0788                      l706 0769                      l730 07C6  
                    l722 0798                      l708 0770                      l716 06E4  
                    l732 07D0                      l724 07A7                      l718 0734  
                    l734 07DD                      l726 07B2                      l680 06F4  
                    l736 07E2                      l728 07BC                      l682 0721  
                    l690 0700                      l684 0724                      l692 0707  
                    l686 0730                      l694 070E                      l688 06FE  
                    l696 0711                      l698 0719                      _RA5 002D  
                    fsr0 0004                      indf 0000                     _main 078E  
                   btemp 007E                     start 0000   __end_of_SpiClearMatrix 070E  
        __end_of_SpiInit 0720                    ?_main 0071                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _SSPIF 0063          SpiClearMatrix@i 0074  
      SendToSegment@data 0072                    status 0003                    wtemp0 007E  
        ?_SpiClearMatrix 0071          __initialization 07F3             __end_of_main 07F3  
             _MatrixInit 075A                   ??_main 0079          SetObject@_point 0071  
                 _SSPCON 0014                   _SSPBUF 0013                ??_SpiInit 0071  
          ??_SpiSendByte 0071                   main@pt 0060  __end_of__initialization 07FC  
            SetObject@ch 0073           __pcstackCOMMON 0071              ?_MatrixInit 0071  
    __end_of_SpiSendByte 06FE        __end_of_SetObject 075A               __pbssBANK0 0020  
      __end_of_PortBInit 06EB               __pmaintext 078E                  _SSPSTAT 0094  
       ??_SpiClearMatrix 0074                  _SpiInit 070E            _SendToSegment 0720  
            _SpiSendByte 06F3                  __ptext1 070E                  __ptext2 0734  
                __ptext3 06E4                  __ptext4 075A                  __ptext5 06FE  
                __ptext6 0720                  __ptext7 06F3                  clrloop0 06EC  
   end_of_initialization 07FC           ?_SendToSegment 0072             ??_MatrixInit 0075  
    start_initialization 07F3                _SetObject 0734       __end_of_MatrixInit 078E  
        ??_SendToSegment 0073                _PortBInit 06E4                ___latbits 0002  
          __pcstackBANK0 0060               ?_SetObject 0071                 ?_SpiInit 0071  
             ?_PortBInit 0071             ?_SpiSendByte 0071                clear_ram0 06EB  
            _arrayMatrix 0020              ??_SetObject 0074              ??_PortBInit 0071  
   SendToSegment@segment 0073    __end_of_SendToSegment 0734  

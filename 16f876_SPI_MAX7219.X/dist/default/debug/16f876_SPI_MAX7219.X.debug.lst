

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Dec  6 16:10:47 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24     0000                     
    25                           ; Generated 12/10/2023 GMT
    26                           ; 
    27                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F876 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59     0004                     fsr             equ	4
    60     0004                     fsr0            equ	4
    61     0000                     indf            equ	0
    62     0000                     indf0           equ	0
    63     0002                     pc              equ	2
    64     0002                     pcl             equ	2
    65     000A                     pclath          equ	10
    66     0003                     status          equ	3
    67     0000                     INDF            equ	0	;# 
    68     0001                     TMR0            equ	1	;# 
    69     0002                     PCL             equ	2	;# 
    70     0003                     STATUS          equ	3	;# 
    71     0004                     FSR             equ	4	;# 
    72     0005                     PORTA           equ	5	;# 
    73     0006                     PORTB           equ	6	;# 
    74     0007                     PORTC           equ	7	;# 
    75     000A                     PCLATH          equ	10	;# 
    76     000B                     INTCON          equ	11	;# 
    77     000C                     PIR1            equ	12	;# 
    78     000D                     PIR2            equ	13	;# 
    79     000E                     TMR1            equ	14	;# 
    80     000E                     TMR1L           equ	14	;# 
    81     000F                     TMR1H           equ	15	;# 
    82     0010                     T1CON           equ	16	;# 
    83     0011                     TMR2            equ	17	;# 
    84     0012                     T2CON           equ	18	;# 
    85     0013                     SSPBUF          equ	19	;# 
    86     0014                     SSPCON          equ	20	;# 
    87     0015                     CCPR1           equ	21	;# 
    88     0015                     CCPR1L          equ	21	;# 
    89     0016                     CCPR1H          equ	22	;# 
    90     0017                     CCP1CON         equ	23	;# 
    91     0018                     RCSTA           equ	24	;# 
    92     0019                     TXREG           equ	25	;# 
    93     001A                     RCREG           equ	26	;# 
    94     001B                     CCPR2           equ	27	;# 
    95     001B                     CCPR2L          equ	27	;# 
    96     001C                     CCPR2H          equ	28	;# 
    97     001D                     CCP2CON         equ	29	;# 
    98     001E                     ADRESH          equ	30	;# 
    99     001F                     ADCON0          equ	31	;# 
   100     0081                     OPTION_REG      equ	129	;# 
   101     0085                     TRISA           equ	133	;# 
   102     0086                     TRISB           equ	134	;# 
   103     0087                     TRISC           equ	135	;# 
   104     008C                     PIE1            equ	140	;# 
   105     008D                     PIE2            equ	141	;# 
   106     008E                     PCON            equ	142	;# 
   107     0091                     SSPCON2         equ	145	;# 
   108     0092                     PR2             equ	146	;# 
   109     0093                     SSPADD          equ	147	;# 
   110     0094                     SSPSTAT         equ	148	;# 
   111     0098                     TXSTA           equ	152	;# 
   112     0099                     SPBRG           equ	153	;# 
   113     009E                     ADRESL          equ	158	;# 
   114     009F                     ADCON1          equ	159	;# 
   115     010C                     EEDATA          equ	268	;# 
   116     010D                     EEADR           equ	269	;# 
   117     010E                     EEDATH          equ	270	;# 
   118     010F                     EEADRH          equ	271	;# 
   119     018C                     EECON1          equ	396	;# 
   120     018D                     EECON2          equ	397	;# 
   121     0000                     INDF            equ	0	;# 
   122     0001                     TMR0            equ	1	;# 
   123     0002                     PCL             equ	2	;# 
   124     0003                     STATUS          equ	3	;# 
   125     0004                     FSR             equ	4	;# 
   126     0005                     PORTA           equ	5	;# 
   127     0006                     PORTB           equ	6	;# 
   128     0007                     PORTC           equ	7	;# 
   129     000A                     PCLATH          equ	10	;# 
   130     000B                     INTCON          equ	11	;# 
   131     000C                     PIR1            equ	12	;# 
   132     000D                     PIR2            equ	13	;# 
   133     000E                     TMR1            equ	14	;# 
   134     000E                     TMR1L           equ	14	;# 
   135     000F                     TMR1H           equ	15	;# 
   136     0010                     T1CON           equ	16	;# 
   137     0011                     TMR2            equ	17	;# 
   138     0012                     T2CON           equ	18	;# 
   139     0013                     SSPBUF          equ	19	;# 
   140     0014                     SSPCON          equ	20	;# 
   141     0015                     CCPR1           equ	21	;# 
   142     0015                     CCPR1L          equ	21	;# 
   143     0016                     CCPR1H          equ	22	;# 
   144     0017                     CCP1CON         equ	23	;# 
   145     0018                     RCSTA           equ	24	;# 
   146     0019                     TXREG           equ	25	;# 
   147     001A                     RCREG           equ	26	;# 
   148     001B                     CCPR2           equ	27	;# 
   149     001B                     CCPR2L          equ	27	;# 
   150     001C                     CCPR2H          equ	28	;# 
   151     001D                     CCP2CON         equ	29	;# 
   152     001E                     ADRESH          equ	30	;# 
   153     001F                     ADCON0          equ	31	;# 
   154     0081                     OPTION_REG      equ	129	;# 
   155     0085                     TRISA           equ	133	;# 
   156     0086                     TRISB           equ	134	;# 
   157     0087                     TRISC           equ	135	;# 
   158     008C                     PIE1            equ	140	;# 
   159     008D                     PIE2            equ	141	;# 
   160     008E                     PCON            equ	142	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0094                     SSPSTAT         equ	148	;# 
   165     0098                     TXSTA           equ	152	;# 
   166     0099                     SPBRG           equ	153	;# 
   167     009E                     ADRESL          equ	158	;# 
   168     009F                     ADCON1          equ	159	;# 
   169     010C                     EEDATA          equ	268	;# 
   170     010D                     EEADR           equ	269	;# 
   171     010E                     EEDATH          equ	270	;# 
   172     010F                     EEADRH          equ	271	;# 
   173     018C                     EECON1          equ	396	;# 
   174     018D                     EECON2          equ	397	;# 
   175     0000                     INDF            equ	0	;# 
   176     0001                     TMR0            equ	1	;# 
   177     0002                     PCL             equ	2	;# 
   178     0003                     STATUS          equ	3	;# 
   179     0004                     FSR             equ	4	;# 
   180     0005                     PORTA           equ	5	;# 
   181     0006                     PORTB           equ	6	;# 
   182     0007                     PORTC           equ	7	;# 
   183     000A                     PCLATH          equ	10	;# 
   184     000B                     INTCON          equ	11	;# 
   185     000C                     PIR1            equ	12	;# 
   186     000D                     PIR2            equ	13	;# 
   187     000E                     TMR1            equ	14	;# 
   188     000E                     TMR1L           equ	14	;# 
   189     000F                     TMR1H           equ	15	;# 
   190     0010                     T1CON           equ	16	;# 
   191     0011                     TMR2            equ	17	;# 
   192     0012                     T2CON           equ	18	;# 
   193     0013                     SSPBUF          equ	19	;# 
   194     0014                     SSPCON          equ	20	;# 
   195     0015                     CCPR1           equ	21	;# 
   196     0015                     CCPR1L          equ	21	;# 
   197     0016                     CCPR1H          equ	22	;# 
   198     0017                     CCP1CON         equ	23	;# 
   199     0018                     RCSTA           equ	24	;# 
   200     0019                     TXREG           equ	25	;# 
   201     001A                     RCREG           equ	26	;# 
   202     001B                     CCPR2           equ	27	;# 
   203     001B                     CCPR2L          equ	27	;# 
   204     001C                     CCPR2H          equ	28	;# 
   205     001D                     CCP2CON         equ	29	;# 
   206     001E                     ADRESH          equ	30	;# 
   207     001F                     ADCON0          equ	31	;# 
   208     0081                     OPTION_REG      equ	129	;# 
   209     0085                     TRISA           equ	133	;# 
   210     0086                     TRISB           equ	134	;# 
   211     0087                     TRISC           equ	135	;# 
   212     008C                     PIE1            equ	140	;# 
   213     008D                     PIE2            equ	141	;# 
   214     008E                     PCON            equ	142	;# 
   215     0091                     SSPCON2         equ	145	;# 
   216     0092                     PR2             equ	146	;# 
   217     0093                     SSPADD          equ	147	;# 
   218     0094                     SSPSTAT         equ	148	;# 
   219     0098                     TXSTA           equ	152	;# 
   220     0099                     SPBRG           equ	153	;# 
   221     009E                     ADRESL          equ	158	;# 
   222     009F                     ADCON1          equ	159	;# 
   223     010C                     EEDATA          equ	268	;# 
   224     010D                     EEADR           equ	269	;# 
   225     010E                     EEDATH          equ	270	;# 
   226     010F                     EEADRH          equ	271	;# 
   227     018C                     EECON1          equ	396	;# 
   228     018D                     EECON2          equ	397	;# 
   229     0000                     INDF            equ	0	;# 
   230     0001                     TMR0            equ	1	;# 
   231     0002                     PCL             equ	2	;# 
   232     0003                     STATUS          equ	3	;# 
   233     0004                     FSR             equ	4	;# 
   234     0005                     PORTA           equ	5	;# 
   235     0006                     PORTB           equ	6	;# 
   236     0007                     PORTC           equ	7	;# 
   237     000A                     PCLATH          equ	10	;# 
   238     000B                     INTCON          equ	11	;# 
   239     000C                     PIR1            equ	12	;# 
   240     000D                     PIR2            equ	13	;# 
   241     000E                     TMR1            equ	14	;# 
   242     000E                     TMR1L           equ	14	;# 
   243     000F                     TMR1H           equ	15	;# 
   244     0010                     T1CON           equ	16	;# 
   245     0011                     TMR2            equ	17	;# 
   246     0012                     T2CON           equ	18	;# 
   247     0013                     SSPBUF          equ	19	;# 
   248     0014                     SSPCON          equ	20	;# 
   249     0015                     CCPR1           equ	21	;# 
   250     0015                     CCPR1L          equ	21	;# 
   251     0016                     CCPR1H          equ	22	;# 
   252     0017                     CCP1CON         equ	23	;# 
   253     0018                     RCSTA           equ	24	;# 
   254     0019                     TXREG           equ	25	;# 
   255     001A                     RCREG           equ	26	;# 
   256     001B                     CCPR2           equ	27	;# 
   257     001B                     CCPR2L          equ	27	;# 
   258     001C                     CCPR2H          equ	28	;# 
   259     001D                     CCP2CON         equ	29	;# 
   260     001E                     ADRESH          equ	30	;# 
   261     001F                     ADCON0          equ	31	;# 
   262     0081                     OPTION_REG      equ	129	;# 
   263     0085                     TRISA           equ	133	;# 
   264     0086                     TRISB           equ	134	;# 
   265     0087                     TRISC           equ	135	;# 
   266     008C                     PIE1            equ	140	;# 
   267     008D                     PIE2            equ	141	;# 
   268     008E                     PCON            equ	142	;# 
   269     0091                     SSPCON2         equ	145	;# 
   270     0092                     PR2             equ	146	;# 
   271     0093                     SSPADD          equ	147	;# 
   272     0094                     SSPSTAT         equ	148	;# 
   273     0098                     TXSTA           equ	152	;# 
   274     0099                     SPBRG           equ	153	;# 
   275     009E                     ADRESL          equ	158	;# 
   276     009F                     ADCON1          equ	159	;# 
   277     010C                     EEDATA          equ	268	;# 
   278     010D                     EEADR           equ	269	;# 
   279     010E                     EEDATH          equ	270	;# 
   280     010F                     EEADRH          equ	271	;# 
   281     018C                     EECON1          equ	396	;# 
   282     018D                     EECON2          equ	397	;# 
   283     0000                     INDF            equ	0	;# 
   284     0001                     TMR0            equ	1	;# 
   285     0002                     PCL             equ	2	;# 
   286     0003                     STATUS          equ	3	;# 
   287     0004                     FSR             equ	4	;# 
   288     0005                     PORTA           equ	5	;# 
   289     0006                     PORTB           equ	6	;# 
   290     0007                     PORTC           equ	7	;# 
   291     000A                     PCLATH          equ	10	;# 
   292     000B                     INTCON          equ	11	;# 
   293     000C                     PIR1            equ	12	;# 
   294     000D                     PIR2            equ	13	;# 
   295     000E                     TMR1            equ	14	;# 
   296     000E                     TMR1L           equ	14	;# 
   297     000F                     TMR1H           equ	15	;# 
   298     0010                     T1CON           equ	16	;# 
   299     0011                     TMR2            equ	17	;# 
   300     0012                     T2CON           equ	18	;# 
   301     0013                     SSPBUF          equ	19	;# 
   302     0014                     SSPCON          equ	20	;# 
   303     0015                     CCPR1           equ	21	;# 
   304     0015                     CCPR1L          equ	21	;# 
   305     0016                     CCPR1H          equ	22	;# 
   306     0017                     CCP1CON         equ	23	;# 
   307     0018                     RCSTA           equ	24	;# 
   308     0019                     TXREG           equ	25	;# 
   309     001A                     RCREG           equ	26	;# 
   310     001B                     CCPR2           equ	27	;# 
   311     001B                     CCPR2L          equ	27	;# 
   312     001C                     CCPR2H          equ	28	;# 
   313     001D                     CCP2CON         equ	29	;# 
   314     001E                     ADRESH          equ	30	;# 
   315     001F                     ADCON0          equ	31	;# 
   316     0081                     OPTION_REG      equ	129	;# 
   317     0085                     TRISA           equ	133	;# 
   318     0086                     TRISB           equ	134	;# 
   319     0087                     TRISC           equ	135	;# 
   320     008C                     PIE1            equ	140	;# 
   321     008D                     PIE2            equ	141	;# 
   322     008E                     PCON            equ	142	;# 
   323     0091                     SSPCON2         equ	145	;# 
   324     0092                     PR2             equ	146	;# 
   325     0093                     SSPADD          equ	147	;# 
   326     0094                     SSPSTAT         equ	148	;# 
   327     0098                     TXSTA           equ	152	;# 
   328     0099                     SPBRG           equ	153	;# 
   329     009E                     ADRESL          equ	158	;# 
   330     009F                     ADCON1          equ	159	;# 
   331     010C                     EEDATA          equ	268	;# 
   332     010D                     EEADR           equ	269	;# 
   333     010E                     EEDATH          equ	270	;# 
   334     010F                     EEADRH          equ	271	;# 
   335     018C                     EECON1          equ	396	;# 
   336     018D                     EECON2          equ	397	;# 
   337     0000                     INDF            equ	0	;# 
   338     0001                     TMR0            equ	1	;# 
   339     0002                     PCL             equ	2	;# 
   340     0003                     STATUS          equ	3	;# 
   341     0004                     FSR             equ	4	;# 
   342     0005                     PORTA           equ	5	;# 
   343     0006                     PORTB           equ	6	;# 
   344     0007                     PORTC           equ	7	;# 
   345     000A                     PCLATH          equ	10	;# 
   346     000B                     INTCON          equ	11	;# 
   347     000C                     PIR1            equ	12	;# 
   348     000D                     PIR2            equ	13	;# 
   349     000E                     TMR1            equ	14	;# 
   350     000E                     TMR1L           equ	14	;# 
   351     000F                     TMR1H           equ	15	;# 
   352     0010                     T1CON           equ	16	;# 
   353     0011                     TMR2            equ	17	;# 
   354     0012                     T2CON           equ	18	;# 
   355     0013                     SSPBUF          equ	19	;# 
   356     0014                     SSPCON          equ	20	;# 
   357     0015                     CCPR1           equ	21	;# 
   358     0015                     CCPR1L          equ	21	;# 
   359     0016                     CCPR1H          equ	22	;# 
   360     0017                     CCP1CON         equ	23	;# 
   361     0018                     RCSTA           equ	24	;# 
   362     0019                     TXREG           equ	25	;# 
   363     001A                     RCREG           equ	26	;# 
   364     001B                     CCPR2           equ	27	;# 
   365     001B                     CCPR2L          equ	27	;# 
   366     001C                     CCPR2H          equ	28	;# 
   367     001D                     CCP2CON         equ	29	;# 
   368     001E                     ADRESH          equ	30	;# 
   369     001F                     ADCON0          equ	31	;# 
   370     0081                     OPTION_REG      equ	129	;# 
   371     0085                     TRISA           equ	133	;# 
   372     0086                     TRISB           equ	134	;# 
   373     0087                     TRISC           equ	135	;# 
   374     008C                     PIE1            equ	140	;# 
   375     008D                     PIE2            equ	141	;# 
   376     008E                     PCON            equ	142	;# 
   377     0091                     SSPCON2         equ	145	;# 
   378     0092                     PR2             equ	146	;# 
   379     0093                     SSPADD          equ	147	;# 
   380     0094                     SSPSTAT         equ	148	;# 
   381     0098                     TXSTA           equ	152	;# 
   382     0099                     SPBRG           equ	153	;# 
   383     009E                     ADRESL          equ	158	;# 
   384     009F                     ADCON1          equ	159	;# 
   385     010C                     EEDATA          equ	268	;# 
   386     010D                     EEADR           equ	269	;# 
   387     010E                     EEDATH          equ	270	;# 
   388     010F                     EEADRH          equ	271	;# 
   389     018C                     EECON1          equ	396	;# 
   390     018D                     EECON2          equ	397	;# 
   391                           
   392                           	psect	idataBANK0
   393     059C                     __pidataBANK0:
   394                           
   395                           ;initializer for main@F903
   396     059C  3407               	retlw	7
   397     059D  3405               	retlw	5
   398     059E  3407               	retlw	7
   399     0013                     _SSPBUF         set	19
   400     0014                     _SSPCON         set	20
   401     0005                     _PORTA          set	5
   402     0006                     _PORTB          set	6
   403     002D                     _RA5            set	45
   404     0063                     _SSPIF          set	99
   405     0094                     _SSPSTAT        set	148
   406     0085                     _TRISA          set	133
   407     0087                     _TRISC          set	135
   408     0086                     _TRISB          set	134
   409                           
   410                           	psect	cinit
   411     07EA                     start_initialization:	
   412                           ; #config settings
   413                           
   414     07EA                     __initialization:
   415                           
   416                           ; Initialize objects allocated to BANK0
   417     07EA  120A  118A  259C  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   418     07EF  00AF               	movwf	__pdataBANK0& (0+127)
   419     07F0  120A  118A  259D  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   420     07F5  00B0               	movwf	(__pdataBANK0+1)& (0+127)
   421     07F6  120A  118A  259E  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   422     07FB  00B1               	movwf	(__pdataBANK0+2)& (0+127)
   423     07FC                     end_of_initialization:	
   424                           ;End of C runtime variable initialization code
   425                           
   426     07FC                     __end_of__initialization:
   427     07FC  0183               	clrf	3
   428     07FD  120A  118A  2F12   	ljmp	_main	;jump to C main() function
   429                           
   430                           	psect	dataBANK0
   431     002F                     __pdataBANK0:
   432     002F                     main@F903:
   433     002F                     	ds	3
   434                           
   435                           	psect	cstackCOMMON
   436     0071                     __pcstackCOMMON:
   437     0071                     ?_SpiInit:
   438     0071                     ?_MatrixInit:	
   439                           ; 1 bytes @ 0x0
   440                           
   441     0071                     ?_PortBInit:	
   442                           ; 1 bytes @ 0x0
   443                           
   444     0071                     ?_SetPosition:	
   445                           ; 1 bytes @ 0x0
   446                           
   447     0071                     ?_MovieDown:	
   448                           ; 1 bytes @ 0x0
   449                           
   450     0071                     ?_SpiClearMatrix:	
   451                           ; 1 bytes @ 0x0
   452                           
   453     0071                     ?_MovieRigth:	
   454                           ; 1 bytes @ 0x0
   455                           
   456     0071                     ?_MovieUp:	
   457                           ; 1 bytes @ 0x0
   458                           
   459     0071                     ?_MovieLeft:	
   460                           ; 1 bytes @ 0x0
   461                           
   462     0071                     ?_main:	
   463                           ; 1 bytes @ 0x0
   464                           
   465     0071                     ?_SpiSendByte:	
   466                           ; 1 bytes @ 0x0
   467                           
   468     0071                     SpiSendByte@data:	
   469                           ; 1 bytes @ 0x0
   470                           
   471     0071                     SetPosition@position:	
   472                           ; 1 bytes @ 0x0
   473                           
   474     0071                     MovieDown@_shapePosition:	
   475                           ; 2 bytes @ 0x0
   476                           
   477     0071                     MovieUp@_shapePosition:	
   478                           ; 2 bytes @ 0x0
   479                           
   480     0071                     MovieLeft@_shapePosition:	
   481                           ; 2 bytes @ 0x0
   482                           
   483     0071                     MovieRigth@_shapePosition:	
   484                           ; 2 bytes @ 0x0
   485                           
   486     0071                     ??_SpiInit:	
   487                           ; 2 bytes @ 0x0
   488                           
   489     0071                     ??_PortBInit:	
   490                           ; 1 bytes @ 0x0
   491                           
   492     0071                     ??_SpiSendByte:	
   493                           ; 1 bytes @ 0x0
   494                           
   495                           
   496                           ; 1 bytes @ 0x0
   497     0071                     	ds	1
   498     0072                     ?_SendToSegment:
   499     0072                     SendToSegment@segment:	
   500                           ; 1 bytes @ 0x1
   501                           
   502                           
   503                           ; 2 bytes @ 0x1
   504     0072                     	ds	1
   505     0073                     SetPosition@x:
   506     0073                     ??_MovieDown:	
   507                           ; 2 bytes @ 0x2
   508                           
   509     0073                     ??_MovieRigth:	
   510                           ; 1 bytes @ 0x2
   511                           
   512     0073                     ??_MovieUp:	
   513                           ; 1 bytes @ 0x2
   514                           
   515     0073                     ??_MovieLeft:	
   516                           ; 1 bytes @ 0x2
   517                           
   518                           
   519                           ; 1 bytes @ 0x2
   520     0073                     	ds	1
   521     0074                     SendToSegment@data:
   522                           
   523                           ; 1 bytes @ 0x3
   524     0074                     	ds	1
   525     0075                     ?_ShowShape:
   526     0075                     SetPosition@y:	
   527                           ; 1 bytes @ 0x4
   528                           
   529     0075                     ShowShape@coord:	
   530                           ; 2 bytes @ 0x4
   531                           
   532     0075                     ??_SpiClearMatrix:	
   533                           ; 2 bytes @ 0x4
   534                           
   535     0075                     ??_SendToSegment:	
   536                           ; 1 bytes @ 0x4
   537                           
   538                           
   539                           ; 1 bytes @ 0x4
   540     0075                     	ds	2
   541     0077                     SpiClearMatrix@i:
   542     0077                     ShowShape@countElemntArray:	
   543                           ; 1 bytes @ 0x6
   544                           
   545     0077                     ??_SetPosition:	
   546                           ; 2 bytes @ 0x6
   547                           
   548                           
   549                           ; 1 bytes @ 0x6
   550     0077                     	ds	1
   551     0078                     ??_MatrixInit:
   552                           
   553                           ; 1 bytes @ 0x7
   554     0078                     	ds	1
   555     0079                     ShowShape@shapeArray:
   556                           
   557                           ; 1 bytes @ 0x8
   558     0079                     	ds	1
   559     007A                     ShowShape@_pos:
   560                           
   561                           ; 2 bytes @ 0x9
   562     007A                     	ds	2
   563     007C                     ShowShape@pos:
   564                           
   565                           ; 2 bytes @ 0xB
   566     007C                     	ds	2
   567                           
   568                           	psect	cstackBANK0
   569     0020                     __pcstackBANK0:
   570     0020                     ??_ShowShape:
   571                           
   572                           ; 1 bytes @ 0x0
   573     0020                     	ds	5
   574     0025                     ??_main:
   575                           
   576                           ; 1 bytes @ 0x5
   577     0025                     	ds	3
   578     0028                     main@figure:
   579                           
   580                           ; 3 bytes @ 0x8
   581     0028                     	ds	3
   582     002B                     main@shapePosition:
   583                           
   584                           ; 4 bytes @ 0xB
   585     002B                     	ds	4
   586                           
   587                           	psect	maintext
   588     0712                     __pmaintext:	
   589 ;;
   590 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   591 ;;
   592 ;; *************** function _main *****************
   593 ;; Defined at:
   594 ;;		line 18 in file "main.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;  shapePositio    4   11[BANK0 ] struct .
   599 ;;  figure          3    8[BANK0 ] unsigned char [3]
   600 ;; Return value:  Size  Location     Type
   601 ;;                  1    wreg      void 
   602 ;; Registers used:
   603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : B00/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   609 ;;      Params:         0       0       0       0       0
   610 ;;      Locals:         0       7       0       0       0
   611 ;;      Temps:          0       3       0       0       0
   612 ;;      Totals:         0      10       0       0       0
   613 ;;Total ram usage:       10 bytes
   614 ;; Hardware stack levels required when called: 4
   615 ;; This function calls:
   616 ;;		_MatrixInit
   617 ;;		_MovieDown
   618 ;;		_MovieLeft
   619 ;;		_MovieRigth
   620 ;;		_MovieUp
   621 ;;		_PortBInit
   622 ;;		_SetPosition
   623 ;;		_ShowShape
   624 ;;		_SpiClearMatrix
   625 ;;		_SpiInit
   626 ;; This function is called by:
   627 ;;		Startup code after reset
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631     0712                     _main:	
   632                           ;psect for function _main
   633                           
   634     0712                     l806:	
   635                           ;incstack = 0
   636                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   637                           
   638                           
   639                           ;main.c: 19:     SpiInit();
   640     0712  120A  118A  25CD  120A  118A  	fcall	_SpiInit
   641                           
   642                           ;main.c: 20:     MatrixInit();
   643     0717  120A  118A  2651  120A  118A  	fcall	_MatrixInit
   644     071C                     l808:
   645                           
   646                           ;main.c: 21:     PortBInit();
   647     071C  120A  118A  259F  120A  118A  	fcall	_PortBInit
   648                           
   649                           ;main.c: 23:     TCoord shapePosition;;main.c: 25:     char figure[3] = { 0x07, 0x05, 0x
      +                          07 };
   650     0721  1283               	bcf	3,5	;RP0=0, select bank0
   651     0722  1303               	bcf	3,6	;RP1=0, select bank0
   652     0723  082F               	movf	main@F903,w
   653     0724  00A8               	movwf	main@figure
   654     0725  0830               	movf	main@F903+1,w
   655     0726  00A9               	movwf	main@figure+1
   656     0727  0831               	movf	main@F903+2,w
   657     0728  00AA               	movwf	main@figure+2
   658     0729                     l810:
   659                           
   660                           ;main.c: 29:         SetPosition(&shapePosition, 2, 2);
   661     0729  302B               	movlw	low main@shapePosition
   662     072A  00F1               	movwf	SetPosition@position
   663     072B  3000               	movlw	high main@shapePosition
   664     072C  00F2               	movwf	SetPosition@position+1
   665     072D  3002               	movlw	2
   666     072E  00F3               	movwf	SetPosition@x
   667     072F  3000               	movlw	0
   668     0730  00F4               	movwf	SetPosition@x+1
   669     0731  3002               	movlw	2
   670     0732  00F5               	movwf	SetPosition@y
   671     0733  3000               	movlw	0
   672     0734  00F6               	movwf	SetPosition@y+1
   673     0735  120A  118A  2634  120A  118A  	fcall	_SetPosition
   674     073A                     l812:
   675                           
   676                           ;main.c: 31:         MovieDown(&shapePosition);
   677     073A  302B               	movlw	low main@shapePosition
   678     073B  00F1               	movwf	MovieDown@_shapePosition
   679     073C  3000               	movlw	high main@shapePosition
   680     073D  00F2               	movwf	MovieDown@_shapePosition+1
   681     073E  120A  118A  25F2  120A  118A  	fcall	_MovieDown
   682     0743                     l814:
   683                           
   684                           ;main.c: 32:         SpiClearMatrix();
   685     0743  120A  118A  2605  120A  118A  	fcall	_SpiClearMatrix
   686     0748                     l816:
   687                           
   688                           ;main.c: 33:         ShowShape(&shapePosition, 3, figure);
   689     0748  302B               	movlw	low main@shapePosition
   690     0749  00F5               	movwf	ShowShape@coord
   691     074A  3000               	movlw	high main@shapePosition
   692     074B  00F6               	movwf	ShowShape@coord+1
   693     074C  3003               	movlw	3
   694     074D  00F7               	movwf	ShowShape@countElemntArray
   695     074E  3000               	movlw	0
   696     074F  00F8               	movwf	ShowShape@countElemntArray+1
   697     0750  3028               	movlw	(low (main@figure| 0))& (0+255)
   698     0751  00F9               	movwf	ShowShape@shapeArray
   699     0752  120A  118A  2691  120A  118A  	fcall	_ShowShape
   700     0757                     l818:
   701                           
   702                           ;main.c: 34:         _delay((unsigned long)((500)*(16000000/4000.0)));
   703     0757  300B               	movlw	11
   704     0758  1283               	bcf	3,5	;RP0=0, select bank0
   705     0759  1303               	bcf	3,6	;RP1=0, select bank0
   706     075A  00A7               	movwf	??_main+2
   707     075B  3026               	movlw	38
   708     075C  00A6               	movwf	??_main+1
   709     075D  305D               	movlw	93
   710     075E  00A5               	movwf	??_main
   711     075F                     u97:
   712     075F  0BA5               	decfsz	??_main,f
   713     0760  2F5F               	goto	u97
   714     0761  0BA6               	decfsz	??_main+1,f
   715     0762  2F5F               	goto	u97
   716     0763  0BA7               	decfsz	??_main+2,f
   717     0764  2F5F               	goto	u97
   718     0765                     l820:
   719                           
   720                           ;main.c: 36:         MovieRigth(&shapePosition);
   721     0765  302B               	movlw	low main@shapePosition
   722     0766  00F1               	movwf	MovieRigth@_shapePosition
   723     0767  3000               	movlw	high main@shapePosition
   724     0768  00F2               	movwf	MovieRigth@_shapePosition+1
   725     0769  120A  118A  25B1  120A  118A  	fcall	_MovieRigth
   726                           
   727                           ;main.c: 37:         SpiClearMatrix();
   728     076E  120A  118A  2605  120A  118A  	fcall	_SpiClearMatrix
   729     0773                     l822:
   730                           
   731                           ;main.c: 38:         ShowShape(&shapePosition, 3, figure);
   732     0773  302B               	movlw	low main@shapePosition
   733     0774  00F5               	movwf	ShowShape@coord
   734     0775  3000               	movlw	high main@shapePosition
   735     0776  00F6               	movwf	ShowShape@coord+1
   736     0777  3003               	movlw	3
   737     0778  00F7               	movwf	ShowShape@countElemntArray
   738     0779  3000               	movlw	0
   739     077A  00F8               	movwf	ShowShape@countElemntArray+1
   740     077B  3028               	movlw	(low (main@figure| 0))& (0+255)
   741     077C  00F9               	movwf	ShowShape@shapeArray
   742     077D  120A  118A  2691  120A  118A  	fcall	_ShowShape
   743     0782                     l824:
   744                           
   745                           ;main.c: 39:         _delay((unsigned long)((500)*(16000000/4000.0)));
   746     0782  300B               	movlw	11
   747     0783  1283               	bcf	3,5	;RP0=0, select bank0
   748     0784  1303               	bcf	3,6	;RP1=0, select bank0
   749     0785  00A7               	movwf	??_main+2
   750     0786  3026               	movlw	38
   751     0787  00A6               	movwf	??_main+1
   752     0788  305D               	movlw	93
   753     0789  00A5               	movwf	??_main
   754     078A                     u107:
   755     078A  0BA5               	decfsz	??_main,f
   756     078B  2F8A               	goto	u107
   757     078C  0BA6               	decfsz	??_main+1,f
   758     078D  2F8A               	goto	u107
   759     078E  0BA7               	decfsz	??_main+2,f
   760     078F  2F8A               	goto	u107
   761     0790                     l826:
   762                           
   763                           ;main.c: 41:         MovieUp(&shapePosition);
   764     0790  302B               	movlw	low main@shapePosition
   765     0791  00F1               	movwf	MovieUp@_shapePosition
   766     0792  3000               	movlw	high main@shapePosition
   767     0793  00F2               	movwf	MovieUp@_shapePosition+1
   768     0794  120A  118A  261B  120A  118A  	fcall	_MovieUp
   769     0799                     l828:
   770                           
   771                           ;main.c: 42:         SpiClearMatrix();
   772     0799  120A  118A  2605  120A  118A  	fcall	_SpiClearMatrix
   773     079E                     l830:
   774                           
   775                           ;main.c: 43:         ShowShape(&shapePosition, 3, figure);
   776     079E  302B               	movlw	low main@shapePosition
   777     079F  00F5               	movwf	ShowShape@coord
   778     07A0  3000               	movlw	high main@shapePosition
   779     07A1  00F6               	movwf	ShowShape@coord+1
   780     07A2  3003               	movlw	3
   781     07A3  00F7               	movwf	ShowShape@countElemntArray
   782     07A4  3000               	movlw	0
   783     07A5  00F8               	movwf	ShowShape@countElemntArray+1
   784     07A6  3028               	movlw	(low (main@figure| 0))& (0+255)
   785     07A7  00F9               	movwf	ShowShape@shapeArray
   786     07A8  120A  118A  2691  120A  118A  	fcall	_ShowShape
   787     07AD                     l832:
   788                           
   789                           ;main.c: 44:         _delay((unsigned long)((500)*(16000000/4000.0)));
   790     07AD  300B               	movlw	11
   791     07AE  1283               	bcf	3,5	;RP0=0, select bank0
   792     07AF  1303               	bcf	3,6	;RP1=0, select bank0
   793     07B0  00A7               	movwf	??_main+2
   794     07B1  3026               	movlw	38
   795     07B2  00A6               	movwf	??_main+1
   796     07B3  305D               	movlw	93
   797     07B4  00A5               	movwf	??_main
   798     07B5                     u117:
   799     07B5  0BA5               	decfsz	??_main,f
   800     07B6  2FB5               	goto	u117
   801     07B7  0BA6               	decfsz	??_main+1,f
   802     07B8  2FB5               	goto	u117
   803     07B9  0BA7               	decfsz	??_main+2,f
   804     07BA  2FB5               	goto	u117
   805                           
   806                           ;main.c: 46:         MovieLeft(&shapePosition);
   807     07BB  302B               	movlw	low main@shapePosition
   808     07BC  00F1               	movwf	MovieLeft@_shapePosition
   809     07BD  3000               	movlw	high main@shapePosition
   810     07BE  00F2               	movwf	MovieLeft@_shapePosition+1
   811     07BF  120A  118A  25BC  120A  118A  	fcall	_MovieLeft
   812     07C4                     l834:
   813                           
   814                           ;main.c: 47:         SpiClearMatrix();
   815     07C4  120A  118A  2605  120A  118A  	fcall	_SpiClearMatrix
   816     07C9                     l836:
   817                           
   818                           ;main.c: 48:         ShowShape(&shapePosition, 3, figure);
   819     07C9  302B               	movlw	low main@shapePosition
   820     07CA  00F5               	movwf	ShowShape@coord
   821     07CB  3000               	movlw	high main@shapePosition
   822     07CC  00F6               	movwf	ShowShape@coord+1
   823     07CD  3003               	movlw	3
   824     07CE  00F7               	movwf	ShowShape@countElemntArray
   825     07CF  3000               	movlw	0
   826     07D0  00F8               	movwf	ShowShape@countElemntArray+1
   827     07D1  3028               	movlw	(low (main@figure| 0))& (0+255)
   828     07D2  00F9               	movwf	ShowShape@shapeArray
   829     07D3  120A  118A  2691  120A  118A  	fcall	_ShowShape
   830     07D8                     l838:
   831                           
   832                           ;main.c: 49:         _delay((unsigned long)((500)*(16000000/4000.0)));
   833     07D8  300B               	movlw	11
   834     07D9  1283               	bcf	3,5	;RP0=0, select bank0
   835     07DA  1303               	bcf	3,6	;RP1=0, select bank0
   836     07DB  00A7               	movwf	??_main+2
   837     07DC  3026               	movlw	38
   838     07DD  00A6               	movwf	??_main+1
   839     07DE  305D               	movlw	93
   840     07DF  00A5               	movwf	??_main
   841     07E0                     u127:
   842     07E0  0BA5               	decfsz	??_main,f
   843     07E1  2FE0               	goto	u127
   844     07E2  0BA6               	decfsz	??_main+1,f
   845     07E3  2FE0               	goto	u127
   846     07E4  0BA7               	decfsz	??_main+2,f
   847     07E5  2FE0               	goto	u127
   848     07E6  2F29               	goto	l810
   849     07E7  120A  118A  2800   	ljmp	start
   850     07EA                     __end_of_main:
   851                           
   852                           	psect	text1
   853     05CD                     __ptext1:	
   854 ;; *************** function _SpiInit *****************
   855 ;; Defined at:
   856 ;;		line 9 in file "spi.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, status,2, status,0
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   870 ;;      Params:         0       0       0       0       0
   871 ;;      Locals:         0       0       0       0       0
   872 ;;      Temps:          0       0       0       0       0
   873 ;;      Totals:         0       0       0       0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883     05CD                     _SpiInit:	
   884                           ;psect for function _SpiInit
   885                           
   886     05CD                     l758:	
   887                           ;incstack = 0
   888                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   889                           
   890                           
   891                           ;spi.c: 10:     TRISC |= 0x10;
   892     05CD  1683               	bsf	3,5	;RP0=1, select bank1
   893     05CE  1303               	bcf	3,6	;RP1=0, select bank1
   894     05CF  1607               	bsf	7,4	;volatile
   895     05D0                     l760:
   896                           
   897                           ;spi.c: 11:     TRISC &= ~0x28;
   898     05D0  30D7               	movlw	215
   899     05D1  0587               	andwf	7,f	;volatile
   900                           
   901                           ;spi.c: 12:     TRISA &= ~0x20;
   902     05D2  30DF               	movlw	223
   903     05D3  0585               	andwf	5,f	;volatile
   904                           
   905                           ;spi.c: 13:     PORTA &= ~0x20;
   906     05D4  30DF               	movlw	223
   907     05D5  1283               	bcf	3,5	;RP0=0, select bank0
   908     05D6  1303               	bcf	3,6	;RP1=0, select bank0
   909     05D7  0585               	andwf	5,f	;volatile
   910     05D8                     l762:
   911                           
   912                           ;spi.c: 14:     SSPCON = 0x30;
   913     05D8  3030               	movlw	48
   914     05D9  0094               	movwf	20	;volatile
   915     05DA                     l764:
   916                           
   917                           ;spi.c: 15:     SSPSTAT = 0x80;
   918     05DA  3080               	movlw	128
   919     05DB  1683               	bsf	3,5	;RP0=1, select bank1
   920     05DC  1303               	bcf	3,6	;RP1=0, select bank1
   921     05DD  0094               	movwf	20	;volatile
   922     05DE                     l56:
   923     05DE  0008               	return
   924     05DF                     __end_of_SpiInit:
   925                           
   926                           	psect	text2
   927     0691                     __ptext2:	
   928 ;; *************** function _ShowShape *****************
   929 ;; Defined at:
   930 ;;		line 8 in file "shape.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  coord           2    4[COMMON] PTR struct .
   933 ;;		 -> main@shapePosition(4), 
   934 ;;  countElemntA    2    6[COMMON] int 
   935 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
   936 ;;		 -> main@figure(3), 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  pos             2   11[COMMON] int 
   939 ;;  _pos            2    9[COMMON] int 
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      void 
   942 ;; Registers used:
   943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   949 ;;      Params:         5       0       0       0       0
   950 ;;      Locals:         4       0       0       0       0
   951 ;;      Temps:          0       5       0       0       0
   952 ;;      Totals:         9       5       0       0       0
   953 ;;Total ram usage:       14 bytes
   954 ;; Hardware stack levels used: 1
   955 ;; Hardware stack levels required when called: 2
   956 ;; This function calls:
   957 ;;		_SendToSegment
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963     0691                     _ShowShape:	
   964                           ;psect for function _ShowShape
   965                           
   966     0691                     l788:	
   967                           ;incstack = 0
   968                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   969                           
   970     0691                     l790:
   971                           
   972                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
   973     0691  0875               	movf	ShowShape@coord,w
   974     0692  0084               	movwf	4
   975     0693  1783               	bsf	3,7
   976     0694  1C76               	btfss	ShowShape@coord+1,0
   977     0695  1383               	bcf	3,7
   978     0696  0800               	movf	0,w
   979     0697  1283               	bcf	3,5	;RP0=0, select bank0
   980     0698  1303               	bcf	3,6	;RP1=0, select bank0
   981     0699  00A0               	movwf	??_ShowShape
   982     069A  0A84               	incf	4,f
   983     069B  0800               	movf	0,w
   984     069C  00A1               	movwf	??_ShowShape+1
   985     069D  0820               	movf	??_ShowShape,w
   986     069E  3E01               	addlw	1
   987     069F  00FC               	movwf	ShowShape@pos
   988     06A0  0821               	movf	??_ShowShape+1,w
   989     06A1  1803               	skipnc
   990     06A2  3E01               	addlw	1
   991     06A3  3E00               	addlw	0
   992     06A4  00FD               	movwf	ShowShape@pos+1
   993     06A5  2EEF               	goto	l798
   994     06A6                     l792:
   995                           
   996                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
   997     06A6  0875               	movf	ShowShape@coord,w
   998     06A7  0084               	movwf	4
   999     06A8  1783               	bsf	3,7
  1000     06A9  1C76               	btfss	ShowShape@coord+1,0
  1001     06AA  1383               	bcf	3,7
  1002     06AB  0800               	movf	0,w
  1003     06AC  1283               	bcf	3,5	;RP0=0, select bank0
  1004     06AD  1303               	bcf	3,6	;RP1=0, select bank0
  1005     06AE  00A0               	movwf	??_ShowShape
  1006     06AF  0A84               	incf	4,f
  1007     06B0  0800               	movf	0,w
  1008     06B1  00A1               	movwf	??_ShowShape+1
  1009     06B2  0820               	movf	??_ShowShape,w
  1010     06B3  027C               	subwf	ShowShape@pos,w
  1011     06B4  00A2               	movwf	??_ShowShape+2
  1012     06B5  0821               	movf	??_ShowShape+1,w
  1013     06B6  1C03               	skipc
  1014     06B7  0A21               	incf	??_ShowShape+1,w
  1015     06B8  027D               	subwf	ShowShape@pos+1,w
  1016     06B9  00A3               	movwf	??_ShowShape+3
  1017     06BA  0822               	movf	??_ShowShape+2,w
  1018     06BB  3EFF               	addlw	255
  1019     06BC  00FA               	movwf	ShowShape@_pos
  1020     06BD  0823               	movf	??_ShowShape+3,w
  1021     06BE  1803               	skipnc
  1022     06BF  3E01               	addlw	1
  1023     06C0  3EFF               	addlw	255
  1024     06C1  00FB               	movwf	ShowShape@_pos+1
  1025     06C2                     l794:
  1026                           
  1027                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  1028     06C2  087D               	movf	ShowShape@pos+1,w
  1029     06C3  00F3               	movwf	SendToSegment@segment+1
  1030     06C4  087C               	movf	ShowShape@pos,w
  1031     06C5  00F2               	movwf	SendToSegment@segment
  1032     06C6  087A               	movf	ShowShape@_pos,w
  1033     06C7  0779               	addwf	ShowShape@shapeArray,w
  1034     06C8  00A0               	movwf	??_ShowShape
  1035     06C9  0820               	movf	??_ShowShape,w
  1036     06CA  0084               	movwf	4
  1037     06CB  1383               	bcf	3,7	;select IRP bank0
  1038     06CC  0800               	movf	0,w
  1039     06CD  00A1               	movwf	??_ShowShape+1
  1040     06CE  0875               	movf	ShowShape@coord,w
  1041     06CF  3E02               	addlw	2
  1042     06D0  00A2               	movwf	??_ShowShape+2
  1043     06D1  0876               	movf	ShowShape@coord+1,w
  1044     06D2  1803               	skipnc
  1045     06D3  3E01               	addlw	1
  1046     06D4  3E00               	addlw	0
  1047     06D5  00A3               	movwf	??_ShowShape+3
  1048     06D6  0822               	movf	??_ShowShape+2,w
  1049     06D7  0084               	movwf	4
  1050     06D8  1783               	bsf	3,7
  1051     06D9  1C23               	btfss	??_ShowShape+3,0
  1052     06DA  1383               	bcf	3,7
  1053     06DB  0A00               	incf	0,w
  1054     06DC  2EDF               	goto	u74
  1055     06DD                     u75:
  1056     06DD  1003               	clrc
  1057     06DE  0DA1               	rlf	??_ShowShape+1,f
  1058     06DF                     u74:
  1059     06DF  3EFF               	addlw	-1
  1060     06E0  1D03               	skipz
  1061     06E1  2EDD               	goto	u75
  1062     06E2  0821               	movf	??_ShowShape+1,w
  1063     06E3  00F4               	movwf	SendToSegment@data
  1064     06E4  120A  118A  25DF  120A  118A  	fcall	_SendToSegment
  1065     06E9                     l796:
  1066                           
  1067                           ;shape.c: 13:     }
  1068     06E9  3001               	movlw	1
  1069     06EA  07FC               	addwf	ShowShape@pos,f
  1070     06EB  1803               	skipnc
  1071     06EC  0AFD               	incf	ShowShape@pos+1,f
  1072     06ED  3000               	movlw	0
  1073     06EE  07FD               	addwf	ShowShape@pos+1,f
  1074     06EF                     l798:
  1075     06EF  0875               	movf	ShowShape@coord,w
  1076     06F0  0084               	movwf	4
  1077     06F1  1783               	bsf	3,7
  1078     06F2  1C76               	btfss	ShowShape@coord+1,0
  1079     06F3  1383               	bcf	3,7
  1080     06F4  0800               	movf	0,w
  1081     06F5  1283               	bcf	3,5	;RP0=0, select bank0
  1082     06F6  1303               	bcf	3,6	;RP1=0, select bank0
  1083     06F7  00A0               	movwf	??_ShowShape
  1084     06F8  0A84               	incf	4,f
  1085     06F9  0800               	movf	0,w
  1086     06FA  00A1               	movwf	??_ShowShape+1
  1087     06FB  0877               	movf	ShowShape@countElemntArray,w
  1088     06FC  0720               	addwf	??_ShowShape,w
  1089     06FD  00A2               	movwf	??_ShowShape+2
  1090     06FE  0878               	movf	ShowShape@countElemntArray+1,w
  1091     06FF  1803               	skipnc
  1092     0700  0A78               	incf	ShowShape@countElemntArray+1,w
  1093     0701  0721               	addwf	??_ShowShape+1,w
  1094     0702  00A3               	movwf	??_ShowShape+3
  1095     0703  0823               	movf	??_ShowShape+3,w
  1096     0704  3A80               	xorlw	128
  1097     0705  00A4               	movwf	??_ShowShape+4
  1098     0706  087D               	movf	ShowShape@pos+1,w
  1099     0707  3A80               	xorlw	128
  1100     0708  0224               	subwf	??_ShowShape+4,w
  1101     0709  1D03               	skipz
  1102     070A  2F0D               	goto	u85
  1103     070B  087C               	movf	ShowShape@pos,w
  1104     070C  0222               	subwf	??_ShowShape+2,w
  1105     070D                     u85:
  1106     070D  1803               	skipnc
  1107     070E  2F10               	goto	u81
  1108     070F  2F11               	goto	u80
  1109     0710                     u81:
  1110     0710  2EA6               	goto	l792
  1111     0711                     u80:
  1112     0711                     l92:
  1113     0711  0008               	return
  1114     0712                     __end_of_ShowShape:
  1115                           
  1116                           	psect	text3
  1117     0634                     __ptext3:	
  1118 ;; *************** function _SetPosition *****************
  1119 ;; Defined at:
  1120 ;;		line 3 in file "shape.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;  position        2    0[COMMON] PTR struct .
  1123 ;;		 -> main@shapePosition(4), 
  1124 ;;  x               2    2[COMMON] int 
  1125 ;;  y               2    4[COMMON] int 
  1126 ;; Auto vars:     Size  Location     Type
  1127 ;;		None
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  1    wreg      void 
  1130 ;; Registers used:
  1131 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1137 ;;      Params:         6       0       0       0       0
  1138 ;;      Locals:         0       0       0       0       0
  1139 ;;      Temps:          2       0       0       0       0
  1140 ;;      Totals:         8       0       0       0       0
  1141 ;;Total ram usage:        8 bytes
  1142 ;; Hardware stack levels used: 1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_main
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150     0634                     _SetPosition:	
  1151                           ;psect for function _SetPosition
  1152                           
  1153     0634                     l782:	
  1154                           ;incstack = 0
  1155                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1156                           
  1157                           
  1158                           ;shape.c: 4:     position->x = x;
  1159     0634  0871               	movf	SetPosition@position,w
  1160     0635  0084               	movwf	4
  1161     0636  1783               	bsf	3,7
  1162     0637  1C72               	btfss	SetPosition@position+1,0
  1163     0638  1383               	bcf	3,7
  1164     0639  0873               	movf	SetPosition@x,w
  1165     063A  0080               	movwf	0
  1166     063B  0A84               	incf	4,f
  1167     063C  0874               	movf	SetPosition@x+1,w
  1168     063D  0080               	movwf	0
  1169     063E                     l784:
  1170                           
  1171                           ;shape.c: 5:     position->y = y;
  1172     063E  0871               	movf	SetPosition@position,w
  1173     063F  3E02               	addlw	2
  1174     0640  00F7               	movwf	??_SetPosition
  1175     0641  0872               	movf	SetPosition@position+1,w
  1176     0642  1803               	skipnc
  1177     0643  3E01               	addlw	1
  1178     0644  3E00               	addlw	0
  1179     0645  00F8               	movwf	??_SetPosition+1
  1180     0646  0877               	movf	??_SetPosition,w
  1181     0647  0084               	movwf	4
  1182     0648  1783               	bsf	3,7
  1183     0649  1C78               	btfss	??_SetPosition+1,0
  1184     064A  1383               	bcf	3,7
  1185     064B  0875               	movf	SetPosition@y,w
  1186     064C  0080               	movwf	0
  1187     064D  0A84               	incf	4,f
  1188     064E  0876               	movf	SetPosition@y+1,w
  1189     064F  0080               	movwf	0
  1190     0650                     l86:
  1191     0650  0008               	return
  1192     0651                     __end_of_SetPosition:
  1193                           
  1194                           	psect	text4
  1195     059F                     __ptext4:	
  1196 ;; *************** function _PortBInit *****************
  1197 ;; Defined at:
  1198 ;;		line 13 in file "portsinit.c"
  1199 ;; Parameters:    Size  Location     Type
  1200 ;;		None
  1201 ;; Auto vars:     Size  Location     Type
  1202 ;;		None
  1203 ;; Return value:  Size  Location     Type
  1204 ;;                  1    wreg      void 
  1205 ;; Registers used:
  1206 ;;		status,2
  1207 ;; Tracked objects:
  1208 ;;		On entry : 0/0
  1209 ;;		On exit  : 0/0
  1210 ;;		Unchanged: 0/0
  1211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1212 ;;      Params:         0       0       0       0       0
  1213 ;;      Locals:         0       0       0       0       0
  1214 ;;      Temps:          0       0       0       0       0
  1215 ;;      Totals:         0       0       0       0       0
  1216 ;;Total ram usage:        0 bytes
  1217 ;; Hardware stack levels used: 1
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_main
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225     059F                     _PortBInit:	
  1226                           ;psect for function _PortBInit
  1227                           
  1228     059F                     l780:	
  1229                           ;incstack = 0
  1230                           ; Regs used in _PortBInit: [status,2]
  1231                           
  1232                           
  1233                           ;portsinit.c: 14:     TRISB = 0x00;
  1234     059F  1683               	bsf	3,5	;RP0=1, select bank1
  1235     05A0  1303               	bcf	3,6	;RP1=0, select bank1
  1236     05A1  0186               	clrf	6	;volatile
  1237                           
  1238                           ;portsinit.c: 15:     PORTB = 0x00;
  1239     05A2  1283               	bcf	3,5	;RP0=0, select bank0
  1240     05A3  1303               	bcf	3,6	;RP1=0, select bank0
  1241     05A4  0186               	clrf	6	;volatile
  1242     05A5                     l39:
  1243     05A5  0008               	return
  1244     05A6                     __end_of_PortBInit:
  1245                           
  1246                           	psect	text5
  1247     061B                     __ptext5:	
  1248 ;; *************** function _MovieUp *****************
  1249 ;; Defined at:
  1250 ;;		line 36 in file "shape.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1253 ;;		 -> main@shapePosition(4), 
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1265 ;;      Params:         2       0       0       0       0
  1266 ;;      Locals:         0       0       0       0       0
  1267 ;;      Temps:          2       0       0       0       0
  1268 ;;      Totals:         4       0       0       0       0
  1269 ;;Total ram usage:        4 bytes
  1270 ;; Hardware stack levels used: 1
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278     061B                     _MovieUp:	
  1279                           ;psect for function _MovieUp
  1280                           
  1281     061B                     l802:	
  1282                           ;incstack = 0
  1283                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1284                           
  1285                           
  1286                           ;shape.c: 37:     _shapePosition->y--;
  1287     061B  0871               	movf	MovieUp@_shapePosition,w
  1288     061C  3E02               	addlw	2
  1289     061D  00F3               	movwf	??_MovieUp
  1290     061E  0872               	movf	MovieUp@_shapePosition+1,w
  1291     061F  1803               	skipnc
  1292     0620  3E01               	addlw	1
  1293     0621  3E00               	addlw	0
  1294     0622  00F4               	movwf	??_MovieUp+1
  1295     0623  0873               	movf	??_MovieUp,w
  1296     0624  0084               	movwf	4
  1297     0625  1783               	bsf	3,7
  1298     0626  1C74               	btfss	??_MovieUp+1,0
  1299     0627  1383               	bcf	3,7
  1300     0628  30FF               	movlw	255
  1301     0629  0780               	addwf	0,f
  1302     062A  0F84               	incfsz	4,f
  1303     062B  0800               	movf	0,w
  1304     062C  1803               	skipnc
  1305     062D  0A00               	incf	0,w
  1306     062E  00FF               	movwf	btemp+1
  1307     062F  30FF               	movlw	255
  1308     0630  077F               	addwf	btemp+1,w
  1309     0631  0080               	movwf	0
  1310     0632  0384               	decf	4,f
  1311     0633                     l98:
  1312     0633  0008               	return
  1313     0634                     __end_of_MovieUp:
  1314                           
  1315                           	psect	text6
  1316     05B1                     __ptext6:	
  1317 ;; *************** function _MovieRigth *****************
  1318 ;; Defined at:
  1319 ;;		line 44 in file "shape.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1322 ;;		 -> main@shapePosition(4), 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         2       0       0       0       0
  1335 ;;      Locals:         0       0       0       0       0
  1336 ;;      Temps:          0       0       0       0       0
  1337 ;;      Totals:         2       0       0       0       0
  1338 ;;Total ram usage:        2 bytes
  1339 ;; Hardware stack levels used: 1
  1340 ;; This function calls:
  1341 ;;		Nothing
  1342 ;; This function is called by:
  1343 ;;		_main
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           
  1347     05B1                     _MovieRigth:	
  1348                           ;psect for function _MovieRigth
  1349                           
  1350     05B1                     l800:	
  1351                           ;incstack = 0
  1352                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  1353                           
  1354                           
  1355                           ;shape.c: 45:     _shapePosition->x++;
  1356     05B1  0871               	movf	MovieRigth@_shapePosition,w
  1357     05B2  0084               	movwf	4
  1358     05B3  1783               	bsf	3,7
  1359     05B4  1C72               	btfss	MovieRigth@_shapePosition+1,0
  1360     05B5  1383               	bcf	3,7
  1361     05B6  3001               	movlw	1
  1362     05B7  0780               	addwf	0,f
  1363     05B8  0A84               	incf	4,f
  1364     05B9  1803               	skipnc
  1365     05BA  0A80               	incf	0,f
  1366     05BB                     l104:
  1367     05BB  0008               	return
  1368     05BC                     __end_of_MovieRigth:
  1369                           
  1370                           	psect	text7
  1371     05BC                     __ptext7:	
  1372 ;; *************** function _MovieLeft *****************
  1373 ;; Defined at:
  1374 ;;		line 40 in file "shape.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1377 ;;		 -> main@shapePosition(4), 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, fsr0l, fsr0h, btemp+1
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1389 ;;      Params:         2       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0
  1392 ;;      Totals:         2       0       0       0       0
  1393 ;;Total ram usage:        2 bytes
  1394 ;; Hardware stack levels used: 1
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402     05BC                     _MovieLeft:	
  1403                           ;psect for function _MovieLeft
  1404                           
  1405     05BC                     l804:	
  1406                           ;incstack = 0
  1407                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  1408                           
  1409                           
  1410                           ;shape.c: 41:     _shapePosition->x--;
  1411     05BC  0871               	movf	MovieLeft@_shapePosition,w
  1412     05BD  0084               	movwf	4
  1413     05BE  1783               	bsf	3,7
  1414     05BF  1C72               	btfss	MovieLeft@_shapePosition+1,0
  1415     05C0  1383               	bcf	3,7
  1416     05C1  30FF               	movlw	255
  1417     05C2  0780               	addwf	0,f
  1418     05C3  0F84               	incfsz	4,f
  1419     05C4  0800               	movf	0,w
  1420     05C5  1803               	skipnc
  1421     05C6  0A00               	incf	0,w
  1422     05C7  00FF               	movwf	btemp+1
  1423     05C8  30FF               	movlw	255
  1424     05C9  077F               	addwf	btemp+1,w
  1425     05CA  0080               	movwf	0
  1426     05CB  0384               	decf	4,f
  1427     05CC                     l101:
  1428     05CC  0008               	return
  1429     05CD                     __end_of_MovieLeft:
  1430                           
  1431                           	psect	text8
  1432     05F2                     __ptext8:	
  1433 ;; *************** function _MovieDown *****************
  1434 ;; Defined at:
  1435 ;;		line 32 in file "shape.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1438 ;;		 -> main@shapePosition(4), 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;		None
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1450 ;;      Params:         2       0       0       0       0
  1451 ;;      Locals:         0       0       0       0       0
  1452 ;;      Temps:          2       0       0       0       0
  1453 ;;      Totals:         4       0       0       0       0
  1454 ;;Total ram usage:        4 bytes
  1455 ;; Hardware stack levels used: 1
  1456 ;; This function calls:
  1457 ;;		Nothing
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463     05F2                     _MovieDown:	
  1464                           ;psect for function _MovieDown
  1465                           
  1466     05F2                     l786:	
  1467                           ;incstack = 0
  1468                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  1469                           
  1470                           
  1471                           ;shape.c: 33:     _shapePosition->y++;
  1472     05F2  0871               	movf	MovieDown@_shapePosition,w
  1473     05F3  3E02               	addlw	2
  1474     05F4  00F3               	movwf	??_MovieDown
  1475     05F5  0872               	movf	MovieDown@_shapePosition+1,w
  1476     05F6  1803               	skipnc
  1477     05F7  3E01               	addlw	1
  1478     05F8  3E00               	addlw	0
  1479     05F9  00F4               	movwf	??_MovieDown+1
  1480     05FA  0873               	movf	??_MovieDown,w
  1481     05FB  0084               	movwf	4
  1482     05FC  1783               	bsf	3,7
  1483     05FD  1C74               	btfss	??_MovieDown+1,0
  1484     05FE  1383               	bcf	3,7
  1485     05FF  3001               	movlw	1
  1486     0600  0780               	addwf	0,f
  1487     0601  0A84               	incf	4,f
  1488     0602  1803               	skipnc
  1489     0603  0A80               	incf	0,f
  1490     0604                     l95:
  1491     0604  0008               	return
  1492     0605                     __end_of_MovieDown:
  1493                           
  1494                           	psect	text9
  1495     0651                     __ptext9:	
  1496 ;; *************** function _MatrixInit *****************
  1497 ;; Defined at:
  1498 ;;		line 20 in file "matrix.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, status,0, pclath, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1512 ;;      Params:         0       0       0       0       0
  1513 ;;      Locals:         0       0       0       0       0
  1514 ;;      Temps:          3       0       0       0       0
  1515 ;;      Totals:         3       0       0       0       0
  1516 ;;Total ram usage:        3 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; Hardware stack levels required when called: 3
  1519 ;; This function calls:
  1520 ;;		_SendToSegment
  1521 ;;		_SpiClearMatrix
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527     0651                     _MatrixInit:	
  1528                           ;psect for function _MatrixInit
  1529                           
  1530     0651                     l766:	
  1531                           ;incstack = 0
  1532                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1533                           
  1534                           
  1535                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1536     0651  3003               	movlw	3
  1537     0652  00FA               	movwf	??_MatrixInit+2
  1538     0653  3008               	movlw	8
  1539     0654  00F9               	movwf	??_MatrixInit+1
  1540     0655  3077               	movlw	119
  1541     0656  00F8               	movwf	??_MatrixInit
  1542     0657                     u137:
  1543     0657  0BF8               	decfsz	??_MatrixInit,f
  1544     0658  2E57               	goto	u137
  1545     0659  0BF9               	decfsz	??_MatrixInit+1,f
  1546     065A  2E57               	goto	u137
  1547     065B  0BFA               	decfsz	??_MatrixInit+2,f
  1548     065C  2E57               	goto	u137
  1549     065D                     l768:
  1550                           
  1551                           ;matrix.c: 22:     RA5=1;
  1552     065D  1283               	bcf	3,5	;RP0=0, select bank0
  1553     065E  1303               	bcf	3,6	;RP1=0, select bank0
  1554     065F  1685               	bsf	5,5	;volatile
  1555     0660                     l770:
  1556                           
  1557                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1558     0660  3009               	movlw	9
  1559     0661  00F2               	movwf	SendToSegment@segment
  1560     0662  3000               	movlw	0
  1561     0663  00F3               	movwf	SendToSegment@segment+1
  1562     0664  01F4               	clrf	SendToSegment@data
  1563     0665  120A  118A  25DF  120A  118A  	fcall	_SendToSegment
  1564     066A                     l772:
  1565                           
  1566                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1567     066A  300B               	movlw	11
  1568     066B  00F2               	movwf	SendToSegment@segment
  1569     066C  3000               	movlw	0
  1570     066D  00F3               	movwf	SendToSegment@segment+1
  1571     066E  3007               	movlw	7
  1572     066F  00F4               	movwf	SendToSegment@data
  1573     0670  120A  118A  25DF  120A  118A  	fcall	_SendToSegment
  1574     0675                     l774:
  1575                           
  1576                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1577     0675  300A               	movlw	10
  1578     0676  00F2               	movwf	SendToSegment@segment
  1579     0677  3000               	movlw	0
  1580     0678  00F3               	movwf	SendToSegment@segment+1
  1581     0679  3002               	movlw	2
  1582     067A  00F4               	movwf	SendToSegment@data
  1583     067B  120A  118A  25DF  120A  118A  	fcall	_SendToSegment
  1584     0680                     l776:
  1585                           
  1586                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1587     0680  300C               	movlw	12
  1588     0681  00F2               	movwf	SendToSegment@segment
  1589     0682  3000               	movlw	0
  1590     0683  00F3               	movwf	SendToSegment@segment+1
  1591     0684  01F4               	clrf	SendToSegment@data
  1592     0685  0AF4               	incf	SendToSegment@data,f
  1593     0686  120A  118A  25DF  120A  118A  	fcall	_SendToSegment
  1594     068B                     l778:
  1595                           
  1596                           ;matrix.c: 27:     SpiClearMatrix();
  1597     068B  120A  118A  2605  120A  118A  	fcall	_SpiClearMatrix
  1598     0690                     l78:
  1599     0690  0008               	return
  1600     0691                     __end_of_MatrixInit:
  1601                           
  1602                           	psect	text10
  1603     0605                     __ptext10:	
  1604 ;; *************** function _SpiClearMatrix *****************
  1605 ;; Defined at:
  1606 ;;		line 10 in file "matrix.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  i               1    6[COMMON] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0, pclath, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1620 ;;      Params:         0       0       0       0       0
  1621 ;;      Locals:         1       0       0       0       0
  1622 ;;      Temps:          2       0       0       0       0
  1623 ;;      Totals:         3       0       0       0       0
  1624 ;;Total ram usage:        3 bytes
  1625 ;; Hardware stack levels used: 1
  1626 ;; Hardware stack levels required when called: 2
  1627 ;; This function calls:
  1628 ;;		_SendToSegment
  1629 ;; This function is called by:
  1630 ;;		_main
  1631 ;;		_MatrixInit
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635     0605                     _SpiClearMatrix:	
  1636                           ;psect for function _SpiClearMatrix
  1637                           
  1638     0605                     l752:	
  1639                           ;incstack = 0
  1640                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  1641                           
  1642                           
  1643                           ;matrix.c: 12:   char i = 8;
  1644     0605  3008               	movlw	8
  1645     0606  00F7               	movwf	SpiClearMatrix@i
  1646     0607                     l754:
  1647                           
  1648                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  1649     0607  0877               	movf	SpiClearMatrix@i,w
  1650     0608  00F5               	movwf	??_SpiClearMatrix
  1651     0609  01F6               	clrf	??_SpiClearMatrix+1
  1652     060A  0875               	movf	??_SpiClearMatrix,w
  1653     060B  00F2               	movwf	SendToSegment@segment
  1654     060C  0876               	movf	??_SpiClearMatrix+1,w
  1655     060D  00F3               	movwf	SendToSegment@segment+1
  1656     060E  01F4               	clrf	SendToSegment@data
  1657     060F  120A  118A  25DF  120A  118A  	fcall	_SendToSegment
  1658     0614                     l756:
  1659                           
  1660                           ;matrix.c: 16:   } while (--i);
  1661     0614  3001               	movlw	1
  1662     0615  02F7               	subwf	SpiClearMatrix@i,f
  1663     0616  1D03               	btfss	3,2
  1664     0617  2E19               	goto	u61
  1665     0618  2E1A               	goto	u60
  1666     0619                     u61:
  1667     0619  2E07               	goto	l754
  1668     061A                     u60:
  1669     061A                     l75:
  1670     061A  0008               	return
  1671     061B                     __end_of_SpiClearMatrix:
  1672                           
  1673                           	psect	text11
  1674     05DF                     __ptext11:	
  1675 ;; *************** function _SendToSegment *****************
  1676 ;; Defined at:
  1677 ;;		line 34 in file "matrix.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  segment         2    1[COMMON] int 
  1680 ;;  data            1    3[COMMON] unsigned char 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      void 
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, pclath, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1692 ;;      Params:         3       0       0       0       0
  1693 ;;      Locals:         0       0       0       0       0
  1694 ;;      Temps:          0       0       0       0       0
  1695 ;;      Totals:         3       0       0       0       0
  1696 ;;Total ram usage:        3 bytes
  1697 ;; Hardware stack levels used: 1
  1698 ;; Hardware stack levels required when called: 1
  1699 ;; This function calls:
  1700 ;;		_SpiSendByte
  1701 ;; This function is called by:
  1702 ;;		_SpiClearMatrix
  1703 ;;		_MatrixInit
  1704 ;;		_ShowShape
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708     05DF                     _SendToSegment:	
  1709                           ;psect for function _SendToSegment
  1710                           
  1711     05DF                     l746:	
  1712                           ;incstack = 0
  1713                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1714                           
  1715                           
  1716                           ;matrix.c: 35:     RA5 = 0;
  1717     05DF  1283               	bcf	3,5	;RP0=0, select bank0
  1718     05E0  1303               	bcf	3,6	;RP1=0, select bank0
  1719     05E1  1285               	bcf	5,5	;volatile
  1720     05E2                     l748:
  1721                           
  1722                           ;matrix.c: 36:     SpiSendByte((char)segment);
  1723     05E2  0872               	movf	SendToSegment@segment,w
  1724     05E3  120A  118A  25A6  120A  118A  	fcall	_SpiSendByte
  1725                           
  1726                           ;matrix.c: 37:     SpiSendByte(data);
  1727     05E8  0874               	movf	SendToSegment@data,w
  1728     05E9  120A  118A  25A6  120A  118A  	fcall	_SpiSendByte
  1729     05EE                     l750:
  1730                           
  1731                           ;matrix.c: 38:     RA5 = 1;
  1732     05EE  1283               	bcf	3,5	;RP0=0, select bank0
  1733     05EF  1303               	bcf	3,6	;RP1=0, select bank0
  1734     05F0  1685               	bsf	5,5	;volatile
  1735     05F1                     l81:
  1736     05F1  0008               	return
  1737     05F2                     __end_of_SendToSegment:
  1738                           
  1739                           	psect	text12
  1740     05A6                     __ptext12:	
  1741 ;; *************** function _SpiSendByte *****************
  1742 ;; Defined at:
  1743 ;;		line 18 in file "spi.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  data            1    wreg     unsigned char 
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;  data            1    0[COMMON] unsigned char 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		wreg
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1757 ;;      Params:         0       0       0       0       0
  1758 ;;      Locals:         1       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0
  1760 ;;      Totals:         1       0       0       0       0
  1761 ;;Total ram usage:        1 bytes
  1762 ;; Hardware stack levels used: 1
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_SendToSegment
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770     05A6                     _SpiSendByte:	
  1771                           ;psect for function _SpiSendByte
  1772                           
  1773                           
  1774                           ;incstack = 0
  1775                           ; Regs used in _SpiSendByte: [wreg]
  1776                           ;SpiSendByte@data stored from wreg
  1777     05A6  00F1               	movwf	SpiSendByte@data
  1778     05A7                     l744:
  1779                           
  1780                           ;spi.c: 19:     SSPBUF = data;
  1781     05A7  0871               	movf	SpiSendByte@data,w
  1782     05A8  1283               	bcf	3,5	;RP0=0, select bank0
  1783     05A9  1303               	bcf	3,6	;RP1=0, select bank0
  1784     05AA  0093               	movwf	19	;volatile
  1785     05AB                     l59:	
  1786                           ;spi.c: 20:     while (!SSPIF);
  1787                           
  1788     05AB  1D8C               	btfss	12,3	;volatile
  1789     05AC  2DAE               	goto	u51
  1790     05AD  2DAF               	goto	u50
  1791     05AE                     u51:
  1792     05AE  2DAB               	goto	l59
  1793     05AF                     u50:
  1794     05AF                     l61:
  1795                           
  1796                           ;spi.c: 21:     SSPIF = 0;
  1797     05AF  118C               	bcf	12,3	;volatile
  1798     05B0                     l62:
  1799     05B0  0008               	return
  1800     05B1                     __end_of_SpiSendByte:
  1801     0002                     ___latbits      equ	2
  1802     007E                     btemp           set	126	;btemp
  1803     007E                     wtemp0          set	126
  1804                           
  1805                           	psect	config
  1806                           
  1807                           ;Config register CONFIG @ 0x2007
  1808                           ;	Oscillator Selection bits
  1809                           ;	FOSC = HS, HS oscillator
  1810                           ;	Watchdog Timer Enable bit
  1811                           ;	WDTE = OFF, WDT disabled
  1812                           ;	Power-up Timer Enable bit
  1813                           ;	PWRTE = OFF, PWRT disabled
  1814                           ;	FLASH Program Memory Code Protection bits
  1815                           ;	CP = OFF, Code protection off
  1816                           ;	Brown-out Reset Enable bit
  1817                           ;	BOREN = OFF, BOR disabled
  1818                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  1819                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1820                           ;	Data EE Memory Code Protection
  1821                           ;	CPD = OFF, Code Protection off
  1822                           ;	FLASH Program Memory Write Enable
  1823                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  1824                           ;	In-Circuit Debugger Mode bit
  1825                           ;	DEBUG = 0x1, unprogrammed default
  1826     2007                     	org	8199
  1827     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     15      18
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@figure(BANK0[3]), 


Critical Paths under _main in COMMON

    _main->_ShowShape
    _ShowShape->_SendToSegment
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    1153
                                              5 BANK0     10    10      0
                         _MatrixInit
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _PortBInit
                        _SetPosition
                          _ShowShape
                     _SpiClearMatrix
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ShowShape                                           14     9      5     321
                                              4 COMMON     9     4      5
                                              0 BANK0      5     5      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (3) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _MovieDown
   _MovieLeft
   _MovieRigth
   _MovieUp
   _PortBInit
   _SetPosition
   _ShowShape
     _SendToSegment
   _SpiClearMatrix
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               85      0       0      0.0%
BITBANK3            85      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     15      18     22.5%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0      31      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Dec  6 16:10:47 2024

           _SpiClearMatrix 0605                         l61 05AF                         l62 05B0  
                       l39 05A5                         l56 05DE                         l81 05F1  
                       l59 05AB                         l75 061A                         l92 0711  
                       l78 0690                         l86 0650                         l95 0604  
                       l98 0633                         u50 05AF                         u51 05AE  
                       u60 061A                         u61 0619                         u80 0711  
                       u81 0710                         u74 06DF                         u75 06DD  
                       u85 070D                         u97 075F            SpiSendByte@data 0071  
                      l101 05CC                        l104 05BB                        l800 05B1  
                      l802 061B                        l810 0729                        l804 05BC  
                      l820 0765                        l812 073A                        l750 05EE  
                      l830 079E                        l822 0773                        l814 0743  
                      l806 0712                        l744 05A7                        l752 0605  
                      l760 05D0                        l832 07AD                        l824 0782  
                      l816 0748                        l808 071C                        l746 05DF  
                      l754 0607                        l770 0660                        l762 05D8  
                      l834 07C4                        l826 0790                        l818 0757  
                      l748 05E2                        l756 0614                        l772 066A  
                      l780 059F                        l764 05DA                        l836 07C9  
                      l828 0799                        l774 0675                        l766 0651  
                      l782 0634                        l790 0691                        l758 05CD  
                      l838 07D8                        l776 0680                        l768 065D  
                      l784 063E                        l792 06A6                        l778 068B  
                      l786 05F2                        l794 06C2                        l796 06E9  
                      l788 0691                        l798 06EF                        _RA5 002D  
                      u107 078A                        u117 07B5                        u127 07E0  
                      u137 0657                        fsr0 0004                        indf 0000  
                     _main 0712                       btemp 007E                       start 0000  
   __end_of_SpiClearMatrix 061B            __end_of_MovieUp 0634            __end_of_SpiInit 05DF  
                    ?_main 0071                      _PORTA 0005                      _PORTB 0006  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _SSPIF 0063            SpiClearMatrix@i 0077          SendToSegment@data 0074  
                    status 0003                      wtemp0 007E            ?_SpiClearMatrix 0071  
          __initialization 07EA               __end_of_main 07EA                 _MatrixInit 0651  
                   ??_main 0025              ??_SetPosition 0077                     _SSPCON 0014  
                   _SSPBUF 0013                 _MovieRigth 05B1                  ??_MovieUp 0073  
                ??_SpiInit 0071              ??_SpiSendByte 0071             ShowShape@coord 0075  
  __end_of__initialization 07FC        __end_of_SetPosition 0651             __pcstackCOMMON 0071  
             __pidataBANK0 059C                ?_MatrixInit 0071        __end_of_SpiSendByte 05B1  
        __end_of_MovieLeft 05CD          __end_of_MovieDown 0605          __end_of_PortBInit 05A6  
        __end_of_ShowShape 0712          main@shapePosition 002B                ?_MovieRigth 0071  
               __pmaintext 0712  ShowShape@countElemntArray 0077                _SetPosition 0634  
                  _SSPSTAT 0094           ??_SpiClearMatrix 0075                    _MovieUp 061B  
                  _SpiInit 05CD              _SendToSegment 05DF                _SpiSendByte 05A6  
                  __ptext1 05CD                    __ptext2 0691                    __ptext3 0634  
                  __ptext4 059F                    __ptext5 061B                    __ptext6 05B1  
                  __ptext7 05BC                    __ptext8 05F2                    __ptext9 0651  
     end_of_initialization 07FC             ?_SendToSegment 0072        SetPosition@position 0071  
  MovieLeft@_shapePosition 0071                 main@figure 0028               ??_MatrixInit 0078  
      start_initialization 07EA         __end_of_MatrixInit 0691            ??_SendToSegment 0075  
             ??_MovieRigth 0073                  _MovieLeft 05BC                  _MovieDown 05F2  
                _PortBInit 059F                  _ShowShape 0691                __pdataBANK0 002F  
            ShowShape@_pos 007A               SetPosition@x 0073               SetPosition@y 0075  
                ___latbits 0002              __pcstackBANK0 0020         __end_of_MovieRigth 05BC  
             ?_SetPosition 0071        ShowShape@shapeArray 0079                 ?_MovieLeft 0071  
               ?_MovieDown 0071                   ?_MovieUp 0071                   ?_SpiInit 0071  
               ?_PortBInit 0071               ?_SpiSendByte 0071                 ?_ShowShape 0075  
  MovieDown@_shapePosition 0071      MovieUp@_shapePosition 0071                ??_MovieLeft 0073  
              ??_MovieDown 0073                ??_PortBInit 0071                ??_ShowShape 0020  
             ShowShape@pos 007C                   __ptext10 0605                   __ptext11 05DF  
                 __ptext12 05A6                   main@F903 002F       SendToSegment@segment 0072  
    __end_of_SendToSegment 05F2   MovieRigth@_shapePosition 0071  



Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 19 09:12:36 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    38                           	dabs	1,0x7E,2
    39     0000                     
    40                           ; Generated 12/10/2023 GMT
    41                           ; 
    42                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F876 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74     0004                     fsr             equ	4
    75     0004                     fsr0            equ	4
    76     0000                     indf            equ	0
    77     0000                     indf0           equ	0
    78     0002                     pc              equ	2
    79     0002                     pcl             equ	2
    80     000A                     pclath          equ	10
    81     0003                     status          equ	3
    82     0000                     INDF            equ	0	;# 
    83     0001                     TMR0            equ	1	;# 
    84     0002                     PCL             equ	2	;# 
    85     0003                     STATUS          equ	3	;# 
    86     0004                     FSR             equ	4	;# 
    87     0005                     PORTA           equ	5	;# 
    88     0006                     PORTB           equ	6	;# 
    89     0007                     PORTC           equ	7	;# 
    90     000A                     PCLATH          equ	10	;# 
    91     000B                     INTCON          equ	11	;# 
    92     000C                     PIR1            equ	12	;# 
    93     000D                     PIR2            equ	13	;# 
    94     000E                     TMR1            equ	14	;# 
    95     000E                     TMR1L           equ	14	;# 
    96     000F                     TMR1H           equ	15	;# 
    97     0010                     T1CON           equ	16	;# 
    98     0011                     TMR2            equ	17	;# 
    99     0012                     T2CON           equ	18	;# 
   100     0013                     SSPBUF          equ	19	;# 
   101     0014                     SSPCON          equ	20	;# 
   102     0015                     CCPR1           equ	21	;# 
   103     0015                     CCPR1L          equ	21	;# 
   104     0016                     CCPR1H          equ	22	;# 
   105     0017                     CCP1CON         equ	23	;# 
   106     0018                     RCSTA           equ	24	;# 
   107     0019                     TXREG           equ	25	;# 
   108     001A                     RCREG           equ	26	;# 
   109     001B                     CCPR2           equ	27	;# 
   110     001B                     CCPR2L          equ	27	;# 
   111     001C                     CCPR2H          equ	28	;# 
   112     001D                     CCP2CON         equ	29	;# 
   113     001E                     ADRESH          equ	30	;# 
   114     001F                     ADCON0          equ	31	;# 
   115     0081                     OPTION_REG      equ	129	;# 
   116     0085                     TRISA           equ	133	;# 
   117     0086                     TRISB           equ	134	;# 
   118     0087                     TRISC           equ	135	;# 
   119     008C                     PIE1            equ	140	;# 
   120     008D                     PIE2            equ	141	;# 
   121     008E                     PCON            equ	142	;# 
   122     0091                     SSPCON2         equ	145	;# 
   123     0092                     PR2             equ	146	;# 
   124     0093                     SSPADD          equ	147	;# 
   125     0094                     SSPSTAT         equ	148	;# 
   126     0098                     TXSTA           equ	152	;# 
   127     0099                     SPBRG           equ	153	;# 
   128     009E                     ADRESL          equ	158	;# 
   129     009F                     ADCON1          equ	159	;# 
   130     010C                     EEDATA          equ	268	;# 
   131     010D                     EEADR           equ	269	;# 
   132     010E                     EEDATH          equ	270	;# 
   133     010F                     EEADRH          equ	271	;# 
   134     018C                     EECON1          equ	396	;# 
   135     018D                     EECON2          equ	397	;# 
   136     0000                     INDF            equ	0	;# 
   137     0001                     TMR0            equ	1	;# 
   138     0002                     PCL             equ	2	;# 
   139     0003                     STATUS          equ	3	;# 
   140     0004                     FSR             equ	4	;# 
   141     0005                     PORTA           equ	5	;# 
   142     0006                     PORTB           equ	6	;# 
   143     0007                     PORTC           equ	7	;# 
   144     000A                     PCLATH          equ	10	;# 
   145     000B                     INTCON          equ	11	;# 
   146     000C                     PIR1            equ	12	;# 
   147     000D                     PIR2            equ	13	;# 
   148     000E                     TMR1            equ	14	;# 
   149     000E                     TMR1L           equ	14	;# 
   150     000F                     TMR1H           equ	15	;# 
   151     0010                     T1CON           equ	16	;# 
   152     0011                     TMR2            equ	17	;# 
   153     0012                     T2CON           equ	18	;# 
   154     0013                     SSPBUF          equ	19	;# 
   155     0014                     SSPCON          equ	20	;# 
   156     0015                     CCPR1           equ	21	;# 
   157     0015                     CCPR1L          equ	21	;# 
   158     0016                     CCPR1H          equ	22	;# 
   159     0017                     CCP1CON         equ	23	;# 
   160     0018                     RCSTA           equ	24	;# 
   161     0019                     TXREG           equ	25	;# 
   162     001A                     RCREG           equ	26	;# 
   163     001B                     CCPR2           equ	27	;# 
   164     001B                     CCPR2L          equ	27	;# 
   165     001C                     CCPR2H          equ	28	;# 
   166     001D                     CCP2CON         equ	29	;# 
   167     001E                     ADRESH          equ	30	;# 
   168     001F                     ADCON0          equ	31	;# 
   169     0081                     OPTION_REG      equ	129	;# 
   170     0085                     TRISA           equ	133	;# 
   171     0086                     TRISB           equ	134	;# 
   172     0087                     TRISC           equ	135	;# 
   173     008C                     PIE1            equ	140	;# 
   174     008D                     PIE2            equ	141	;# 
   175     008E                     PCON            equ	142	;# 
   176     0091                     SSPCON2         equ	145	;# 
   177     0092                     PR2             equ	146	;# 
   178     0093                     SSPADD          equ	147	;# 
   179     0094                     SSPSTAT         equ	148	;# 
   180     0098                     TXSTA           equ	152	;# 
   181     0099                     SPBRG           equ	153	;# 
   182     009E                     ADRESL          equ	158	;# 
   183     009F                     ADCON1          equ	159	;# 
   184     010C                     EEDATA          equ	268	;# 
   185     010D                     EEADR           equ	269	;# 
   186     010E                     EEDATH          equ	270	;# 
   187     010F                     EEADRH          equ	271	;# 
   188     018C                     EECON1          equ	396	;# 
   189     018D                     EECON2          equ	397	;# 
   190     0000                     INDF            equ	0	;# 
   191     0001                     TMR0            equ	1	;# 
   192     0002                     PCL             equ	2	;# 
   193     0003                     STATUS          equ	3	;# 
   194     0004                     FSR             equ	4	;# 
   195     0005                     PORTA           equ	5	;# 
   196     0006                     PORTB           equ	6	;# 
   197     0007                     PORTC           equ	7	;# 
   198     000A                     PCLATH          equ	10	;# 
   199     000B                     INTCON          equ	11	;# 
   200     000C                     PIR1            equ	12	;# 
   201     000D                     PIR2            equ	13	;# 
   202     000E                     TMR1            equ	14	;# 
   203     000E                     TMR1L           equ	14	;# 
   204     000F                     TMR1H           equ	15	;# 
   205     0010                     T1CON           equ	16	;# 
   206     0011                     TMR2            equ	17	;# 
   207     0012                     T2CON           equ	18	;# 
   208     0013                     SSPBUF          equ	19	;# 
   209     0014                     SSPCON          equ	20	;# 
   210     0015                     CCPR1           equ	21	;# 
   211     0015                     CCPR1L          equ	21	;# 
   212     0016                     CCPR1H          equ	22	;# 
   213     0017                     CCP1CON         equ	23	;# 
   214     0018                     RCSTA           equ	24	;# 
   215     0019                     TXREG           equ	25	;# 
   216     001A                     RCREG           equ	26	;# 
   217     001B                     CCPR2           equ	27	;# 
   218     001B                     CCPR2L          equ	27	;# 
   219     001C                     CCPR2H          equ	28	;# 
   220     001D                     CCP2CON         equ	29	;# 
   221     001E                     ADRESH          equ	30	;# 
   222     001F                     ADCON0          equ	31	;# 
   223     0081                     OPTION_REG      equ	129	;# 
   224     0085                     TRISA           equ	133	;# 
   225     0086                     TRISB           equ	134	;# 
   226     0087                     TRISC           equ	135	;# 
   227     008C                     PIE1            equ	140	;# 
   228     008D                     PIE2            equ	141	;# 
   229     008E                     PCON            equ	142	;# 
   230     0091                     SSPCON2         equ	145	;# 
   231     0092                     PR2             equ	146	;# 
   232     0093                     SSPADD          equ	147	;# 
   233     0094                     SSPSTAT         equ	148	;# 
   234     0098                     TXSTA           equ	152	;# 
   235     0099                     SPBRG           equ	153	;# 
   236     009E                     ADRESL          equ	158	;# 
   237     009F                     ADCON1          equ	159	;# 
   238     010C                     EEDATA          equ	268	;# 
   239     010D                     EEADR           equ	269	;# 
   240     010E                     EEDATH          equ	270	;# 
   241     010F                     EEADRH          equ	271	;# 
   242     018C                     EECON1          equ	396	;# 
   243     018D                     EECON2          equ	397	;# 
   244     0000                     INDF            equ	0	;# 
   245     0001                     TMR0            equ	1	;# 
   246     0002                     PCL             equ	2	;# 
   247     0003                     STATUS          equ	3	;# 
   248     0004                     FSR             equ	4	;# 
   249     0005                     PORTA           equ	5	;# 
   250     0006                     PORTB           equ	6	;# 
   251     0007                     PORTC           equ	7	;# 
   252     000A                     PCLATH          equ	10	;# 
   253     000B                     INTCON          equ	11	;# 
   254     000C                     PIR1            equ	12	;# 
   255     000D                     PIR2            equ	13	;# 
   256     000E                     TMR1            equ	14	;# 
   257     000E                     TMR1L           equ	14	;# 
   258     000F                     TMR1H           equ	15	;# 
   259     0010                     T1CON           equ	16	;# 
   260     0011                     TMR2            equ	17	;# 
   261     0012                     T2CON           equ	18	;# 
   262     0013                     SSPBUF          equ	19	;# 
   263     0014                     SSPCON          equ	20	;# 
   264     0015                     CCPR1           equ	21	;# 
   265     0015                     CCPR1L          equ	21	;# 
   266     0016                     CCPR1H          equ	22	;# 
   267     0017                     CCP1CON         equ	23	;# 
   268     0018                     RCSTA           equ	24	;# 
   269     0019                     TXREG           equ	25	;# 
   270     001A                     RCREG           equ	26	;# 
   271     001B                     CCPR2           equ	27	;# 
   272     001B                     CCPR2L          equ	27	;# 
   273     001C                     CCPR2H          equ	28	;# 
   274     001D                     CCP2CON         equ	29	;# 
   275     001E                     ADRESH          equ	30	;# 
   276     001F                     ADCON0          equ	31	;# 
   277     0081                     OPTION_REG      equ	129	;# 
   278     0085                     TRISA           equ	133	;# 
   279     0086                     TRISB           equ	134	;# 
   280     0087                     TRISC           equ	135	;# 
   281     008C                     PIE1            equ	140	;# 
   282     008D                     PIE2            equ	141	;# 
   283     008E                     PCON            equ	142	;# 
   284     0091                     SSPCON2         equ	145	;# 
   285     0092                     PR2             equ	146	;# 
   286     0093                     SSPADD          equ	147	;# 
   287     0094                     SSPSTAT         equ	148	;# 
   288     0098                     TXSTA           equ	152	;# 
   289     0099                     SPBRG           equ	153	;# 
   290     009E                     ADRESL          equ	158	;# 
   291     009F                     ADCON1          equ	159	;# 
   292     010C                     EEDATA          equ	268	;# 
   293     010D                     EEADR           equ	269	;# 
   294     010E                     EEDATH          equ	270	;# 
   295     010F                     EEADRH          equ	271	;# 
   296     018C                     EECON1          equ	396	;# 
   297     018D                     EECON2          equ	397	;# 
   298     0000                     INDF            equ	0	;# 
   299     0001                     TMR0            equ	1	;# 
   300     0002                     PCL             equ	2	;# 
   301     0003                     STATUS          equ	3	;# 
   302     0004                     FSR             equ	4	;# 
   303     0005                     PORTA           equ	5	;# 
   304     0006                     PORTB           equ	6	;# 
   305     0007                     PORTC           equ	7	;# 
   306     000A                     PCLATH          equ	10	;# 
   307     000B                     INTCON          equ	11	;# 
   308     000C                     PIR1            equ	12	;# 
   309     000D                     PIR2            equ	13	;# 
   310     000E                     TMR1            equ	14	;# 
   311     000E                     TMR1L           equ	14	;# 
   312     000F                     TMR1H           equ	15	;# 
   313     0010                     T1CON           equ	16	;# 
   314     0011                     TMR2            equ	17	;# 
   315     0012                     T2CON           equ	18	;# 
   316     0013                     SSPBUF          equ	19	;# 
   317     0014                     SSPCON          equ	20	;# 
   318     0015                     CCPR1           equ	21	;# 
   319     0015                     CCPR1L          equ	21	;# 
   320     0016                     CCPR1H          equ	22	;# 
   321     0017                     CCP1CON         equ	23	;# 
   322     0018                     RCSTA           equ	24	;# 
   323     0019                     TXREG           equ	25	;# 
   324     001A                     RCREG           equ	26	;# 
   325     001B                     CCPR2           equ	27	;# 
   326     001B                     CCPR2L          equ	27	;# 
   327     001C                     CCPR2H          equ	28	;# 
   328     001D                     CCP2CON         equ	29	;# 
   329     001E                     ADRESH          equ	30	;# 
   330     001F                     ADCON0          equ	31	;# 
   331     0081                     OPTION_REG      equ	129	;# 
   332     0085                     TRISA           equ	133	;# 
   333     0086                     TRISB           equ	134	;# 
   334     0087                     TRISC           equ	135	;# 
   335     008C                     PIE1            equ	140	;# 
   336     008D                     PIE2            equ	141	;# 
   337     008E                     PCON            equ	142	;# 
   338     0091                     SSPCON2         equ	145	;# 
   339     0092                     PR2             equ	146	;# 
   340     0093                     SSPADD          equ	147	;# 
   341     0094                     SSPSTAT         equ	148	;# 
   342     0098                     TXSTA           equ	152	;# 
   343     0099                     SPBRG           equ	153	;# 
   344     009E                     ADRESL          equ	158	;# 
   345     009F                     ADCON1          equ	159	;# 
   346     010C                     EEDATA          equ	268	;# 
   347     010D                     EEADR           equ	269	;# 
   348     010E                     EEDATH          equ	270	;# 
   349     010F                     EEADRH          equ	271	;# 
   350     018C                     EECON1          equ	396	;# 
   351     018D                     EECON2          equ	397	;# 
   352     0000                     INDF            equ	0	;# 
   353     0001                     TMR0            equ	1	;# 
   354     0002                     PCL             equ	2	;# 
   355     0003                     STATUS          equ	3	;# 
   356     0004                     FSR             equ	4	;# 
   357     0005                     PORTA           equ	5	;# 
   358     0006                     PORTB           equ	6	;# 
   359     0007                     PORTC           equ	7	;# 
   360     000A                     PCLATH          equ	10	;# 
   361     000B                     INTCON          equ	11	;# 
   362     000C                     PIR1            equ	12	;# 
   363     000D                     PIR2            equ	13	;# 
   364     000E                     TMR1            equ	14	;# 
   365     000E                     TMR1L           equ	14	;# 
   366     000F                     TMR1H           equ	15	;# 
   367     0010                     T1CON           equ	16	;# 
   368     0011                     TMR2            equ	17	;# 
   369     0012                     T2CON           equ	18	;# 
   370     0013                     SSPBUF          equ	19	;# 
   371     0014                     SSPCON          equ	20	;# 
   372     0015                     CCPR1           equ	21	;# 
   373     0015                     CCPR1L          equ	21	;# 
   374     0016                     CCPR1H          equ	22	;# 
   375     0017                     CCP1CON         equ	23	;# 
   376     0018                     RCSTA           equ	24	;# 
   377     0019                     TXREG           equ	25	;# 
   378     001A                     RCREG           equ	26	;# 
   379     001B                     CCPR2           equ	27	;# 
   380     001B                     CCPR2L          equ	27	;# 
   381     001C                     CCPR2H          equ	28	;# 
   382     001D                     CCP2CON         equ	29	;# 
   383     001E                     ADRESH          equ	30	;# 
   384     001F                     ADCON0          equ	31	;# 
   385     0081                     OPTION_REG      equ	129	;# 
   386     0085                     TRISA           equ	133	;# 
   387     0086                     TRISB           equ	134	;# 
   388     0087                     TRISC           equ	135	;# 
   389     008C                     PIE1            equ	140	;# 
   390     008D                     PIE2            equ	141	;# 
   391     008E                     PCON            equ	142	;# 
   392     0091                     SSPCON2         equ	145	;# 
   393     0092                     PR2             equ	146	;# 
   394     0093                     SSPADD          equ	147	;# 
   395     0094                     SSPSTAT         equ	148	;# 
   396     0098                     TXSTA           equ	152	;# 
   397     0099                     SPBRG           equ	153	;# 
   398     009E                     ADRESL          equ	158	;# 
   399     009F                     ADCON1          equ	159	;# 
   400     010C                     EEDATA          equ	268	;# 
   401     010D                     EEADR           equ	269	;# 
   402     010E                     EEDATH          equ	270	;# 
   403     010F                     EEADRH          equ	271	;# 
   404     018C                     EECON1          equ	396	;# 
   405     018D                     EECON2          equ	397	;# 
   406                           
   407                           	psect	idataBANK1
   408     0FE0                     __pidataBANK1:
   409                           
   410                           ;initializer for main@F932
   411     0FE0  3407               	retlw	7
   412     0FE1  3405               	retlw	5
   413     0FE2  3402               	retlw	2
   414                           
   415                           	psect	strings
   416     0800                     __pstrings:
   417     0800                     stringtab:
   418     0800                     __stringtab:
   419     0800                     stringcode:	
   420                           ;	String table - string pointers are 1 byte each
   421                           
   422     0800                     stringdir:
   423     0800  3008               	movlw	high stringdir
   424     0801  008A               	movwf	10
   425     0802  0804               	movf	4,w
   426     0803  0A84               	incf	4,f
   427     0804  0782               	addwf	2,f
   428     0805                     __stringbase:
   429     0805  3400               	retlw	0
   430     0806                     __end_of__stringtab:
   431     0806                     ChangeOfCoordinates@delay:
   432     0806  3496               	retlw	150
   433     0807  3400               	retlw	0
   434     0808  3400               	retlw	0
   435     0809  3400               	retlw	0
   436     080A                     __end_ofChangeOfCoordinates@delay:
   437     0013                     _SSPBUF         set	19
   438     0014                     _SSPCON         set	20
   439     0005                     _PORTA          set	5
   440     0006                     _PORTB          set	6
   441     002D                     _RA5            set	45
   442     0063                     _SSPIF          set	99
   443     0094                     _SSPSTAT        set	148
   444     0085                     _TRISA          set	133
   445     0087                     _TRISC          set	135
   446     0086                     _TRISB          set	134
   447                           
   448                           	psect	cinit
   449     07D8                     start_initialization:	
   450                           ; #config settings
   451                           
   452     07D8                     __initialization:
   453                           
   454                           ; Initialize objects allocated to BANK1
   455     07D8  1683               	bsf	3,5	;RP0=1, select bank1
   456     07D9  1303               	bcf	3,6	;RP1=0, select bank1
   457     07DA  120A  158A  27E0  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   458     07DF  00A6               	movwf	__pdataBANK1& (0+127)
   459     07E0  120A  158A  27E1  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   460     07E5  00A7               	movwf	(__pdataBANK1+1)& (0+127)
   461     07E6  120A  158A  27E2  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   462     07EB  00A8               	movwf	(__pdataBANK1+2)& (0+127)
   463                           
   464                           ; Clear objects allocated to BANK1
   465     07EC  01A0               	clrf	__pbssBANK1& (0+127)
   466     07ED  01A1               	clrf	(__pbssBANK1+1)& (0+127)
   467     07EE  01A2               	clrf	(__pbssBANK1+2)& (0+127)
   468     07EF  01A3               	clrf	(__pbssBANK1+3)& (0+127)
   469     07F0  01A4               	clrf	(__pbssBANK1+4)& (0+127)
   470     07F1  01A5               	clrf	(__pbssBANK1+5)& (0+127)
   471                           
   472                           ; Clear objects allocated to BANK0
   473     07F2  1283               	bcf	3,5	;RP0=0, select bank0
   474     07F3  1303               	bcf	3,6	;RP1=0, select bank0
   475     07F4  01E7               	clrf	__pbssBANK0& (0+127)
   476     07F5  01E8               	clrf	(__pbssBANK0+1)& (0+127)
   477     07F6  01E9               	clrf	(__pbssBANK0+2)& (0+127)
   478     07F7  01EA               	clrf	(__pbssBANK0+3)& (0+127)
   479     07F8  01EB               	clrf	(__pbssBANK0+4)& (0+127)
   480     07F9  01EC               	clrf	(__pbssBANK0+5)& (0+127)
   481     07FA  01ED               	clrf	(__pbssBANK0+6)& (0+127)
   482     07FB  01EE               	clrf	(__pbssBANK0+7)& (0+127)
   483     07FC                     end_of_initialization:	
   484                           ;End of C runtime variable initialization code
   485                           
   486     07FC                     __end_of__initialization:
   487     07FC  0183               	clrf	3
   488     07FD  120A  118A  2A2B   	ljmp	_main	;jump to C main() function
   489                           
   490                           	psect	bssBANK0
   491     0067                     __pbssBANK0:
   492     0067                     _brkp:
   493     0067                     	ds	2
   494     0069                     malloc@end:
   495     0069                     	ds	2
   496     006B                     malloc@cur:
   497     006B                     	ds	2
   498     006D                     ___freelist:
   499     006D                     	ds	2
   500                           
   501                           	psect	bssBANK1
   502     00A0                     __pbssBANK1:
   503     00A0                     malloc@lock:
   504     00A0                     	ds	4
   505     00A4                     _errno:
   506     00A4                     	ds	2
   507                           
   508                           	psect	dataBANK1
   509     00A6                     __pdataBANK1:
   510     00A6                     main@F932:
   511     00A6                     	ds	3
   512                           
   513                           	psect	cstackCOMMON
   514     0071                     __pcstackCOMMON:
   515     0071                     ?_Reverse:
   516     0071                     ?_SpiInit:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0071                     ?_MatrixInit:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0071                     ?_PortBInit:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0071                     ?_SetPosition:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0071                     ?_InsertResult:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0071                     ?_free:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0071                     ?_main:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0071                     ?_SpiSendByte:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0071                     ?_SpiClearMatrix:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0071                     ?_MovieDown:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     0071                     ?_MovieUp:	
   547                           ; 1 bytes @ 0x0
   548                           
   549     0071                     ?_MovieLeft:	
   550                           ; 1 bytes @ 0x0
   551                           
   552     0071                     ?_MovieRigth:	
   553                           ; 1 bytes @ 0x0
   554                           
   555     0071                     ?___simple_search_fl:	
   556                           ; 1 bytes @ 0x0
   557                           
   558     0071                     ?___expand_heap:	
   559                           ; 2 bytes @ 0x0
   560                           
   561     0071                     ?___wmul:	
   562                           ; 2 bytes @ 0x0
   563                           
   564     0071                     SpiSendByte@data:	
   565                           ; 2 bytes @ 0x0
   566                           
   567     0071                     Reverse@array_:	
   568                           ; 1 bytes @ 0x0
   569                           
   570     0071                     InsertResult@array_:	
   571                           ; 1 bytes @ 0x0
   572                           
   573     0071                     ___expand_heap@pn:	
   574                           ; 1 bytes @ 0x0
   575                           
   576     0071                     SetPosition@position:	
   577                           ; 1 bytes @ 0x0
   578                           
   579     0071                     MovieDown@_shapePosition:	
   580                           ; 2 bytes @ 0x0
   581                           
   582     0071                     MovieUp@_shapePosition:	
   583                           ; 2 bytes @ 0x0
   584                           
   585     0071                     MovieLeft@_shapePosition:	
   586                           ; 2 bytes @ 0x0
   587                           
   588     0071                     MovieRigth@_shapePosition:	
   589                           ; 2 bytes @ 0x0
   590                           
   591     0071                     ___wmul@multiplier:	
   592                           ; 2 bytes @ 0x0
   593                           
   594     0071                     ___simple_search_fl@n:	
   595                           ; 2 bytes @ 0x0
   596                           
   597     0071                     free@ptr:	
   598                           ; 2 bytes @ 0x0
   599                           
   600     0071                     ??_SpiInit:	
   601                           ; 2 bytes @ 0x0
   602                           
   603     0071                     ??_PortBInit:	
   604                           ; 1 bytes @ 0x0
   605                           
   606     0071                     ??_SpiSendByte:	
   607                           ; 1 bytes @ 0x0
   608                           
   609                           
   610                           ; 1 bytes @ 0x0
   611     0071                     	ds	1
   612     0072                     ?_SendToSegment:
   613     0072                     SendToSegment@segment:	
   614                           ; 1 bytes @ 0x1
   615                           
   616     0072                     Reverse@countElemntArray:	
   617                           ; 2 bytes @ 0x1
   618                           
   619     0072                     InsertResult@res:	
   620                           ; 2 bytes @ 0x1
   621                           
   622     0072                     ___expand_heap@n:	
   623                           ; 2 bytes @ 0x1
   624                           
   625     0072                     ??___expand_heap:	
   626                           ; 2 bytes @ 0x1
   627                           
   628                           
   629                           ; 1 bytes @ 0x1
   630     0072                     	ds	1
   631     0073                     SetPosition@x:
   632     0073                     ___wmul@multiplicand:	
   633                           ; 2 bytes @ 0x2
   634                           
   635     0073                     ??_free:	
   636                           ; 2 bytes @ 0x2
   637                           
   638     0073                     ??___simple_search_fl:	
   639                           ; 1 bytes @ 0x2
   640                           
   641     0073                     ??_MovieDown:	
   642                           ; 1 bytes @ 0x2
   643                           
   644     0073                     ??_MovieUp:	
   645                           ; 1 bytes @ 0x2
   646                           
   647     0073                     ??_MovieLeft:	
   648                           ; 1 bytes @ 0x2
   649                           
   650     0073                     ??_MovieRigth:	
   651                           ; 1 bytes @ 0x2
   652                           
   653                           
   654                           ; 1 bytes @ 0x2
   655     0073                     	ds	1
   656     0074                     SendToSegment@data:
   657     0074                     InsertResult@countElemntArray:	
   658                           ; 1 bytes @ 0x3
   659                           
   660     0074                     ___expand_heap@new_brkp:	
   661                           ; 2 bytes @ 0x3
   662                           
   663     0074                     ??_Reverse:	
   664                           ; 2 bytes @ 0x3
   665                           
   666                           
   667                           ; 1 bytes @ 0x3
   668     0074                     	ds	1
   669     0075                     ?_ShowShape:
   670     0075                     SetPosition@y:	
   671                           ; 1 bytes @ 0x4
   672                           
   673     0075                     ShowShape@coord:	
   674                           ; 2 bytes @ 0x4
   675                           
   676     0075                     ___wmul@product:	
   677                           ; 2 bytes @ 0x4
   678                           
   679     0075                     ??_SendToSegment:	
   680                           ; 2 bytes @ 0x4
   681                           
   682     0075                     ??_SpiClearMatrix:	
   683                           ; 1 bytes @ 0x4
   684                           
   685     0075                     ??___wmul:	
   686                           ; 1 bytes @ 0x4
   687                           
   688                           
   689                           ; 1 bytes @ 0x4
   690     0075                     	ds	1
   691     0076                     ??_InsertResult:
   692                           
   693                           ; 1 bytes @ 0x5
   694     0076                     	ds	1
   695     0077                     ?_memset:
   696     0077                     SpiClearMatrix@i:	
   697                           ; 2 bytes @ 0x6
   698                           
   699     0077                     Reverse@t:	
   700                           ; 1 bytes @ 0x6
   701                           
   702     0077                     ShowShape@countElemntArray:	
   703                           ; 1 bytes @ 0x6
   704                           
   705     0077                     memset@dest:	
   706                           ; 2 bytes @ 0x6
   707                           
   708     0077                     ??_SetPosition:	
   709                           ; 2 bytes @ 0x6
   710                           
   711                           
   712                           ; 1 bytes @ 0x6
   713     0077                     	ds	1
   714     0078                     Reverse@i:
   715     0078                     ??_MatrixInit:	
   716                           ; 2 bytes @ 0x7
   717                           
   718                           
   719                           ; 1 bytes @ 0x7
   720     0078                     	ds	1
   721     0079                     ?_malloc:
   722     0079                     ShowShape@shapeArray:	
   723                           ; 2 bytes @ 0x8
   724                           
   725     0079                     free@cptr:	
   726                           ; 1 bytes @ 0x8
   727                           
   728     0079                     malloc@n:	
   729                           ; 2 bytes @ 0x8
   730                           
   731     0079                     memset@c:	
   732                           ; 2 bytes @ 0x8
   733                           
   734                           
   735                           ; 2 bytes @ 0x8
   736     0079                     	ds	1
   737     007A                     ShowShape@_pos:
   738     007A                     Reverse@j:	
   739                           ; 2 bytes @ 0x9
   740                           
   741                           
   742                           ; 2 bytes @ 0x9
   743     007A                     	ds	1
   744     007B                     InsertResult@y:
   745     007B                     free@c:	
   746                           ; 2 bytes @ 0xA
   747                           
   748     007B                     memset@n:	
   749                           ; 2 bytes @ 0xA
   750                           
   751     007B                     ??_malloc:	
   752                           ; 2 bytes @ 0xA
   753                           
   754                           
   755                           ; 1 bytes @ 0xA
   756     007B                     	ds	1
   757     007C                     ShowShape@pos:
   758                           
   759                           ; 2 bytes @ 0xB
   760     007C                     	ds	1
   761     007D                     ??_calloc:
   762     007D                     ??_memset:	
   763                           ; 1 bytes @ 0xC
   764                           
   765                           
   766                           ; 1 bytes @ 0xC
   767     007D                     	ds	1
   768     007E                     ??_main:
   769                           
   770                           	psect	cstackBANK0
   771     0020                     __pcstackBANK0:	
   772                           ; 1 bytes @ 0xD
   773                           
   774     0020                     ___simple_search_fl@remaining_size:
   775     0020                     memset@p:	
   776                           ; 2 bytes @ 0x0
   777                           
   778     0020                     ??_ShowShape:	
   779                           ; 2 bytes @ 0x0
   780                           
   781                           
   782                           ; 1 bytes @ 0x0
   783     0020                     	ds	2
   784     0022                     ___simple_search_fl@best_last:
   785                           
   786                           ; 2 bytes @ 0x2
   787     0022                     	ds	2
   788     0024                     ___simple_search_fl@split:
   789                           
   790                           ; 2 bytes @ 0x4
   791     0024                     	ds	1
   792     0025                     ?_MovieShape:
   793     0025                     MovieShape@_shapePosition:	
   794                           ; 1 bytes @ 0x5
   795                           
   796                           
   797                           ; 2 bytes @ 0x5
   798     0025                     	ds	1
   799     0026                     ___simple_search_fl@last:
   800                           
   801                           ; 2 bytes @ 0x6
   802     0026                     	ds	1
   803     0027                     MovieShape@shapeArray:
   804                           
   805                           ; 1 bytes @ 0x7
   806     0027                     	ds	1
   807     0028                     MovieShape@countElemntArray:
   808     0028                     ___simple_search_fl@next:	
   809                           ; 2 bytes @ 0x8
   810                           
   811                           
   812                           ; 2 bytes @ 0x8
   813     0028                     	ds	2
   814     002A                     ___simple_search_fl@c:
   815     002A                     ??_MovieShape:	
   816                           ; 2 bytes @ 0xA
   817                           
   818                           
   819                           ; 1 bytes @ 0xA
   820     002A                     	ds	2
   821     002C                     MovieShape@dir:
   822     002C                     ___simple_search_fl@best:	
   823                           ; 1 bytes @ 0xC
   824                           
   825                           
   826                           ; 2 bytes @ 0xC
   827     002C                     	ds	2
   828     002E                     malloc@m:
   829                           
   830                           ; 2 bytes @ 0xE
   831     002E                     	ds	2
   832     0030                     malloc@sz:
   833                           
   834                           ; 2 bytes @ 0x10
   835     0030                     	ds	2
   836     0032                     malloc@size:
   837                           
   838                           ; 2 bytes @ 0x12
   839     0032                     	ds	2
   840     0034                     malloc@p:
   841                           
   842                           ; 2 bytes @ 0x14
   843     0034                     	ds	2
   844     0036                     malloc@new:
   845                           
   846                           ; 2 bytes @ 0x16
   847     0036                     	ds	2
   848     0038                     ?_calloc:
   849     0038                     calloc@nmemb:	
   850                           ; 2 bytes @ 0x18
   851                           
   852                           
   853                           ; 2 bytes @ 0x18
   854     0038                     	ds	2
   855     003A                     calloc@size:
   856                           
   857                           ; 2 bytes @ 0x1A
   858     003A                     	ds	2
   859     003C                     calloc@new_ptr:
   860                           
   861                           ; 2 bytes @ 0x1C
   862     003C                     	ds	2
   863     003E                     ?_Rotate:
   864     003E                     Rotate@array_:	
   865                           ; 1 bytes @ 0x1E
   866                           
   867                           
   868                           ; 1 bytes @ 0x1E
   869     003E                     	ds	1
   870     003F                     Rotate@countElemntArray:
   871                           
   872                           ; 2 bytes @ 0x1F
   873     003F                     	ds	2
   874     0041                     ??_Rotate:
   875                           
   876                           ; 1 bytes @ 0x21
   877     0041                     	ds	7
   878     0048                     Rotate@x:
   879                           
   880                           ; 2 bytes @ 0x28
   881     0048                     	ds	2
   882     004A                     Rotate@i:
   883                           
   884                           ; 2 bytes @ 0x2A
   885     004A                     	ds	2
   886     004C                     Rotate@res:
   887                           
   888                           ; 2 bytes @ 0x2C
   889     004C                     	ds	2
   890     004E                     Rotate@_i:
   891                           
   892                           ; 2 bytes @ 0x2E
   893     004E                     	ds	2
   894     0050                     ?_ChangeOfCoordinates:
   895     0050                     ChangeOfCoordinates@_shapePosition:	
   896                           ; 1 bytes @ 0x30
   897                           
   898                           
   899                           ; 2 bytes @ 0x30
   900     0050                     	ds	2
   901     0052                     ChangeOfCoordinates@_figure:
   902                           
   903                           ; 1 bytes @ 0x32
   904     0052                     	ds	1
   905     0053                     ChangeOfCoordinates@_countElemntArray:
   906                           
   907                           ; 2 bytes @ 0x33
   908     0053                     	ds	2
   909     0055                     ChangeOfCoordinates@_reverse:
   910                           
   911                           ; 1 bytes @ 0x35
   912     0055                     	ds	1
   913     0056                     ??_ChangeOfCoordinates:
   914                           
   915                           ; 1 bytes @ 0x36
   916     0056                     	ds	3
   917     0059                     ChangeOfCoordinates@i:
   918                           
   919                           ; 2 bytes @ 0x39
   920     0059                     	ds	2
   921     005B                     ChangeOfCoordinates@step:
   922                           
   923                           ; 2 bytes @ 0x3B
   924     005B                     	ds	2
   925     005D                     main@square_1:
   926                           
   927                           ; 3 bytes @ 0x3D
   928     005D                     	ds	3
   929     0060                     main@countElemntArray:
   930                           
   931                           ; 2 bytes @ 0x40
   932     0060                     	ds	2
   933     0062                     main@reverse:
   934                           
   935                           ; 1 bytes @ 0x42
   936     0062                     	ds	1
   937     0063                     main@shapePosition:
   938                           
   939                           ; 4 bytes @ 0x43
   940     0063                     	ds	4
   941                           
   942                           	psect	maintext
   943     022B                     __pmaintext:	
   944 ;;
   945 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   946 ;;
   947 ;; *************** function _main *****************
   948 ;; Defined at:
   949 ;;		line 53 in file "main.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;		None
   952 ;; Auto vars:     Size  Location     Type
   953 ;;  shapePositio    4   67[BANK0 ] struct .
   954 ;;  square_1        3   61[BANK0 ] unsigned char [3]
   955 ;;  countElemntA    2   64[BANK0 ] int 
   956 ;;  reverse         1   66[BANK0 ] _Bool 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : B00/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   966 ;;      Params:         0       0       0       0       0
   967 ;;      Locals:         0      10       0       0       0
   968 ;;      Temps:          0       0       0       0       0
   969 ;;      Totals:         0      10       0       0       0
   970 ;;Total ram usage:       10 bytes
   971 ;; Hardware stack levels required when called: 5
   972 ;; This function calls:
   973 ;;		_ChangeOfCoordinates
   974 ;;		_MatrixInit
   975 ;;		_PortBInit
   976 ;;		_SetPosition
   977 ;;		_SpiInit
   978 ;; This function is called by:
   979 ;;		Startup code after reset
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983     022B                     _main:	
   984                           ;psect for function _main
   985                           
   986     022B                     l1586:	
   987                           ;incstack = 0
   988                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   989                           
   990                           
   991                           ;main.c: 54:     SpiInit();
   992     022B  120A  118A  2016  120A  118A  	fcall	_SpiInit
   993                           
   994                           ;main.c: 55:     MatrixInit();
   995     0230  120A  118A  2113  120A  118A  	fcall	_MatrixInit
   996     0235                     l1588:
   997                           
   998                           ;main.c: 56:     PortBInit();
   999     0235  120A  158A  27E3  120A  118A  	fcall	_PortBInit
  1000                           
  1001                           ;main.c: 58:     TCoord shapePosition;;main.c: 59:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
  1002     023A  1683               	bsf	3,5	;RP0=1, select bank1
  1003     023B  1303               	bcf	3,6	;RP1=0, select bank1
  1004     023C  0826               	movf	main@F932^(0+128),w
  1005     023D  1283               	bcf	3,5	;RP0=0, select bank0
  1006     023E  1303               	bcf	3,6	;RP1=0, select bank0
  1007     023F  00DD               	movwf	main@square_1
  1008     0240  1683               	bsf	3,5	;RP0=1, select bank1
  1009     0241  1303               	bcf	3,6	;RP1=0, select bank1
  1010     0242  0827               	movf	(main@F932+1)^(0+128),w
  1011     0243  1283               	bcf	3,5	;RP0=0, select bank0
  1012     0244  1303               	bcf	3,6	;RP1=0, select bank0
  1013     0245  00DE               	movwf	main@square_1+1
  1014     0246  1683               	bsf	3,5	;RP0=1, select bank1
  1015     0247  1303               	bcf	3,6	;RP1=0, select bank1
  1016     0248  0828               	movf	(main@F932+2)^(0+128),w
  1017     0249  1283               	bcf	3,5	;RP0=0, select bank0
  1018     024A  1303               	bcf	3,6	;RP1=0, select bank0
  1019     024B  00DF               	movwf	main@square_1+2
  1020                           
  1021                           ;main.c: 60:     int countElemntArray = 3;
  1022     024C  3003               	movlw	3
  1023     024D  00E0               	movwf	main@countElemntArray
  1024     024E  3000               	movlw	0
  1025     024F  00E1               	movwf	main@countElemntArray+1
  1026     0250                     l1590:
  1027                           
  1028                           ;main.c: 61:     _Bool reverse = 1;
  1029     0250  3001               	movlw	1
  1030     0251  00E2               	movwf	main@reverse
  1031     0252                     l1592:
  1032                           
  1033                           ;main.c: 64:         SetPosition(&shapePosition, 0, 0);
  1034     0252  3063               	movlw	low main@shapePosition
  1035     0253  00F1               	movwf	SetPosition@position
  1036     0254  3000               	movlw	high main@shapePosition
  1037     0255  00F2               	movwf	SetPosition@position+1
  1038     0256  3000               	movlw	0
  1039     0257  00F3               	movwf	SetPosition@x
  1040     0258  00F4               	movwf	SetPosition@x+1
  1041     0259  3000               	movlw	0
  1042     025A  00F5               	movwf	SetPosition@y
  1043     025B  00F6               	movwf	SetPosition@y+1
  1044     025C  120A  118A  207D  120A  118A  	fcall	_SetPosition
  1045     0261                     l1594:
  1046                           
  1047                           ;main.c: 65:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray, &re
      +                          verse);
  1048     0261  3063               	movlw	low main@shapePosition
  1049     0262  1283               	bcf	3,5	;RP0=0, select bank0
  1050     0263  1303               	bcf	3,6	;RP1=0, select bank0
  1051     0264  00D0               	movwf	ChangeOfCoordinates@_shapePosition
  1052     0265  3000               	movlw	high main@shapePosition
  1053     0266  00D1               	movwf	ChangeOfCoordinates@_shapePosition+1
  1054     0267  305D               	movlw	(low (main@square_1| 0))& (0+255)
  1055     0268  00D2               	movwf	ChangeOfCoordinates@_figure
  1056     0269  0861               	movf	main@countElemntArray+1,w
  1057     026A  00D4               	movwf	ChangeOfCoordinates@_countElemntArray+1
  1058     026B  0860               	movf	main@countElemntArray,w
  1059     026C  00D3               	movwf	ChangeOfCoordinates@_countElemntArray
  1060     026D  3062               	movlw	(low (main@reverse| 0))& (0+255)
  1061     026E  00D5               	movwf	ChangeOfCoordinates@_reverse
  1062     026F  120A  118A  249D  120A  118A  	fcall	_ChangeOfCoordinates
  1063     0274  2A52               	goto	l1592
  1064     0275  120A  118A  2800   	ljmp	start
  1065     0278                     __end_of_main:
  1066                           
  1067                           	psect	text1
  1068     0016                     __ptext1:	
  1069 ;; *************** function _SpiInit *****************
  1070 ;; Defined at:
  1071 ;;		line 9 in file "spi.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;		None
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2, status,0
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1085 ;;      Params:         0       0       0       0       0
  1086 ;;      Locals:         0       0       0       0       0
  1087 ;;      Temps:          0       0       0       0       0
  1088 ;;      Totals:         0       0       0       0       0
  1089 ;;Total ram usage:        0 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_main
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098     0016                     _SpiInit:	
  1099                           ;psect for function _SpiInit
  1100                           
  1101     0016                     l1558:	
  1102                           ;incstack = 0
  1103                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
  1104                           
  1105                           
  1106                           ;spi.c: 10:     TRISC |= 0x10;
  1107     0016  1683               	bsf	3,5	;RP0=1, select bank1
  1108     0017  1303               	bcf	3,6	;RP1=0, select bank1
  1109     0018  1607               	bsf	7,4	;volatile
  1110     0019                     l1560:
  1111                           
  1112                           ;spi.c: 11:     TRISC &= ~0x28;
  1113     0019  30D7               	movlw	215
  1114     001A  0587               	andwf	7,f	;volatile
  1115                           
  1116                           ;spi.c: 12:     TRISA &= ~0x20;
  1117     001B  30DF               	movlw	223
  1118     001C  0585               	andwf	5,f	;volatile
  1119                           
  1120                           ;spi.c: 13:     PORTA &= ~0x20;
  1121     001D  30DF               	movlw	223
  1122     001E  1283               	bcf	3,5	;RP0=0, select bank0
  1123     001F  1303               	bcf	3,6	;RP1=0, select bank0
  1124     0020  0585               	andwf	5,f	;volatile
  1125     0021                     l1562:
  1126                           
  1127                           ;spi.c: 14:     SSPCON = 0x30;
  1128     0021  3030               	movlw	48
  1129     0022  0094               	movwf	20	;volatile
  1130     0023                     l1564:
  1131                           
  1132                           ;spi.c: 15:     SSPSTAT = 0x80;
  1133     0023  3080               	movlw	128
  1134     0024  1683               	bsf	3,5	;RP0=1, select bank1
  1135     0025  1303               	bcf	3,6	;RP1=0, select bank1
  1136     0026  0094               	movwf	20	;volatile
  1137     0027                     l66:
  1138     0027  0008               	return
  1139     0028                     __end_of_SpiInit:
  1140                           
  1141                           	psect	text2
  1142     007D                     __ptext2:	
  1143 ;; *************** function _SetPosition *****************
  1144 ;; Defined at:
  1145 ;;		line 3 in file "shape.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  position        2    0[COMMON] PTR struct .
  1148 ;;		 -> main@shapePosition(4), 
  1149 ;;  x               2    2[COMMON] int 
  1150 ;;  y               2    4[COMMON] int 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1162 ;;      Params:         6       0       0       0       0
  1163 ;;      Locals:         0       0       0       0       0
  1164 ;;      Temps:          2       0       0       0       0
  1165 ;;      Totals:         8       0       0       0       0
  1166 ;;Total ram usage:        8 bytes
  1167 ;; Hardware stack levels used: 1
  1168 ;; This function calls:
  1169 ;;		Nothing
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175     007D                     _SetPosition:	
  1176                           ;psect for function _SetPosition
  1177                           
  1178     007D                     l1582:	
  1179                           ;incstack = 0
  1180                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1181                           
  1182                           
  1183                           ;shape.c: 4:     position->x = x;
  1184     007D  0871               	movf	SetPosition@position,w
  1185     007E  0084               	movwf	4
  1186     007F  1783               	bsf	3,7
  1187     0080  1C72               	btfss	SetPosition@position+1,0
  1188     0081  1383               	bcf	3,7
  1189     0082  0873               	movf	SetPosition@x,w
  1190     0083  0080               	movwf	0
  1191     0084  0A84               	incf	4,f
  1192     0085  0874               	movf	SetPosition@x+1,w
  1193     0086  0080               	movwf	0
  1194     0087                     l1584:
  1195                           
  1196                           ;shape.c: 5:     position->y = y;
  1197     0087  0871               	movf	SetPosition@position,w
  1198     0088  3E02               	addlw	2
  1199     0089  00F7               	movwf	??_SetPosition
  1200     008A  0872               	movf	SetPosition@position+1,w
  1201     008B  1803               	skipnc
  1202     008C  3E01               	addlw	1
  1203     008D  3E00               	addlw	0
  1204     008E  00F8               	movwf	??_SetPosition+1
  1205     008F  0877               	movf	??_SetPosition,w
  1206     0090  0084               	movwf	4
  1207     0091  1783               	bsf	3,7
  1208     0092  1C78               	btfss	??_SetPosition+1,0
  1209     0093  1383               	bcf	3,7
  1210     0094  0875               	movf	SetPosition@y,w
  1211     0095  0080               	movwf	0
  1212     0096  0A84               	incf	4,f
  1213     0097  0876               	movf	SetPosition@y+1,w
  1214     0098  0080               	movwf	0
  1215     0099                     l104:
  1216     0099  0008               	return
  1217     009A                     __end_of_SetPosition:
  1218                           
  1219                           	psect	text3
  1220     0FE3                     __ptext3:	
  1221 ;; *************** function _PortBInit *****************
  1222 ;; Defined at:
  1223 ;;		line 13 in file "portsinit.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1237 ;;      Params:         0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; This function calls:
  1244 ;;		Nothing
  1245 ;; This function is called by:
  1246 ;;		_main
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250     0FE3                     _PortBInit:	
  1251                           ;psect for function _PortBInit
  1252                           
  1253     0FE3                     l1580:	
  1254                           ;incstack = 0
  1255                           ; Regs used in _PortBInit: [status,2]
  1256                           
  1257                           
  1258                           ;portsinit.c: 14:     TRISB = 0x00;
  1259     0FE3  1683               	bsf	3,5	;RP0=1, select bank1
  1260     0FE4  1303               	bcf	3,6	;RP1=0, select bank1
  1261     0FE5  0186               	clrf	6	;volatile
  1262                           
  1263                           ;portsinit.c: 15:     PORTB = 0x00;
  1264     0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  1265     0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  1266     0FE8  0186               	clrf	6	;volatile
  1267     0FE9                     l49:
  1268     0FE9  0008               	return
  1269     0FEA                     __end_of_PortBInit:
  1270                           
  1271                           	psect	text4
  1272     0113                     __ptext4:	
  1273 ;; *************** function _MatrixInit *****************
  1274 ;; Defined at:
  1275 ;;		line 20 in file "matrix.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;		None
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;		None
  1280 ;; Return value:  Size  Location     Type
  1281 ;;                  1    wreg      void 
  1282 ;; Registers used:
  1283 ;;		wreg, status,2, status,0, pclath, cstack
  1284 ;; Tracked objects:
  1285 ;;		On entry : 0/0
  1286 ;;		On exit  : 0/0
  1287 ;;		Unchanged: 0/0
  1288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1289 ;;      Params:         0       0       0       0       0
  1290 ;;      Locals:         0       0       0       0       0
  1291 ;;      Temps:          3       0       0       0       0
  1292 ;;      Totals:         3       0       0       0       0
  1293 ;;Total ram usage:        3 bytes
  1294 ;; Hardware stack levels used: 1
  1295 ;; Hardware stack levels required when called: 3
  1296 ;; This function calls:
  1297 ;;		_SendToSegment
  1298 ;;		_SpiClearMatrix
  1299 ;; This function is called by:
  1300 ;;		_main
  1301 ;; This function uses a non-reentrant model
  1302 ;;
  1303                           
  1304     0113                     _MatrixInit:	
  1305                           ;psect for function _MatrixInit
  1306                           
  1307     0113                     l1566:	
  1308                           ;incstack = 0
  1309                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1310                           
  1311                           
  1312                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1313     0113  3003               	movlw	3
  1314     0114  00FA               	movwf	??_MatrixInit+2
  1315     0115  3008               	movlw	8
  1316     0116  00F9               	movwf	??_MatrixInit+1
  1317     0117  3077               	movlw	119
  1318     0118  00F8               	movwf	??_MatrixInit
  1319     0119                     u977:
  1320     0119  0BF8               	decfsz	??_MatrixInit,f
  1321     011A  2919               	goto	u977
  1322     011B  0BF9               	decfsz	??_MatrixInit+1,f
  1323     011C  2919               	goto	u977
  1324     011D  0BFA               	decfsz	??_MatrixInit+2,f
  1325     011E  2919               	goto	u977
  1326     011F                     l1568:
  1327                           
  1328                           ;matrix.c: 22:     RA5=1;
  1329     011F  1283               	bcf	3,5	;RP0=0, select bank0
  1330     0120  1303               	bcf	3,6	;RP1=0, select bank0
  1331     0121  1685               	bsf	5,5	;volatile
  1332     0122                     l1570:
  1333                           
  1334                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1335     0122  3009               	movlw	9
  1336     0123  00F2               	movwf	SendToSegment@segment
  1337     0124  3000               	movlw	0
  1338     0125  00F3               	movwf	SendToSegment@segment+1
  1339     0126  01F4               	clrf	SendToSegment@data
  1340     0127  120A  118A  203B  120A  118A  	fcall	_SendToSegment
  1341     012C                     l1572:
  1342                           
  1343                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1344     012C  300B               	movlw	11
  1345     012D  00F2               	movwf	SendToSegment@segment
  1346     012E  3000               	movlw	0
  1347     012F  00F3               	movwf	SendToSegment@segment+1
  1348     0130  3007               	movlw	7
  1349     0131  00F4               	movwf	SendToSegment@data
  1350     0132  120A  118A  203B  120A  118A  	fcall	_SendToSegment
  1351     0137                     l1574:
  1352                           
  1353                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1354     0137  300A               	movlw	10
  1355     0138  00F2               	movwf	SendToSegment@segment
  1356     0139  3000               	movlw	0
  1357     013A  00F3               	movwf	SendToSegment@segment+1
  1358     013B  3002               	movlw	2
  1359     013C  00F4               	movwf	SendToSegment@data
  1360     013D  120A  118A  203B  120A  118A  	fcall	_SendToSegment
  1361     0142                     l1576:
  1362                           
  1363                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1364     0142  300C               	movlw	12
  1365     0143  00F2               	movwf	SendToSegment@segment
  1366     0144  3000               	movlw	0
  1367     0145  00F3               	movwf	SendToSegment@segment+1
  1368     0146  01F4               	clrf	SendToSegment@data
  1369     0147  0AF4               	incf	SendToSegment@data,f
  1370     0148  120A  118A  203B  120A  118A  	fcall	_SendToSegment
  1371     014D                     l1578:
  1372                           
  1373                           ;matrix.c: 27:     SpiClearMatrix();
  1374     014D  120A  118A  204E  120A  118A  	fcall	_SpiClearMatrix
  1375     0152                     l88:
  1376     0152  0008               	return
  1377     0153                     __end_of_MatrixInit:
  1378                           
  1379                           	psect	text5
  1380     049D                     __ptext5:	
  1381 ;; *************** function _ChangeOfCoordinates *****************
  1382 ;; Defined at:
  1383 ;;		line 19 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  _shapePositi    2   48[BANK0 ] PTR struct .
  1386 ;;		 -> main@shapePosition(4), 
  1387 ;;  _figure         1   50[BANK0 ] PTR unsigned char 
  1388 ;;		 -> main@square_1(3), 
  1389 ;;  _countElemnt    2   51[BANK0 ] int 
  1390 ;;  _reverse        1   53[BANK0 ] PTR _Bool 
  1391 ;;		 -> main@reverse(1), 
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;  i               2   57[BANK0 ] int 
  1394 ;;  step            2   59[BANK0 ] int 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         0       6       0       0       0
  1405 ;;      Locals:         0       4       0       0       0
  1406 ;;      Temps:          0       3       0       0       0
  1407 ;;      Totals:         0      13       0       0       0
  1408 ;;Total ram usage:       13 bytes
  1409 ;; Hardware stack levels used: 1
  1410 ;; Hardware stack levels required when called: 4
  1411 ;; This function calls:
  1412 ;;		_MovieShape
  1413 ;;		_Reverse
  1414 ;;		_Rotate
  1415 ;; This function is called by:
  1416 ;;		_main
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420     049D                     _ChangeOfCoordinates:	
  1421                           ;psect for function _ChangeOfCoordinates
  1422                           
  1423     049D                     l1518:	
  1424                           ;incstack = 0
  1425                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1426                           
  1427                           
  1428                           ;main.c: 20:     const unsigned long delay = 150;;main.c: 22:     int step = 0;
  1429     049D  1283               	bcf	3,5	;RP0=0, select bank0
  1430     049E  1303               	bcf	3,6	;RP1=0, select bank0
  1431     049F  01DB               	clrf	ChangeOfCoordinates@step
  1432     04A0  01DC               	clrf	ChangeOfCoordinates@step+1
  1433     04A1                     l21:	
  1434                           ;main.c: 23:         do{
  1435                           
  1436                           
  1437                           ;main.c: 24:             for(int i = 0; i < 5; i++){
  1438     04A1  1283               	bcf	3,5	;RP0=0, select bank0
  1439     04A2  1303               	bcf	3,6	;RP1=0, select bank0
  1440     04A3  01D9               	clrf	ChangeOfCoordinates@i
  1441     04A4  01DA               	clrf	ChangeOfCoordinates@i+1
  1442     04A5  2CEA               	goto	l1534
  1443     04A6                     l1524:
  1444                           
  1445                           ;main.c: 27:                         MovieShape(right, _shapePosition, _figure, _countEl
      +                          emntArray);
  1446     04A6  0850               	movf	ChangeOfCoordinates@_shapePosition,w
  1447     04A7  00A5               	movwf	MovieShape@_shapePosition
  1448     04A8  0851               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1449     04A9  00A6               	movwf	MovieShape@_shapePosition+1
  1450     04AA  0852               	movf	ChangeOfCoordinates@_figure,w
  1451     04AB  00A7               	movwf	MovieShape@shapeArray
  1452     04AC  0854               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1453     04AD  00A9               	movwf	MovieShape@countElemntArray+1
  1454     04AE  0853               	movf	ChangeOfCoordinates@_countElemntArray,w
  1455     04AF  00A8               	movwf	MovieShape@countElemntArray
  1456     04B0  3003               	movlw	3
  1457     04B1  120A  118A  2278  120A  118A  	fcall	_MovieShape
  1458                           
  1459                           ;main.c: 28:                         break;
  1460     04B6  2CFF               	goto	l1536
  1461     04B7                     l1526:
  1462                           
  1463                           ;main.c: 30:                         MovieShape(down, _shapePosition, _figure, _countEle
      +                          mntArray);
  1464     04B7  0850               	movf	ChangeOfCoordinates@_shapePosition,w
  1465     04B8  00A5               	movwf	MovieShape@_shapePosition
  1466     04B9  0851               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1467     04BA  00A6               	movwf	MovieShape@_shapePosition+1
  1468     04BB  0852               	movf	ChangeOfCoordinates@_figure,w
  1469     04BC  00A7               	movwf	MovieShape@shapeArray
  1470     04BD  0854               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1471     04BE  00A9               	movwf	MovieShape@countElemntArray+1
  1472     04BF  0853               	movf	ChangeOfCoordinates@_countElemntArray,w
  1473     04C0  00A8               	movwf	MovieShape@countElemntArray
  1474     04C1  3000               	movlw	0
  1475     04C2  120A  118A  2278  120A  118A  	fcall	_MovieShape
  1476                           
  1477                           ;main.c: 31:                         break;
  1478     04C7  2CFF               	goto	l1536
  1479     04C8                     l1528:
  1480                           
  1481                           ;main.c: 33:                         MovieShape(left, _shapePosition, _figure, _countEle
      +                          mntArray);
  1482     04C8  0850               	movf	ChangeOfCoordinates@_shapePosition,w
  1483     04C9  00A5               	movwf	MovieShape@_shapePosition
  1484     04CA  0851               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1485     04CB  00A6               	movwf	MovieShape@_shapePosition+1
  1486     04CC  0852               	movf	ChangeOfCoordinates@_figure,w
  1487     04CD  00A7               	movwf	MovieShape@shapeArray
  1488     04CE  0854               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1489     04CF  00A9               	movwf	MovieShape@countElemntArray+1
  1490     04D0  0853               	movf	ChangeOfCoordinates@_countElemntArray,w
  1491     04D1  00A8               	movwf	MovieShape@countElemntArray
  1492     04D2  3002               	movlw	2
  1493     04D3  120A  118A  2278  120A  118A  	fcall	_MovieShape
  1494                           
  1495                           ;main.c: 34:                         break;
  1496     04D8  2CFF               	goto	l1536
  1497     04D9                     l1530:
  1498                           
  1499                           ;main.c: 36:                         MovieShape(up, _shapePosition, _figure, _countElemn
      +                          tArray);
  1500     04D9  0850               	movf	ChangeOfCoordinates@_shapePosition,w
  1501     04DA  00A5               	movwf	MovieShape@_shapePosition
  1502     04DB  0851               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1503     04DC  00A6               	movwf	MovieShape@_shapePosition+1
  1504     04DD  0852               	movf	ChangeOfCoordinates@_figure,w
  1505     04DE  00A7               	movwf	MovieShape@shapeArray
  1506     04DF  0854               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1507     04E0  00A9               	movwf	MovieShape@countElemntArray+1
  1508     04E1  0853               	movf	ChangeOfCoordinates@_countElemntArray,w
  1509     04E2  00A8               	movwf	MovieShape@countElemntArray
  1510     04E3  3001               	movlw	1
  1511     04E4  120A  118A  2278  120A  118A  	fcall	_MovieShape
  1512                           
  1513                           ;main.c: 37:                         break;
  1514     04E9  2CFF               	goto	l1536
  1515     04EA                     l1534:
  1516                           
  1517                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1518                           ; Switch size 1, requested type "simple"
  1519                           ; Number of cases is 1, Range of values is 0 to 0
  1520                           ; switch strategies available:
  1521                           ; Name         Instructions Cycles
  1522                           ; simple_byte            4     3 (average)
  1523                           ; direct_byte           11     8 (fixed)
  1524                           ; jumptable            260     6 (fixed)
  1525                           ;	Chosen strategy is simple_byte
  1526     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1527     04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1528     04EC  085C               	movf	ChangeOfCoordinates@step+1,w
  1529     04ED  3A00               	xorlw	0	; case 0
  1530     04EE  1903               	skipnz
  1531     04EF  2CF1               	goto	l1646
  1532     04F0  2CFF               	goto	l1536
  1533     04F1                     l1646:
  1534                           
  1535                           ; Switch size 1, requested type "simple"
  1536                           ; Number of cases is 4, Range of values is 0 to 3
  1537                           ; switch strategies available:
  1538                           ; Name         Instructions Cycles
  1539                           ; simple_byte           13     7 (average)
  1540                           ; direct_byte           20     8 (fixed)
  1541                           ; jumptable            260     6 (fixed)
  1542                           ;	Chosen strategy is simple_byte
  1543     04F1  085B               	movf	ChangeOfCoordinates@step,w
  1544     04F2  3A00               	xorlw	0	; case 0
  1545     04F3  1903               	skipnz
  1546     04F4  2CA6               	goto	l1524
  1547     04F5  3A01               	xorlw	1	; case 1
  1548     04F6  1903               	skipnz
  1549     04F7  2CB7               	goto	l1526
  1550     04F8  3A03               	xorlw	3	; case 2
  1551     04F9  1903               	skipnz
  1552     04FA  2CC8               	goto	l1528
  1553     04FB  3A01               	xorlw	1	; case 3
  1554     04FC  1903               	skipnz
  1555     04FD  2CD9               	goto	l1530
  1556     04FE  2CFF               	goto	l1536
  1557     04FF                     l1536:
  1558                           
  1559                           ;main.c: 39:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1560     04FF  3004               	movlw	4
  1561     0500  1283               	bcf	3,5	;RP0=0, select bank0
  1562     0501  1303               	bcf	3,6	;RP1=0, select bank0
  1563     0502  00D8               	movwf	??_ChangeOfCoordinates+2
  1564     0503  300C               	movlw	12
  1565     0504  00D7               	movwf	??_ChangeOfCoordinates+1
  1566     0505  3033               	movlw	51
  1567     0506  00D6               	movwf	??_ChangeOfCoordinates
  1568     0507                     u987:
  1569     0507  0BD6               	decfsz	??_ChangeOfCoordinates,f
  1570     0508  2D07               	goto	u987
  1571     0509  0BD7               	decfsz	??_ChangeOfCoordinates+1,f
  1572     050A  2D07               	goto	u987
  1573     050B  0BD8               	decfsz	??_ChangeOfCoordinates+2,f
  1574     050C  2D07               	goto	u987
  1575                           
  1576                           ;main.c: 41:             }
  1577     050D  3001               	movlw	1
  1578     050E  1283               	bcf	3,5	;RP0=0, select bank0
  1579     050F  1303               	bcf	3,6	;RP1=0, select bank0
  1580     0510  07D9               	addwf	ChangeOfCoordinates@i,f
  1581     0511  1803               	skipnc
  1582     0512  0ADA               	incf	ChangeOfCoordinates@i+1,f
  1583     0513  3000               	movlw	0
  1584     0514  07DA               	addwf	ChangeOfCoordinates@i+1,f
  1585     0515                     l1538:
  1586     0515  085A               	movf	ChangeOfCoordinates@i+1,w
  1587     0516  3A80               	xorlw	128
  1588     0517  00FF               	movwf	btemp+1
  1589     0518  3080               	movlw	128
  1590     0519  027F               	subwf	btemp+1,w
  1591     051A  1D03               	skipz
  1592     051B  2D1E               	goto	u935
  1593     051C  3005               	movlw	5
  1594     051D  0259               	subwf	ChangeOfCoordinates@i,w
  1595     051E                     u935:
  1596     051E  1C03               	skipc
  1597     051F  2D21               	goto	u931
  1598     0520  2D22               	goto	u930
  1599     0521                     u931:
  1600     0521  2CEA               	goto	l1534
  1601     0522                     u930:
  1602     0522                     l1540:
  1603                           
  1604                           ;main.c: 42:             if(step == 0 && *_reverse) {
  1605     0522  1283               	bcf	3,5	;RP0=0, select bank0
  1606     0523  1303               	bcf	3,6	;RP1=0, select bank0
  1607     0524  085B               	movf	ChangeOfCoordinates@step,w
  1608     0525  045C               	iorwf	ChangeOfCoordinates@step+1,w
  1609     0526  1D03               	btfss	3,2
  1610     0527  2D29               	goto	u941
  1611     0528  2D2A               	goto	u940
  1612     0529                     u941:
  1613     0529  2D43               	goto	l1548
  1614     052A                     u940:
  1615     052A                     l1542:
  1616     052A  0855               	movf	ChangeOfCoordinates@_reverse,w
  1617     052B  0084               	movwf	4
  1618     052C  1383               	bcf	3,7	;select IRP bank0
  1619     052D  0800               	movf	0,w
  1620     052E  1903               	btfsc	3,2
  1621     052F  2D31               	goto	u951
  1622     0530  2D32               	goto	u950
  1623     0531                     u951:
  1624     0531  2D43               	goto	l1548
  1625     0532                     u950:
  1626     0532                     l1544:
  1627                           
  1628                           ;main.c: 43:                 Reverse(_figure, _countElemntArray);
  1629     0532  0852               	movf	ChangeOfCoordinates@_figure,w
  1630     0533  00F1               	movwf	Reverse@array_
  1631     0534  0854               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1632     0535  00F3               	movwf	Reverse@countElemntArray+1
  1633     0536  0853               	movf	ChangeOfCoordinates@_countElemntArray,w
  1634     0537  00F2               	movwf	Reverse@countElemntArray
  1635     0538  120A  118A  2153  120A  118A  	fcall	_Reverse
  1636     053D                     l1546:
  1637                           
  1638                           ;main.c: 44:                 *_reverse = 0;
  1639     053D  1283               	bcf	3,5	;RP0=0, select bank0
  1640     053E  1303               	bcf	3,6	;RP1=0, select bank0
  1641     053F  0855               	movf	ChangeOfCoordinates@_reverse,w
  1642     0540  0084               	movwf	4
  1643     0541  1383               	bcf	3,7	;select IRP bank0
  1644     0542  0180               	clrf	0
  1645     0543                     l1548:
  1646                           
  1647                           ;main.c: 46:             Rotate(_figure, _countElemntArray);
  1648     0543  0852               	movf	ChangeOfCoordinates@_figure,w
  1649     0544  00BE               	movwf	Rotate@array_
  1650     0545  0854               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1651     0546  00C0               	movwf	Rotate@countElemntArray+1
  1652     0547  0853               	movf	ChangeOfCoordinates@_countElemntArray,w
  1653     0548  00BF               	movwf	Rotate@countElemntArray
  1654     0549  120A  118A  2355  120A  118A  	fcall	_Rotate
  1655     054E                     l1550:
  1656                           
  1657                           ;main.c: 47:             step++;
  1658     054E  3001               	movlw	1
  1659     054F  1283               	bcf	3,5	;RP0=0, select bank0
  1660     0550  1303               	bcf	3,6	;RP1=0, select bank0
  1661     0551  07DB               	addwf	ChangeOfCoordinates@step,f
  1662     0552  1803               	skipnc
  1663     0553  0ADC               	incf	ChangeOfCoordinates@step+1,f
  1664     0554  3000               	movlw	0
  1665     0555  07DC               	addwf	ChangeOfCoordinates@step+1,f
  1666     0556                     l1552:
  1667                           
  1668                           ;main.c: 48:         } while(step < 4);
  1669     0556  085C               	movf	ChangeOfCoordinates@step+1,w
  1670     0557  3A80               	xorlw	128
  1671     0558  00FF               	movwf	btemp+1
  1672     0559  3080               	movlw	128
  1673     055A  027F               	subwf	btemp+1,w
  1674     055B  1D03               	skipz
  1675     055C  2D5F               	goto	u965
  1676     055D  3004               	movlw	4
  1677     055E  025B               	subwf	ChangeOfCoordinates@step,w
  1678     055F                     u965:
  1679     055F  1C03               	skipc
  1680     0560  2D62               	goto	u961
  1681     0561  2D63               	goto	u960
  1682     0562                     u961:
  1683     0562  2CA1               	goto	l21
  1684     0563                     u960:
  1685     0563                     l32:
  1686     0563  0008               	return
  1687     0564                     __end_of_ChangeOfCoordinates:
  1688                           
  1689                           	psect	text6
  1690     0355                     __ptext6:	
  1691 ;; *************** function _Rotate *****************
  1692 ;; Defined at:
  1693 ;;		line 55 in file "shape.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  array_          1   30[BANK0 ] PTR unsigned char 
  1696 ;;		 -> main@square_1(3), 
  1697 ;;  countElemntA    2   31[BANK0 ] int 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  i               2   42[BANK0 ] int 
  1700 ;;  x               2   40[BANK0 ] int 
  1701 ;;  _i              2   46[BANK0 ] int 
  1702 ;;  res             2   44[BANK0 ] PTR unsigned char 
  1703 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  1    wreg      void 
  1706 ;; Registers used:
  1707 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: 0/0
  1712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1713 ;;      Params:         0       3       0       0       0
  1714 ;;      Locals:         0       8       0       0       0
  1715 ;;      Temps:          0       7       0       0       0
  1716 ;;      Totals:         0      18       0       0       0
  1717 ;;Total ram usage:       18 bytes
  1718 ;; Hardware stack levels used: 1
  1719 ;; Hardware stack levels required when called: 3
  1720 ;; This function calls:
  1721 ;;		_InsertResult
  1722 ;;		_calloc
  1723 ;;		_free
  1724 ;; This function is called by:
  1725 ;;		_ChangeOfCoordinates
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729     0355                     _Rotate:	
  1730                           ;psect for function _Rotate
  1731                           
  1732     0355                     l1484:	
  1733                           ;incstack = 0
  1734                           ; Regs used in _Rotate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1735                           
  1736                           
  1737                           ;shape.c: 57:     char * res = calloc((size_t)countElemntArray, sizeof(char));
  1738     0355  1283               	bcf	3,5	;RP0=0, select bank0
  1739     0356  1303               	bcf	3,6	;RP1=0, select bank0
  1740     0357  0840               	movf	Rotate@countElemntArray+1,w
  1741     0358  00B9               	movwf	calloc@nmemb+1
  1742     0359  083F               	movf	Rotate@countElemntArray,w
  1743     035A  00B8               	movwf	calloc@nmemb
  1744     035B  3001               	movlw	1
  1745     035C  00BA               	movwf	calloc@size
  1746     035D  3000               	movlw	0
  1747     035E  00BB               	movwf	calloc@size+1
  1748     035F  120A  118A  2196  120A  118A  	fcall	_calloc
  1749     0364  1283               	bcf	3,5	;RP0=0, select bank0
  1750     0365  1303               	bcf	3,6	;RP1=0, select bank0
  1751     0366  0838               	movf	?_calloc,w
  1752     0367  00CC               	movwf	Rotate@res
  1753     0368  0839               	movf	?_calloc+1,w
  1754     0369  00CD               	movwf	Rotate@res+1
  1755     036A                     l1486:
  1756                           
  1757                           ;shape.c: 59:     if (res){
  1758     036A  084C               	movf	Rotate@res,w
  1759     036B  044D               	iorwf	Rotate@res+1,w
  1760     036C  1903               	btfsc	3,2
  1761     036D  2B6F               	goto	u871
  1762     036E  2B70               	goto	u870
  1763     036F                     u871:
  1764     036F  2BDF               	goto	l1516
  1765     0370                     u870:
  1766     0370                     l1488:
  1767                           
  1768                           ;shape.c: 60:         for(int _i = countElemntArray - 1; _i >= 0; _i--){
  1769     0370  083F               	movf	Rotate@countElemntArray,w
  1770     0371  3EFF               	addlw	255
  1771     0372  00CE               	movwf	Rotate@_i
  1772     0373  0840               	movf	Rotate@countElemntArray+1,w
  1773     0374  1803               	skipnc
  1774     0375  3E01               	addlw	1
  1775     0376  3EFF               	addlw	255
  1776     0377  00CF               	movwf	Rotate@_i+1
  1777     0378                     l1490:
  1778     0378  1FCF               	btfss	Rotate@_i+1,7
  1779     0379  2B7B               	goto	u881
  1780     037A  2B7C               	goto	u880
  1781     037B                     u881:
  1782     037B  2B7D               	goto	l1494
  1783     037C                     u880:
  1784     037C  2BD0               	goto	l1514
  1785     037D                     l1494:
  1786                           
  1787                           ;shape.c: 61:             for(int i = countElemntArray - 1, x = 0; i >= 0; i--, x++){
  1788     037D  083F               	movf	Rotate@countElemntArray,w
  1789     037E  3EFF               	addlw	255
  1790     037F  00CA               	movwf	Rotate@i
  1791     0380  0840               	movf	Rotate@countElemntArray+1,w
  1792     0381  1803               	skipnc
  1793     0382  3E01               	addlw	1
  1794     0383  3EFF               	addlw	255
  1795     0384  00CB               	movwf	Rotate@i+1
  1796     0385                     l1496:
  1797     0385  01C8               	clrf	Rotate@x
  1798     0386  01C9               	clrf	Rotate@x+1
  1799     0387                     l1498:
  1800     0387  1FCB               	btfss	Rotate@i+1,7
  1801     0388  2B8A               	goto	u891
  1802     0389  2B8B               	goto	u890
  1803     038A                     u891:
  1804     038A  2B8C               	goto	l1502
  1805     038B                     u890:
  1806     038B  2BC9               	goto	l1510
  1807     038C                     l1502:
  1808                           
  1809                           ;shape.c: 62:                 res[_i] |= ((array_[x] >> _i ) & 1) << i;
  1810     038C  0848               	movf	Rotate@x,w
  1811     038D  073E               	addwf	Rotate@array_,w
  1812     038E  00C1               	movwf	??_Rotate
  1813     038F  0841               	movf	??_Rotate,w
  1814     0390  0084               	movwf	4
  1815     0391  1383               	bcf	3,7	;select IRP bank0
  1816     0392  0800               	movf	0,w
  1817     0393  00C2               	movwf	??_Rotate+1
  1818     0394  0A4E               	incf	Rotate@_i,w
  1819     0395  2B98               	goto	u904
  1820     0396                     u905:
  1821     0396  1003               	clrc
  1822     0397  0CC2               	rrf	??_Rotate+1,f
  1823     0398                     u904:
  1824     0398  3EFF               	addlw	-1
  1825     0399  1D03               	skipz
  1826     039A  2B96               	goto	u905
  1827     039B  0842               	movf	??_Rotate+1,w
  1828     039C  3901               	andlw	1
  1829     039D  00C3               	movwf	??_Rotate+2
  1830     039E  0A4A               	incf	Rotate@i,w
  1831     039F  2BA2               	goto	u914
  1832     03A0                     u915:
  1833     03A0  1003               	clrc
  1834     03A1  0DC3               	rlf	??_Rotate+2,f
  1835     03A2                     u914:
  1836     03A2  3EFF               	addlw	-1
  1837     03A3  1D03               	skipz
  1838     03A4  2BA0               	goto	u915
  1839     03A5  0843               	movf	??_Rotate+2,w
  1840     03A6  00C4               	movwf	??_Rotate+3
  1841     03A7  084E               	movf	Rotate@_i,w
  1842     03A8  074C               	addwf	Rotate@res,w
  1843     03A9  00C6               	movwf	??_Rotate+5
  1844     03AA  084D               	movf	Rotate@res+1,w
  1845     03AB  00C5               	movwf	??_Rotate+4
  1846     03AC  1803               	skipnc
  1847     03AD  0AC5               	incf	??_Rotate+4,f
  1848     03AE  1FCE               	btfss	Rotate@_i,7
  1849     03AF  2BB1               	goto	u920
  1850     03B0  03C5               	decf	??_Rotate+4,f
  1851     03B1                     u920:
  1852     03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1853     03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1854     03B3  0845               	movf	??_Rotate+4,w
  1855     03B4  00C7               	movwf	??_Rotate+6
  1856     03B5  0846               	movf	??_Rotate+5,w
  1857     03B6  0084               	movwf	4
  1858     03B7  1783               	bsf	3,7
  1859     03B8  1C47               	btfss	??_Rotate+6,0
  1860     03B9  1383               	bcf	3,7
  1861     03BA  0844               	movf	??_Rotate+3,w
  1862     03BB  0480               	iorwf	0,f
  1863     03BC                     l1504:
  1864                           
  1865                           ;shape.c: 63:             }
  1866     03BC  30FF               	movlw	255
  1867     03BD  07CA               	addwf	Rotate@i,f
  1868     03BE  1803               	skipnc
  1869     03BF  0ACB               	incf	Rotate@i+1,f
  1870     03C0  30FF               	movlw	255
  1871     03C1  07CB               	addwf	Rotate@i+1,f
  1872     03C2                     l1506:
  1873     03C2  3001               	movlw	1
  1874     03C3  07C8               	addwf	Rotate@x,f
  1875     03C4  1803               	skipnc
  1876     03C5  0AC9               	incf	Rotate@x+1,f
  1877     03C6  3000               	movlw	0
  1878     03C7  07C9               	addwf	Rotate@x+1,f
  1879     03C8  2B87               	goto	l1498
  1880     03C9                     l1510:
  1881                           
  1882                           ;shape.c: 64:         }
  1883     03C9  30FF               	movlw	255
  1884     03CA  07CE               	addwf	Rotate@_i,f
  1885     03CB  1803               	skipnc
  1886     03CC  0ACF               	incf	Rotate@_i+1,f
  1887     03CD  30FF               	movlw	255
  1888     03CE  07CF               	addwf	Rotate@_i+1,f
  1889     03CF  2B78               	goto	l1490
  1890     03D0                     l1514:
  1891                           
  1892                           ;shape.c: 65:         InsertResult(array_, res, countElemntArray);
  1893     03D0  083E               	movf	Rotate@array_,w
  1894     03D1  00F1               	movwf	InsertResult@array_
  1895     03D2  084C               	movf	Rotate@res,w
  1896     03D3  00F2               	movwf	InsertResult@res
  1897     03D4  084D               	movf	Rotate@res+1,w
  1898     03D5  00F3               	movwf	InsertResult@res+1
  1899     03D6  0840               	movf	Rotate@countElemntArray+1,w
  1900     03D7  00F5               	movwf	InsertResult@countElemntArray+1
  1901     03D8  083F               	movf	Rotate@countElemntArray,w
  1902     03D9  00F4               	movwf	InsertResult@countElemntArray
  1903     03DA  120A  118A  20E0  120A  118A  	fcall	_InsertResult
  1904     03DF                     l1516:
  1905                           
  1906                           ;shape.c: 67:     free(res);
  1907     03DF  1283               	bcf	3,5	;RP0=0, select bank0
  1908     03E0  1303               	bcf	3,6	;RP1=0, select bank0
  1909     03E1  084C               	movf	Rotate@res,w
  1910     03E2  00F1               	movwf	free@ptr
  1911     03E3  084D               	movf	Rotate@res+1,w
  1912     03E4  00F2               	movwf	free@ptr+1
  1913     03E5  120A  118A  2564  120A  118A  	fcall	_free
  1914     03EA                     l140:
  1915     03EA  0008               	return
  1916     03EB                     __end_of_Rotate:
  1917                           
  1918                           	psect	text7
  1919     0564                     __ptext7:	
  1920 ;; *************** function _free *****************
  1921 ;; Defined at:
  1922 ;;		line 67 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  ptr             2    0[COMMON] PTR void 
  1925 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  c               2   10[COMMON] PTR struct chunk
  1928 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1929 ;;  cptr            2    8[COMMON] PTR unsigned char 
  1930 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         2       0       0       0       0
  1941 ;;      Locals:         4       0       0       0       0
  1942 ;;      Temps:          6       0       0       0       0
  1943 ;;      Totals:        12       0       0       0       0
  1944 ;;Total ram usage:       12 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; This function calls:
  1947 ;;		Nothing
  1948 ;; This function is called by:
  1949 ;;		_Rotate
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953     0564                     _free:	
  1954                           ;psect for function _free
  1955                           
  1956     0564                     l1418:	
  1957                           ;incstack = 0
  1958                           ; Regs used in _free: [wreg-fsr0h+status,2+status,0+btemp+1]
  1959                           
  1960     0564  0871               	movf	free@ptr,w
  1961     0565  00F9               	movwf	free@cptr
  1962     0566  0872               	movf	free@ptr+1,w
  1963     0567  00FA               	movwf	free@cptr+1
  1964     0568  0871               	movf	free@ptr,w
  1965     0569  0472               	iorwf	free@ptr+1,w
  1966     056A  1D03               	btfss	3,2
  1967     056B  2D6D               	goto	u821
  1968     056C  2D6E               	goto	u820
  1969     056D                     u821:
  1970     056D  2D6F               	goto	l1422
  1971     056E                     u820:
  1972     056E  2E51               	goto	l725
  1973     056F                     l1422:
  1974     056F  30FE               	movlw	254
  1975     0570  00F3               	movwf	??_free
  1976     0571  0873               	movf	??_free,w
  1977     0572  0779               	addwf	free@cptr,w
  1978     0573  00FB               	movwf	free@c
  1979     0574  087A               	movf	free@cptr+1,w
  1980     0575  00F4               	movwf	??_free+1
  1981     0576  1803               	skipnc
  1982     0577  0AF4               	incf	??_free+1,f
  1983     0578  1BF3               	btfsc	??_free,7
  1984     0579  03F4               	decf	??_free+1,f
  1985     057A  0874               	movf	??_free+1,w
  1986     057B  00FC               	movwf	free@c+1
  1987     057C  1283               	bcf	3,5	;RP0=0, select bank0
  1988     057D  1303               	bcf	3,6	;RP1=0, select bank0
  1989     057E  086D               	movf	___freelist,w
  1990     057F  046E               	iorwf	___freelist+1,w
  1991     0580  1903               	btfsc	3,2
  1992     0581  2D83               	goto	u831
  1993     0582  2D84               	goto	u830
  1994     0583                     u831:
  1995     0583  2E40               	goto	l1444
  1996     0584                     u830:
  1997     0584                     l1424:
  1998     0584  087B               	movf	free@c,w
  1999     0585  0084               	movwf	4
  2000     0586  1783               	bsf	3,7
  2001     0587  1C7C               	btfss	free@c+1,0
  2002     0588  1383               	bcf	3,7
  2003     0589  0800               	movf	0,w
  2004     058A  0779               	addwf	free@cptr,w
  2005     058B  00F3               	movwf	??_free
  2006     058C  087A               	movf	free@cptr+1,w
  2007     058D  1803               	skipnc
  2008     058E  3E01               	addlw	1
  2009     058F  00F4               	movwf	??_free+1
  2010     0590  0874               	movf	??_free+1,w
  2011     0591  066E               	xorwf	___freelist+1,w
  2012     0592  1D03               	skipz
  2013     0593  2D96               	goto	u845
  2014     0594  0873               	movf	??_free,w
  2015     0595  066D               	xorwf	___freelist,w
  2016     0596                     u845:
  2017     0596  1D03               	skipz
  2018     0597  2D99               	goto	u841
  2019     0598  2D9A               	goto	u840
  2020     0599                     u841:
  2021     0599  2DE6               	goto	l1436
  2022     059A                     u840:
  2023     059A                     l1426:
  2024     059A  086D               	movf	___freelist,w
  2025     059B  3E02               	addlw	2
  2026     059C  00F3               	movwf	??_free
  2027     059D  086E               	movf	___freelist+1,w
  2028     059E  1803               	skipnc
  2029     059F  3E01               	addlw	1
  2030     05A0  3E00               	addlw	0
  2031     05A1  00F4               	movwf	??_free+1
  2032     05A2  0873               	movf	??_free,w
  2033     05A3  0084               	movwf	4
  2034     05A4  1783               	bsf	3,7
  2035     05A5  1C74               	btfss	??_free+1,0
  2036     05A6  1383               	bcf	3,7
  2037     05A7  0800               	movf	0,w
  2038     05A8  00F5               	movwf	??_free+2
  2039     05A9  0A84               	incf	4,f
  2040     05AA  0800               	movf	0,w
  2041     05AB  00F6               	movwf	??_free+3
  2042     05AC  087B               	movf	free@c,w
  2043     05AD  3E02               	addlw	2
  2044     05AE  00F7               	movwf	??_free+4
  2045     05AF  087C               	movf	free@c+1,w
  2046     05B0  1803               	skipnc
  2047     05B1  3E01               	addlw	1
  2048     05B2  3E00               	addlw	0
  2049     05B3  00F8               	movwf	??_free+5
  2050     05B4  0877               	movf	??_free+4,w
  2051     05B5  0084               	movwf	4
  2052     05B6  1783               	bsf	3,7
  2053     05B7  1C78               	btfss	??_free+5,0
  2054     05B8  1383               	bcf	3,7
  2055     05B9  0875               	movf	??_free+2,w
  2056     05BA  0080               	movwf	0
  2057     05BB  0876               	movf	??_free+3,w
  2058     05BC  0A84               	incf	4,f
  2059     05BD  0080               	movwf	0
  2060     05BE  0384               	decf	4,f
  2061     05BF                     l1428:
  2062     05BF  086D               	movf	___freelist,w
  2063     05C0  0084               	movwf	4
  2064     05C1  1783               	bsf	3,7
  2065     05C2  1C6E               	btfss	___freelist+1,0
  2066     05C3  1383               	bcf	3,7
  2067     05C4  0800               	movf	0,w
  2068     05C5  00F3               	movwf	??_free
  2069     05C6  0A84               	incf	4,f
  2070     05C7  0800               	movf	0,w
  2071     05C8  00F4               	movwf	??_free+1
  2072     05C9  0873               	movf	??_free,w
  2073     05CA  3E02               	addlw	2
  2074     05CB  00F5               	movwf	??_free+2
  2075     05CC  0874               	movf	??_free+1,w
  2076     05CD  1803               	skipnc
  2077     05CE  3E01               	addlw	1
  2078     05CF  3E00               	addlw	0
  2079     05D0  00F6               	movwf	??_free+3
  2080     05D1  087B               	movf	free@c,w
  2081     05D2  0084               	movwf	4
  2082     05D3  1783               	bsf	3,7
  2083     05D4  1C7C               	btfss	free@c+1,0
  2084     05D5  1383               	bcf	3,7
  2085     05D6  0875               	movf	??_free+2,w
  2086     05D7  0780               	addwf	0,f
  2087     05D8  0F84               	incfsz	4,f
  2088     05D9  0800               	movf	0,w
  2089     05DA  1803               	skipnc
  2090     05DB  0A00               	incf	0,w
  2091     05DC  00FF               	movwf	btemp+1
  2092     05DD  0876               	movf	??_free+3,w
  2093     05DE  077F               	addwf	btemp+1,w
  2094     05DF  0080               	movwf	0
  2095     05E0  0384               	decf	4,f
  2096     05E1                     l1430:
  2097     05E1  087B               	movf	free@c,w
  2098     05E2  00ED               	movwf	___freelist
  2099     05E3  087C               	movf	free@c+1,w
  2100     05E4  00EE               	movwf	___freelist+1
  2101     05E5  2E51               	goto	l725
  2102     05E6                     l1436:
  2103     05E6  086D               	movf	___freelist,w
  2104     05E7  0084               	movwf	4
  2105     05E8  1783               	bsf	3,7
  2106     05E9  1C6E               	btfss	___freelist+1,0
  2107     05EA  1383               	bcf	3,7
  2108     05EB  0800               	movf	0,w
  2109     05EC  00F3               	movwf	??_free
  2110     05ED  0A84               	incf	4,f
  2111     05EE  0800               	movf	0,w
  2112     05EF  00F4               	movwf	??_free+1
  2113     05F0  0873               	movf	??_free,w
  2114     05F1  076D               	addwf	___freelist,w
  2115     05F2  00F5               	movwf	??_free+2
  2116     05F3  0874               	movf	??_free+1,w
  2117     05F4  1803               	skipnc
  2118     05F5  0A74               	incf	??_free+1,w
  2119     05F6  076E               	addwf	___freelist+1,w
  2120     05F7  00F6               	movwf	??_free+3
  2121     05F8  0875               	movf	??_free+2,w
  2122     05F9  3E02               	addlw	2
  2123     05FA  00F7               	movwf	??_free+4
  2124     05FB  0876               	movf	??_free+3,w
  2125     05FC  1803               	skipnc
  2126     05FD  3E01               	addlw	1
  2127     05FE  3E00               	addlw	0
  2128     05FF  00F8               	movwf	??_free+5
  2129     0600  087C               	movf	free@c+1,w
  2130     0601  0678               	xorwf	??_free+5,w
  2131     0602  1D03               	skipz
  2132     0603  2E06               	goto	u855
  2133     0604  087B               	movf	free@c,w
  2134     0605  0677               	xorwf	??_free+4,w
  2135     0606                     u855:
  2136     0606  1D03               	skipz
  2137     0607  2E09               	goto	u851
  2138     0608  2E0A               	goto	u850
  2139     0609                     u851:
  2140     0609  2E2D               	goto	l1442
  2141     060A                     u850:
  2142     060A                     l1438:
  2143     060A  087B               	movf	free@c,w
  2144     060B  0084               	movwf	4
  2145     060C  1783               	bsf	3,7
  2146     060D  1C7C               	btfss	free@c+1,0
  2147     060E  1383               	bcf	3,7
  2148     060F  0800               	movf	0,w
  2149     0610  00F3               	movwf	??_free
  2150     0611  0A84               	incf	4,f
  2151     0612  0800               	movf	0,w
  2152     0613  00F4               	movwf	??_free+1
  2153     0614  0873               	movf	??_free,w
  2154     0615  3E02               	addlw	2
  2155     0616  00F5               	movwf	??_free+2
  2156     0617  0874               	movf	??_free+1,w
  2157     0618  1803               	skipnc
  2158     0619  3E01               	addlw	1
  2159     061A  3E00               	addlw	0
  2160     061B  00F6               	movwf	??_free+3
  2161     061C  086D               	movf	___freelist,w
  2162     061D  0084               	movwf	4
  2163     061E  1783               	bsf	3,7
  2164     061F  1C6E               	btfss	___freelist+1,0
  2165     0620  1383               	bcf	3,7
  2166     0621  0875               	movf	??_free+2,w
  2167     0622  0780               	addwf	0,f
  2168     0623  0F84               	incfsz	4,f
  2169     0624  0800               	movf	0,w
  2170     0625  1803               	skipnc
  2171     0626  0A00               	incf	0,w
  2172     0627  00FF               	movwf	btemp+1
  2173     0628  0876               	movf	??_free+3,w
  2174     0629  077F               	addwf	btemp+1,w
  2175     062A  0080               	movwf	0
  2176     062B  0384               	decf	4,f
  2177     062C  2E51               	goto	l725
  2178     062D                     l1442:
  2179     062D  087B               	movf	free@c,w
  2180     062E  3E02               	addlw	2
  2181     062F  00F3               	movwf	??_free
  2182     0630  087C               	movf	free@c+1,w
  2183     0631  1803               	skipnc
  2184     0632  3E01               	addlw	1
  2185     0633  3E00               	addlw	0
  2186     0634  00F4               	movwf	??_free+1
  2187     0635  0873               	movf	??_free,w
  2188     0636  0084               	movwf	4
  2189     0637  1783               	bsf	3,7
  2190     0638  1C74               	btfss	??_free+1,0
  2191     0639  1383               	bcf	3,7
  2192     063A  086D               	movf	___freelist,w
  2193     063B  0080               	movwf	0
  2194     063C  0A84               	incf	4,f
  2195     063D  086E               	movf	___freelist+1,w
  2196     063E  0080               	movwf	0
  2197     063F  2DE1               	goto	l1430
  2198     0640                     l1444:
  2199     0640  087B               	movf	free@c,w
  2200     0641  3E02               	addlw	2
  2201     0642  00F3               	movwf	??_free
  2202     0643  087C               	movf	free@c+1,w
  2203     0644  1803               	skipnc
  2204     0645  3E01               	addlw	1
  2205     0646  3E00               	addlw	0
  2206     0647  00F4               	movwf	??_free+1
  2207     0648  0873               	movf	??_free,w
  2208     0649  0084               	movwf	4
  2209     064A  1783               	bsf	3,7
  2210     064B  1C74               	btfss	??_free+1,0
  2211     064C  1383               	bcf	3,7
  2212     064D  0180               	clrf	0
  2213     064E  0A84               	incf	4,f
  2214     064F  0180               	clrf	0
  2215     0650  2DE1               	goto	l1430
  2216     0651                     l725:
  2217     0651  0008               	return
  2218     0652                     __end_of_free:
  2219                           
  2220                           	psect	text8
  2221     0196                     __ptext8:	
  2222 ;; *************** function _calloc *****************
  2223 ;; Defined at:
  2224 ;;		line 10 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_calloc.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  nmemb           2   24[BANK0 ] unsigned int 
  2227 ;;  size            2   26[BANK0 ] unsigned int 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  new_ptr         2   28[BANK0 ] PTR void 
  2230 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  2   24[BANK0 ] PTR void 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2240 ;;      Params:         0       4       0       0       0
  2241 ;;      Locals:         0       2       0       0       0
  2242 ;;      Temps:          0       0       0       0       0
  2243 ;;      Totals:         0       6       0       0       0
  2244 ;;Total ram usage:        6 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; Hardware stack levels required when called: 2
  2247 ;; This function calls:
  2248 ;;		___wmul
  2249 ;;		_malloc
  2250 ;;		_memset
  2251 ;; This function is called by:
  2252 ;;		_Rotate
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256     0196                     _calloc:	
  2257                           ;psect for function _calloc
  2258                           
  2259     0196                     l1400:	
  2260                           ;incstack = 0
  2261                           ; Regs used in _calloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2262                           
  2263     0196  1283               	bcf	3,5	;RP0=0, select bank0
  2264     0197  1303               	bcf	3,6	;RP1=0, select bank0
  2265     0198  0839               	movf	calloc@nmemb+1,w
  2266     0199  00F2               	movwf	___wmul@multiplier+1
  2267     019A  0838               	movf	calloc@nmemb,w
  2268     019B  00F1               	movwf	___wmul@multiplier
  2269     019C  083B               	movf	calloc@size+1,w
  2270     019D  00F4               	movwf	___wmul@multiplicand+1
  2271     019E  083A               	movf	calloc@size,w
  2272     019F  00F3               	movwf	___wmul@multiplicand
  2273     01A0  120A  118A  20BB  120A  118A  	fcall	___wmul
  2274     01A5  0872               	movf	?___wmul+1,w
  2275     01A6  00FA               	movwf	malloc@n+1
  2276     01A7  0871               	movf	?___wmul,w
  2277     01A8  00F9               	movwf	malloc@n
  2278     01A9  120A  118A  23EB  120A  118A  	fcall	_malloc
  2279     01AE  0879               	movf	?_malloc,w
  2280     01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2281     01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2282     01B1  00BC               	movwf	calloc@new_ptr
  2283     01B2  087A               	movf	?_malloc+1,w
  2284     01B3  00BD               	movwf	calloc@new_ptr+1
  2285     01B4                     l1402:
  2286     01B4  083C               	movf	calloc@new_ptr,w
  2287     01B5  043D               	iorwf	calloc@new_ptr+1,w
  2288     01B6  1903               	btfsc	3,2
  2289     01B7  29B9               	goto	u791
  2290     01B8  29BA               	goto	u790
  2291     01B9                     u791:
  2292     01B9  29D7               	goto	l1406
  2293     01BA                     u790:
  2294     01BA                     l1404:
  2295     01BA  083C               	movf	calloc@new_ptr,w
  2296     01BB  00F7               	movwf	memset@dest
  2297     01BC  083D               	movf	calloc@new_ptr+1,w
  2298     01BD  00F8               	movwf	memset@dest+1
  2299     01BE  3000               	movlw	0
  2300     01BF  00F9               	movwf	memset@c
  2301     01C0  00FA               	movwf	memset@c+1
  2302     01C1  0839               	movf	calloc@nmemb+1,w
  2303     01C2  00F2               	movwf	___wmul@multiplier+1
  2304     01C3  0838               	movf	calloc@nmemb,w
  2305     01C4  00F1               	movwf	___wmul@multiplier
  2306     01C5  083B               	movf	calloc@size+1,w
  2307     01C6  00F4               	movwf	___wmul@multiplicand+1
  2308     01C7  083A               	movf	calloc@size,w
  2309     01C8  00F3               	movwf	___wmul@multiplicand
  2310     01C9  120A  118A  20BB  120A  118A  	fcall	___wmul
  2311     01CE  0872               	movf	?___wmul+1,w
  2312     01CF  00FC               	movwf	memset@n+1
  2313     01D0  0871               	movf	?___wmul,w
  2314     01D1  00FB               	movwf	memset@n
  2315     01D2  120A  118A  209A  120A  118A  	fcall	_memset
  2316     01D7                     l1406:
  2317     01D7  1283               	bcf	3,5	;RP0=0, select bank0
  2318     01D8  1303               	bcf	3,6	;RP1=0, select bank0
  2319     01D9  083C               	movf	calloc@new_ptr,w
  2320     01DA  00B8               	movwf	?_calloc
  2321     01DB  083D               	movf	calloc@new_ptr+1,w
  2322     01DC  00B9               	movwf	?_calloc+1
  2323     01DD                     l702:
  2324     01DD  0008               	return
  2325     01DE                     __end_of_calloc:
  2326                           
  2327                           	psect	text9
  2328     009A                     __ptext9:	
  2329 ;; *************** function _memset *****************
  2330 ;; Defined at:
  2331 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  dest            2    6[COMMON] PTR void 
  2334 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2335 ;;  c               2    8[COMMON] int 
  2336 ;;  n               2   10[COMMON] unsigned int 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  p               2    0[BANK0 ] PTR unsigned char 
  2339 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  2    6[COMMON] PTR void 
  2342 ;; Registers used:
  2343 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2349 ;;      Params:         6       0       0       0       0
  2350 ;;      Locals:         0       2       0       0       0
  2351 ;;      Temps:          0       0       0       0       0
  2352 ;;      Totals:         6       2       0       0       0
  2353 ;;Total ram usage:        8 bytes
  2354 ;; Hardware stack levels used: 1
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_calloc
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362     009A                     _memset:	
  2363                           ;psect for function _memset
  2364                           
  2365     009A                     l1366:	
  2366                           ;incstack = 0
  2367                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2368                           
  2369     009A  0877               	movf	memset@dest,w
  2370     009B  1283               	bcf	3,5	;RP0=0, select bank0
  2371     009C  1303               	bcf	3,6	;RP1=0, select bank0
  2372     009D  00A0               	movwf	memset@p
  2373     009E  0878               	movf	memset@dest+1,w
  2374     009F  00A1               	movwf	memset@p+1
  2375     00A0  28AC               	goto	l1372
  2376     00A1                     l1368:
  2377     00A1  0820               	movf	memset@p,w
  2378     00A2  0084               	movwf	4
  2379     00A3  1783               	bsf	3,7
  2380     00A4  1C21               	btfss	memset@p+1,0
  2381     00A5  1383               	bcf	3,7
  2382     00A6  0879               	movf	memset@c,w
  2383     00A7  0080               	movwf	0
  2384     00A8                     l1370:
  2385     00A8  3001               	movlw	1
  2386     00A9  07A0               	addwf	memset@p,f
  2387     00AA  1803               	skipnc
  2388     00AB  0AA1               	incf	memset@p+1,f
  2389     00AC                     l1372:
  2390     00AC  3001               	movlw	1
  2391     00AD  02FB               	subwf	memset@n,f
  2392     00AE  3000               	movlw	0
  2393     00AF  1C03               	skipc
  2394     00B0  03FC               	decf	memset@n+1,f
  2395     00B1  02FC               	subwf	memset@n+1,f
  2396     00B2  0A7B               	incf	memset@n,w
  2397     00B3  1D03               	skipz
  2398     00B4  28B9               	goto	u751
  2399     00B5  0A7C               	incf	memset@n+1,w
  2400     00B6  1D03               	btfss	3,2
  2401     00B7  28B9               	goto	u751
  2402     00B8  28BA               	goto	u750
  2403     00B9                     u751:
  2404     00B9  28A1               	goto	l1368
  2405     00BA                     u750:
  2406     00BA                     l778:
  2407     00BA  0008               	return
  2408     00BB                     __end_of_memset:
  2409                           
  2410                           	psect	text10
  2411     03EB                     __ptext10:	
  2412 ;; *************** function _malloc *****************
  2413 ;; Defined at:
  2414 ;;		line 16 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_malloc.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;  n               2    8[COMMON] unsigned int 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  sz              2   16[BANK0 ] PTR unsigned int 
  2419 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2420 ;;  new             2   22[BANK0 ] PTR unsigned char 
  2421 ;;		 -> __heap_hi(0), NULL(0), 
  2422 ;;  m               2   14[BANK0 ] unsigned int 
  2423 ;;  p               2   20[BANK0 ] PTR void 
  2424 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2425 ;;  size            2   18[BANK0 ] unsigned int 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  2    8[COMMON] PTR void 
  2428 ;; Registers used:
  2429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2435 ;;      Params:         2       0       0       0       0
  2436 ;;      Locals:         0      10       0       0       0
  2437 ;;      Temps:          2       0       0       0       0
  2438 ;;      Totals:         4      10       0       0       0
  2439 ;;Total ram usage:       14 bytes
  2440 ;; Hardware stack levels used: 1
  2441 ;; Hardware stack levels required when called: 1
  2442 ;; This function calls:
  2443 ;;		___expand_heap
  2444 ;;		___simple_search_fl
  2445 ;; This function is called by:
  2446 ;;		_calloc
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450     03EB                     _malloc:	
  2451                           ;psect for function _malloc
  2452                           
  2453     03EB                     l1314:	
  2454                           ;incstack = 0
  2455                           ; Regs used in _malloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2456                           
  2457     03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2458     03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2459     03ED  01B2               	clrf	malloc@size
  2460     03EE  01B3               	clrf	malloc@size+1
  2461     03EF                     l1316:
  2462     03EF  0879               	movf	malloc@n,w
  2463     03F0  047A               	iorwf	malloc@n+1,w
  2464     03F1  1D03               	btfss	3,2
  2465     03F2  2BF4               	goto	u681
  2466     03F3  2BF5               	goto	u680
  2467     03F4                     u681:
  2468     03F4  2BFB               	goto	l745
  2469     03F5                     u680:
  2470     03F5                     l1318:
  2471     03F5  3001               	movlw	1
  2472     03F6  07F9               	addwf	malloc@n,f
  2473     03F7  1803               	skipnc
  2474     03F8  0AFA               	incf	malloc@n+1,f
  2475     03F9  3000               	movlw	0
  2476     03FA  07FA               	addwf	malloc@n+1,f
  2477     03FB                     l745:
  2478     03FB  3000               	movlw	0
  2479     03FC  027A               	subwf	malloc@n+1,w
  2480     03FD  3002               	movlw	2
  2481     03FE  1903               	skipnz
  2482     03FF  0279               	subwf	malloc@n,w
  2483     0400  1803               	skipnc
  2484     0401  2C03               	goto	u691
  2485     0402  2C04               	goto	u690
  2486     0403                     u691:
  2487     0403  2C09               	goto	l1322
  2488     0404                     u690:
  2489     0404                     l1320:
  2490     0404  3002               	movlw	2
  2491     0405  00F9               	movwf	malloc@n
  2492     0406  3000               	movlw	0
  2493     0407  00FA               	movwf	malloc@n+1
  2494     0408  2C21               	goto	l1330
  2495     0409                     l1322:
  2496     0409  087A               	movf	malloc@n+1,w
  2497     040A  00FC               	movwf	??_malloc+1
  2498     040B  0879               	movf	malloc@n,w
  2499     040C  00FB               	movwf	??_malloc
  2500     040D  09FB               	comf	??_malloc,f
  2501     040E  09FC               	comf	??_malloc+1,f
  2502     040F  3000               	movlw	0
  2503     0410  027C               	subwf	??_malloc+1,w
  2504     0411  3002               	movlw	2
  2505     0412  1903               	skipnz
  2506     0413  027B               	subwf	??_malloc,w
  2507     0414  1803               	skipnc
  2508     0415  2C17               	goto	u701
  2509     0416  2C18               	goto	u700
  2510     0417                     u701:
  2511     0417  2C21               	goto	l1330
  2512     0418                     u700:
  2513     0418                     l1324:
  2514     0418  300C               	movlw	12
  2515     0419  1683               	bsf	3,5	;RP0=1, select bank1
  2516     041A  1303               	bcf	3,6	;RP1=0, select bank1
  2517     041B  00A4               	movwf	_errno^(0+128)
  2518     041C  3000               	movlw	0
  2519     041D  00A5               	movwf	(_errno^(0+128)+1)
  2520     041E                     l1326:
  2521     041E  01F9               	clrf	?_malloc
  2522     041F  01FA               	clrf	?_malloc+1
  2523     0420  2C9C               	goto	l749
  2524     0421                     l1330:
  2525     0421                     l1332:
  2526     0421  087A               	movf	malloc@n+1,w
  2527     0422  00F2               	movwf	___simple_search_fl@n+1
  2528     0423  0879               	movf	malloc@n,w
  2529     0424  00F1               	movwf	___simple_search_fl@n
  2530     0425  120A  118A  2652  120A  118A  	fcall	___simple_search_fl
  2531     042A  0871               	movf	?___simple_search_fl,w
  2532     042B  1283               	bcf	3,5	;RP0=0, select bank0
  2533     042C  1303               	bcf	3,6	;RP1=0, select bank0
  2534     042D  00B4               	movwf	malloc@p
  2535     042E  0872               	movf	?___simple_search_fl+1,w
  2536     042F  00B5               	movwf	malloc@p+1
  2537     0430                     l1334:
  2538     0430  0834               	movf	malloc@p,w
  2539     0431  0435               	iorwf	malloc@p+1,w
  2540     0432  1D03               	btfss	3,2
  2541     0433  2C35               	goto	u711
  2542     0434  2C36               	goto	u710
  2543     0435                     u711:
  2544     0435  2C98               	goto	l1362
  2545     0436                     u710:
  2546     0436                     l1336:
  2547     0436  086B               	movf	malloc@cur,w
  2548     0437  0269               	subwf	malloc@end,w
  2549     0438  00FB               	movwf	??_malloc
  2550     0439  086C               	movf	malloc@cur+1,w
  2551     043A  1C03               	skipc
  2552     043B  0A6C               	incf	malloc@cur+1,w
  2553     043C  026A               	subwf	malloc@end+1,w
  2554     043D  00FC               	movwf	??_malloc+1
  2555     043E  087A               	movf	malloc@n+1,w
  2556     043F  027C               	subwf	??_malloc+1,w
  2557     0440  1D03               	skipz
  2558     0441  2C44               	goto	u725
  2559     0442  0879               	movf	malloc@n,w
  2560     0443  027B               	subwf	??_malloc,w
  2561     0444                     u725:
  2562     0444  1803               	skipnc
  2563     0445  2C47               	goto	u721
  2564     0446  2C48               	goto	u720
  2565     0447                     u721:
  2566     0447  2C79               	goto	l751
  2567     0448                     u720:
  2568     0448                     l1338:
  2569     0448  0879               	movf	malloc@n,w
  2570     0449  3E02               	addlw	2
  2571     044A  00AE               	movwf	malloc@m
  2572     044B  087A               	movf	malloc@n+1,w
  2573     044C  1803               	skipnc
  2574     044D  3E01               	addlw	1
  2575     044E  3E00               	addlw	0
  2576     044F  00AF               	movwf	malloc@m+1
  2577     0450                     l1340:
  2578     0450  302E               	movlw	(low (malloc@m| 0))& (0+255)
  2579     0451  00F1               	movwf	___expand_heap@pn
  2580     0452  120A  118A  21DE  120A  118A  	fcall	___expand_heap
  2581     0457  0871               	movf	?___expand_heap,w
  2582     0458  1283               	bcf	3,5	;RP0=0, select bank0
  2583     0459  1303               	bcf	3,6	;RP1=0, select bank0
  2584     045A  00B6               	movwf	malloc@new
  2585     045B  0872               	movf	?___expand_heap+1,w
  2586     045C  00B7               	movwf	malloc@new+1
  2587     045D                     l1342:
  2588     045D  0836               	movf	malloc@new,w
  2589     045E  0437               	iorwf	malloc@new+1,w
  2590     045F  1D03               	btfss	3,2
  2591     0460  2C62               	goto	u731
  2592     0461  2C63               	goto	u730
  2593     0462                     u731:
  2594     0462  2C64               	goto	l1348
  2595     0463                     u730:
  2596     0463  2C1E               	goto	l1326
  2597     0464                     l1348:
  2598     0464  086A               	movf	malloc@end+1,w
  2599     0465  0637               	xorwf	malloc@new+1,w
  2600     0466  1D03               	skipz
  2601     0467  2C6A               	goto	u745
  2602     0468  0869               	movf	malloc@end,w
  2603     0469  0636               	xorwf	malloc@new,w
  2604     046A                     u745:
  2605     046A  1903               	skipnz
  2606     046B  2C6D               	goto	u741
  2607     046C  2C6E               	goto	u740
  2608     046D                     u741:
  2609     046D  2C72               	goto	l753
  2610     046E                     u740:
  2611     046E                     l1350:
  2612     046E  0836               	movf	malloc@new,w
  2613     046F  00EB               	movwf	malloc@cur
  2614     0470  0837               	movf	malloc@new+1,w
  2615     0471  00EC               	movwf	malloc@cur+1
  2616     0472                     l753:
  2617     0472  082E               	movf	malloc@m,w
  2618     0473  0736               	addwf	malloc@new,w
  2619     0474  00E9               	movwf	malloc@end
  2620     0475  0837               	movf	malloc@new+1,w
  2621     0476  1803               	skipnc
  2622     0477  3E01               	addlw	1
  2623     0478  00EA               	movwf	malloc@end+1
  2624     0479                     l751:
  2625     0479  086B               	movf	malloc@cur,w
  2626     047A  00B4               	movwf	malloc@p
  2627     047B  086C               	movf	malloc@cur+1,w
  2628     047C  00B5               	movwf	malloc@p+1
  2629     047D                     l1352:
  2630     047D  0834               	movf	malloc@p,w
  2631     047E  00B0               	movwf	malloc@sz
  2632     047F  0835               	movf	malloc@p+1,w
  2633     0480  00B1               	movwf	malloc@sz+1
  2634     0481                     l1354:
  2635     0481  0830               	movf	malloc@sz,w
  2636     0482  0084               	movwf	4
  2637     0483  1783               	bsf	3,7
  2638     0484  1C31               	btfss	malloc@sz+1,0
  2639     0485  1383               	bcf	3,7
  2640     0486  0879               	movf	malloc@n,w
  2641     0487  0080               	movwf	0
  2642     0488  0A84               	incf	4,f
  2643     0489  087A               	movf	malloc@n+1,w
  2644     048A  0080               	movwf	0
  2645     048B                     l1356:
  2646     048B  3002               	movlw	2
  2647     048C  07B0               	addwf	malloc@sz,f
  2648     048D  1803               	skipnc
  2649     048E  0AB1               	incf	malloc@sz+1,f
  2650     048F                     l1358:
  2651     048F  0830               	movf	malloc@sz,w
  2652     0490  00B4               	movwf	malloc@p
  2653     0491  0831               	movf	malloc@sz+1,w
  2654     0492  00B5               	movwf	malloc@p+1
  2655     0493                     l1360:
  2656     0493  0879               	movf	malloc@n,w
  2657     0494  3E02               	addlw	2
  2658     0495  07EB               	addwf	malloc@cur,f
  2659     0496  1803               	skipnc
  2660     0497  0AEC               	incf	malloc@cur+1,f
  2661     0498                     l1362:
  2662     0498  0834               	movf	malloc@p,w
  2663     0499  00F9               	movwf	?_malloc
  2664     049A  0835               	movf	malloc@p+1,w
  2665     049B  00FA               	movwf	?_malloc+1
  2666     049C                     l749:
  2667     049C  0008               	return
  2668     049D                     __end_of_malloc:
  2669                           
  2670                           	psect	text11
  2671     0652                     __ptext11:	
  2672 ;; *************** function ___simple_search_fl *****************
  2673 ;; Defined at:
  2674 ;;		line 19 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  n               2    0[COMMON] unsigned int 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  split           2    4[BANK0 ] PTR struct chunk
  2679 ;;		 -> __heap_hi$.$next(2), NULL(0), 
  2680 ;;  remaining_si    2    0[BANK0 ] unsigned int 
  2681 ;;  next            2    8[BANK0 ] PTR struct chunk
  2682 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2683 ;;  best            2   12[BANK0 ] PTR struct chunk
  2684 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2685 ;;  c               2   10[BANK0 ] PTR struct chunk
  2686 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2687 ;;  last            2    6[BANK0 ] PTR struct chunk
  2688 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2689 ;;  best_last       2    2[BANK0 ] PTR struct chunk
  2690 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  2    0[COMMON] PTR void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2700 ;;      Params:         2       0       0       0       0
  2701 ;;      Locals:         0      14       0       0       0
  2702 ;;      Temps:          6       0       0       0       0
  2703 ;;      Totals:         8      14       0       0       0
  2704 ;;Total ram usage:       22 bytes
  2705 ;; Hardware stack levels used: 1
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_malloc
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713     0652                     ___simple_search_fl:	
  2714                           ;psect for function ___simple_search_fl
  2715                           
  2716     0652                     l1208:	
  2717                           ;incstack = 0
  2718                           ; Regs used in ___simple_search_fl: [wreg-fsr0h+status,2+status,0]
  2719                           
  2720     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2721     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2722     0654  01AC               	clrf	___simple_search_fl@best
  2723     0655  01AD               	clrf	___simple_search_fl@best+1
  2724     0656  01A2               	clrf	___simple_search_fl@best_last
  2725     0657  01A3               	clrf	___simple_search_fl@best_last+1
  2726     0658  01A6               	clrf	___simple_search_fl@last
  2727     0659  01A7               	clrf	___simple_search_fl@last+1
  2728     065A                     l1210:
  2729     065A  086D               	movf	___freelist,w
  2730     065B  046E               	iorwf	___freelist+1,w
  2731     065C  1D03               	btfss	3,2
  2732     065D  2E5F               	goto	u501
  2733     065E  2E60               	goto	u500
  2734     065F                     u501:
  2735     065F  2E63               	goto	l1216
  2736     0660                     u500:
  2737     0660                     l1212:
  2738     0660  01F1               	clrf	?___simple_search_fl
  2739     0661  01F2               	clrf	?___simple_search_fl+1
  2740     0662  2FD7               	goto	l708
  2741     0663                     l1216:
  2742     0663  086D               	movf	___freelist,w
  2743     0664  00AA               	movwf	___simple_search_fl@c
  2744     0665  086E               	movf	___freelist+1,w
  2745     0666  00AB               	movwf	___simple_search_fl@c+1
  2746     0667  2F1C               	goto	l1242
  2747     0668                     l1218:
  2748     0668  082A               	movf	___simple_search_fl@c,w
  2749     0669  0084               	movwf	4
  2750     066A  1783               	bsf	3,7
  2751     066B  1C2B               	btfss	___simple_search_fl@c+1,0
  2752     066C  1383               	bcf	3,7
  2753     066D  0800               	movf	0,w
  2754     066E  00F3               	movwf	??___simple_search_fl
  2755     066F  0A84               	incf	4,f
  2756     0670  0800               	movf	0,w
  2757     0671  00F4               	movwf	??___simple_search_fl+1
  2758     0672  0872               	movf	___simple_search_fl@n+1,w
  2759     0673  0674               	xorwf	??___simple_search_fl+1,w
  2760     0674  1D03               	skipz
  2761     0675  2E78               	goto	u515
  2762     0676  0871               	movf	___simple_search_fl@n,w
  2763     0677  0673               	xorwf	??___simple_search_fl,w
  2764     0678                     u515:
  2765     0678  1D03               	skipz
  2766     0679  2E7B               	goto	u511
  2767     067A  2E7C               	goto	u510
  2768     067B                     u511:
  2769     067B  2EC4               	goto	l1230
  2770     067C                     u510:
  2771     067C                     l1220:
  2772     067C  0826               	movf	___simple_search_fl@last,w
  2773     067D  0427               	iorwf	___simple_search_fl@last+1,w
  2774     067E  1903               	btfsc	3,2
  2775     067F  2E81               	goto	u521
  2776     0680  2E82               	goto	u520
  2777     0681                     u521:
  2778     0681  2EA8               	goto	l1224
  2779     0682                     u520:
  2780     0682                     l1222:
  2781     0682  082A               	movf	___simple_search_fl@c,w
  2782     0683  3E02               	addlw	2
  2783     0684  00F3               	movwf	??___simple_search_fl
  2784     0685  082B               	movf	___simple_search_fl@c+1,w
  2785     0686  1803               	skipnc
  2786     0687  3E01               	addlw	1
  2787     0688  3E00               	addlw	0
  2788     0689  00F4               	movwf	??___simple_search_fl+1
  2789     068A  0873               	movf	??___simple_search_fl,w
  2790     068B  0084               	movwf	4
  2791     068C  1783               	bsf	3,7
  2792     068D  1C74               	btfss	??___simple_search_fl+1,0
  2793     068E  1383               	bcf	3,7
  2794     068F  0800               	movf	0,w
  2795     0690  00F5               	movwf	??___simple_search_fl+2
  2796     0691  0A84               	incf	4,f
  2797     0692  0800               	movf	0,w
  2798     0693  00F6               	movwf	??___simple_search_fl+3
  2799     0694  0826               	movf	___simple_search_fl@last,w
  2800     0695  3E02               	addlw	2
  2801     0696  00F7               	movwf	??___simple_search_fl+4
  2802     0697  0827               	movf	___simple_search_fl@last+1,w
  2803     0698  1803               	skipnc
  2804     0699  3E01               	addlw	1
  2805     069A  3E00               	addlw	0
  2806     069B  00F8               	movwf	??___simple_search_fl+5
  2807     069C  0877               	movf	??___simple_search_fl+4,w
  2808     069D  0084               	movwf	4
  2809     069E  1783               	bsf	3,7
  2810     069F  1C78               	btfss	??___simple_search_fl+5,0
  2811     06A0  1383               	bcf	3,7
  2812     06A1  0875               	movf	??___simple_search_fl+2,w
  2813     06A2  0080               	movwf	0
  2814     06A3  0876               	movf	??___simple_search_fl+3,w
  2815     06A4  0A84               	incf	4,f
  2816     06A5  0080               	movwf	0
  2817     06A6  0384               	decf	4,f
  2818     06A7  2EBB               	goto	l1226
  2819     06A8                     l1224:
  2820     06A8  082A               	movf	___simple_search_fl@c,w
  2821     06A9  3E02               	addlw	2
  2822     06AA  00F3               	movwf	??___simple_search_fl
  2823     06AB  082B               	movf	___simple_search_fl@c+1,w
  2824     06AC  1803               	skipnc
  2825     06AD  3E01               	addlw	1
  2826     06AE  3E00               	addlw	0
  2827     06AF  00F4               	movwf	??___simple_search_fl+1
  2828     06B0  0873               	movf	??___simple_search_fl,w
  2829     06B1  0084               	movwf	4
  2830     06B2  1783               	bsf	3,7
  2831     06B3  1C74               	btfss	??___simple_search_fl+1,0
  2832     06B4  1383               	bcf	3,7
  2833     06B5  0800               	movf	0,w
  2834     06B6  00ED               	movwf	___freelist
  2835     06B7  0A84               	incf	4,f
  2836     06B8  0800               	movf	0,w
  2837     06B9  0384               	decf	4,f
  2838     06BA  00EE               	movwf	___freelist+1
  2839     06BB                     l1226:
  2840     06BB  082A               	movf	___simple_search_fl@c,w
  2841     06BC  3E02               	addlw	2
  2842     06BD  00F1               	movwf	?___simple_search_fl
  2843     06BE  082B               	movf	___simple_search_fl@c+1,w
  2844     06BF  1803               	skipnc
  2845     06C0  3E01               	addlw	1
  2846     06C1  3E00               	addlw	0
  2847     06C2  00F2               	movwf	?___simple_search_fl+1
  2848     06C3  2FD7               	goto	l708
  2849     06C4                     l1230:
  2850     06C4  082A               	movf	___simple_search_fl@c,w
  2851     06C5  0084               	movwf	4
  2852     06C6  1783               	bsf	3,7
  2853     06C7  1C2B               	btfss	___simple_search_fl@c+1,0
  2854     06C8  1383               	bcf	3,7
  2855     06C9  0800               	movf	0,w
  2856     06CA  00F3               	movwf	??___simple_search_fl
  2857     06CB  0A84               	incf	4,f
  2858     06CC  0800               	movf	0,w
  2859     06CD  00F4               	movwf	??___simple_search_fl+1
  2860     06CE  0874               	movf	??___simple_search_fl+1,w
  2861     06CF  0272               	subwf	___simple_search_fl@n+1,w
  2862     06D0  1D03               	skipz
  2863     06D1  2ED4               	goto	u535
  2864     06D2  0873               	movf	??___simple_search_fl,w
  2865     06D3  0271               	subwf	___simple_search_fl@n,w
  2866     06D4                     u535:
  2867     06D4  1803               	skipnc
  2868     06D5  2ED7               	goto	u531
  2869     06D6  2ED8               	goto	u530
  2870     06D7                     u531:
  2871     06D7  2F05               	goto	l716
  2872     06D8                     u530:
  2873     06D8                     l1232:
  2874     06D8  082C               	movf	___simple_search_fl@best,w
  2875     06D9  042D               	iorwf	___simple_search_fl@best+1,w
  2876     06DA  1903               	btfsc	3,2
  2877     06DB  2EDD               	goto	u541
  2878     06DC  2EDE               	goto	u540
  2879     06DD                     u541:
  2880     06DD  2EFD               	goto	l1238
  2881     06DE                     u540:
  2882     06DE                     l1234:
  2883     06DE  082C               	movf	___simple_search_fl@best,w
  2884     06DF  0084               	movwf	4
  2885     06E0  1783               	bsf	3,7
  2886     06E1  1C2D               	btfss	___simple_search_fl@best+1,0
  2887     06E2  1383               	bcf	3,7
  2888     06E3  0800               	movf	0,w
  2889     06E4  00F3               	movwf	??___simple_search_fl
  2890     06E5  0A84               	incf	4,f
  2891     06E6  0800               	movf	0,w
  2892     06E7  00F4               	movwf	??___simple_search_fl+1
  2893     06E8  082A               	movf	___simple_search_fl@c,w
  2894     06E9  0084               	movwf	4
  2895     06EA  1783               	bsf	3,7
  2896     06EB  1C2B               	btfss	___simple_search_fl@c+1,0
  2897     06EC  1383               	bcf	3,7
  2898     06ED  0800               	movf	0,w
  2899     06EE  00F5               	movwf	??___simple_search_fl+2
  2900     06EF  0A84               	incf	4,f
  2901     06F0  0800               	movf	0,w
  2902     06F1  00F6               	movwf	??___simple_search_fl+3
  2903     06F2  0874               	movf	??___simple_search_fl+1,w
  2904     06F3  0276               	subwf	??___simple_search_fl+3,w
  2905     06F4  1D03               	skipz
  2906     06F5  2EF8               	goto	u555
  2907     06F6  0873               	movf	??___simple_search_fl,w
  2908     06F7  0275               	subwf	??___simple_search_fl+2,w
  2909     06F8                     u555:
  2910     06F8  1C03               	skipc
  2911     06F9  2EFB               	goto	u551
  2912     06FA  2EFC               	goto	u550
  2913     06FB                     u551:
  2914     06FB  2EFD               	goto	l1238
  2915     06FC                     u550:
  2916     06FC  2F05               	goto	l716
  2917     06FD                     l1238:
  2918     06FD  082A               	movf	___simple_search_fl@c,w
  2919     06FE  00AC               	movwf	___simple_search_fl@best
  2920     06FF  082B               	movf	___simple_search_fl@c+1,w
  2921     0700  00AD               	movwf	___simple_search_fl@best+1
  2922     0701  0826               	movf	___simple_search_fl@last,w
  2923     0702  00A2               	movwf	___simple_search_fl@best_last
  2924     0703  0827               	movf	___simple_search_fl@last+1,w
  2925     0704  00A3               	movwf	___simple_search_fl@best_last+1
  2926     0705                     l716:
  2927     0705  082A               	movf	___simple_search_fl@c,w
  2928     0706  00A6               	movwf	___simple_search_fl@last
  2929     0707  082B               	movf	___simple_search_fl@c+1,w
  2930     0708  00A7               	movwf	___simple_search_fl@last+1
  2931     0709                     l1240:
  2932     0709  082A               	movf	___simple_search_fl@c,w
  2933     070A  3E02               	addlw	2
  2934     070B  00F3               	movwf	??___simple_search_fl
  2935     070C  082B               	movf	___simple_search_fl@c+1,w
  2936     070D  1803               	skipnc
  2937     070E  3E01               	addlw	1
  2938     070F  3E00               	addlw	0
  2939     0710  00F4               	movwf	??___simple_search_fl+1
  2940     0711  0873               	movf	??___simple_search_fl,w
  2941     0712  0084               	movwf	4
  2942     0713  1783               	bsf	3,7
  2943     0714  1C74               	btfss	??___simple_search_fl+1,0
  2944     0715  1383               	bcf	3,7
  2945     0716  0800               	movf	0,w
  2946     0717  00AA               	movwf	___simple_search_fl@c
  2947     0718  0A84               	incf	4,f
  2948     0719  0800               	movf	0,w
  2949     071A  0384               	decf	4,f
  2950     071B  00AB               	movwf	___simple_search_fl@c+1
  2951     071C                     l1242:
  2952     071C  082A               	movf	___simple_search_fl@c,w
  2953     071D  042B               	iorwf	___simple_search_fl@c+1,w
  2954     071E  1D03               	btfss	3,2
  2955     071F  2F21               	goto	u561
  2956     0720  2F22               	goto	u560
  2957     0721                     u561:
  2958     0721  2E68               	goto	l1218
  2959     0722                     u560:
  2960     0722                     l1244:
  2961     0722  082C               	movf	___simple_search_fl@best,w
  2962     0723  042D               	iorwf	___simple_search_fl@best+1,w
  2963     0724  1903               	btfsc	3,2
  2964     0725  2F27               	goto	u571
  2965     0726  2F28               	goto	u570
  2966     0727                     u571:
  2967     0727  2E60               	goto	l1212
  2968     0728                     u570:
  2969     0728                     l1246:
  2970     0728  082C               	movf	___simple_search_fl@best,w
  2971     0729  3E02               	addlw	2
  2972     072A  00F3               	movwf	??___simple_search_fl
  2973     072B  082D               	movf	___simple_search_fl@best+1,w
  2974     072C  1803               	skipnc
  2975     072D  3E01               	addlw	1
  2976     072E  3E00               	addlw	0
  2977     072F  00F4               	movwf	??___simple_search_fl+1
  2978     0730  0873               	movf	??___simple_search_fl,w
  2979     0731  0084               	movwf	4
  2980     0732  1783               	bsf	3,7
  2981     0733  1C74               	btfss	??___simple_search_fl+1,0
  2982     0734  1383               	bcf	3,7
  2983     0735  0800               	movf	0,w
  2984     0736  00A8               	movwf	___simple_search_fl@next
  2985     0737  0A84               	incf	4,f
  2986     0738  0800               	movf	0,w
  2987     0739  0384               	decf	4,f
  2988     073A  00A9               	movwf	___simple_search_fl@next+1
  2989     073B  082C               	movf	___simple_search_fl@best,w
  2990     073C  0084               	movwf	4
  2991     073D  1783               	bsf	3,7
  2992     073E  1C2D               	btfss	___simple_search_fl@best+1,0
  2993     073F  1383               	bcf	3,7
  2994     0740  0800               	movf	0,w
  2995     0741  00F3               	movwf	??___simple_search_fl
  2996     0742  0A84               	incf	4,f
  2997     0743  0800               	movf	0,w
  2998     0744  00F4               	movwf	??___simple_search_fl+1
  2999     0745  0871               	movf	___simple_search_fl@n,w
  3000     0746  0273               	subwf	??___simple_search_fl,w
  3001     0747  00F5               	movwf	??___simple_search_fl+2
  3002     0748  0872               	movf	___simple_search_fl@n+1,w
  3003     0749  1C03               	skipc
  3004     074A  0A72               	incf	___simple_search_fl@n+1,w
  3005     074B  0274               	subwf	??___simple_search_fl+1,w
  3006     074C  00F6               	movwf	??___simple_search_fl+3
  3007     074D  3000               	movlw	0
  3008     074E  0276               	subwf	??___simple_search_fl+3,w
  3009     074F  3005               	movlw	5
  3010     0750  1903               	skipnz
  3011     0751  0275               	subwf	??___simple_search_fl+2,w
  3012     0752  1C03               	skipc
  3013     0753  2F55               	goto	u581
  3014     0754  2F56               	goto	u580
  3015     0755                     u581:
  3016     0755  2FAE               	goto	l719
  3017     0756                     u580:
  3018     0756                     l1248:
  3019     0756  082C               	movf	___simple_search_fl@best,w
  3020     0757  0084               	movwf	4
  3021     0758  1783               	bsf	3,7
  3022     0759  1C2D               	btfss	___simple_search_fl@best+1,0
  3023     075A  1383               	bcf	3,7
  3024     075B  0800               	movf	0,w
  3025     075C  00F3               	movwf	??___simple_search_fl
  3026     075D  0A84               	incf	4,f
  3027     075E  0800               	movf	0,w
  3028     075F  00F4               	movwf	??___simple_search_fl+1
  3029     0760  0871               	movf	___simple_search_fl@n,w
  3030     0761  0273               	subwf	??___simple_search_fl,w
  3031     0762  00F5               	movwf	??___simple_search_fl+2
  3032     0763  0872               	movf	___simple_search_fl@n+1,w
  3033     0764  1C03               	skipc
  3034     0765  0A72               	incf	___simple_search_fl@n+1,w
  3035     0766  0274               	subwf	??___simple_search_fl+1,w
  3036     0767  00F6               	movwf	??___simple_search_fl+3
  3037     0768  0875               	movf	??___simple_search_fl+2,w
  3038     0769  3EFE               	addlw	254
  3039     076A  00A0               	movwf	___simple_search_fl@remaining_size
  3040     076B  0876               	movf	??___simple_search_fl+3,w
  3041     076C  1803               	skipnc
  3042     076D  3E01               	addlw	1
  3043     076E  3EFF               	addlw	255
  3044     076F  00A1               	movwf	___simple_search_fl@remaining_size+1
  3045     0770                     l1250:
  3046     0770  082C               	movf	___simple_search_fl@best,w
  3047     0771  0084               	movwf	4
  3048     0772  1783               	bsf	3,7
  3049     0773  1C2D               	btfss	___simple_search_fl@best+1,0
  3050     0774  1383               	bcf	3,7
  3051     0775  0871               	movf	___simple_search_fl@n,w
  3052     0776  0080               	movwf	0
  3053     0777  0A84               	incf	4,f
  3054     0778  0872               	movf	___simple_search_fl@n+1,w
  3055     0779  0080               	movwf	0
  3056     077A                     l1252:
  3057     077A  082C               	movf	___simple_search_fl@best,w
  3058     077B  0084               	movwf	4
  3059     077C  1783               	bsf	3,7
  3060     077D  1C2D               	btfss	___simple_search_fl@best+1,0
  3061     077E  1383               	bcf	3,7
  3062     077F  0800               	movf	0,w
  3063     0780  072C               	addwf	___simple_search_fl@best,w
  3064     0781  00F3               	movwf	??___simple_search_fl
  3065     0782  082D               	movf	___simple_search_fl@best+1,w
  3066     0783  1803               	skipnc
  3067     0784  3E01               	addlw	1
  3068     0785  00F4               	movwf	??___simple_search_fl+1
  3069     0786  0873               	movf	??___simple_search_fl,w
  3070     0787  3E02               	addlw	2
  3071     0788  00A4               	movwf	___simple_search_fl@split
  3072     0789  0874               	movf	??___simple_search_fl+1,w
  3073     078A  1803               	skipnc
  3074     078B  3E01               	addlw	1
  3075     078C  3E00               	addlw	0
  3076     078D  00A5               	movwf	___simple_search_fl@split+1
  3077     078E  0824               	movf	___simple_search_fl@split,w
  3078     078F  0084               	movwf	4
  3079     0790  1783               	bsf	3,7
  3080     0791  1C25               	btfss	___simple_search_fl@split+1,0
  3081     0792  1383               	bcf	3,7
  3082     0793  0820               	movf	___simple_search_fl@remaining_size,w
  3083     0794  0080               	movwf	0
  3084     0795  0A84               	incf	4,f
  3085     0796  0821               	movf	___simple_search_fl@remaining_size+1,w
  3086     0797  0080               	movwf	0
  3087     0798                     l1254:
  3088     0798  0824               	movf	___simple_search_fl@split,w
  3089     0799  3E02               	addlw	2
  3090     079A  00F3               	movwf	??___simple_search_fl
  3091     079B  0825               	movf	___simple_search_fl@split+1,w
  3092     079C  1803               	skipnc
  3093     079D  3E01               	addlw	1
  3094     079E  3E00               	addlw	0
  3095     079F  00F4               	movwf	??___simple_search_fl+1
  3096     07A0  0873               	movf	??___simple_search_fl,w
  3097     07A1  0084               	movwf	4
  3098     07A2  1783               	bsf	3,7
  3099     07A3  1C74               	btfss	??___simple_search_fl+1,0
  3100     07A4  1383               	bcf	3,7
  3101     07A5  0828               	movf	___simple_search_fl@next,w
  3102     07A6  0080               	movwf	0
  3103     07A7  0A84               	incf	4,f
  3104     07A8  0829               	movf	___simple_search_fl@next+1,w
  3105     07A9  0080               	movwf	0
  3106     07AA                     l1256:
  3107     07AA  0824               	movf	___simple_search_fl@split,w
  3108     07AB  00A8               	movwf	___simple_search_fl@next
  3109     07AC  0825               	movf	___simple_search_fl@split+1,w
  3110     07AD  00A9               	movwf	___simple_search_fl@next+1
  3111     07AE                     l719:
  3112     07AE  082D               	movf	___simple_search_fl@best+1,w
  3113     07AF  066E               	xorwf	___freelist+1,w
  3114     07B0  1D03               	skipz
  3115     07B1  2FB4               	goto	u595
  3116     07B2  082C               	movf	___simple_search_fl@best,w
  3117     07B3  066D               	xorwf	___freelist,w
  3118     07B4                     u595:
  3119     07B4  1D03               	skipz
  3120     07B5  2FB7               	goto	u591
  3121     07B6  2FB8               	goto	u590
  3122     07B7                     u591:
  3123     07B7  2FBD               	goto	l1260
  3124     07B8                     u590:
  3125     07B8                     l1258:
  3126     07B8  0828               	movf	___simple_search_fl@next,w
  3127     07B9  00ED               	movwf	___freelist
  3128     07BA  0829               	movf	___simple_search_fl@next+1,w
  3129     07BB  00EE               	movwf	___freelist+1
  3130     07BC  2FCF               	goto	l1262
  3131     07BD                     l1260:
  3132     07BD  0822               	movf	___simple_search_fl@best_last,w
  3133     07BE  3E02               	addlw	2
  3134     07BF  00F3               	movwf	??___simple_search_fl
  3135     07C0  0823               	movf	___simple_search_fl@best_last+1,w
  3136     07C1  1803               	skipnc
  3137     07C2  3E01               	addlw	1
  3138     07C3  3E00               	addlw	0
  3139     07C4  00F4               	movwf	??___simple_search_fl+1
  3140     07C5  0873               	movf	??___simple_search_fl,w
  3141     07C6  0084               	movwf	4
  3142     07C7  1783               	bsf	3,7
  3143     07C8  1C74               	btfss	??___simple_search_fl+1,0
  3144     07C9  1383               	bcf	3,7
  3145     07CA  0828               	movf	___simple_search_fl@next,w
  3146     07CB  0080               	movwf	0
  3147     07CC  0A84               	incf	4,f
  3148     07CD  0829               	movf	___simple_search_fl@next+1,w
  3149     07CE  0080               	movwf	0
  3150     07CF                     l1262:
  3151     07CF  082C               	movf	___simple_search_fl@best,w
  3152     07D0  3E02               	addlw	2
  3153     07D1  00F1               	movwf	?___simple_search_fl
  3154     07D2  082D               	movf	___simple_search_fl@best+1,w
  3155     07D3  1803               	skipnc
  3156     07D4  3E01               	addlw	1
  3157     07D5  3E00               	addlw	0
  3158     07D6  00F2               	movwf	?___simple_search_fl+1
  3159     07D7                     l708:
  3160     07D7  0008               	return
  3161     07D8                     __end_of___simple_search_fl:
  3162                           
  3163                           	psect	text12
  3164     01DE                     __ptext12:	
  3165 ;; *************** function ___expand_heap *****************
  3166 ;; Defined at:
  3167 ;;		line 14 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/expand_heap.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  pn              1    0[COMMON] PTR unsigned int 
  3170 ;;		 -> malloc@m(2), 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  new_brkp        2    3[COMMON] PTR unsigned char 
  3173 ;;		 -> __heap_hi(0), NULL(0), 
  3174 ;;  n               2    1[COMMON] unsigned int 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  2    0[COMMON] PTR void 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3184 ;;      Params:         1       0       0       0       0
  3185 ;;      Locals:         4       0       0       0       0
  3186 ;;      Temps:          0       0       0       0       0
  3187 ;;      Totals:         5       0       0       0       0
  3188 ;;Total ram usage:        5 bytes
  3189 ;; Hardware stack levels used: 1
  3190 ;; This function calls:
  3191 ;;		Nothing
  3192 ;; This function is called by:
  3193 ;;		_malloc
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197     01DE                     ___expand_heap:	
  3198                           ;psect for function ___expand_heap
  3199                           
  3200     01DE                     l1270:	
  3201                           ;incstack = 0
  3202                           ; Regs used in ___expand_heap: [wreg-fsr0h+status,2+status,0]
  3203                           
  3204     01DE  0871               	movf	___expand_heap@pn,w
  3205     01DF  0084               	movwf	4
  3206     01E0  1383               	bcf	3,7	;select IRP bank0
  3207     01E1  0800               	movf	0,w
  3208     01E2  00F2               	movwf	___expand_heap@n
  3209     01E3  0A84               	incf	4,f
  3210     01E4  0800               	movf	0,w
  3211     01E5  00F3               	movwf	___expand_heap@n+1
  3212     01E6                     l1272:
  3213     01E6  1283               	bcf	3,5	;RP0=0, select bank0
  3214     01E7  1303               	bcf	3,6	;RP1=0, select bank0
  3215     01E8  0867               	movf	_brkp,w
  3216     01E9  0468               	iorwf	_brkp+1,w
  3217     01EA  1D03               	btfss	3,2
  3218     01EB  29ED               	goto	u601
  3219     01EC  29EE               	goto	u600
  3220     01ED                     u601:
  3221     01ED  29F2               	goto	l767
  3222     01EE                     u600:
  3223     01EE                     l1274:
  3224     01EE  3070               	movlw	low ___heap_hi
  3225     01EF  00E7               	movwf	_brkp
  3226     01F0  3001               	movlw	high ___heap_hi
  3227     01F1  00E8               	movwf	_brkp+1
  3228     01F2                     l767:
  3229     01F2  3000               	movlw	0
  3230     01F3  0273               	subwf	___expand_heap@n+1,w
  3231     01F4  3004               	movlw	4
  3232     01F5  1903               	skipnz
  3233     01F6  0272               	subwf	___expand_heap@n,w
  3234     01F7  1803               	skipnc
  3235     01F8  29FA               	goto	u611
  3236     01F9  29FB               	goto	u610
  3237     01FA                     u611:
  3238     01FA  29FF               	goto	l1278
  3239     01FB                     u610:
  3240     01FB                     l1276:
  3241     01FB  3004               	movlw	4
  3242     01FC  00F2               	movwf	___expand_heap@n
  3243     01FD  3000               	movlw	0
  3244     01FE  00F3               	movwf	___expand_heap@n+1
  3245     01FF                     l1278:
  3246     01FF  0872               	movf	___expand_heap@n,w
  3247     0200  0267               	subwf	_brkp,w
  3248     0201  00F4               	movwf	___expand_heap@new_brkp
  3249     0202  0868               	movf	_brkp+1,w
  3250     0203  1C03               	skipc
  3251     0204  0368               	decf	_brkp+1,w
  3252     0205  00F5               	movwf	___expand_heap@new_brkp+1
  3253     0206                     l1280:
  3254     0206  3001               	movlw	high ___heap_lo
  3255     0207  0275               	subwf	___expand_heap@new_brkp+1,w
  3256     0208  3010               	movlw	low ___heap_lo
  3257     0209  1903               	skipnz
  3258     020A  0274               	subwf	___expand_heap@new_brkp,w
  3259     020B  1C03               	skipc
  3260     020C  2A0E               	goto	u621
  3261     020D  2A0F               	goto	u620
  3262     020E                     u621:
  3263     020E  2A19               	goto	l1284
  3264     020F                     u620:
  3265     020F                     l1282:
  3266     020F  0868               	movf	_brkp+1,w
  3267     0210  0275               	subwf	___expand_heap@new_brkp+1,w
  3268     0211  1D03               	skipz
  3269     0212  2A15               	goto	u635
  3270     0213  0867               	movf	_brkp,w
  3271     0214  0274               	subwf	___expand_heap@new_brkp,w
  3272     0215                     u635:
  3273     0215  1C03               	skipc
  3274     0216  2A18               	goto	u631
  3275     0217  2A19               	goto	u630
  3276     0218                     u631:
  3277     0218  2A22               	goto	l1290
  3278     0219                     u630:
  3279     0219                     l1284:
  3280     0219  300C               	movlw	12
  3281     021A  1683               	bsf	3,5	;RP0=1, select bank1
  3282     021B  1303               	bcf	3,6	;RP1=0, select bank1
  3283     021C  00A4               	movwf	_errno^(0+128)
  3284     021D  3000               	movlw	0
  3285     021E  00A5               	movwf	(_errno^(0+128)+1)
  3286     021F                     l1286:
  3287     021F  01F1               	clrf	?___expand_heap
  3288     0220  01F2               	clrf	?___expand_heap+1
  3289     0221  2A2A               	goto	l772
  3290     0222                     l1290:
  3291     0222  0874               	movf	___expand_heap@new_brkp,w
  3292     0223  00E7               	movwf	_brkp
  3293     0224  0875               	movf	___expand_heap@new_brkp+1,w
  3294     0225  00E8               	movwf	_brkp+1
  3295     0226  0867               	movf	_brkp,w
  3296     0227  00F1               	movwf	?___expand_heap
  3297     0228  0868               	movf	_brkp+1,w
  3298     0229  00F2               	movwf	?___expand_heap+1
  3299     022A                     l772:
  3300     022A  0008               	return
  3301     022B                     __end_of___expand_heap:
  3302                           
  3303                           	psect	text13
  3304     00BB                     __ptext13:	
  3305 ;; *************** function ___wmul *****************
  3306 ;; Defined at:
  3307 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  multiplier      2    0[COMMON] unsigned int 
  3310 ;;  multiplicand    2    2[COMMON] unsigned int 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  product         2    4[COMMON] unsigned int 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  2    0[COMMON] unsigned int 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3322 ;;      Params:         4       0       0       0       0
  3323 ;;      Locals:         2       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0
  3325 ;;      Totals:         6       0       0       0       0
  3326 ;;Total ram usage:        6 bytes
  3327 ;; Hardware stack levels used: 1
  3328 ;; This function calls:
  3329 ;;		Nothing
  3330 ;; This function is called by:
  3331 ;;		_calloc
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335     00BB                     ___wmul:	
  3336                           ;psect for function ___wmul
  3337                           
  3338     00BB                     l1300:	
  3339                           ;incstack = 0
  3340                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3341                           
  3342     00BB  01F5               	clrf	___wmul@product
  3343     00BC  01F6               	clrf	___wmul@product+1
  3344     00BD                     l1302:
  3345     00BD  1C71               	btfss	___wmul@multiplier,0
  3346     00BE  28C0               	goto	u641
  3347     00BF  28C1               	goto	u640
  3348     00C0                     u641:
  3349     00C0  28C7               	goto	l238
  3350     00C1                     u640:
  3351     00C1                     l1304:
  3352     00C1  0873               	movf	___wmul@multiplicand,w
  3353     00C2  07F5               	addwf	___wmul@product,f
  3354     00C3  1803               	skipnc
  3355     00C4  0AF6               	incf	___wmul@product+1,f
  3356     00C5  0874               	movf	___wmul@multiplicand+1,w
  3357     00C6  07F6               	addwf	___wmul@product+1,f
  3358     00C7                     l238:
  3359     00C7  3001               	movlw	1
  3360     00C8                     u655:
  3361     00C8  1003               	clrc
  3362     00C9  0DF3               	rlf	___wmul@multiplicand,f
  3363     00CA  0DF4               	rlf	___wmul@multiplicand+1,f
  3364     00CB  3EFF               	addlw	-1
  3365     00CC  1D03               	skipz
  3366     00CD  28C8               	goto	u655
  3367     00CE                     l1306:
  3368     00CE  3001               	movlw	1
  3369     00CF                     u665:
  3370     00CF  1003               	clrc
  3371     00D0  0CF2               	rrf	___wmul@multiplier+1,f
  3372     00D1  0CF1               	rrf	___wmul@multiplier,f
  3373     00D2  3EFF               	addlw	-1
  3374     00D3  1D03               	skipz
  3375     00D4  28CF               	goto	u665
  3376     00D5                     l1308:
  3377     00D5  0871               	movf	___wmul@multiplier,w
  3378     00D6  0472               	iorwf	___wmul@multiplier+1,w
  3379     00D7  1D03               	btfss	3,2
  3380     00D8  28DA               	goto	u671
  3381     00D9  28DB               	goto	u670
  3382     00DA                     u671:
  3383     00DA  28BD               	goto	l1302
  3384     00DB                     u670:
  3385     00DB                     l1310:
  3386     00DB  0876               	movf	___wmul@product+1,w
  3387     00DC  00F2               	movwf	?___wmul+1
  3388     00DD  0875               	movf	___wmul@product,w
  3389     00DE  00F1               	movwf	?___wmul
  3390     00DF                     l240:
  3391     00DF  0008               	return
  3392     00E0                     __end_of___wmul:
  3393                           
  3394                           	psect	text14
  3395     00E0                     __ptext14:	
  3396 ;; *************** function _InsertResult *****************
  3397 ;; Defined at:
  3398 ;;		line 80 in file "shape.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  array_          1    0[COMMON] PTR unsigned char 
  3401 ;;		 -> main@square_1(3), 
  3402 ;;  res             2    1[COMMON] PTR unsigned char 
  3403 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3404 ;;  countElemntA    2    3[COMMON] int 
  3405 ;; Auto vars:     Size  Location     Type
  3406 ;;  y               2   10[COMMON] int 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;                  1    wreg      void 
  3409 ;; Registers used:
  3410 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3411 ;; Tracked objects:
  3412 ;;		On entry : 0/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3416 ;;      Params:         5       0       0       0       0
  3417 ;;      Locals:         2       0       0       0       0
  3418 ;;      Temps:          5       0       0       0       0
  3419 ;;      Totals:        12       0       0       0       0
  3420 ;;Total ram usage:       12 bytes
  3421 ;; Hardware stack levels used: 1
  3422 ;; This function calls:
  3423 ;;		Nothing
  3424 ;; This function is called by:
  3425 ;;		_Rotate
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429     00E0                     _InsertResult:	
  3430                           ;psect for function _InsertResult
  3431                           
  3432     00E0                     l1410:	
  3433                           ;incstack = 0
  3434                           ; Regs used in _InsertResult: [wreg-fsr0h+status,2+status,0]
  3435                           
  3436                           
  3437                           ;shape.c: 81:     for(int y = 0; y < countElemntArray; y++){
  3438     00E0  01FB               	clrf	InsertResult@y
  3439     00E1  01FC               	clrf	InsertResult@y+1
  3440     00E2  2904               	goto	l1416
  3441     00E3                     l1412:
  3442                           
  3443                           ;shape.c: 82:         array_[y] = res[y];
  3444     00E3  087B               	movf	InsertResult@y,w
  3445     00E4  0772               	addwf	InsertResult@res,w
  3446     00E5  00F7               	movwf	??_InsertResult+1
  3447     00E6  0873               	movf	InsertResult@res+1,w
  3448     00E7  00F6               	movwf	??_InsertResult
  3449     00E8  1803               	skipnc
  3450     00E9  0AF6               	incf	??_InsertResult,f
  3451     00EA  1FFB               	btfss	InsertResult@y,7
  3452     00EB  28ED               	goto	u800
  3453     00EC  03F6               	decf	??_InsertResult,f
  3454     00ED                     u800:
  3455     00ED  0876               	movf	??_InsertResult,w
  3456     00EE  00F8               	movwf	??_InsertResult+2
  3457     00EF  0877               	movf	??_InsertResult+1,w
  3458     00F0  0084               	movwf	4
  3459     00F1  1783               	bsf	3,7
  3460     00F2  1C78               	btfss	??_InsertResult+2,0
  3461     00F3  1383               	bcf	3,7
  3462     00F4  0800               	movf	0,w
  3463     00F5  00F9               	movwf	??_InsertResult+3
  3464     00F6  087B               	movf	InsertResult@y,w
  3465     00F7  0771               	addwf	InsertResult@array_,w
  3466     00F8  00FA               	movwf	??_InsertResult+4
  3467     00F9  087A               	movf	??_InsertResult+4,w
  3468     00FA  0084               	movwf	4
  3469     00FB  0879               	movf	??_InsertResult+3,w
  3470     00FC  1383               	bcf	3,7	;select IRP bank0
  3471     00FD  0080               	movwf	0
  3472     00FE                     l1414:
  3473                           
  3474                           ;shape.c: 83:     }
  3475     00FE  3001               	movlw	1
  3476     00FF  07FB               	addwf	InsertResult@y,f
  3477     0100  1803               	skipnc
  3478     0101  0AFC               	incf	InsertResult@y+1,f
  3479     0102  3000               	movlw	0
  3480     0103  07FC               	addwf	InsertResult@y+1,f
  3481     0104                     l1416:
  3482     0104  087C               	movf	InsertResult@y+1,w
  3483     0105  3A80               	xorlw	128
  3484     0106  00F6               	movwf	??_InsertResult
  3485     0107  0875               	movf	InsertResult@countElemntArray+1,w
  3486     0108  3A80               	xorlw	128
  3487     0109  0276               	subwf	??_InsertResult,w
  3488     010A  1D03               	skipz
  3489     010B  290E               	goto	u815
  3490     010C  0874               	movf	InsertResult@countElemntArray,w
  3491     010D  027B               	subwf	InsertResult@y,w
  3492     010E                     u815:
  3493     010E  1C03               	skipc
  3494     010F  2911               	goto	u811
  3495     0110  2912               	goto	u810
  3496     0111                     u811:
  3497     0111  28E3               	goto	l1412
  3498     0112                     u810:
  3499     0112                     l152:
  3500     0112  0008               	return
  3501     0113                     __end_of_InsertResult:
  3502                           
  3503                           	psect	text15
  3504     0153                     __ptext15:	
  3505 ;; *************** function _Reverse *****************
  3506 ;; Defined at:
  3507 ;;		line 70 in file "shape.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  array_          1    0[COMMON] PTR unsigned char 
  3510 ;;		 -> main@square_1(3), 
  3511 ;;  countElemntA    2    1[COMMON] int 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  t               1    6[COMMON] unsigned char 
  3514 ;;  j               2    9[COMMON] int 
  3515 ;;  i               2    7[COMMON] int 
  3516 ;; Return value:  Size  Location     Type
  3517 ;;                  1    wreg      void 
  3518 ;; Registers used:
  3519 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3520 ;; Tracked objects:
  3521 ;;		On entry : 0/0
  3522 ;;		On exit  : 0/0
  3523 ;;		Unchanged: 0/0
  3524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3525 ;;      Params:         3       0       0       0       0
  3526 ;;      Locals:         5       0       0       0       0
  3527 ;;      Temps:          3       0       0       0       0
  3528 ;;      Totals:        11       0       0       0       0
  3529 ;;Total ram usage:       11 bytes
  3530 ;; Hardware stack levels used: 1
  3531 ;; This function calls:
  3532 ;;		Nothing
  3533 ;; This function is called by:
  3534 ;;		_ChangeOfCoordinates
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538     0153                     _Reverse:	
  3539                           ;psect for function _Reverse
  3540                           
  3541     0153                     l1472:	
  3542                           ;incstack = 0
  3543                           ; Regs used in _Reverse: [wreg-fsr0h+status,2+status,0]
  3544                           
  3545                           
  3546                           ;shape.c: 70: void Reverse(char * array_, int countElemntArray);shape.c: 71: {;shape.c: 
      +                          72:     for(int i = 0, j = countElemntArray - 1; i < j; i++, j--)
  3547     0153  01F8               	clrf	Reverse@i
  3548     0154  01F9               	clrf	Reverse@i+1
  3549     0155                     l1474:
  3550     0155  0872               	movf	Reverse@countElemntArray,w
  3551     0156  3EFF               	addlw	255
  3552     0157  00FA               	movwf	Reverse@j
  3553     0158  0873               	movf	Reverse@countElemntArray+1,w
  3554     0159  1803               	skipnc
  3555     015A  3E01               	addlw	1
  3556     015B  3EFF               	addlw	255
  3557     015C  00FB               	movwf	Reverse@j+1
  3558     015D  2987               	goto	l1482
  3559     015E                     l1476:
  3560                           
  3561                           ;shape.c: 73:     {;shape.c: 74:         char t = array_[i];
  3562     015E  0878               	movf	Reverse@i,w
  3563     015F  0771               	addwf	Reverse@array_,w
  3564     0160  00F4               	movwf	??_Reverse
  3565     0161  0874               	movf	??_Reverse,w
  3566     0162  0084               	movwf	4
  3567     0163  1383               	bcf	3,7	;select IRP bank0
  3568     0164  0800               	movf	0,w
  3569     0165  00F7               	movwf	Reverse@t
  3570                           
  3571                           ;shape.c: 75:         array_[i] = array_[j];
  3572     0166  087A               	movf	Reverse@j,w
  3573     0167  0771               	addwf	Reverse@array_,w
  3574     0168  00F4               	movwf	??_Reverse
  3575     0169  0874               	movf	??_Reverse,w
  3576     016A  0084               	movwf	4
  3577     016B  0800               	movf	0,w
  3578     016C  00F5               	movwf	??_Reverse+1
  3579     016D  0878               	movf	Reverse@i,w
  3580     016E  0771               	addwf	Reverse@array_,w
  3581     016F  00F6               	movwf	??_Reverse+2
  3582     0170  0876               	movf	??_Reverse+2,w
  3583     0171  0084               	movwf	4
  3584     0172  0875               	movf	??_Reverse+1,w
  3585     0173  0080               	movwf	0
  3586                           
  3587                           ;shape.c: 76:         array_[j] = t;
  3588     0174  087A               	movf	Reverse@j,w
  3589     0175  0771               	addwf	Reverse@array_,w
  3590     0176  00F4               	movwf	??_Reverse
  3591     0177  0874               	movf	??_Reverse,w
  3592     0178  0084               	movwf	4
  3593     0179  0877               	movf	Reverse@t,w
  3594     017A  0080               	movwf	0
  3595     017B                     l1478:
  3596                           
  3597                           ;shape.c: 77:     }
  3598     017B  3001               	movlw	1
  3599     017C  07F8               	addwf	Reverse@i,f
  3600     017D  1803               	skipnc
  3601     017E  0AF9               	incf	Reverse@i+1,f
  3602     017F  3000               	movlw	0
  3603     0180  07F9               	addwf	Reverse@i+1,f
  3604     0181                     l1480:
  3605     0181  30FF               	movlw	255
  3606     0182  07FA               	addwf	Reverse@j,f
  3607     0183  1803               	skipnc
  3608     0184  0AFB               	incf	Reverse@j+1,f
  3609     0185  30FF               	movlw	255
  3610     0186  07FB               	addwf	Reverse@j+1,f
  3611     0187                     l1482:
  3612     0187  0879               	movf	Reverse@i+1,w
  3613     0188  3A80               	xorlw	128
  3614     0189  00F4               	movwf	??_Reverse
  3615     018A  087B               	movf	Reverse@j+1,w
  3616     018B  3A80               	xorlw	128
  3617     018C  0274               	subwf	??_Reverse,w
  3618     018D  1D03               	skipz
  3619     018E  2991               	goto	u865
  3620     018F  087A               	movf	Reverse@j,w
  3621     0190  0278               	subwf	Reverse@i,w
  3622     0191                     u865:
  3623     0191  1C03               	skipc
  3624     0192  2994               	goto	u861
  3625     0193  2995               	goto	u860
  3626     0194                     u861:
  3627     0194  295E               	goto	l1476
  3628     0195                     u860:
  3629     0195                     l146:
  3630     0195  0008               	return
  3631     0196                     __end_of_Reverse:
  3632                           
  3633                           	psect	text16
  3634     0278                     __ptext16:	
  3635 ;; *************** function _MovieShape *****************
  3636 ;; Defined at:
  3637 ;;		line 32 in file "shape.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  dir             1    wreg     enum E885
  3640 ;;  _shapePositi    2    5[BANK0 ] PTR struct .
  3641 ;;		 -> main@shapePosition(4), 
  3642 ;;  shapeArray      1    7[BANK0 ] PTR unsigned char 
  3643 ;;		 -> main@square_1(3), 
  3644 ;;  countElemntA    2    8[BANK0 ] int 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  dir             1   12[BANK0 ] enum E885
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3656 ;;      Params:         0       5       0       0       0
  3657 ;;      Locals:         0       1       0       0       0
  3658 ;;      Temps:          0       2       0       0       0
  3659 ;;      Totals:         0       8       0       0       0
  3660 ;;Total ram usage:        8 bytes
  3661 ;; Hardware stack levels used: 1
  3662 ;; Hardware stack levels required when called: 3
  3663 ;; This function calls:
  3664 ;;		_MovieDown
  3665 ;;		_MovieLeft
  3666 ;;		_MovieRigth
  3667 ;;		_MovieUp
  3668 ;;		_ShowShape
  3669 ;;		_SpiClearMatrix
  3670 ;; This function is called by:
  3671 ;;		_ChangeOfCoordinates
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675     0278                     _MovieShape:	
  3676                           ;psect for function _MovieShape
  3677                           
  3678                           
  3679                           ;incstack = 0
  3680                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3681                           ;MovieShape@dir stored from wreg
  3682     0278  1283               	bcf	3,5	;RP0=0, select bank0
  3683     0279  1303               	bcf	3,6	;RP1=0, select bank0
  3684     027A  00AC               	movwf	MovieShape@dir
  3685     027B                     l1448:
  3686                           
  3687                           ;shape.c: 34:     switch (dir){
  3688     027B  2AA4               	goto	l1460
  3689     027C                     l1450:
  3690                           
  3691                           ;shape.c: 36:             MovieDown(_shapePosition);
  3692     027C  0825               	movf	MovieShape@_shapePosition,w
  3693     027D  00F1               	movwf	MovieDown@_shapePosition
  3694     027E  0826               	movf	MovieShape@_shapePosition+1,w
  3695     027F  00F2               	movwf	MovieDown@_shapePosition+1
  3696     0280  120A  118A  2028  120A  118A  	fcall	_MovieDown
  3697                           
  3698                           ;shape.c: 37:             break;
  3699     0285  2ABD               	goto	l1462
  3700     0286                     l1452:
  3701                           
  3702                           ;shape.c: 39:             MovieUp(_shapePosition);
  3703     0286  0825               	movf	MovieShape@_shapePosition,w
  3704     0287  00F1               	movwf	MovieUp@_shapePosition
  3705     0288  0826               	movf	MovieShape@_shapePosition+1,w
  3706     0289  00F2               	movwf	MovieUp@_shapePosition+1
  3707     028A  120A  118A  2064  120A  118A  	fcall	_MovieUp
  3708                           
  3709                           ;shape.c: 40:             break;
  3710     028F  2ABD               	goto	l1462
  3711     0290                     l1454:
  3712                           
  3713                           ;shape.c: 42:             MovieLeft(_shapePosition);
  3714     0290  0825               	movf	MovieShape@_shapePosition,w
  3715     0291  00F1               	movwf	MovieLeft@_shapePosition
  3716     0292  0826               	movf	MovieShape@_shapePosition+1,w
  3717     0293  00F2               	movwf	MovieLeft@_shapePosition+1
  3718     0294  120A  118A  2005  120A  118A  	fcall	_MovieLeft
  3719                           
  3720                           ;shape.c: 43:             break;
  3721     0299  2ABD               	goto	l1462
  3722     029A                     l1456:
  3723                           
  3724                           ;shape.c: 45:             MovieRigth(_shapePosition);
  3725     029A  0825               	movf	MovieShape@_shapePosition,w
  3726     029B  00F1               	movwf	MovieRigth@_shapePosition
  3727     029C  0826               	movf	MovieShape@_shapePosition+1,w
  3728     029D  00F2               	movwf	MovieRigth@_shapePosition+1
  3729     029E  120A  158A  27EA  120A  118A  	fcall	_MovieRigth
  3730                           
  3731                           ;shape.c: 46:             break;
  3732     02A3  2ABD               	goto	l1462
  3733     02A4                     l1460:
  3734     02A4  082C               	movf	MovieShape@dir,w
  3735     02A5  00AA               	movwf	??_MovieShape
  3736     02A6  01AB               	clrf	??_MovieShape+1
  3737                           
  3738                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3739                           ; Switch size 1, requested type "simple"
  3740                           ; Number of cases is 1, Range of values is 0 to 0
  3741                           ; switch strategies available:
  3742                           ; Name         Instructions Cycles
  3743                           ; simple_byte            4     3 (average)
  3744                           ; direct_byte           11     8 (fixed)
  3745                           ; jumptable            260     6 (fixed)
  3746                           ;	Chosen strategy is simple_byte
  3747     02A7  082B               	movf	??_MovieShape+1,w
  3748     02A8  3A00               	xorlw	0	; case 0
  3749     02A9  1903               	skipnz
  3750     02AA  2AAC               	goto	l1648
  3751     02AB  2ABD               	goto	l1462
  3752     02AC                     l1648:
  3753                           
  3754                           ; Switch size 1, requested type "simple"
  3755                           ; Number of cases is 5, Range of values is 0 to 4
  3756                           ; switch strategies available:
  3757                           ; Name         Instructions Cycles
  3758                           ; simple_byte           16     9 (average)
  3759                           ; direct_byte           23     8 (fixed)
  3760                           ; jumptable            260     6 (fixed)
  3761                           ;	Chosen strategy is simple_byte
  3762     02AC  082A               	movf	??_MovieShape,w
  3763     02AD  3A00               	xorlw	0	; case 0
  3764     02AE  1903               	skipnz
  3765     02AF  2A7C               	goto	l1450
  3766     02B0  3A01               	xorlw	1	; case 1
  3767     02B1  1903               	skipnz
  3768     02B2  2A86               	goto	l1452
  3769     02B3  3A03               	xorlw	3	; case 2
  3770     02B4  1903               	skipnz
  3771     02B5  2A90               	goto	l1454
  3772     02B6  3A01               	xorlw	1	; case 3
  3773     02B7  1903               	skipnz
  3774     02B8  2A9A               	goto	l1456
  3775     02B9  3A07               	xorlw	7	; case 4
  3776     02BA  1903               	skipnz
  3777     02BB  2ABD               	goto	l1462
  3778     02BC  2ABD               	goto	l1462
  3779     02BD                     l1462:
  3780                           
  3781                           ;shape.c: 51:     SpiClearMatrix();
  3782     02BD  120A  118A  204E  120A  118A  	fcall	_SpiClearMatrix
  3783     02C2                     l1464:
  3784                           
  3785                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  3786     02C2  1283               	bcf	3,5	;RP0=0, select bank0
  3787     02C3  1303               	bcf	3,6	;RP1=0, select bank0
  3788     02C4  0825               	movf	MovieShape@_shapePosition,w
  3789     02C5  00F5               	movwf	ShowShape@coord
  3790     02C6  0826               	movf	MovieShape@_shapePosition+1,w
  3791     02C7  00F6               	movwf	ShowShape@coord+1
  3792     02C8  0829               	movf	MovieShape@countElemntArray+1,w
  3793     02C9  00F8               	movwf	ShowShape@countElemntArray+1
  3794     02CA  0828               	movf	MovieShape@countElemntArray,w
  3795     02CB  00F7               	movwf	ShowShape@countElemntArray
  3796     02CC  0827               	movf	MovieShape@shapeArray,w
  3797     02CD  00F9               	movwf	ShowShape@shapeArray
  3798     02CE  120A  118A  22D4  120A  118A  	fcall	_ShowShape
  3799     02D3                     l132:
  3800     02D3  0008               	return
  3801     02D4                     __end_of_MovieShape:
  3802                           
  3803                           	psect	text17
  3804     004E                     __ptext17:	
  3805 ;; *************** function _SpiClearMatrix *****************
  3806 ;; Defined at:
  3807 ;;		line 10 in file "matrix.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;  i               1    6[COMMON] unsigned char 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0, pclath, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3821 ;;      Params:         0       0       0       0       0
  3822 ;;      Locals:         1       0       0       0       0
  3823 ;;      Temps:          2       0       0       0       0
  3824 ;;      Totals:         3       0       0       0       0
  3825 ;;Total ram usage:        3 bytes
  3826 ;; Hardware stack levels used: 1
  3827 ;; Hardware stack levels required when called: 2
  3828 ;; This function calls:
  3829 ;;		_SendToSegment
  3830 ;; This function is called by:
  3831 ;;		_MatrixInit
  3832 ;;		_MovieShape
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836     004E                     _SpiClearMatrix:	
  3837                           ;psect for function _SpiClearMatrix
  3838                           
  3839     004E                     l1374:	
  3840                           ;incstack = 0
  3841                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  3842                           
  3843                           
  3844                           ;matrix.c: 12:   char i = 8;
  3845     004E  3008               	movlw	8
  3846     004F  00F7               	movwf	SpiClearMatrix@i
  3847     0050                     l1376:
  3848                           
  3849                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  3850     0050  0877               	movf	SpiClearMatrix@i,w
  3851     0051  00F5               	movwf	??_SpiClearMatrix
  3852     0052  01F6               	clrf	??_SpiClearMatrix+1
  3853     0053  0875               	movf	??_SpiClearMatrix,w
  3854     0054  00F2               	movwf	SendToSegment@segment
  3855     0055  0876               	movf	??_SpiClearMatrix+1,w
  3856     0056  00F3               	movwf	SendToSegment@segment+1
  3857     0057  01F4               	clrf	SendToSegment@data
  3858     0058  120A  118A  203B  120A  118A  	fcall	_SendToSegment
  3859     005D                     l1378:
  3860                           
  3861                           ;matrix.c: 16:   } while (--i);
  3862     005D  3001               	movlw	1
  3863     005E  02F7               	subwf	SpiClearMatrix@i,f
  3864     005F  1D03               	btfss	3,2
  3865     0060  2862               	goto	u761
  3866     0061  2863               	goto	u760
  3867     0062                     u761:
  3868     0062  2850               	goto	l1376
  3869     0063                     u760:
  3870     0063                     l85:
  3871     0063  0008               	return
  3872     0064                     __end_of_SpiClearMatrix:
  3873                           
  3874                           	psect	text18
  3875     02D4                     __ptext18:	
  3876 ;; *************** function _ShowShape *****************
  3877 ;; Defined at:
  3878 ;;		line 8 in file "shape.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  coord           2    4[COMMON] PTR struct .
  3881 ;;		 -> main@shapePosition(4), 
  3882 ;;  countElemntA    2    6[COMMON] int 
  3883 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
  3884 ;;		 -> main@square_1(3), 
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;  pos             2   11[COMMON] int 
  3887 ;;  _pos            2    9[COMMON] int 
  3888 ;; Return value:  Size  Location     Type
  3889 ;;                  1    wreg      void 
  3890 ;; Registers used:
  3891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3892 ;; Tracked objects:
  3893 ;;		On entry : 0/0
  3894 ;;		On exit  : 0/0
  3895 ;;		Unchanged: 0/0
  3896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3897 ;;      Params:         5       0       0       0       0
  3898 ;;      Locals:         4       0       0       0       0
  3899 ;;      Temps:          0       5       0       0       0
  3900 ;;      Totals:         9       5       0       0       0
  3901 ;;Total ram usage:       14 bytes
  3902 ;; Hardware stack levels used: 1
  3903 ;; Hardware stack levels required when called: 2
  3904 ;; This function calls:
  3905 ;;		_SendToSegment
  3906 ;; This function is called by:
  3907 ;;		_MovieShape
  3908 ;; This function uses a non-reentrant model
  3909 ;;
  3910                           
  3911     02D4                     _ShowShape:	
  3912                           ;psect for function _ShowShape
  3913                           
  3914     02D4                     l1380:	
  3915                           ;incstack = 0
  3916                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3917                           
  3918     02D4                     l1382:
  3919                           
  3920                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  3921     02D4  0875               	movf	ShowShape@coord,w
  3922     02D5  0084               	movwf	4
  3923     02D6  1783               	bsf	3,7
  3924     02D7  1C76               	btfss	ShowShape@coord+1,0
  3925     02D8  1383               	bcf	3,7
  3926     02D9  0800               	movf	0,w
  3927     02DA  1283               	bcf	3,5	;RP0=0, select bank0
  3928     02DB  1303               	bcf	3,6	;RP1=0, select bank0
  3929     02DC  00A0               	movwf	??_ShowShape
  3930     02DD  0A84               	incf	4,f
  3931     02DE  0800               	movf	0,w
  3932     02DF  00A1               	movwf	??_ShowShape+1
  3933     02E0  0820               	movf	??_ShowShape,w
  3934     02E1  3E01               	addlw	1
  3935     02E2  00FC               	movwf	ShowShape@pos
  3936     02E3  0821               	movf	??_ShowShape+1,w
  3937     02E4  1803               	skipnc
  3938     02E5  3E01               	addlw	1
  3939     02E6  3E00               	addlw	0
  3940     02E7  00FD               	movwf	ShowShape@pos+1
  3941     02E8  2B32               	goto	l1390
  3942     02E9                     l1384:
  3943                           
  3944                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  3945     02E9  0875               	movf	ShowShape@coord,w
  3946     02EA  0084               	movwf	4
  3947     02EB  1783               	bsf	3,7
  3948     02EC  1C76               	btfss	ShowShape@coord+1,0
  3949     02ED  1383               	bcf	3,7
  3950     02EE  0800               	movf	0,w
  3951     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  3952     02F0  1303               	bcf	3,6	;RP1=0, select bank0
  3953     02F1  00A0               	movwf	??_ShowShape
  3954     02F2  0A84               	incf	4,f
  3955     02F3  0800               	movf	0,w
  3956     02F4  00A1               	movwf	??_ShowShape+1
  3957     02F5  0820               	movf	??_ShowShape,w
  3958     02F6  027C               	subwf	ShowShape@pos,w
  3959     02F7  00A2               	movwf	??_ShowShape+2
  3960     02F8  0821               	movf	??_ShowShape+1,w
  3961     02F9  1C03               	skipc
  3962     02FA  0A21               	incf	??_ShowShape+1,w
  3963     02FB  027D               	subwf	ShowShape@pos+1,w
  3964     02FC  00A3               	movwf	??_ShowShape+3
  3965     02FD  0822               	movf	??_ShowShape+2,w
  3966     02FE  3EFF               	addlw	255
  3967     02FF  00FA               	movwf	ShowShape@_pos
  3968     0300  0823               	movf	??_ShowShape+3,w
  3969     0301  1803               	skipnc
  3970     0302  3E01               	addlw	1
  3971     0303  3EFF               	addlw	255
  3972     0304  00FB               	movwf	ShowShape@_pos+1
  3973     0305                     l1386:
  3974                           
  3975                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  3976     0305  087D               	movf	ShowShape@pos+1,w
  3977     0306  00F3               	movwf	SendToSegment@segment+1
  3978     0307  087C               	movf	ShowShape@pos,w
  3979     0308  00F2               	movwf	SendToSegment@segment
  3980     0309  087A               	movf	ShowShape@_pos,w
  3981     030A  0779               	addwf	ShowShape@shapeArray,w
  3982     030B  00A0               	movwf	??_ShowShape
  3983     030C  0820               	movf	??_ShowShape,w
  3984     030D  0084               	movwf	4
  3985     030E  1383               	bcf	3,7	;select IRP bank0
  3986     030F  0800               	movf	0,w
  3987     0310  00A1               	movwf	??_ShowShape+1
  3988     0311  0875               	movf	ShowShape@coord,w
  3989     0312  3E02               	addlw	2
  3990     0313  00A2               	movwf	??_ShowShape+2
  3991     0314  0876               	movf	ShowShape@coord+1,w
  3992     0315  1803               	skipnc
  3993     0316  3E01               	addlw	1
  3994     0317  3E00               	addlw	0
  3995     0318  00A3               	movwf	??_ShowShape+3
  3996     0319  0822               	movf	??_ShowShape+2,w
  3997     031A  0084               	movwf	4
  3998     031B  1783               	bsf	3,7
  3999     031C  1C23               	btfss	??_ShowShape+3,0
  4000     031D  1383               	bcf	3,7
  4001     031E  0A00               	incf	0,w
  4002     031F  2B22               	goto	u774
  4003     0320                     u775:
  4004     0320  1003               	clrc
  4005     0321  0DA1               	rlf	??_ShowShape+1,f
  4006     0322                     u774:
  4007     0322  3EFF               	addlw	-1
  4008     0323  1D03               	skipz
  4009     0324  2B20               	goto	u775
  4010     0325  0821               	movf	??_ShowShape+1,w
  4011     0326  00F4               	movwf	SendToSegment@data
  4012     0327  120A  118A  203B  120A  118A  	fcall	_SendToSegment
  4013     032C                     l1388:
  4014                           
  4015                           ;shape.c: 13:     }
  4016     032C  3001               	movlw	1
  4017     032D  07FC               	addwf	ShowShape@pos,f
  4018     032E  1803               	skipnc
  4019     032F  0AFD               	incf	ShowShape@pos+1,f
  4020     0330  3000               	movlw	0
  4021     0331  07FD               	addwf	ShowShape@pos+1,f
  4022     0332                     l1390:
  4023     0332  0875               	movf	ShowShape@coord,w
  4024     0333  0084               	movwf	4
  4025     0334  1783               	bsf	3,7
  4026     0335  1C76               	btfss	ShowShape@coord+1,0
  4027     0336  1383               	bcf	3,7
  4028     0337  0800               	movf	0,w
  4029     0338  1283               	bcf	3,5	;RP0=0, select bank0
  4030     0339  1303               	bcf	3,6	;RP1=0, select bank0
  4031     033A  00A0               	movwf	??_ShowShape
  4032     033B  0A84               	incf	4,f
  4033     033C  0800               	movf	0,w
  4034     033D  00A1               	movwf	??_ShowShape+1
  4035     033E  0877               	movf	ShowShape@countElemntArray,w
  4036     033F  0720               	addwf	??_ShowShape,w
  4037     0340  00A2               	movwf	??_ShowShape+2
  4038     0341  0878               	movf	ShowShape@countElemntArray+1,w
  4039     0342  1803               	skipnc
  4040     0343  0A78               	incf	ShowShape@countElemntArray+1,w
  4041     0344  0721               	addwf	??_ShowShape+1,w
  4042     0345  00A3               	movwf	??_ShowShape+3
  4043     0346  0823               	movf	??_ShowShape+3,w
  4044     0347  3A80               	xorlw	128
  4045     0348  00A4               	movwf	??_ShowShape+4
  4046     0349  087D               	movf	ShowShape@pos+1,w
  4047     034A  3A80               	xorlw	128
  4048     034B  0224               	subwf	??_ShowShape+4,w
  4049     034C  1D03               	skipz
  4050     034D  2B50               	goto	u785
  4051     034E  087C               	movf	ShowShape@pos,w
  4052     034F  0222               	subwf	??_ShowShape+2,w
  4053     0350                     u785:
  4054     0350  1803               	skipnc
  4055     0351  2B53               	goto	u781
  4056     0352  2B54               	goto	u780
  4057     0353                     u781:
  4058     0353  2AE9               	goto	l1384
  4059     0354                     u780:
  4060     0354                     l110:
  4061     0354  0008               	return
  4062     0355                     __end_of_ShowShape:
  4063                           
  4064                           	psect	text19
  4065     003B                     __ptext19:	
  4066 ;; *************** function _SendToSegment *****************
  4067 ;; Defined at:
  4068 ;;		line 34 in file "matrix.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  segment         2    1[COMMON] int 
  4071 ;;  data            1    3[COMMON] unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2, status,0, pclath, cstack
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4083 ;;      Params:         3       0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0
  4086 ;;      Totals:         3       0       0       0       0
  4087 ;;Total ram usage:        3 bytes
  4088 ;; Hardware stack levels used: 1
  4089 ;; Hardware stack levels required when called: 1
  4090 ;; This function calls:
  4091 ;;		_SpiSendByte
  4092 ;; This function is called by:
  4093 ;;		_SpiClearMatrix
  4094 ;;		_MatrixInit
  4095 ;;		_ShowShape
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099     003B                     _SendToSegment:	
  4100                           ;psect for function _SendToSegment
  4101                           
  4102     003B                     l1294:	
  4103                           ;incstack = 0
  4104                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  4105                           
  4106                           
  4107                           ;matrix.c: 35:     RA5 = 0;
  4108     003B  1283               	bcf	3,5	;RP0=0, select bank0
  4109     003C  1303               	bcf	3,6	;RP1=0, select bank0
  4110     003D  1285               	bcf	5,5	;volatile
  4111     003E                     l1296:
  4112                           
  4113                           ;matrix.c: 36:     SpiSendByte((char)segment);
  4114     003E  0872               	movf	SendToSegment@segment,w
  4115     003F  120A  158A  27F5  120A  118A  	fcall	_SpiSendByte
  4116                           
  4117                           ;matrix.c: 37:     SpiSendByte(data);
  4118     0044  0874               	movf	SendToSegment@data,w
  4119     0045  120A  158A  27F5  120A  118A  	fcall	_SpiSendByte
  4120     004A                     l1298:
  4121                           
  4122                           ;matrix.c: 38:     RA5 = 1;
  4123     004A  1283               	bcf	3,5	;RP0=0, select bank0
  4124     004B  1303               	bcf	3,6	;RP1=0, select bank0
  4125     004C  1685               	bsf	5,5	;volatile
  4126     004D                     l91:
  4127     004D  0008               	return
  4128     004E                     __end_of_SendToSegment:
  4129                           
  4130                           	psect	text20
  4131     0FF5                     __ptext20:	
  4132 ;; *************** function _SpiSendByte *****************
  4133 ;; Defined at:
  4134 ;;		line 18 in file "spi.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  data            1    wreg     unsigned char 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  data            1    0[COMMON] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4148 ;;      Params:         0       0       0       0       0
  4149 ;;      Locals:         1       0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0
  4151 ;;      Totals:         1       0       0       0       0
  4152 ;;Total ram usage:        1 bytes
  4153 ;; Hardware stack levels used: 1
  4154 ;; This function calls:
  4155 ;;		Nothing
  4156 ;; This function is called by:
  4157 ;;		_SendToSegment
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161     0FF5                     _SpiSendByte:	
  4162                           ;psect for function _SpiSendByte
  4163                           
  4164                           
  4165                           ;incstack = 0
  4166                           ; Regs used in _SpiSendByte: [wreg]
  4167                           ;SpiSendByte@data stored from wreg
  4168     0FF5  00F1               	movwf	SpiSendByte@data
  4169     0FF6                     l1206:
  4170                           
  4171                           ;spi.c: 19:     SSPBUF = data;
  4172     0FF6  0871               	movf	SpiSendByte@data,w
  4173     0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  4174     0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  4175     0FF9  0093               	movwf	19	;volatile
  4176     0FFA                     l69:	
  4177                           ;spi.c: 20:     while (!SSPIF);
  4178                           
  4179     0FFA  1D8C               	btfss	12,3	;volatile
  4180     0FFB  2FFD               	goto	u491
  4181     0FFC  2FFE               	goto	u490
  4182     0FFD                     u491:
  4183     0FFD  2FFA               	goto	l69
  4184     0FFE                     u490:
  4185     0FFE                     l71:
  4186                           
  4187                           ;spi.c: 21:     SSPIF = 0;
  4188     0FFE  118C               	bcf	12,3	;volatile
  4189     0FFF                     l72:
  4190     0FFF  0008               	return
  4191     1000                     __end_of_SpiSendByte:
  4192                           
  4193                           	psect	text21
  4194     0064                     __ptext21:	
  4195 ;; *************** function _MovieUp *****************
  4196 ;; Defined at:
  4197 ;;		line 20 in file "shape.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4200 ;;		 -> main@shapePosition(4), 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4212 ;;      Params:         2       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0
  4214 ;;      Temps:          2       0       0       0       0
  4215 ;;      Totals:         4       0       0       0       0
  4216 ;;Total ram usage:        4 bytes
  4217 ;; Hardware stack levels used: 1
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_MovieShape
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225     0064                     _MovieUp:	
  4226                           ;psect for function _MovieUp
  4227                           
  4228     0064                     l1394:	
  4229                           ;incstack = 0
  4230                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4231                           
  4232                           
  4233                           ;shape.c: 21:     _shapePosition->y--;
  4234     0064  0871               	movf	MovieUp@_shapePosition,w
  4235     0065  3E02               	addlw	2
  4236     0066  00F3               	movwf	??_MovieUp
  4237     0067  0872               	movf	MovieUp@_shapePosition+1,w
  4238     0068  1803               	skipnc
  4239     0069  3E01               	addlw	1
  4240     006A  3E00               	addlw	0
  4241     006B  00F4               	movwf	??_MovieUp+1
  4242     006C  0873               	movf	??_MovieUp,w
  4243     006D  0084               	movwf	4
  4244     006E  1783               	bsf	3,7
  4245     006F  1C74               	btfss	??_MovieUp+1,0
  4246     0070  1383               	bcf	3,7
  4247     0071  30FF               	movlw	255
  4248     0072  0780               	addwf	0,f
  4249     0073  0F84               	incfsz	4,f
  4250     0074  0800               	movf	0,w
  4251     0075  1803               	skipnc
  4252     0076  0A00               	incf	0,w
  4253     0077  00FF               	movwf	btemp+1
  4254     0078  30FF               	movlw	255
  4255     0079  077F               	addwf	btemp+1,w
  4256     007A  0080               	movwf	0
  4257     007B  0384               	decf	4,f
  4258     007C                     l116:
  4259     007C  0008               	return
  4260     007D                     __end_of_MovieUp:
  4261                           
  4262                           	psect	text22
  4263     0FEA                     __ptext22:	
  4264 ;; *************** function _MovieRigth *****************
  4265 ;; Defined at:
  4266 ;;		line 28 in file "shape.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4269 ;;		 -> main@shapePosition(4), 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;		None
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         2       0       0       0       0
  4282 ;;      Locals:         0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0
  4284 ;;      Totals:         2       0       0       0       0
  4285 ;;Total ram usage:        2 bytes
  4286 ;; Hardware stack levels used: 1
  4287 ;; This function calls:
  4288 ;;		Nothing
  4289 ;; This function is called by:
  4290 ;;		_MovieShape
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294     0FEA                     _MovieRigth:	
  4295                           ;psect for function _MovieRigth
  4296                           
  4297     0FEA                     l1398:	
  4298                           ;incstack = 0
  4299                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  4300                           
  4301                           
  4302                           ;shape.c: 29:     _shapePosition->x++;
  4303     0FEA  0871               	movf	MovieRigth@_shapePosition,w
  4304     0FEB  0084               	movwf	4
  4305     0FEC  1783               	bsf	3,7
  4306     0FED  1C72               	btfss	MovieRigth@_shapePosition+1,0
  4307     0FEE  1383               	bcf	3,7
  4308     0FEF  3001               	movlw	1
  4309     0FF0  0780               	addwf	0,f
  4310     0FF1  0A84               	incf	4,f
  4311     0FF2  1803               	skipnc
  4312     0FF3  0A80               	incf	0,f
  4313     0FF4                     l122:
  4314     0FF4  0008               	return
  4315     0FF5                     __end_of_MovieRigth:
  4316                           
  4317                           	psect	text23
  4318     0005                     __ptext23:	
  4319 ;; *************** function _MovieLeft *****************
  4320 ;; Defined at:
  4321 ;;		line 24 in file "shape.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4324 ;;		 -> main@shapePosition(4), 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;		None
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, fsr0l, fsr0h, btemp+1
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4336 ;;      Params:         2       0       0       0       0
  4337 ;;      Locals:         0       0       0       0       0
  4338 ;;      Temps:          0       0       0       0       0
  4339 ;;      Totals:         2       0       0       0       0
  4340 ;;Total ram usage:        2 bytes
  4341 ;; Hardware stack levels used: 1
  4342 ;; This function calls:
  4343 ;;		Nothing
  4344 ;; This function is called by:
  4345 ;;		_MovieShape
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349     0005                     _MovieLeft:	
  4350                           ;psect for function _MovieLeft
  4351                           
  4352     0005                     l1396:	
  4353                           ;incstack = 0
  4354                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  4355                           
  4356                           
  4357                           ;shape.c: 25:     _shapePosition->x--;
  4358     0005  0871               	movf	MovieLeft@_shapePosition,w
  4359     0006  0084               	movwf	4
  4360     0007  1783               	bsf	3,7
  4361     0008  1C72               	btfss	MovieLeft@_shapePosition+1,0
  4362     0009  1383               	bcf	3,7
  4363     000A  30FF               	movlw	255
  4364     000B  0780               	addwf	0,f
  4365     000C  0F84               	incfsz	4,f
  4366     000D  0800               	movf	0,w
  4367     000E  1803               	skipnc
  4368     000F  0A00               	incf	0,w
  4369     0010  00FF               	movwf	btemp+1
  4370     0011  30FF               	movlw	255
  4371     0012  077F               	addwf	btemp+1,w
  4372     0013  0080               	movwf	0
  4373     0014  0384               	decf	4,f
  4374     0015                     l119:
  4375     0015  0008               	return
  4376     0016                     __end_of_MovieLeft:
  4377                           
  4378                           	psect	text24
  4379     0028                     __ptext24:	
  4380 ;; *************** function _MovieDown *****************
  4381 ;; Defined at:
  4382 ;;		line 16 in file "shape.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4385 ;;		 -> main@shapePosition(4), 
  4386 ;; Auto vars:     Size  Location     Type
  4387 ;;		None
  4388 ;; Return value:  Size  Location     Type
  4389 ;;                  1    wreg      void 
  4390 ;; Registers used:
  4391 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4392 ;; Tracked objects:
  4393 ;;		On entry : 0/0
  4394 ;;		On exit  : 0/0
  4395 ;;		Unchanged: 0/0
  4396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4397 ;;      Params:         2       0       0       0       0
  4398 ;;      Locals:         0       0       0       0       0
  4399 ;;      Temps:          2       0       0       0       0
  4400 ;;      Totals:         4       0       0       0       0
  4401 ;;Total ram usage:        4 bytes
  4402 ;; Hardware stack levels used: 1
  4403 ;; This function calls:
  4404 ;;		Nothing
  4405 ;; This function is called by:
  4406 ;;		_MovieShape
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410     0028                     _MovieDown:	
  4411                           ;psect for function _MovieDown
  4412                           
  4413     0028                     l1392:	
  4414                           ;incstack = 0
  4415                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  4416                           
  4417                           
  4418                           ;shape.c: 17:     _shapePosition->y++;
  4419     0028  0871               	movf	MovieDown@_shapePosition,w
  4420     0029  3E02               	addlw	2
  4421     002A  00F3               	movwf	??_MovieDown
  4422     002B  0872               	movf	MovieDown@_shapePosition+1,w
  4423     002C  1803               	skipnc
  4424     002D  3E01               	addlw	1
  4425     002E  3E00               	addlw	0
  4426     002F  00F4               	movwf	??_MovieDown+1
  4427     0030  0873               	movf	??_MovieDown,w
  4428     0031  0084               	movwf	4
  4429     0032  1783               	bsf	3,7
  4430     0033  1C74               	btfss	??_MovieDown+1,0
  4431     0034  1383               	bcf	3,7
  4432     0035  3001               	movlw	1
  4433     0036  0780               	addwf	0,f
  4434     0037  0A84               	incf	4,f
  4435     0038  1803               	skipnc
  4436     0039  0A80               	incf	0,f
  4437     003A                     l113:
  4438     003A  0008               	return
  4439     003B                     __end_of_MovieDown:
  4440     0002                     ___latbits      equ	2
  4441     007E                     btemp           set	126	;btemp
  4442     007E                     wtemp0          set	126
  4443                           
  4444                           	psect	config
  4445                           
  4446                           ;Config register CONFIG @ 0x2007
  4447                           ;	Oscillator Selection bits
  4448                           ;	FOSC = HS, HS oscillator
  4449                           ;	Watchdog Timer Enable bit
  4450                           ;	WDTE = OFF, WDT disabled
  4451                           ;	Power-up Timer Enable bit
  4452                           ;	PWRTE = OFF, PWRT disabled
  4453                           ;	FLASH Program Memory Code Protection bits
  4454                           ;	CP = OFF, Code protection off
  4455                           ;	Brown-out Reset Enable bit
  4456                           ;	BOREN = OFF, BOR disabled
  4457                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  4458                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4459                           ;	Data EE Memory Code Protection
  4460                           ;	CPD = OFF, Code Protection off
  4461                           ;	FLASH Program Memory Write Enable
  4462                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  4463                           ;	In-Circuit Debugger Mode bit
  4464                           ;	DEBUG = 0x1, unprogrammed default
  4465     2007                     	org	8199
  4466     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     71      79
    BANK1            80      0       9
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    calloc@new_ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ChangeOfCoordinates@_reverse	PTR _Bool  size(1) Largest target is 1
		 -> main@reverse(BANK0[1]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    __expand_heap@new_brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __expand_heap@pn	PTR unsigned int  size(1) Largest target is 2
		 -> malloc@m(BANK0[2]), 

    free@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@cptr	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    InsertResult@array_	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    InsertResult@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@cur	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@end	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@new	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@p	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@sz	PTR unsigned int  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    Reverse@array_	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    Rotate@array_	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    Rotate@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    S673$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ?___simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____expand_heap	PTR void  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl	PTR void  size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp__calloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _Rotate->_InsertResult
    _Rotate->_free
    _calloc->_malloc
    _calloc->_memset
    _memset->___wmul
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_Rotate
    _Rotate->_calloc
    _calloc->_malloc
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    4606
                                             61 BANK0     10    10      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 13     7      6    4158
                                             48 BANK0     13     7      6
                         _MovieShape
                            _Reverse
                             _Rotate
 ---------------------------------------------------------------------------------
 (2) _Rotate                                              18    15      3    2644
                                             30 BANK0     18    15      3
                       _InsertResult
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (3) _free                                                12    10      2     289
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (3) _calloc                                               6     2      4    1813
                                             24 BANK0      6     2      4
                             ___wmul
                             _malloc
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6      99
                                              6 COMMON     6     0      6
                                              0 BANK0      2     2      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _malloc                                              14    12      2    1461
                                              8 COMMON     4     2      2
                                             14 BANK0     10    10      0
                      ___expand_heap
                 ___simple_search_fl
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___simple_search_fl                                  22    20      2     827
                                              0 COMMON     8     6      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (5) ___expand_heap                                        5     4      1     136
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4      96
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _InsertResult                                        12     7      5     137
                                              0 COMMON    12     7      5
 ---------------------------------------------------------------------------------
 (2) _Reverse                                             11     8      3     271
                                              0 COMMON    11     8      3
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           8     3      5     729
                                              5 BANK0      8     3      5
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           14     9      5     312
                                              4 COMMON     9     4      5
                                              0 BANK0      5     5      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
     _Reverse
     _Rotate
       _InsertResult
       _calloc
         ___wmul
         _malloc
           ___expand_heap
           ___simple_search_fl
           ___wmul (ARG)
         _memset
           ___wmul (ARG)
       _free
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               85      0       0      0.0%
BITBANK3            85      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       9     11.2%
BITBANK1            80      0       0      0.0%
BANK0               80     71      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0     101      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 19 09:12:36 2024

                      _SpiClearMatrix 004E                                     pc 0002  
                                  l21 04A1                                    l32 0563  
                                  l71 0FFE                                    l72 0FFF  
                                  l49 0FE9                                    l66 0027  
                                  l91 004D                                    l69 0FFA  
                                  l85 0063                                    l88 0152  
                                  fsr 0004                   ___wmul@multiplicand 0073  
                     SpiSendByte@data 0071                                   l110 0354  
                                 l104 0099                                   l113 003A  
                                 l122 0FF4                                   l116 007C  
                                 l132 02D3                                   l140 03EA  
                                 l119 0015                                   l152 0112  
                                 l240 00DF                                   l146 0195  
                                 l238 00C7                                   l702 01DD  
                                 l716 0705                                   l708 07D7  
                                 l725 0651                                   l719 07AE  
                                 l751 0479                                   l753 0472  
                                 l745 03FB                                   l772 022A  
                                 l749 049C                                   l767 01F2  
                                 l778 00BA                                   _RA5 002D  
                                 u500 0660                                   u501 065F  
                                 u510 067C                                   u511 067B  
                                 u600 01EE                                   u520 0682  
                                 u601 01ED                                   u521 0681  
                                 u610 01FB                                   u530 06D8  
                                 u611 01FA                                   u531 06D7  
                                 u515 0678                                   u620 020F  
                                 u540 06DE                                   u700 0418  
                                 u621 020E                                   u541 06DD  
                                 u701 0417                                   u630 0219  
                                 u550 06FC                                   u710 0436  
                                 u631 0218                                   u551 06FB  
                                 u535 06D4                                   u711 0435  
                                 u800 00ED                                   u640 00C1  
                                 u560 0722                                   u720 0448  
                                 u641 00C0                                   u561 0721  
                                 u721 0447                                   u490 0FFE  
                                 u810 0112                                   u570 0728  
                                 u730 0463                                   u491 0FFD  
                                 u811 0111                                   u635 0215  
                                 u571 0727                                   u555 06F8  
                                 u731 0462                                   u580 0756  
                                 u740 046E                                   u820 056E  
                                 u581 0755                                   u741 046D  
                                 u725 0444                                   u821 056D  
                                 u670 00DB                                   u590 07B8  
                                 u750 00BA                                   u830 0584  
                                 u815 010E                                   u671 00DA  
                                 u655 00C8                                   u591 07B7  
                                 u751 00B9                                   u831 0583  
                                 u760 0063                                   u680 03F5  
                                 u840 059A                                   u920 03B1  
                                 u904 0398                                   u761 0062  
                                 u665 00CF                                   u745 046A  
                                 u681 03F4                                   u841 0599  
                                 u905 0396                                   u690 0404  
                                 u850 060A                                   u914 03A2  
                                 u930 0522                                   u595 07B4  
                                 u691 0403                                   u851 0609  
                                 u915 03A0                                   u931 0521  
                                 u780 0354                                   u860 0195  
                                 u940 052A                                   u781 0353  
                                 u861 0194                                   u845 0596  
                                 u941 0529                                   u774 0322  
                                 u790 01BA                                   u870 0370  
                                 u950 0532                                   u775 0320  
                                 u791 01B9                                   u855 0606  
                                 u871 036F                                   u951 0531  
                                 u935 051E                                   u880 037C  
                                 u960 0563                                   u785 0350  
                                 u865 0191                                   u881 037B  
                                 u961 0562                                   u890 038B  
                                 u891 038A                                   u965 055F  
                                 u977 0119                                   u987 0507  
                                 fsr0 0004                                   indf 0000  
                                l1210 065A                                  l1300 00BB  
                                l1220 067C                                  l1212 0660  
                                l1206 0FF6                                  l1310 00DB  
                                l1302 00BD                                  l1222 0682  
                                l1230 06C4                                  l1304 00C1  
                                l1240 0709                                  l1232 06D8  
                                l1224 06A8                                  l1216 0663  
                                l1208 0652                                  l1320 0404  
                                l1400 0196                                  l1410 00E0  
                                l1306 00CE                                  l1250 0770  
                                l1234 06DE                                  l1226 06BB  
                                l1218 0668                                  l1242 071C  
                                l1330 0421                                  l1322 0409  
                                l1314 03EB                                  l1402 01B4  
                                l1412 00E3                                  l1308 00D5  
                                l1260 07BD                                  l1252 077A  
                                l1244 0722                                  l1340 0450  
                                l1332 0421                                  l1324 0418  
                                l1316 03EF                                  l1404 01BA  
                                l1414 00FE                                  l1270 01DE  
                                l1262 07CF                                  l1254 0798  
                                l1246 0728                                  l1238 06FD  
                                l1350 046E                                  l1342 045D  
                                l1334 0430                                  l1326 041E  
                                l1318 03F5                                  l1406 01D7  
                                l1430 05E1                                  l1422 056F  
                                l1510 03C9                                  l1502 038C  
                                l1416 0104                                  l1280 0206  
                                l1272 01E6                                  l1256 07AA  
                                l1248 0756                                  l1360 0493  
                                l1352 047D                                  l1336 0436  
                                l1424 0584                                  l1504 03BC  
                                l1450 027C                                  l1290 0222  
                                l1282 020F                                  l1274 01EE  
                                l1258 07B8                                  l1354 0481  
                                l1338 0448                                  l1362 0498  
                                l1370 00A8                                  l1442 062D  
                                l1426 059A                                  l1418 0564  
                                l1506 03C2                                  l1514 03D0  
                                l1530 04D9                                  l1380 02D4  
                                l1452 0286                                  l1460 02A4  
                                l1284 0219                                  l1276 01FB  
                                l1356 048B                                  l1348 0464  
                                l1372 00AC                                  l1428 05BF  
                                l1436 05E6                                  l1444 0640  
                                l1516 03DF                                  l1540 0522  
                                l1524 04A6                                  l1294 003B  
                                l1390 0332                                  l1382 02D4  
                                l1374 004E                                  l1454 0290  
                                l1462 02BD                                  l1286 021F  
                                l1278 01FF                                  l1358 048F  
                                l1366 009A                                  l1438 060A  
                                l1550 054E                                  l1542 052A  
                                l1526 04B7                                  l1534 04EA  
                                l1518 049D                                  l1392 0028  
                                l1296 003E                                  l1384 02E9  
                                l1376 0050                                  l1464 02C2  
                                l1456 029A                                  l1448 027B  
                                l1480 0181                                  l1472 0153  
                                l1368 00A1                                  l1552 0556  
                                l1544 0532                                  l1528 04C8  
                                l1536 04FF                                  l1560 0019  
                                l1394 0064                                  l1298 004A  
                                l1386 0305                                  l1378 005D  
                                l1482 0187                                  l1474 0155  
                                l1490 0378                                  l1546 053D  
                                l1538 0515                                  l1570 0122  
                                l1562 0021                                  l1396 0005  
                                l1388 032C                                  l1476 015E  
                                l1484 0355                                  l1548 0543  
                                l1572 012C                                  l1580 0FE3  
                                l1564 0023                                  l1398 0FEA  
                                l1478 017B                                  l1494 037D  
                                l1486 036A                                  l1646 04F1  
                                l1574 0137                                  l1566 0113  
                                l1582 007D                                  l1558 0016  
                                l1590 0250                                  l1648 02AC  
                                l1496 0385                                  l1488 0370  
                                l1576 0142                                  l1568 011F  
                                l1584 0087                                  l1592 0252  
                                l1498 0387                                  l1578 014D  
                                l1594 0261                                  l1586 022B  
                                l1588 0235                                  _brkp 0067  
                                _free 0564                                  _main 022B  
                                btemp 007E                           main@reverse 0062  
                                start 0000                __end_of_SpiClearMatrix 0064  
                     __end_of_MovieUp 007D                       __end_of_SpiInit 0028  
                     __end_of_Reverse 0196                                 ?_free 0071  
                               ?_main 0071                   _ChangeOfCoordinates 049D  
                               _PORTA 0005                                 _PORTB 0006  
                               _TRISA 0085                                 _TRISB 0086  
                               _TRISC 0087                                 _SSPIF 0063  
                     SpiClearMatrix@i 0077                     SendToSegment@data 0074  
                               _errno 00A4                                 free@c 007B  
                               pclath 000A                      ___expand_heap@pn 0071  
                               status 0003                                 wtemp0 007E  
                        main@square_1 005D                  ?_ChangeOfCoordinates 0050  
                     ?_SpiClearMatrix 0071                       __initialization 07D8  
                        __end_of_free 0652                          __end_of_main 0278  
                       ___expand_heap 01DE                            _MatrixInit 0113  
                              ??_free 0073                                ??_main 007E  
                       ?_InsertResult 0071                         ??_SetPosition 0077  
                     InsertResult@res 0072                         calloc@new_ptr 003C  
               ??_ChangeOfCoordinates 0056                                _SSPCON 0014  
                              _SSPBUF 0013                            _MovieShape 0278  
                          _MovieRigth 0FEA                  MovieShape@shapeArray 0027  
                           ??_MovieUp 0073                             ??_SpiInit 0071  
                           ??_Reverse 0074                         ??_SpiSendByte 0071  
                              _Rotate 0355                        ?___expand_heap 0071  
             ___simple_search_fl@best 002C               ___simple_search_fl@last 0026  
             ___simple_search_fl@next 0028                                ___wmul 00BB  
                              _calloc 0196                                _malloc 03EB  
                              _memset 009A                        ??_InsertResult 0076  
                      ShowShape@coord 0075               __end_of__initialization 07FC  
                 __end_of_SetPosition 009A                            ___freelist 006D  
                      __pcstackCOMMON 0071                          __pidataBANK1 0FE0  
                         ?_MatrixInit 0071                   __end_of_SpiSendByte 1000  
   ChangeOfCoordinates@_shapePosition 0050  ChangeOfCoordinates@_countElemntArray 0053  
          __end_of___simple_search_fl 07D8                            __pbssBANK0 0067  
                          __pbssBANK1 00A0                     __end_of_MovieLeft 0016  
                   __end_of_MovieDown 003B              MovieShape@_shapePosition 0025  
                   __end_of_PortBInit 0FEA                     __end_of_ShowShape 0355  
                         ?_MovieShape 0025                     main@shapePosition 0063  
                         ?_MovieRigth 0071                       ??___expand_heap 0072  
                          __pmaintext 022B                               ?_Rotate 003E  
                             ?___wmul 0071                               ?_calloc 0038  
                             ?_malloc 0079                               ?_memset 0077  
                       MovieShape@dir 002C                    InsertResult@array_ 0071  
           ShowShape@countElemntArray 0077                           _SetPosition 007D  
                             _SSPSTAT 0094                            __stringtab 0800  
                    ??_SpiClearMatrix 0075                  __end_of_InsertResult 0113  
                          calloc@size 003A                               _MovieUp 0064  
                             _SpiInit 0016                         _SendToSegment 003B  
                ___simple_search_fl@c 002A                               _Reverse 0153  
                ___simple_search_fl@n 0071                           _SpiSendByte 0FF5  
                             Rotate@i 004A                               Rotate@x 0048  
            ___simple_search_fl@split 0024                               __ptext1 0016  
                             __ptext2 007D                               __ptext3 0FE3  
                             __ptext4 0113                               __ptext5 049D  
                             __ptext6 0355                               __ptext7 0564  
                             __ptext8 0196                               __ptext9 009A  
             ChangeOfCoordinates@step 005B                               free@ptr 0071  
                end_of_initialization 07FC                               malloc@m 002E  
                             malloc@n 0079                               malloc@p 0034  
              ___expand_heap@new_brkp 0074                               memset@c 0079  
                             memset@n 007B                               memset@p 0020  
        InsertResult@countElemntArray 0074                        ?_SendToSegment 0072  
                       Reverse@array_ 0071                   SetPosition@position 0071  
         __end_of_ChangeOfCoordinates 0564               MovieLeft@_shapePosition 0071  
          ChangeOfCoordinates@_figure 0052                        __end_of_Rotate 03EB  
                      __end_of___wmul 00E0                          ??_MatrixInit 0078  
                      __end_of_calloc 01DE                        __end_of_malloc 049D  
                      __end_of_memset 00BB                       ___expand_heap@n 0072  
                 start_initialization 07D8                            malloc@lock 00A0  
                          malloc@size 0032                    __end_of_MatrixInit 0153  
                     ??_SendToSegment 0075                          ??_MovieShape 002A  
                        ??_MovieRigth 0073                             _MovieLeft 0005  
                           _MovieDown 0028                    ___simple_search_fl 0652  
                           _PortBInit 0FE3                              ??_Rotate 0041  
                           _ShowShape 02D4          ___simple_search_fl@best_last 0022  
                            ??___wmul 0075                              ??_calloc 007D  
                         __pdataBANK1 00A6                              ??_malloc 007B  
                            ??_memset 007D                   ?___simple_search_fl 0071  
                          memset@dest 0077                         ShowShape@_pos 007A  
                        SetPosition@x 0073                          SetPosition@y 0075  
                           Rotate@res 004C                             ___heap_hi 0170  
                           ___heap_lo 0110                             ___latbits 0002  
                        _InsertResult 00E0                         __pcstackBANK0 0020  
                  __end_of_MovieShape 02D4                    __end_of_MovieRigth 0FF5  
                        ?_SetPosition 0071                  main@countElemntArray 0060  
                 ShowShape@shapeArray 0079                  ??___simple_search_fl 0073  
         ChangeOfCoordinates@_reverse 0055                            ?_MovieLeft 0071  
                          ?_MovieDown 0071                              ?_MovieUp 0071  
                            ?_SpiInit 0071                              ?_Reverse 0071  
                          ?_PortBInit 0071                 __end_of___expand_heap 022B  
                        ?_SpiSendByte 0071                            ?_ShowShape 0075  
                           __pstrings 0800               MovieDown@_shapePosition 0071  
    __end_ofChangeOfCoordinates@delay 080A                 MovieUp@_shapePosition 0071  
                      ___wmul@product 0075                           __stringbase 0805  
                   ___wmul@multiplier 0071                Rotate@countElemntArray 003F  
                           malloc@end 0069                             malloc@cur 006B  
                           malloc@new 0036                         InsertResult@y 007B  
                         ??_MovieLeft 0073                           ??_MovieDown 0073  
                         calloc@nmemb 0038                              Reverse@i 0078  
                            Reverse@j 007A                              Reverse@t 0077  
                         ??_PortBInit 0071               Reverse@countElemntArray 0072  
                         ??_ShowShape 0020                          ShowShape@pos 007C  
                            Rotate@_i 004E                    __end_of__stringtab 0806  
                            __ptext10 03EB                              __ptext11 0652  
                            __ptext20 0FF5                              __ptext12 01DE  
                            __ptext21 0064                              __ptext13 00BB  
                            __ptext22 0FEA                              __ptext14 00E0  
                            __ptext23 0005                              __ptext15 0153  
                            __ptext24 0028                              __ptext16 0278  
                            __ptext17 004E                              __ptext18 02D4  
                            __ptext19 003B              ChangeOfCoordinates@delay 0806  
                            main@F932 00A6                  SendToSegment@segment 0072  
                            free@cptr 0079                              malloc@sz 0030  
   ___simple_search_fl@remaining_size 0020                  ChangeOfCoordinates@i 0059  
                           stringcode 0800                 __end_of_SendToSegment 004E  
            MovieRigth@_shapePosition 0071            MovieShape@countElemntArray 0028  
                            stringdir 0800                              stringtab 0800  
                        Rotate@array_ 003E  

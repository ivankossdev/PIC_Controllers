

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec  9 10:16:04 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26     0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F876 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0004                     fsr             equ	4
    62     0004                     fsr0            equ	4
    63     0000                     indf            equ	0
    64     0000                     indf0           equ	0
    65     0002                     pc              equ	2
    66     0002                     pcl             equ	2
    67     000A                     pclath          equ	10
    68     0003                     status          equ	3
    69     0000                     INDF            equ	0	;# 
    70     0001                     TMR0            equ	1	;# 
    71     0002                     PCL             equ	2	;# 
    72     0003                     STATUS          equ	3	;# 
    73     0004                     FSR             equ	4	;# 
    74     0005                     PORTA           equ	5	;# 
    75     0006                     PORTB           equ	6	;# 
    76     0007                     PORTC           equ	7	;# 
    77     000A                     PCLATH          equ	10	;# 
    78     000B                     INTCON          equ	11	;# 
    79     000C                     PIR1            equ	12	;# 
    80     000D                     PIR2            equ	13	;# 
    81     000E                     TMR1            equ	14	;# 
    82     000E                     TMR1L           equ	14	;# 
    83     000F                     TMR1H           equ	15	;# 
    84     0010                     T1CON           equ	16	;# 
    85     0011                     TMR2            equ	17	;# 
    86     0012                     T2CON           equ	18	;# 
    87     0013                     SSPBUF          equ	19	;# 
    88     0014                     SSPCON          equ	20	;# 
    89     0015                     CCPR1           equ	21	;# 
    90     0015                     CCPR1L          equ	21	;# 
    91     0016                     CCPR1H          equ	22	;# 
    92     0017                     CCP1CON         equ	23	;# 
    93     0018                     RCSTA           equ	24	;# 
    94     0019                     TXREG           equ	25	;# 
    95     001A                     RCREG           equ	26	;# 
    96     001B                     CCPR2           equ	27	;# 
    97     001B                     CCPR2L          equ	27	;# 
    98     001C                     CCPR2H          equ	28	;# 
    99     001D                     CCP2CON         equ	29	;# 
   100     001E                     ADRESH          equ	30	;# 
   101     001F                     ADCON0          equ	31	;# 
   102     0081                     OPTION_REG      equ	129	;# 
   103     0085                     TRISA           equ	133	;# 
   104     0086                     TRISB           equ	134	;# 
   105     0087                     TRISC           equ	135	;# 
   106     008C                     PIE1            equ	140	;# 
   107     008D                     PIE2            equ	141	;# 
   108     008E                     PCON            equ	142	;# 
   109     0091                     SSPCON2         equ	145	;# 
   110     0092                     PR2             equ	146	;# 
   111     0093                     SSPADD          equ	147	;# 
   112     0094                     SSPSTAT         equ	148	;# 
   113     0098                     TXSTA           equ	152	;# 
   114     0099                     SPBRG           equ	153	;# 
   115     009E                     ADRESL          equ	158	;# 
   116     009F                     ADCON1          equ	159	;# 
   117     010C                     EEDATA          equ	268	;# 
   118     010D                     EEADR           equ	269	;# 
   119     010E                     EEDATH          equ	270	;# 
   120     010F                     EEADRH          equ	271	;# 
   121     018C                     EECON1          equ	396	;# 
   122     018D                     EECON2          equ	397	;# 
   123     0000                     INDF            equ	0	;# 
   124     0001                     TMR0            equ	1	;# 
   125     0002                     PCL             equ	2	;# 
   126     0003                     STATUS          equ	3	;# 
   127     0004                     FSR             equ	4	;# 
   128     0005                     PORTA           equ	5	;# 
   129     0006                     PORTB           equ	6	;# 
   130     0007                     PORTC           equ	7	;# 
   131     000A                     PCLATH          equ	10	;# 
   132     000B                     INTCON          equ	11	;# 
   133     000C                     PIR1            equ	12	;# 
   134     000D                     PIR2            equ	13	;# 
   135     000E                     TMR1            equ	14	;# 
   136     000E                     TMR1L           equ	14	;# 
   137     000F                     TMR1H           equ	15	;# 
   138     0010                     T1CON           equ	16	;# 
   139     0011                     TMR2            equ	17	;# 
   140     0012                     T2CON           equ	18	;# 
   141     0013                     SSPBUF          equ	19	;# 
   142     0014                     SSPCON          equ	20	;# 
   143     0015                     CCPR1           equ	21	;# 
   144     0015                     CCPR1L          equ	21	;# 
   145     0016                     CCPR1H          equ	22	;# 
   146     0017                     CCP1CON         equ	23	;# 
   147     0018                     RCSTA           equ	24	;# 
   148     0019                     TXREG           equ	25	;# 
   149     001A                     RCREG           equ	26	;# 
   150     001B                     CCPR2           equ	27	;# 
   151     001B                     CCPR2L          equ	27	;# 
   152     001C                     CCPR2H          equ	28	;# 
   153     001D                     CCP2CON         equ	29	;# 
   154     001E                     ADRESH          equ	30	;# 
   155     001F                     ADCON0          equ	31	;# 
   156     0081                     OPTION_REG      equ	129	;# 
   157     0085                     TRISA           equ	133	;# 
   158     0086                     TRISB           equ	134	;# 
   159     0087                     TRISC           equ	135	;# 
   160     008C                     PIE1            equ	140	;# 
   161     008D                     PIE2            equ	141	;# 
   162     008E                     PCON            equ	142	;# 
   163     0091                     SSPCON2         equ	145	;# 
   164     0092                     PR2             equ	146	;# 
   165     0093                     SSPADD          equ	147	;# 
   166     0094                     SSPSTAT         equ	148	;# 
   167     0098                     TXSTA           equ	152	;# 
   168     0099                     SPBRG           equ	153	;# 
   169     009E                     ADRESL          equ	158	;# 
   170     009F                     ADCON1          equ	159	;# 
   171     010C                     EEDATA          equ	268	;# 
   172     010D                     EEADR           equ	269	;# 
   173     010E                     EEDATH          equ	270	;# 
   174     010F                     EEADRH          equ	271	;# 
   175     018C                     EECON1          equ	396	;# 
   176     018D                     EECON2          equ	397	;# 
   177     0000                     INDF            equ	0	;# 
   178     0001                     TMR0            equ	1	;# 
   179     0002                     PCL             equ	2	;# 
   180     0003                     STATUS          equ	3	;# 
   181     0004                     FSR             equ	4	;# 
   182     0005                     PORTA           equ	5	;# 
   183     0006                     PORTB           equ	6	;# 
   184     0007                     PORTC           equ	7	;# 
   185     000A                     PCLATH          equ	10	;# 
   186     000B                     INTCON          equ	11	;# 
   187     000C                     PIR1            equ	12	;# 
   188     000D                     PIR2            equ	13	;# 
   189     000E                     TMR1            equ	14	;# 
   190     000E                     TMR1L           equ	14	;# 
   191     000F                     TMR1H           equ	15	;# 
   192     0010                     T1CON           equ	16	;# 
   193     0011                     TMR2            equ	17	;# 
   194     0012                     T2CON           equ	18	;# 
   195     0013                     SSPBUF          equ	19	;# 
   196     0014                     SSPCON          equ	20	;# 
   197     0015                     CCPR1           equ	21	;# 
   198     0015                     CCPR1L          equ	21	;# 
   199     0016                     CCPR1H          equ	22	;# 
   200     0017                     CCP1CON         equ	23	;# 
   201     0018                     RCSTA           equ	24	;# 
   202     0019                     TXREG           equ	25	;# 
   203     001A                     RCREG           equ	26	;# 
   204     001B                     CCPR2           equ	27	;# 
   205     001B                     CCPR2L          equ	27	;# 
   206     001C                     CCPR2H          equ	28	;# 
   207     001D                     CCP2CON         equ	29	;# 
   208     001E                     ADRESH          equ	30	;# 
   209     001F                     ADCON0          equ	31	;# 
   210     0081                     OPTION_REG      equ	129	;# 
   211     0085                     TRISA           equ	133	;# 
   212     0086                     TRISB           equ	134	;# 
   213     0087                     TRISC           equ	135	;# 
   214     008C                     PIE1            equ	140	;# 
   215     008D                     PIE2            equ	141	;# 
   216     008E                     PCON            equ	142	;# 
   217     0091                     SSPCON2         equ	145	;# 
   218     0092                     PR2             equ	146	;# 
   219     0093                     SSPADD          equ	147	;# 
   220     0094                     SSPSTAT         equ	148	;# 
   221     0098                     TXSTA           equ	152	;# 
   222     0099                     SPBRG           equ	153	;# 
   223     009E                     ADRESL          equ	158	;# 
   224     009F                     ADCON1          equ	159	;# 
   225     010C                     EEDATA          equ	268	;# 
   226     010D                     EEADR           equ	269	;# 
   227     010E                     EEDATH          equ	270	;# 
   228     010F                     EEADRH          equ	271	;# 
   229     018C                     EECON1          equ	396	;# 
   230     018D                     EECON2          equ	397	;# 
   231     0000                     INDF            equ	0	;# 
   232     0001                     TMR0            equ	1	;# 
   233     0002                     PCL             equ	2	;# 
   234     0003                     STATUS          equ	3	;# 
   235     0004                     FSR             equ	4	;# 
   236     0005                     PORTA           equ	5	;# 
   237     0006                     PORTB           equ	6	;# 
   238     0007                     PORTC           equ	7	;# 
   239     000A                     PCLATH          equ	10	;# 
   240     000B                     INTCON          equ	11	;# 
   241     000C                     PIR1            equ	12	;# 
   242     000D                     PIR2            equ	13	;# 
   243     000E                     TMR1            equ	14	;# 
   244     000E                     TMR1L           equ	14	;# 
   245     000F                     TMR1H           equ	15	;# 
   246     0010                     T1CON           equ	16	;# 
   247     0011                     TMR2            equ	17	;# 
   248     0012                     T2CON           equ	18	;# 
   249     0013                     SSPBUF          equ	19	;# 
   250     0014                     SSPCON          equ	20	;# 
   251     0015                     CCPR1           equ	21	;# 
   252     0015                     CCPR1L          equ	21	;# 
   253     0016                     CCPR1H          equ	22	;# 
   254     0017                     CCP1CON         equ	23	;# 
   255     0018                     RCSTA           equ	24	;# 
   256     0019                     TXREG           equ	25	;# 
   257     001A                     RCREG           equ	26	;# 
   258     001B                     CCPR2           equ	27	;# 
   259     001B                     CCPR2L          equ	27	;# 
   260     001C                     CCPR2H          equ	28	;# 
   261     001D                     CCP2CON         equ	29	;# 
   262     001E                     ADRESH          equ	30	;# 
   263     001F                     ADCON0          equ	31	;# 
   264     0081                     OPTION_REG      equ	129	;# 
   265     0085                     TRISA           equ	133	;# 
   266     0086                     TRISB           equ	134	;# 
   267     0087                     TRISC           equ	135	;# 
   268     008C                     PIE1            equ	140	;# 
   269     008D                     PIE2            equ	141	;# 
   270     008E                     PCON            equ	142	;# 
   271     0091                     SSPCON2         equ	145	;# 
   272     0092                     PR2             equ	146	;# 
   273     0093                     SSPADD          equ	147	;# 
   274     0094                     SSPSTAT         equ	148	;# 
   275     0098                     TXSTA           equ	152	;# 
   276     0099                     SPBRG           equ	153	;# 
   277     009E                     ADRESL          equ	158	;# 
   278     009F                     ADCON1          equ	159	;# 
   279     010C                     EEDATA          equ	268	;# 
   280     010D                     EEADR           equ	269	;# 
   281     010E                     EEDATH          equ	270	;# 
   282     010F                     EEADRH          equ	271	;# 
   283     018C                     EECON1          equ	396	;# 
   284     018D                     EECON2          equ	397	;# 
   285     0000                     INDF            equ	0	;# 
   286     0001                     TMR0            equ	1	;# 
   287     0002                     PCL             equ	2	;# 
   288     0003                     STATUS          equ	3	;# 
   289     0004                     FSR             equ	4	;# 
   290     0005                     PORTA           equ	5	;# 
   291     0006                     PORTB           equ	6	;# 
   292     0007                     PORTC           equ	7	;# 
   293     000A                     PCLATH          equ	10	;# 
   294     000B                     INTCON          equ	11	;# 
   295     000C                     PIR1            equ	12	;# 
   296     000D                     PIR2            equ	13	;# 
   297     000E                     TMR1            equ	14	;# 
   298     000E                     TMR1L           equ	14	;# 
   299     000F                     TMR1H           equ	15	;# 
   300     0010                     T1CON           equ	16	;# 
   301     0011                     TMR2            equ	17	;# 
   302     0012                     T2CON           equ	18	;# 
   303     0013                     SSPBUF          equ	19	;# 
   304     0014                     SSPCON          equ	20	;# 
   305     0015                     CCPR1           equ	21	;# 
   306     0015                     CCPR1L          equ	21	;# 
   307     0016                     CCPR1H          equ	22	;# 
   308     0017                     CCP1CON         equ	23	;# 
   309     0018                     RCSTA           equ	24	;# 
   310     0019                     TXREG           equ	25	;# 
   311     001A                     RCREG           equ	26	;# 
   312     001B                     CCPR2           equ	27	;# 
   313     001B                     CCPR2L          equ	27	;# 
   314     001C                     CCPR2H          equ	28	;# 
   315     001D                     CCP2CON         equ	29	;# 
   316     001E                     ADRESH          equ	30	;# 
   317     001F                     ADCON0          equ	31	;# 
   318     0081                     OPTION_REG      equ	129	;# 
   319     0085                     TRISA           equ	133	;# 
   320     0086                     TRISB           equ	134	;# 
   321     0087                     TRISC           equ	135	;# 
   322     008C                     PIE1            equ	140	;# 
   323     008D                     PIE2            equ	141	;# 
   324     008E                     PCON            equ	142	;# 
   325     0091                     SSPCON2         equ	145	;# 
   326     0092                     PR2             equ	146	;# 
   327     0093                     SSPADD          equ	147	;# 
   328     0094                     SSPSTAT         equ	148	;# 
   329     0098                     TXSTA           equ	152	;# 
   330     0099                     SPBRG           equ	153	;# 
   331     009E                     ADRESL          equ	158	;# 
   332     009F                     ADCON1          equ	159	;# 
   333     010C                     EEDATA          equ	268	;# 
   334     010D                     EEADR           equ	269	;# 
   335     010E                     EEDATH          equ	270	;# 
   336     010F                     EEADRH          equ	271	;# 
   337     018C                     EECON1          equ	396	;# 
   338     018D                     EECON2          equ	397	;# 
   339     0000                     INDF            equ	0	;# 
   340     0001                     TMR0            equ	1	;# 
   341     0002                     PCL             equ	2	;# 
   342     0003                     STATUS          equ	3	;# 
   343     0004                     FSR             equ	4	;# 
   344     0005                     PORTA           equ	5	;# 
   345     0006                     PORTB           equ	6	;# 
   346     0007                     PORTC           equ	7	;# 
   347     000A                     PCLATH          equ	10	;# 
   348     000B                     INTCON          equ	11	;# 
   349     000C                     PIR1            equ	12	;# 
   350     000D                     PIR2            equ	13	;# 
   351     000E                     TMR1            equ	14	;# 
   352     000E                     TMR1L           equ	14	;# 
   353     000F                     TMR1H           equ	15	;# 
   354     0010                     T1CON           equ	16	;# 
   355     0011                     TMR2            equ	17	;# 
   356     0012                     T2CON           equ	18	;# 
   357     0013                     SSPBUF          equ	19	;# 
   358     0014                     SSPCON          equ	20	;# 
   359     0015                     CCPR1           equ	21	;# 
   360     0015                     CCPR1L          equ	21	;# 
   361     0016                     CCPR1H          equ	22	;# 
   362     0017                     CCP1CON         equ	23	;# 
   363     0018                     RCSTA           equ	24	;# 
   364     0019                     TXREG           equ	25	;# 
   365     001A                     RCREG           equ	26	;# 
   366     001B                     CCPR2           equ	27	;# 
   367     001B                     CCPR2L          equ	27	;# 
   368     001C                     CCPR2H          equ	28	;# 
   369     001D                     CCP2CON         equ	29	;# 
   370     001E                     ADRESH          equ	30	;# 
   371     001F                     ADCON0          equ	31	;# 
   372     0081                     OPTION_REG      equ	129	;# 
   373     0085                     TRISA           equ	133	;# 
   374     0086                     TRISB           equ	134	;# 
   375     0087                     TRISC           equ	135	;# 
   376     008C                     PIE1            equ	140	;# 
   377     008D                     PIE2            equ	141	;# 
   378     008E                     PCON            equ	142	;# 
   379     0091                     SSPCON2         equ	145	;# 
   380     0092                     PR2             equ	146	;# 
   381     0093                     SSPADD          equ	147	;# 
   382     0094                     SSPSTAT         equ	148	;# 
   383     0098                     TXSTA           equ	152	;# 
   384     0099                     SPBRG           equ	153	;# 
   385     009E                     ADRESL          equ	158	;# 
   386     009F                     ADCON1          equ	159	;# 
   387     010C                     EEDATA          equ	268	;# 
   388     010D                     EEADR           equ	269	;# 
   389     010E                     EEDATH          equ	270	;# 
   390     010F                     EEADRH          equ	271	;# 
   391     018C                     EECON1          equ	396	;# 
   392     018D                     EECON2          equ	397	;# 
   393                           
   394                           	psect	idataBANK0
   395     0545                     __pidataBANK0:
   396                           
   397                           ;initializer for main@F913
   398     0545  3407               	retlw	7
   399     0546  3405               	retlw	5
   400     0547  3407               	retlw	7
   401                           
   402                           	psect	strings
   403     0003                     __pstrings:
   404     0003                     stringtab:
   405     0003                     __stringtab:
   406     0003                     stringcode:	
   407                           ;	String table - string pointers are 1 byte each
   408                           
   409     0003                     stringdir:
   410     0003  3000               	movlw	high stringdir
   411     0004  008A               	movwf	10
   412     0005  0804               	movf	4,w
   413     0006  0A84               	incf	4,f
   414     0007  0782               	addwf	2,f
   415     0008                     __stringbase:
   416     0008  3400               	retlw	0
   417     0009                     __end_of__stringtab:
   418     0009                     main@delay:
   419     0009  34FA               	retlw	250
   420     000A  3400               	retlw	0
   421     000B  3400               	retlw	0
   422     000C  3400               	retlw	0
   423     000D                     __end_ofmain@delay:
   424     0013                     _SSPBUF         set	19
   425     0014                     _SSPCON         set	20
   426     0005                     _PORTA          set	5
   427     0006                     _PORTB          set	6
   428     002D                     _RA5            set	45
   429     0063                     _SSPIF          set	99
   430     0094                     _SSPSTAT        set	148
   431     0085                     _TRISA          set	133
   432     0087                     _TRISC          set	135
   433     0086                     _TRISB          set	134
   434                           
   435                           	psect	cinit
   436     07EA                     start_initialization:	
   437                           ; #config settings
   438                           
   439     07EA                     __initialization:
   440                           
   441                           ; Initialize objects allocated to BANK0
   442     07EA  120A  118A  2545  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   443     07EF  00B7               	movwf	__pdataBANK0& (0+127)
   444     07F0  120A  118A  2546  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   445     07F5  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   446     07F6  120A  118A  2547  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   447     07FB  00B9               	movwf	(__pdataBANK0+2)& (0+127)
   448     07FC                     end_of_initialization:	
   449                           ;End of C runtime variable initialization code
   450                           
   451     07FC                     __end_of__initialization:
   452     07FC  0183               	clrf	3
   453     07FD  120A  118A  2F17   	ljmp	_main	;jump to C main() function
   454                           
   455                           	psect	dataBANK0
   456     0037                     __pdataBANK0:
   457     0037                     main@F913:
   458     0037                     	ds	3
   459                           
   460                           	psect	cstackCOMMON
   461     0071                     __pcstackCOMMON:
   462     0071                     ?_SpiInit:
   463     0071                     ?_MatrixInit:	
   464                           ; 1 bytes @ 0x0
   465                           
   466     0071                     ?_PortBInit:	
   467                           ; 1 bytes @ 0x0
   468                           
   469     0071                     ?_SetPosition:	
   470                           ; 1 bytes @ 0x0
   471                           
   472     0071                     ?_main:	
   473                           ; 1 bytes @ 0x0
   474                           
   475     0071                     ?_SpiSendByte:	
   476                           ; 1 bytes @ 0x0
   477                           
   478     0071                     ?_SpiClearMatrix:	
   479                           ; 1 bytes @ 0x0
   480                           
   481     0071                     ?_MovieDown:	
   482                           ; 1 bytes @ 0x0
   483                           
   484     0071                     ?_MovieUp:	
   485                           ; 1 bytes @ 0x0
   486                           
   487     0071                     ?_MovieLeft:	
   488                           ; 1 bytes @ 0x0
   489                           
   490     0071                     ?_MovieRigth:	
   491                           ; 1 bytes @ 0x0
   492                           
   493     0071                     SpiSendByte@data:	
   494                           ; 1 bytes @ 0x0
   495                           
   496     0071                     SetPosition@position:	
   497                           ; 1 bytes @ 0x0
   498                           
   499     0071                     MovieDown@_shapePosition:	
   500                           ; 2 bytes @ 0x0
   501                           
   502     0071                     MovieUp@_shapePosition:	
   503                           ; 2 bytes @ 0x0
   504                           
   505     0071                     MovieLeft@_shapePosition:	
   506                           ; 2 bytes @ 0x0
   507                           
   508     0071                     MovieRigth@_shapePosition:	
   509                           ; 2 bytes @ 0x0
   510                           
   511     0071                     ??_SpiInit:	
   512                           ; 2 bytes @ 0x0
   513                           
   514     0071                     ??_PortBInit:	
   515                           ; 1 bytes @ 0x0
   516                           
   517     0071                     ??_SpiSendByte:	
   518                           ; 1 bytes @ 0x0
   519                           
   520                           
   521                           ; 1 bytes @ 0x0
   522     0071                     	ds	1
   523     0072                     ?_SendToSegment:
   524     0072                     SendToSegment@segment:	
   525                           ; 1 bytes @ 0x1
   526                           
   527                           
   528                           ; 2 bytes @ 0x1
   529     0072                     	ds	1
   530     0073                     SetPosition@x:
   531     0073                     ??_MovieDown:	
   532                           ; 2 bytes @ 0x2
   533                           
   534     0073                     ??_MovieUp:	
   535                           ; 1 bytes @ 0x2
   536                           
   537     0073                     ??_MovieLeft:	
   538                           ; 1 bytes @ 0x2
   539                           
   540     0073                     ??_MovieRigth:	
   541                           ; 1 bytes @ 0x2
   542                           
   543                           
   544                           ; 1 bytes @ 0x2
   545     0073                     	ds	1
   546     0074                     SendToSegment@data:
   547                           
   548                           ; 1 bytes @ 0x3
   549     0074                     	ds	1
   550     0075                     ?_ShowShape:
   551     0075                     SetPosition@y:	
   552                           ; 1 bytes @ 0x4
   553                           
   554     0075                     ShowShape@coord:	
   555                           ; 2 bytes @ 0x4
   556                           
   557     0075                     ??_SendToSegment:	
   558                           ; 2 bytes @ 0x4
   559                           
   560     0075                     ??_SpiClearMatrix:	
   561                           ; 1 bytes @ 0x4
   562                           
   563                           
   564                           ; 1 bytes @ 0x4
   565     0075                     	ds	2
   566     0077                     SpiClearMatrix@i:
   567     0077                     ShowShape@countElemntArray:	
   568                           ; 1 bytes @ 0x6
   569                           
   570     0077                     ??_SetPosition:	
   571                           ; 2 bytes @ 0x6
   572                           
   573                           
   574                           ; 1 bytes @ 0x6
   575     0077                     	ds	1
   576     0078                     ??_MatrixInit:
   577                           
   578                           ; 1 bytes @ 0x7
   579     0078                     	ds	1
   580     0079                     ShowShape@shapeArray:
   581                           
   582                           ; 1 bytes @ 0x8
   583     0079                     	ds	1
   584     007A                     ShowShape@_pos:
   585                           
   586                           ; 2 bytes @ 0x9
   587     007A                     	ds	2
   588     007C                     ShowShape@pos:
   589                           
   590                           ; 2 bytes @ 0xB
   591     007C                     	ds	2
   592                           
   593                           	psect	cstackBANK0
   594     0020                     __pcstackBANK0:
   595     0020                     ??_ShowShape:
   596                           
   597                           ; 1 bytes @ 0x0
   598     0020                     	ds	5
   599     0025                     ?_MovieShape:
   600     0025                     MovieShape@_shapePosition:	
   601                           ; 1 bytes @ 0x5
   602                           
   603                           
   604                           ; 2 bytes @ 0x5
   605     0025                     	ds	2
   606     0027                     MovieShape@shapeArray:
   607                           
   608                           ; 1 bytes @ 0x7
   609     0027                     	ds	1
   610     0028                     ??_MovieShape:
   611                           
   612                           ; 1 bytes @ 0x8
   613     0028                     	ds	2
   614     002A                     MovieShape@dir:
   615                           
   616                           ; 1 bytes @ 0xA
   617     002A                     	ds	1
   618     002B                     ??_main:
   619                           
   620                           ; 1 bytes @ 0xB
   621     002B                     	ds	3
   622     002E                     main@figure:
   623                           
   624                           ; 3 bytes @ 0xE
   625     002E                     	ds	3
   626     0031                     main@i:
   627                           
   628                           ; 2 bytes @ 0x11
   629     0031                     	ds	2
   630     0033                     main@shapePosition:
   631                           
   632                           ; 4 bytes @ 0x13
   633     0033                     	ds	4
   634                           
   635                           	psect	maintext
   636     0717                     __pmaintext:	
   637 ;;
   638 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   639 ;;
   640 ;; *************** function _main *****************
   641 ;; Defined at:
   642 ;;		line 18 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  i               2   17[BANK0 ] int 
   647 ;;  shapePositio    4   19[BANK0 ] struct .
   648 ;;  figure          3   14[BANK0 ] unsigned char [3]
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   653 ;; Tracked objects:
   654 ;;		On entry : B00/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         0       9       0       0       0
   660 ;;      Temps:          0       3       0       0       0
   661 ;;      Totals:         0      12       0       0       0
   662 ;;Total ram usage:       12 bytes
   663 ;; Hardware stack levels required when called: 4
   664 ;; This function calls:
   665 ;;		_MatrixInit
   666 ;;		_MovieShape
   667 ;;		_PortBInit
   668 ;;		_SetPosition
   669 ;;		_SpiInit
   670 ;; This function is called by:
   671 ;;		Startup code after reset
   672 ;; This function uses a non-reentrant model
   673 ;;
   674                           
   675     0717                     _main:	
   676                           ;psect for function _main
   677                           
   678     0717                     l880:	
   679                           ;incstack = 0
   680                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   681                           
   682                           
   683                           ;main.c: 19:     SpiInit();
   684     0717  120A  118A  2576  120A  118A  	fcall	_SpiInit
   685                           
   686                           ;main.c: 20:     MatrixInit();
   687     071C  120A  118A  25FA  120A  118A  	fcall	_MatrixInit
   688     0721                     l882:
   689                           
   690                           ;main.c: 21:     PortBInit();
   691     0721  120A  118A  2548  120A  118A  	fcall	_PortBInit
   692                           
   693                           ;main.c: 23:     TCoord shapePosition;;main.c: 24:     char figure[3] = { 0x07, 0x05, 0x
      +                          07 };
   694     0726  1283               	bcf	3,5	;RP0=0, select bank0
   695     0727  1303               	bcf	3,6	;RP1=0, select bank0
   696     0728  0837               	movf	main@F913,w
   697     0729  00AE               	movwf	main@figure
   698     072A  0838               	movf	main@F913+1,w
   699     072B  00AF               	movwf	main@figure+1
   700     072C  0839               	movf	main@F913+2,w
   701     072D  00B0               	movwf	main@figure+2
   702     072E                     l884:
   703                           
   704                           ;main.c: 29:         for(int i = 0; i < 5; i++){
   705     072E  1283               	bcf	3,5	;RP0=0, select bank0
   706     072F  1303               	bcf	3,6	;RP1=0, select bank0
   707     0730  01B1               	clrf	main@i
   708     0731  01B2               	clrf	main@i+1
   709     0732                     l890:
   710                           
   711                           ;main.c: 30:             SetPosition(&shapePosition, i, i);
   712     0732  3033               	movlw	low main@shapePosition
   713     0733  00F1               	movwf	SetPosition@position
   714     0734  3000               	movlw	high main@shapePosition
   715     0735  00F2               	movwf	SetPosition@position+1
   716     0736  1283               	bcf	3,5	;RP0=0, select bank0
   717     0737  1303               	bcf	3,6	;RP1=0, select bank0
   718     0738  0832               	movf	main@i+1,w
   719     0739  00F4               	movwf	SetPosition@x+1
   720     073A  0831               	movf	main@i,w
   721     073B  00F3               	movwf	SetPosition@x
   722     073C  0832               	movf	main@i+1,w
   723     073D  00F6               	movwf	SetPosition@y+1
   724     073E  0831               	movf	main@i,w
   725     073F  00F5               	movwf	SetPosition@y
   726     0740  120A  118A  25DD  120A  118A  	fcall	_SetPosition
   727     0745                     l892:
   728                           
   729                           ;main.c: 32:             MovieShape(notMoive, &shapePosition, figure);
   730     0745  3033               	movlw	low main@shapePosition
   731     0746  1283               	bcf	3,5	;RP0=0, select bank0
   732     0747  1303               	bcf	3,6	;RP1=0, select bank0
   733     0748  00A5               	movwf	MovieShape@_shapePosition
   734     0749  3000               	movlw	high main@shapePosition
   735     074A  00A6               	movwf	MovieShape@_shapePosition+1
   736     074B  302E               	movlw	(low (main@figure| 0))& (0+255)
   737     074C  00A7               	movwf	MovieShape@shapeArray
   738     074D  3004               	movlw	4
   739     074E  120A  118A  263A  120A  118A  	fcall	_MovieShape
   740     0753                     l894:
   741                           
   742                           ;main.c: 33:             _delay((unsigned long)((delay)*(16000000/4000.0)));
   743     0753  3006               	movlw	6
   744     0754  1283               	bcf	3,5	;RP0=0, select bank0
   745     0755  1303               	bcf	3,6	;RP1=0, select bank0
   746     0756  00AD               	movwf	??_main+2
   747     0757  3013               	movlw	19
   748     0758  00AC               	movwf	??_main+1
   749     0759  30AD               	movlw	173
   750     075A  00AB               	movwf	??_main
   751     075B                     u117:
   752     075B  0BAB               	decfsz	??_main,f
   753     075C  2F5B               	goto	u117
   754     075D  0BAC               	decfsz	??_main+1,f
   755     075E  2F5B               	goto	u117
   756     075F  0BAD               	decfsz	??_main+2,f
   757     0760  2F5B               	goto	u117
   758     0761                     l896:
   759                           
   760                           ;main.c: 35:             MovieShape(down, &shapePosition, figure);
   761     0761  3033               	movlw	low main@shapePosition
   762     0762  1283               	bcf	3,5	;RP0=0, select bank0
   763     0763  1303               	bcf	3,6	;RP1=0, select bank0
   764     0764  00A5               	movwf	MovieShape@_shapePosition
   765     0765  3000               	movlw	high main@shapePosition
   766     0766  00A6               	movwf	MovieShape@_shapePosition+1
   767     0767  302E               	movlw	(low (main@figure| 0))& (0+255)
   768     0768  00A7               	movwf	MovieShape@shapeArray
   769     0769  3000               	movlw	0
   770     076A  120A  118A  263A  120A  118A  	fcall	_MovieShape
   771     076F                     l898:
   772                           
   773                           ;main.c: 36:             _delay((unsigned long)((delay)*(16000000/4000.0)));
   774     076F  3006               	movlw	6
   775     0770  1283               	bcf	3,5	;RP0=0, select bank0
   776     0771  1303               	bcf	3,6	;RP1=0, select bank0
   777     0772  00AD               	movwf	??_main+2
   778     0773  3013               	movlw	19
   779     0774  00AC               	movwf	??_main+1
   780     0775  30AD               	movlw	173
   781     0776  00AB               	movwf	??_main
   782     0777                     u127:
   783     0777  0BAB               	decfsz	??_main,f
   784     0778  2F77               	goto	u127
   785     0779  0BAC               	decfsz	??_main+1,f
   786     077A  2F77               	goto	u127
   787     077B  0BAD               	decfsz	??_main+2,f
   788     077C  2F77               	goto	u127
   789     077D                     l900:
   790                           
   791                           ;main.c: 38:             MovieShape(right, &shapePosition, figure);
   792     077D  3033               	movlw	low main@shapePosition
   793     077E  1283               	bcf	3,5	;RP0=0, select bank0
   794     077F  1303               	bcf	3,6	;RP1=0, select bank0
   795     0780  00A5               	movwf	MovieShape@_shapePosition
   796     0781  3000               	movlw	high main@shapePosition
   797     0782  00A6               	movwf	MovieShape@_shapePosition+1
   798     0783  302E               	movlw	(low (main@figure| 0))& (0+255)
   799     0784  00A7               	movwf	MovieShape@shapeArray
   800     0785  3003               	movlw	3
   801     0786  120A  118A  263A  120A  118A  	fcall	_MovieShape
   802     078B                     l902:
   803                           
   804                           ;main.c: 39:             _delay((unsigned long)((delay)*(16000000/4000.0)));
   805     078B  3006               	movlw	6
   806     078C  1283               	bcf	3,5	;RP0=0, select bank0
   807     078D  1303               	bcf	3,6	;RP1=0, select bank0
   808     078E  00AD               	movwf	??_main+2
   809     078F  3013               	movlw	19
   810     0790  00AC               	movwf	??_main+1
   811     0791  30AD               	movlw	173
   812     0792  00AB               	movwf	??_main
   813     0793                     u137:
   814     0793  0BAB               	decfsz	??_main,f
   815     0794  2F93               	goto	u137
   816     0795  0BAC               	decfsz	??_main+1,f
   817     0796  2F93               	goto	u137
   818     0797  0BAD               	decfsz	??_main+2,f
   819     0798  2F93               	goto	u137
   820     0799                     l904:
   821                           
   822                           ;main.c: 41:             MovieShape(up, &shapePosition, figure);
   823     0799  3033               	movlw	low main@shapePosition
   824     079A  1283               	bcf	3,5	;RP0=0, select bank0
   825     079B  1303               	bcf	3,6	;RP1=0, select bank0
   826     079C  00A5               	movwf	MovieShape@_shapePosition
   827     079D  3000               	movlw	high main@shapePosition
   828     079E  00A6               	movwf	MovieShape@_shapePosition+1
   829     079F  302E               	movlw	(low (main@figure| 0))& (0+255)
   830     07A0  00A7               	movwf	MovieShape@shapeArray
   831     07A1  3001               	movlw	1
   832     07A2  120A  118A  263A  120A  118A  	fcall	_MovieShape
   833     07A7                     l906:
   834                           
   835                           ;main.c: 42:             _delay((unsigned long)((delay)*(16000000/4000.0)));
   836     07A7  3006               	movlw	6
   837     07A8  1283               	bcf	3,5	;RP0=0, select bank0
   838     07A9  1303               	bcf	3,6	;RP1=0, select bank0
   839     07AA  00AD               	movwf	??_main+2
   840     07AB  3013               	movlw	19
   841     07AC  00AC               	movwf	??_main+1
   842     07AD  30AD               	movlw	173
   843     07AE  00AB               	movwf	??_main
   844     07AF                     u147:
   845     07AF  0BAB               	decfsz	??_main,f
   846     07B0  2FAF               	goto	u147
   847     07B1  0BAC               	decfsz	??_main+1,f
   848     07B2  2FAF               	goto	u147
   849     07B3  0BAD               	decfsz	??_main+2,f
   850     07B4  2FAF               	goto	u147
   851     07B5                     l908:
   852                           
   853                           ;main.c: 44:             MovieShape(left, &shapePosition, figure);
   854     07B5  3033               	movlw	low main@shapePosition
   855     07B6  1283               	bcf	3,5	;RP0=0, select bank0
   856     07B7  1303               	bcf	3,6	;RP1=0, select bank0
   857     07B8  00A5               	movwf	MovieShape@_shapePosition
   858     07B9  3000               	movlw	high main@shapePosition
   859     07BA  00A6               	movwf	MovieShape@_shapePosition+1
   860     07BB  302E               	movlw	(low (main@figure| 0))& (0+255)
   861     07BC  00A7               	movwf	MovieShape@shapeArray
   862     07BD  3002               	movlw	2
   863     07BE  120A  118A  263A  120A  118A  	fcall	_MovieShape
   864     07C3                     l910:
   865                           
   866                           ;main.c: 45:             _delay((unsigned long)((delay)*(16000000/4000.0)));
   867     07C3  3006               	movlw	6
   868     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   869     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   870     07C6  00AD               	movwf	??_main+2
   871     07C7  3013               	movlw	19
   872     07C8  00AC               	movwf	??_main+1
   873     07C9  30AD               	movlw	173
   874     07CA  00AB               	movwf	??_main
   875     07CB                     u157:
   876     07CB  0BAB               	decfsz	??_main,f
   877     07CC  2FCB               	goto	u157
   878     07CD  0BAC               	decfsz	??_main+1,f
   879     07CE  2FCB               	goto	u157
   880     07CF  0BAD               	decfsz	??_main+2,f
   881     07D0  2FCB               	goto	u157
   882     07D1                     l912:
   883                           
   884                           ;main.c: 46:         }
   885     07D1  3001               	movlw	1
   886     07D2  1283               	bcf	3,5	;RP0=0, select bank0
   887     07D3  1303               	bcf	3,6	;RP1=0, select bank0
   888     07D4  07B1               	addwf	main@i,f
   889     07D5  1803               	skipnc
   890     07D6  0AB2               	incf	main@i+1,f
   891     07D7  3000               	movlw	0
   892     07D8  07B2               	addwf	main@i+1,f
   893     07D9                     l914:
   894     07D9  0832               	movf	main@i+1,w
   895     07DA  3A80               	xorlw	128
   896     07DB  00FF               	movwf	btemp+1
   897     07DC  3080               	movlw	128
   898     07DD  027F               	subwf	btemp+1,w
   899     07DE  1D03               	skipz
   900     07DF  2FE2               	goto	u105
   901     07E0  3005               	movlw	5
   902     07E1  0231               	subwf	main@i,w
   903     07E2                     u105:
   904     07E2  1C03               	skipc
   905     07E3  2FE5               	goto	u101
   906     07E4  2FE6               	goto	u100
   907     07E5                     u101:
   908     07E5  2F32               	goto	l890
   909     07E6                     u100:
   910     07E6  2F2E               	goto	l884
   911     07E7  120A  118A  2800   	ljmp	start
   912     07EA                     __end_of_main:
   913                           
   914                           	psect	text1
   915     0576                     __ptext1:	
   916 ;; *************** function _SpiInit *****************
   917 ;; Defined at:
   918 ;;		line 9 in file "spi.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   932 ;;      Params:         0       0       0       0       0
   933 ;;      Locals:         0       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0
   935 ;;      Totals:         0       0       0       0       0
   936 ;;Total ram usage:        0 bytes
   937 ;; Hardware stack levels used: 1
   938 ;; This function calls:
   939 ;;		Nothing
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945     0576                     _SpiInit:	
   946                           ;psect for function _SpiInit
   947                           
   948     0576                     l828:	
   949                           ;incstack = 0
   950                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
   951                           
   952                           
   953                           ;spi.c: 10:     TRISC |= 0x10;
   954     0576  1683               	bsf	3,5	;RP0=1, select bank1
   955     0577  1303               	bcf	3,6	;RP1=0, select bank1
   956     0578  1607               	bsf	7,4	;volatile
   957     0579                     l830:
   958                           
   959                           ;spi.c: 11:     TRISC &= ~0x28;
   960     0579  30D7               	movlw	215
   961     057A  0587               	andwf	7,f	;volatile
   962                           
   963                           ;spi.c: 12:     TRISA &= ~0x20;
   964     057B  30DF               	movlw	223
   965     057C  0585               	andwf	5,f	;volatile
   966                           
   967                           ;spi.c: 13:     PORTA &= ~0x20;
   968     057D  30DF               	movlw	223
   969     057E  1283               	bcf	3,5	;RP0=0, select bank0
   970     057F  1303               	bcf	3,6	;RP1=0, select bank0
   971     0580  0585               	andwf	5,f	;volatile
   972     0581                     l832:
   973                           
   974                           ;spi.c: 14:     SSPCON = 0x30;
   975     0581  3030               	movlw	48
   976     0582  0094               	movwf	20	;volatile
   977     0583                     l834:
   978                           
   979                           ;spi.c: 15:     SSPSTAT = 0x80;
   980     0583  3080               	movlw	128
   981     0584  1683               	bsf	3,5	;RP0=1, select bank1
   982     0585  1303               	bcf	3,6	;RP1=0, select bank1
   983     0586  0094               	movwf	20	;volatile
   984     0587                     l50:
   985     0587  0008               	return
   986     0588                     __end_of_SpiInit:
   987                           
   988                           	psect	text2
   989     05DD                     __ptext2:	
   990 ;; *************** function _SetPosition *****************
   991 ;; Defined at:
   992 ;;		line 3 in file "shape.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  position        2    0[COMMON] PTR struct .
   995 ;;		 -> main@shapePosition(4), 
   996 ;;  x               2    2[COMMON] int 
   997 ;;  y               2    4[COMMON] int 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;		None
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1009 ;;      Params:         6       0       0       0       0
  1010 ;;      Locals:         0       0       0       0       0
  1011 ;;      Temps:          2       0       0       0       0
  1012 ;;      Totals:         8       0       0       0       0
  1013 ;;Total ram usage:        8 bytes
  1014 ;; Hardware stack levels used: 1
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022     05DD                     _SetPosition:	
  1023                           ;psect for function _SetPosition
  1024                           
  1025     05DD                     l852:	
  1026                           ;incstack = 0
  1027                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1028                           
  1029                           
  1030                           ;shape.c: 4:     position->x = x;
  1031     05DD  0871               	movf	SetPosition@position,w
  1032     05DE  0084               	movwf	4
  1033     05DF  1783               	bsf	3,7
  1034     05E0  1C72               	btfss	SetPosition@position+1,0
  1035     05E1  1383               	bcf	3,7
  1036     05E2  0873               	movf	SetPosition@x,w
  1037     05E3  0080               	movwf	0
  1038     05E4  0A84               	incf	4,f
  1039     05E5  0874               	movf	SetPosition@x+1,w
  1040     05E6  0080               	movwf	0
  1041     05E7                     l854:
  1042                           
  1043                           ;shape.c: 5:     position->y = y;
  1044     05E7  0871               	movf	SetPosition@position,w
  1045     05E8  3E02               	addlw	2
  1046     05E9  00F7               	movwf	??_SetPosition
  1047     05EA  0872               	movf	SetPosition@position+1,w
  1048     05EB  1803               	skipnc
  1049     05EC  3E01               	addlw	1
  1050     05ED  3E00               	addlw	0
  1051     05EE  00F8               	movwf	??_SetPosition+1
  1052     05EF  0877               	movf	??_SetPosition,w
  1053     05F0  0084               	movwf	4
  1054     05F1  1783               	bsf	3,7
  1055     05F2  1C78               	btfss	??_SetPosition+1,0
  1056     05F3  1383               	bcf	3,7
  1057     05F4  0875               	movf	SetPosition@y,w
  1058     05F5  0080               	movwf	0
  1059     05F6  0A84               	incf	4,f
  1060     05F7  0876               	movf	SetPosition@y+1,w
  1061     05F8  0080               	movwf	0
  1062     05F9                     l82:
  1063     05F9  0008               	return
  1064     05FA                     __end_of_SetPosition:
  1065                           
  1066                           	psect	text3
  1067     0548                     __ptext3:	
  1068 ;; *************** function _PortBInit *****************
  1069 ;; Defined at:
  1070 ;;		line 13 in file "portsinit.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;		None
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		status,2
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1084 ;;      Params:         0       0       0       0       0
  1085 ;;      Locals:         0       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0
  1087 ;;      Totals:         0       0       0       0       0
  1088 ;;Total ram usage:        0 bytes
  1089 ;; Hardware stack levels used: 1
  1090 ;; This function calls:
  1091 ;;		Nothing
  1092 ;; This function is called by:
  1093 ;;		_main
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097     0548                     _PortBInit:	
  1098                           ;psect for function _PortBInit
  1099                           
  1100     0548                     l850:	
  1101                           ;incstack = 0
  1102                           ; Regs used in _PortBInit: [status,2]
  1103                           
  1104                           
  1105                           ;portsinit.c: 14:     TRISB = 0x00;
  1106     0548  1683               	bsf	3,5	;RP0=1, select bank1
  1107     0549  1303               	bcf	3,6	;RP1=0, select bank1
  1108     054A  0186               	clrf	6	;volatile
  1109                           
  1110                           ;portsinit.c: 15:     PORTB = 0x00;
  1111     054B  1283               	bcf	3,5	;RP0=0, select bank0
  1112     054C  1303               	bcf	3,6	;RP1=0, select bank0
  1113     054D  0186               	clrf	6	;volatile
  1114     054E                     l33:
  1115     054E  0008               	return
  1116     054F                     __end_of_PortBInit:
  1117                           
  1118                           	psect	text4
  1119     063A                     __ptext4:	
  1120 ;; *************** function _MovieShape *****************
  1121 ;; Defined at:
  1122 ;;		line 32 in file "shape.c"
  1123 ;; Parameters:    Size  Location     Type
  1124 ;;  dir             1    wreg     enum E885
  1125 ;;  _shapePositi    2    5[BANK0 ] PTR struct .
  1126 ;;		 -> main@shapePosition(4), 
  1127 ;;  shapeArray      1    7[BANK0 ] PTR unsigned char 
  1128 ;;		 -> main@figure(3), 
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;  dir             1   10[BANK0 ] enum E885
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      void 
  1133 ;; Registers used:
  1134 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1140 ;;      Params:         0       3       0       0       0
  1141 ;;      Locals:         0       1       0       0       0
  1142 ;;      Temps:          0       2       0       0       0
  1143 ;;      Totals:         0       6       0       0       0
  1144 ;;Total ram usage:        6 bytes
  1145 ;; Hardware stack levels used: 1
  1146 ;; Hardware stack levels required when called: 3
  1147 ;; This function calls:
  1148 ;;		_MovieDown
  1149 ;;		_MovieLeft
  1150 ;;		_MovieRigth
  1151 ;;		_MovieUp
  1152 ;;		_ShowShape
  1153 ;;		_SpiClearMatrix
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159     063A                     _MovieShape:	
  1160                           ;psect for function _MovieShape
  1161                           
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1165                           ;MovieShape@dir stored from wreg
  1166     063A  1283               	bcf	3,5	;RP0=0, select bank0
  1167     063B  1303               	bcf	3,6	;RP1=0, select bank0
  1168     063C  00AA               	movwf	MovieShape@dir
  1169     063D                     l856:
  1170                           
  1171                           ;shape.c: 34:     switch (dir){
  1172     063D  2E66               	goto	l868
  1173     063E                     l858:
  1174                           
  1175                           ;shape.c: 36:             MovieDown(_shapePosition);
  1176     063E  0825               	movf	MovieShape@_shapePosition,w
  1177     063F  00F1               	movwf	MovieDown@_shapePosition
  1178     0640  0826               	movf	MovieShape@_shapePosition+1,w
  1179     0641  00F2               	movwf	MovieDown@_shapePosition+1
  1180     0642  120A  118A  259B  120A  118A  	fcall	_MovieDown
  1181                           
  1182                           ;shape.c: 37:             break;
  1183     0647  2E7F               	goto	l870
  1184     0648                     l860:
  1185                           
  1186                           ;shape.c: 39:             MovieUp(_shapePosition);
  1187     0648  0825               	movf	MovieShape@_shapePosition,w
  1188     0649  00F1               	movwf	MovieUp@_shapePosition
  1189     064A  0826               	movf	MovieShape@_shapePosition+1,w
  1190     064B  00F2               	movwf	MovieUp@_shapePosition+1
  1191     064C  120A  118A  25C4  120A  118A  	fcall	_MovieUp
  1192                           
  1193                           ;shape.c: 40:             break;
  1194     0651  2E7F               	goto	l870
  1195     0652                     l862:
  1196                           
  1197                           ;shape.c: 42:             MovieLeft(_shapePosition);
  1198     0652  0825               	movf	MovieShape@_shapePosition,w
  1199     0653  00F1               	movwf	MovieLeft@_shapePosition
  1200     0654  0826               	movf	MovieShape@_shapePosition+1,w
  1201     0655  00F2               	movwf	MovieLeft@_shapePosition+1
  1202     0656  120A  118A  2565  120A  118A  	fcall	_MovieLeft
  1203                           
  1204                           ;shape.c: 43:             break;
  1205     065B  2E7F               	goto	l870
  1206     065C                     l864:
  1207                           
  1208                           ;shape.c: 45:             MovieRigth(_shapePosition);
  1209     065C  0825               	movf	MovieShape@_shapePosition,w
  1210     065D  00F1               	movwf	MovieRigth@_shapePosition
  1211     065E  0826               	movf	MovieShape@_shapePosition+1,w
  1212     065F  00F2               	movwf	MovieRigth@_shapePosition+1
  1213     0660  120A  118A  255A  120A  118A  	fcall	_MovieRigth
  1214                           
  1215                           ;shape.c: 46:             break;
  1216     0665  2E7F               	goto	l870
  1217     0666                     l868:
  1218     0666  082A               	movf	MovieShape@dir,w
  1219     0667  00A8               	movwf	??_MovieShape
  1220     0668  01A9               	clrf	??_MovieShape+1
  1221                           
  1222                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1223                           ; Switch size 1, requested type "simple"
  1224                           ; Number of cases is 1, Range of values is 0 to 0
  1225                           ; switch strategies available:
  1226                           ; Name         Instructions Cycles
  1227                           ; simple_byte            4     3 (average)
  1228                           ; direct_byte           11     8 (fixed)
  1229                           ; jumptable            260     6 (fixed)
  1230                           ;	Chosen strategy is simple_byte
  1231     0669  0829               	movf	??_MovieShape+1,w
  1232     066A  3A00               	xorlw	0	; case 0
  1233     066B  1903               	skipnz
  1234     066C  2E6E               	goto	l946
  1235     066D  2E7F               	goto	l870
  1236     066E                     l946:
  1237                           
  1238                           ; Switch size 1, requested type "simple"
  1239                           ; Number of cases is 5, Range of values is 0 to 4
  1240                           ; switch strategies available:
  1241                           ; Name         Instructions Cycles
  1242                           ; simple_byte           16     9 (average)
  1243                           ; direct_byte           23     8 (fixed)
  1244                           ; jumptable            260     6 (fixed)
  1245                           ;	Chosen strategy is simple_byte
  1246     066E  0828               	movf	??_MovieShape,w
  1247     066F  3A00               	xorlw	0	; case 0
  1248     0670  1903               	skipnz
  1249     0671  2E3E               	goto	l858
  1250     0672  3A01               	xorlw	1	; case 1
  1251     0673  1903               	skipnz
  1252     0674  2E48               	goto	l860
  1253     0675  3A03               	xorlw	3	; case 2
  1254     0676  1903               	skipnz
  1255     0677  2E52               	goto	l862
  1256     0678  3A01               	xorlw	1	; case 3
  1257     0679  1903               	skipnz
  1258     067A  2E5C               	goto	l864
  1259     067B  3A07               	xorlw	7	; case 4
  1260     067C  1903               	skipnz
  1261     067D  2E7F               	goto	l870
  1262     067E  2E7F               	goto	l870
  1263     067F                     l870:
  1264                           
  1265                           ;shape.c: 51:     SpiClearMatrix();
  1266     067F  120A  118A  25AE  120A  118A  	fcall	_SpiClearMatrix
  1267     0684                     l872:
  1268                           
  1269                           ;shape.c: 52:     ShowShape(_shapePosition, 3, shapeArray);
  1270     0684  1283               	bcf	3,5	;RP0=0, select bank0
  1271     0685  1303               	bcf	3,6	;RP1=0, select bank0
  1272     0686  0825               	movf	MovieShape@_shapePosition,w
  1273     0687  00F5               	movwf	ShowShape@coord
  1274     0688  0826               	movf	MovieShape@_shapePosition+1,w
  1275     0689  00F6               	movwf	ShowShape@coord+1
  1276     068A  3003               	movlw	3
  1277     068B  00F7               	movwf	ShowShape@countElemntArray
  1278     068C  3000               	movlw	0
  1279     068D  00F8               	movwf	ShowShape@countElemntArray+1
  1280     068E  0827               	movf	MovieShape@shapeArray,w
  1281     068F  00F9               	movwf	ShowShape@shapeArray
  1282     0690  120A  118A  2696  120A  118A  	fcall	_ShowShape
  1283     0695                     l110:
  1284     0695  0008               	return
  1285     0696                     __end_of_MovieShape:
  1286                           
  1287                           	psect	text5
  1288     0696                     __ptext5:	
  1289 ;; *************** function _ShowShape *****************
  1290 ;; Defined at:
  1291 ;;		line 8 in file "shape.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;  coord           2    4[COMMON] PTR struct .
  1294 ;;		 -> main@shapePosition(4), 
  1295 ;;  countElemntA    2    6[COMMON] int 
  1296 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
  1297 ;;		 -> main@figure(3), 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  pos             2   11[COMMON] int 
  1300 ;;  _pos            2    9[COMMON] int 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1310 ;;      Params:         5       0       0       0       0
  1311 ;;      Locals:         4       0       0       0       0
  1312 ;;      Temps:          0       5       0       0       0
  1313 ;;      Totals:         9       5       0       0       0
  1314 ;;Total ram usage:       14 bytes
  1315 ;; Hardware stack levels used: 1
  1316 ;; Hardware stack levels required when called: 2
  1317 ;; This function calls:
  1318 ;;		_SendToSegment
  1319 ;; This function is called by:
  1320 ;;		_MovieShape
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324     0696                     _ShowShape:	
  1325                           ;psect for function _ShowShape
  1326                           
  1327     0696                     l808:	
  1328                           ;incstack = 0
  1329                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1330                           
  1331     0696                     l810:
  1332                           
  1333                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  1334     0696  0875               	movf	ShowShape@coord,w
  1335     0697  0084               	movwf	4
  1336     0698  1783               	bsf	3,7
  1337     0699  1C76               	btfss	ShowShape@coord+1,0
  1338     069A  1383               	bcf	3,7
  1339     069B  0800               	movf	0,w
  1340     069C  1283               	bcf	3,5	;RP0=0, select bank0
  1341     069D  1303               	bcf	3,6	;RP1=0, select bank0
  1342     069E  00A0               	movwf	??_ShowShape
  1343     069F  0A84               	incf	4,f
  1344     06A0  0800               	movf	0,w
  1345     06A1  00A1               	movwf	??_ShowShape+1
  1346     06A2  0820               	movf	??_ShowShape,w
  1347     06A3  3E01               	addlw	1
  1348     06A4  00FC               	movwf	ShowShape@pos
  1349     06A5  0821               	movf	??_ShowShape+1,w
  1350     06A6  1803               	skipnc
  1351     06A7  3E01               	addlw	1
  1352     06A8  3E00               	addlw	0
  1353     06A9  00FD               	movwf	ShowShape@pos+1
  1354     06AA  2EF4               	goto	l818
  1355     06AB                     l812:
  1356                           
  1357                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  1358     06AB  0875               	movf	ShowShape@coord,w
  1359     06AC  0084               	movwf	4
  1360     06AD  1783               	bsf	3,7
  1361     06AE  1C76               	btfss	ShowShape@coord+1,0
  1362     06AF  1383               	bcf	3,7
  1363     06B0  0800               	movf	0,w
  1364     06B1  1283               	bcf	3,5	;RP0=0, select bank0
  1365     06B2  1303               	bcf	3,6	;RP1=0, select bank0
  1366     06B3  00A0               	movwf	??_ShowShape
  1367     06B4  0A84               	incf	4,f
  1368     06B5  0800               	movf	0,w
  1369     06B6  00A1               	movwf	??_ShowShape+1
  1370     06B7  0820               	movf	??_ShowShape,w
  1371     06B8  027C               	subwf	ShowShape@pos,w
  1372     06B9  00A2               	movwf	??_ShowShape+2
  1373     06BA  0821               	movf	??_ShowShape+1,w
  1374     06BB  1C03               	skipc
  1375     06BC  0A21               	incf	??_ShowShape+1,w
  1376     06BD  027D               	subwf	ShowShape@pos+1,w
  1377     06BE  00A3               	movwf	??_ShowShape+3
  1378     06BF  0822               	movf	??_ShowShape+2,w
  1379     06C0  3EFF               	addlw	255
  1380     06C1  00FA               	movwf	ShowShape@_pos
  1381     06C2  0823               	movf	??_ShowShape+3,w
  1382     06C3  1803               	skipnc
  1383     06C4  3E01               	addlw	1
  1384     06C5  3EFF               	addlw	255
  1385     06C6  00FB               	movwf	ShowShape@_pos+1
  1386     06C7                     l814:
  1387                           
  1388                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  1389     06C7  087D               	movf	ShowShape@pos+1,w
  1390     06C8  00F3               	movwf	SendToSegment@segment+1
  1391     06C9  087C               	movf	ShowShape@pos,w
  1392     06CA  00F2               	movwf	SendToSegment@segment
  1393     06CB  087A               	movf	ShowShape@_pos,w
  1394     06CC  0779               	addwf	ShowShape@shapeArray,w
  1395     06CD  00A0               	movwf	??_ShowShape
  1396     06CE  0820               	movf	??_ShowShape,w
  1397     06CF  0084               	movwf	4
  1398     06D0  1383               	bcf	3,7	;select IRP bank0
  1399     06D1  0800               	movf	0,w
  1400     06D2  00A1               	movwf	??_ShowShape+1
  1401     06D3  0875               	movf	ShowShape@coord,w
  1402     06D4  3E02               	addlw	2
  1403     06D5  00A2               	movwf	??_ShowShape+2
  1404     06D6  0876               	movf	ShowShape@coord+1,w
  1405     06D7  1803               	skipnc
  1406     06D8  3E01               	addlw	1
  1407     06D9  3E00               	addlw	0
  1408     06DA  00A3               	movwf	??_ShowShape+3
  1409     06DB  0822               	movf	??_ShowShape+2,w
  1410     06DC  0084               	movwf	4
  1411     06DD  1783               	bsf	3,7
  1412     06DE  1C23               	btfss	??_ShowShape+3,0
  1413     06DF  1383               	bcf	3,7
  1414     06E0  0A00               	incf	0,w
  1415     06E1  2EE4               	goto	u84
  1416     06E2                     u85:
  1417     06E2  1003               	clrc
  1418     06E3  0DA1               	rlf	??_ShowShape+1,f
  1419     06E4                     u84:
  1420     06E4  3EFF               	addlw	-1
  1421     06E5  1D03               	skipz
  1422     06E6  2EE2               	goto	u85
  1423     06E7  0821               	movf	??_ShowShape+1,w
  1424     06E8  00F4               	movwf	SendToSegment@data
  1425     06E9  120A  118A  2588  120A  118A  	fcall	_SendToSegment
  1426     06EE                     l816:
  1427                           
  1428                           ;shape.c: 13:     }
  1429     06EE  3001               	movlw	1
  1430     06EF  07FC               	addwf	ShowShape@pos,f
  1431     06F0  1803               	skipnc
  1432     06F1  0AFD               	incf	ShowShape@pos+1,f
  1433     06F2  3000               	movlw	0
  1434     06F3  07FD               	addwf	ShowShape@pos+1,f
  1435     06F4                     l818:
  1436     06F4  0875               	movf	ShowShape@coord,w
  1437     06F5  0084               	movwf	4
  1438     06F6  1783               	bsf	3,7
  1439     06F7  1C76               	btfss	ShowShape@coord+1,0
  1440     06F8  1383               	bcf	3,7
  1441     06F9  0800               	movf	0,w
  1442     06FA  1283               	bcf	3,5	;RP0=0, select bank0
  1443     06FB  1303               	bcf	3,6	;RP1=0, select bank0
  1444     06FC  00A0               	movwf	??_ShowShape
  1445     06FD  0A84               	incf	4,f
  1446     06FE  0800               	movf	0,w
  1447     06FF  00A1               	movwf	??_ShowShape+1
  1448     0700  0877               	movf	ShowShape@countElemntArray,w
  1449     0701  0720               	addwf	??_ShowShape,w
  1450     0702  00A2               	movwf	??_ShowShape+2
  1451     0703  0878               	movf	ShowShape@countElemntArray+1,w
  1452     0704  1803               	skipnc
  1453     0705  0A78               	incf	ShowShape@countElemntArray+1,w
  1454     0706  0721               	addwf	??_ShowShape+1,w
  1455     0707  00A3               	movwf	??_ShowShape+3
  1456     0708  0823               	movf	??_ShowShape+3,w
  1457     0709  3A80               	xorlw	128
  1458     070A  00A4               	movwf	??_ShowShape+4
  1459     070B  087D               	movf	ShowShape@pos+1,w
  1460     070C  3A80               	xorlw	128
  1461     070D  0224               	subwf	??_ShowShape+4,w
  1462     070E  1D03               	skipz
  1463     070F  2F12               	goto	u95
  1464     0710  087C               	movf	ShowShape@pos,w
  1465     0711  0222               	subwf	??_ShowShape+2,w
  1466     0712                     u95:
  1467     0712  1803               	skipnc
  1468     0713  2F15               	goto	u91
  1469     0714  2F16               	goto	u90
  1470     0715                     u91:
  1471     0715  2EAB               	goto	l812
  1472     0716                     u90:
  1473     0716                     l88:
  1474     0716  0008               	return
  1475     0717                     __end_of_ShowShape:
  1476                           
  1477                           	psect	text6
  1478     05C4                     __ptext6:	
  1479 ;; *************** function _MovieUp *****************
  1480 ;; Defined at:
  1481 ;;		line 20 in file "shape.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1484 ;;		 -> main@shapePosition(4), 
  1485 ;; Auto vars:     Size  Location     Type
  1486 ;;		None
  1487 ;; Return value:  Size  Location     Type
  1488 ;;                  1    wreg      void 
  1489 ;; Registers used:
  1490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1496 ;;      Params:         2       0       0       0       0
  1497 ;;      Locals:         0       0       0       0       0
  1498 ;;      Temps:          2       0       0       0       0
  1499 ;;      Totals:         4       0       0       0       0
  1500 ;;Total ram usage:        4 bytes
  1501 ;; Hardware stack levels used: 1
  1502 ;; This function calls:
  1503 ;;		Nothing
  1504 ;; This function is called by:
  1505 ;;		_MovieShape
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509     05C4                     _MovieUp:	
  1510                           ;psect for function _MovieUp
  1511                           
  1512     05C4                     l822:	
  1513                           ;incstack = 0
  1514                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  1515                           
  1516                           
  1517                           ;shape.c: 21:     _shapePosition->y--;
  1518     05C4  0871               	movf	MovieUp@_shapePosition,w
  1519     05C5  3E02               	addlw	2
  1520     05C6  00F3               	movwf	??_MovieUp
  1521     05C7  0872               	movf	MovieUp@_shapePosition+1,w
  1522     05C8  1803               	skipnc
  1523     05C9  3E01               	addlw	1
  1524     05CA  3E00               	addlw	0
  1525     05CB  00F4               	movwf	??_MovieUp+1
  1526     05CC  0873               	movf	??_MovieUp,w
  1527     05CD  0084               	movwf	4
  1528     05CE  1783               	bsf	3,7
  1529     05CF  1C74               	btfss	??_MovieUp+1,0
  1530     05D0  1383               	bcf	3,7
  1531     05D1  30FF               	movlw	255
  1532     05D2  0780               	addwf	0,f
  1533     05D3  0F84               	incfsz	4,f
  1534     05D4  0800               	movf	0,w
  1535     05D5  1803               	skipnc
  1536     05D6  0A00               	incf	0,w
  1537     05D7  00FF               	movwf	btemp+1
  1538     05D8  30FF               	movlw	255
  1539     05D9  077F               	addwf	btemp+1,w
  1540     05DA  0080               	movwf	0
  1541     05DB  0384               	decf	4,f
  1542     05DC                     l94:
  1543     05DC  0008               	return
  1544     05DD                     __end_of_MovieUp:
  1545                           
  1546                           	psect	text7
  1547     055A                     __ptext7:	
  1548 ;; *************** function _MovieRigth *****************
  1549 ;; Defined at:
  1550 ;;		line 28 in file "shape.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1553 ;;		 -> main@shapePosition(4), 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;		None
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1565 ;;      Params:         2       0       0       0       0
  1566 ;;      Locals:         0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0
  1568 ;;      Totals:         2       0       0       0       0
  1569 ;;Total ram usage:        2 bytes
  1570 ;; Hardware stack levels used: 1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_MovieShape
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578     055A                     _MovieRigth:	
  1579                           ;psect for function _MovieRigth
  1580                           
  1581     055A                     l826:	
  1582                           ;incstack = 0
  1583                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  1584                           
  1585                           
  1586                           ;shape.c: 29:     _shapePosition->x++;
  1587     055A  0871               	movf	MovieRigth@_shapePosition,w
  1588     055B  0084               	movwf	4
  1589     055C  1783               	bsf	3,7
  1590     055D  1C72               	btfss	MovieRigth@_shapePosition+1,0
  1591     055E  1383               	bcf	3,7
  1592     055F  3001               	movlw	1
  1593     0560  0780               	addwf	0,f
  1594     0561  0A84               	incf	4,f
  1595     0562  1803               	skipnc
  1596     0563  0A80               	incf	0,f
  1597     0564                     l100:
  1598     0564  0008               	return
  1599     0565                     __end_of_MovieRigth:
  1600                           
  1601                           	psect	text8
  1602     0565                     __ptext8:	
  1603 ;; *************** function _MovieLeft *****************
  1604 ;; Defined at:
  1605 ;;		line 24 in file "shape.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1608 ;;		 -> main@shapePosition(4), 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;		None
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr0l, fsr0h, btemp+1
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1620 ;;      Params:         2       0       0       0       0
  1621 ;;      Locals:         0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0
  1623 ;;      Totals:         2       0       0       0       0
  1624 ;;Total ram usage:        2 bytes
  1625 ;; Hardware stack levels used: 1
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_MovieShape
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633     0565                     _MovieLeft:	
  1634                           ;psect for function _MovieLeft
  1635                           
  1636     0565                     l824:	
  1637                           ;incstack = 0
  1638                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  1639                           
  1640                           
  1641                           ;shape.c: 25:     _shapePosition->x--;
  1642     0565  0871               	movf	MovieLeft@_shapePosition,w
  1643     0566  0084               	movwf	4
  1644     0567  1783               	bsf	3,7
  1645     0568  1C72               	btfss	MovieLeft@_shapePosition+1,0
  1646     0569  1383               	bcf	3,7
  1647     056A  30FF               	movlw	255
  1648     056B  0780               	addwf	0,f
  1649     056C  0F84               	incfsz	4,f
  1650     056D  0800               	movf	0,w
  1651     056E  1803               	skipnc
  1652     056F  0A00               	incf	0,w
  1653     0570  00FF               	movwf	btemp+1
  1654     0571  30FF               	movlw	255
  1655     0572  077F               	addwf	btemp+1,w
  1656     0573  0080               	movwf	0
  1657     0574  0384               	decf	4,f
  1658     0575                     l97:
  1659     0575  0008               	return
  1660     0576                     __end_of_MovieLeft:
  1661                           
  1662                           	psect	text9
  1663     059B                     __ptext9:	
  1664 ;; *************** function _MovieDown *****************
  1665 ;; Defined at:
  1666 ;;		line 16 in file "shape.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  _shapePositi    2    0[COMMON] PTR struct .
  1669 ;;		 -> main@shapePosition(4), 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1681 ;;      Params:         2       0       0       0       0
  1682 ;;      Locals:         0       0       0       0       0
  1683 ;;      Temps:          2       0       0       0       0
  1684 ;;      Totals:         4       0       0       0       0
  1685 ;;Total ram usage:        4 bytes
  1686 ;; Hardware stack levels used: 1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_MovieShape
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694     059B                     _MovieDown:	
  1695                           ;psect for function _MovieDown
  1696                           
  1697     059B                     l820:	
  1698                           ;incstack = 0
  1699                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  1700                           
  1701                           
  1702                           ;shape.c: 17:     _shapePosition->y++;
  1703     059B  0871               	movf	MovieDown@_shapePosition,w
  1704     059C  3E02               	addlw	2
  1705     059D  00F3               	movwf	??_MovieDown
  1706     059E  0872               	movf	MovieDown@_shapePosition+1,w
  1707     059F  1803               	skipnc
  1708     05A0  3E01               	addlw	1
  1709     05A1  3E00               	addlw	0
  1710     05A2  00F4               	movwf	??_MovieDown+1
  1711     05A3  0873               	movf	??_MovieDown,w
  1712     05A4  0084               	movwf	4
  1713     05A5  1783               	bsf	3,7
  1714     05A6  1C74               	btfss	??_MovieDown+1,0
  1715     05A7  1383               	bcf	3,7
  1716     05A8  3001               	movlw	1
  1717     05A9  0780               	addwf	0,f
  1718     05AA  0A84               	incf	4,f
  1719     05AB  1803               	skipnc
  1720     05AC  0A80               	incf	0,f
  1721     05AD                     l91:
  1722     05AD  0008               	return
  1723     05AE                     __end_of_MovieDown:
  1724                           
  1725                           	psect	text10
  1726     05FA                     __ptext10:	
  1727 ;; *************** function _MatrixInit *****************
  1728 ;; Defined at:
  1729 ;;		line 20 in file "matrix.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;		None
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;		None
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg, status,2, status,0, pclath, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1743 ;;      Params:         0       0       0       0       0
  1744 ;;      Locals:         0       0       0       0       0
  1745 ;;      Temps:          3       0       0       0       0
  1746 ;;      Totals:         3       0       0       0       0
  1747 ;;Total ram usage:        3 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 3
  1750 ;; This function calls:
  1751 ;;		_SendToSegment
  1752 ;;		_SpiClearMatrix
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758     05FA                     _MatrixInit:	
  1759                           ;psect for function _MatrixInit
  1760                           
  1761     05FA                     l836:	
  1762                           ;incstack = 0
  1763                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1764                           
  1765                           
  1766                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1767     05FA  3003               	movlw	3
  1768     05FB  00FA               	movwf	??_MatrixInit+2
  1769     05FC  3008               	movlw	8
  1770     05FD  00F9               	movwf	??_MatrixInit+1
  1771     05FE  3077               	movlw	119
  1772     05FF  00F8               	movwf	??_MatrixInit
  1773     0600                     u167:
  1774     0600  0BF8               	decfsz	??_MatrixInit,f
  1775     0601  2E00               	goto	u167
  1776     0602  0BF9               	decfsz	??_MatrixInit+1,f
  1777     0603  2E00               	goto	u167
  1778     0604  0BFA               	decfsz	??_MatrixInit+2,f
  1779     0605  2E00               	goto	u167
  1780     0606                     l838:
  1781                           
  1782                           ;matrix.c: 22:     RA5=1;
  1783     0606  1283               	bcf	3,5	;RP0=0, select bank0
  1784     0607  1303               	bcf	3,6	;RP1=0, select bank0
  1785     0608  1685               	bsf	5,5	;volatile
  1786     0609                     l840:
  1787                           
  1788                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1789     0609  3009               	movlw	9
  1790     060A  00F2               	movwf	SendToSegment@segment
  1791     060B  3000               	movlw	0
  1792     060C  00F3               	movwf	SendToSegment@segment+1
  1793     060D  01F4               	clrf	SendToSegment@data
  1794     060E  120A  118A  2588  120A  118A  	fcall	_SendToSegment
  1795     0613                     l842:
  1796                           
  1797                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1798     0613  300B               	movlw	11
  1799     0614  00F2               	movwf	SendToSegment@segment
  1800     0615  3000               	movlw	0
  1801     0616  00F3               	movwf	SendToSegment@segment+1
  1802     0617  3007               	movlw	7
  1803     0618  00F4               	movwf	SendToSegment@data
  1804     0619  120A  118A  2588  120A  118A  	fcall	_SendToSegment
  1805     061E                     l844:
  1806                           
  1807                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1808     061E  300A               	movlw	10
  1809     061F  00F2               	movwf	SendToSegment@segment
  1810     0620  3000               	movlw	0
  1811     0621  00F3               	movwf	SendToSegment@segment+1
  1812     0622  3002               	movlw	2
  1813     0623  00F4               	movwf	SendToSegment@data
  1814     0624  120A  118A  2588  120A  118A  	fcall	_SendToSegment
  1815     0629                     l846:
  1816                           
  1817                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1818     0629  300C               	movlw	12
  1819     062A  00F2               	movwf	SendToSegment@segment
  1820     062B  3000               	movlw	0
  1821     062C  00F3               	movwf	SendToSegment@segment+1
  1822     062D  01F4               	clrf	SendToSegment@data
  1823     062E  0AF4               	incf	SendToSegment@data,f
  1824     062F  120A  118A  2588  120A  118A  	fcall	_SendToSegment
  1825     0634                     l848:
  1826                           
  1827                           ;matrix.c: 27:     SpiClearMatrix();
  1828     0634  120A  118A  25AE  120A  118A  	fcall	_SpiClearMatrix
  1829     0639                     l72:
  1830     0639  0008               	return
  1831     063A                     __end_of_MatrixInit:
  1832                           
  1833                           	psect	text11
  1834     05AE                     __ptext11:	
  1835 ;; *************** function _SpiClearMatrix *****************
  1836 ;; Defined at:
  1837 ;;		line 10 in file "matrix.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  i               1    6[COMMON] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0, pclath, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1851 ;;      Params:         0       0       0       0       0
  1852 ;;      Locals:         1       0       0       0       0
  1853 ;;      Temps:          2       0       0       0       0
  1854 ;;      Totals:         3       0       0       0       0
  1855 ;;Total ram usage:        3 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; Hardware stack levels required when called: 2
  1858 ;; This function calls:
  1859 ;;		_SendToSegment
  1860 ;; This function is called by:
  1861 ;;		_MatrixInit
  1862 ;;		_MovieShape
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866     05AE                     _SpiClearMatrix:	
  1867                           ;psect for function _SpiClearMatrix
  1868                           
  1869     05AE                     l802:	
  1870                           ;incstack = 0
  1871                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  1872                           
  1873                           
  1874                           ;matrix.c: 12:   char i = 8;
  1875     05AE  3008               	movlw	8
  1876     05AF  00F7               	movwf	SpiClearMatrix@i
  1877     05B0                     l804:
  1878                           
  1879                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  1880     05B0  0877               	movf	SpiClearMatrix@i,w
  1881     05B1  00F5               	movwf	??_SpiClearMatrix
  1882     05B2  01F6               	clrf	??_SpiClearMatrix+1
  1883     05B3  0875               	movf	??_SpiClearMatrix,w
  1884     05B4  00F2               	movwf	SendToSegment@segment
  1885     05B5  0876               	movf	??_SpiClearMatrix+1,w
  1886     05B6  00F3               	movwf	SendToSegment@segment+1
  1887     05B7  01F4               	clrf	SendToSegment@data
  1888     05B8  120A  118A  2588  120A  118A  	fcall	_SendToSegment
  1889     05BD                     l806:
  1890                           
  1891                           ;matrix.c: 16:   } while (--i);
  1892     05BD  3001               	movlw	1
  1893     05BE  02F7               	subwf	SpiClearMatrix@i,f
  1894     05BF  1D03               	btfss	3,2
  1895     05C0  2DC2               	goto	u71
  1896     05C1  2DC3               	goto	u70
  1897     05C2                     u71:
  1898     05C2  2DB0               	goto	l804
  1899     05C3                     u70:
  1900     05C3                     l69:
  1901     05C3  0008               	return
  1902     05C4                     __end_of_SpiClearMatrix:
  1903                           
  1904                           	psect	text12
  1905     0588                     __ptext12:	
  1906 ;; *************** function _SendToSegment *****************
  1907 ;; Defined at:
  1908 ;;		line 34 in file "matrix.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  segment         2    1[COMMON] int 
  1911 ;;  data            1    3[COMMON] unsigned char 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;		None
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, status,2, status,0, pclath, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         3       0       0       0       0
  1924 ;;      Locals:         0       0       0       0       0
  1925 ;;      Temps:          0       0       0       0       0
  1926 ;;      Totals:         3       0       0       0       0
  1927 ;;Total ram usage:        3 bytes
  1928 ;; Hardware stack levels used: 1
  1929 ;; Hardware stack levels required when called: 1
  1930 ;; This function calls:
  1931 ;;		_SpiSendByte
  1932 ;; This function is called by:
  1933 ;;		_SpiClearMatrix
  1934 ;;		_MatrixInit
  1935 ;;		_ShowShape
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           
  1939     0588                     _SendToSegment:	
  1940                           ;psect for function _SendToSegment
  1941                           
  1942     0588                     l796:	
  1943                           ;incstack = 0
  1944                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  1945                           
  1946                           
  1947                           ;matrix.c: 35:     RA5 = 0;
  1948     0588  1283               	bcf	3,5	;RP0=0, select bank0
  1949     0589  1303               	bcf	3,6	;RP1=0, select bank0
  1950     058A  1285               	bcf	5,5	;volatile
  1951     058B                     l798:
  1952                           
  1953                           ;matrix.c: 36:     SpiSendByte((char)segment);
  1954     058B  0872               	movf	SendToSegment@segment,w
  1955     058C  120A  118A  254F  120A  118A  	fcall	_SpiSendByte
  1956                           
  1957                           ;matrix.c: 37:     SpiSendByte(data);
  1958     0591  0874               	movf	SendToSegment@data,w
  1959     0592  120A  118A  254F  120A  118A  	fcall	_SpiSendByte
  1960     0597                     l800:
  1961                           
  1962                           ;matrix.c: 38:     RA5 = 1;
  1963     0597  1283               	bcf	3,5	;RP0=0, select bank0
  1964     0598  1303               	bcf	3,6	;RP1=0, select bank0
  1965     0599  1685               	bsf	5,5	;volatile
  1966     059A                     l75:
  1967     059A  0008               	return
  1968     059B                     __end_of_SendToSegment:
  1969                           
  1970                           	psect	text13
  1971     054F                     __ptext13:	
  1972 ;; *************** function _SpiSendByte *****************
  1973 ;; Defined at:
  1974 ;;		line 18 in file "spi.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  data            1    wreg     unsigned char 
  1977 ;; Auto vars:     Size  Location     Type
  1978 ;;  data            1    0[COMMON] unsigned char 
  1979 ;; Return value:  Size  Location     Type
  1980 ;;                  1    wreg      void 
  1981 ;; Registers used:
  1982 ;;		wreg
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1988 ;;      Params:         0       0       0       0       0
  1989 ;;      Locals:         1       0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0
  1991 ;;      Totals:         1       0       0       0       0
  1992 ;;Total ram usage:        1 bytes
  1993 ;; Hardware stack levels used: 1
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_SendToSegment
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001     054F                     _SpiSendByte:	
  2002                           ;psect for function _SpiSendByte
  2003                           
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _SpiSendByte: [wreg]
  2007                           ;SpiSendByte@data stored from wreg
  2008     054F  00F1               	movwf	SpiSendByte@data
  2009     0550                     l794:
  2010                           
  2011                           ;spi.c: 19:     SSPBUF = data;
  2012     0550  0871               	movf	SpiSendByte@data,w
  2013     0551  1283               	bcf	3,5	;RP0=0, select bank0
  2014     0552  1303               	bcf	3,6	;RP1=0, select bank0
  2015     0553  0093               	movwf	19	;volatile
  2016     0554                     l53:	
  2017                           ;spi.c: 20:     while (!SSPIF);
  2018                           
  2019     0554  1D8C               	btfss	12,3	;volatile
  2020     0555  2D57               	goto	u61
  2021     0556  2D58               	goto	u60
  2022     0557                     u61:
  2023     0557  2D54               	goto	l53
  2024     0558                     u60:
  2025     0558                     l55:
  2026                           
  2027                           ;spi.c: 21:     SSPIF = 0;
  2028     0558  118C               	bcf	12,3	;volatile
  2029     0559                     l56:
  2030     0559  0008               	return
  2031     055A                     __end_of_SpiSendByte:
  2032     0002                     ___latbits      equ	2
  2033     007E                     btemp           set	126	;btemp
  2034     007E                     wtemp0          set	126
  2035                           
  2036                           	psect	config
  2037                           
  2038                           ;Config register CONFIG @ 0x2007
  2039                           ;	Oscillator Selection bits
  2040                           ;	FOSC = HS, HS oscillator
  2041                           ;	Watchdog Timer Enable bit
  2042                           ;	WDTE = OFF, WDT disabled
  2043                           ;	Power-up Timer Enable bit
  2044                           ;	PWRTE = OFF, PWRT disabled
  2045                           ;	FLASH Program Memory Code Protection bits
  2046                           ;	CP = OFF, Code protection off
  2047                           ;	Brown-out Reset Enable bit
  2048                           ;	BOREN = OFF, BOR disabled
  2049                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  2050                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2051                           ;	Data EE Memory Code Protection
  2052                           ;	CPD = OFF, Code Protection off
  2053                           ;	FLASH Program Memory Write Enable
  2054                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  2055                           ;	In-Circuit Debugger Mode bit
  2056                           ;	DEBUG = 0x1, unprogrammed default
  2057     2007                     	org	8199
  2058     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     23      26
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@figure(BANK0[3]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@figure(BANK0[3]), 


Critical Paths under _main in COMMON

    _MovieShape->_ShowShape
    _ShowShape->_SendToSegment
    _MatrixInit->_SpiClearMatrix
    _SpiClearMatrix->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_MovieShape
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    1361
                                             11 BANK0     12    12      0
                         _MatrixInit
                         _MovieShape
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MovieShape                                           6     3      3     705
                                              5 BANK0      6     3      3
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _ShowShape                                           14     9      5     312
                                              4 COMMON     9     4      5
                                              0 BANK0      5     5      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (2) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MatrixInit
     _SendToSegment
       _SpiSendByte
     _SpiClearMatrix
       _SendToSegment
   _MovieShape
     _MovieDown
     _MovieLeft
     _MovieRigth
     _MovieUp
     _ShowShape
       _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               85      0       0      0.0%
BITBANK3            85      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     23      26     32.5%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0      39      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec  9 10:16:04 2024

           _SpiClearMatrix 05AE                          pc 0002                         l33 054E  
                       l50 0587                         l53 0554                         l55 0558  
                       l56 0559                         l72 0639                         l82 05F9  
                       l75 059A                         l91 05AD                         l69 05C3  
                       l94 05DC                         l88 0716                         l97 0575  
                       u60 0558                         u61 0557                         u70 05C3  
                       u71 05C2                         u90 0716                         u91 0715  
                       u84 06E4                         u85 06E2                         u95 0712  
                       fsr 0004            SpiSendByte@data 0071                        l100 0564  
                      l110 0695                        l800 0597                        l802 05AE  
                      l810 0696                        l804 05B0                        l820 059B  
                      l812 06AB                        l900 077D                        l806 05BD  
                      l822 05C4                        l814 06C7                        l830 0579  
                      l910 07C3                        l902 078B                        l840 0609  
                      l824 0565                        l816 06EE                        l808 0696  
                      l832 0581                        l912 07D1                        l904 0799  
                      l842 0613                        l826 055A                        l818 06F4  
                      l850 0548                        l834 0583                        l914 07D9  
                      l906 07A7                        l844 061E                        l836 05FA  
                      l860 0648                        l852 05DD                        l828 0576  
                      l908 07B5                        l846 0629                        l838 0606  
                      l862 0652                        l870 067F                        l854 05E7  
                      l848 0634                        l872 0684                        l864 065C  
                      l856 063D                        l880 0717                        l794 0550  
                      l946 066E                        l858 063E                        l890 0732  
                      l882 0721                        l796 0588                        l868 0666  
                      l892 0745                        l884 072E                        l798 058B  
                      l894 0753                        l896 0761                        l898 076F  
                      _RA5 002D                        u100 07E6                        u101 07E5  
                      u105 07E2                        u117 075B                        u127 0777  
                      u137 0793                        u147 07AF                        u157 07CB  
                      u167 0600                        fsr0 0004                        indf 0000  
                     _main 0717                       btemp 007E                       start 0000  
   __end_of_SpiClearMatrix 05C4            __end_of_MovieUp 05DD            __end_of_SpiInit 0588  
                    ?_main 0071                      _PORTA 0005                      _PORTB 0006  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _SSPIF 0063            SpiClearMatrix@i 0077          SendToSegment@data 0074  
                    main@i 0031                      pclath 000A                      status 0003  
                    wtemp0 007E            ?_SpiClearMatrix 0071            __initialization 07EA  
             __end_of_main 07EA                 _MatrixInit 05FA                     ??_main 002B  
            ??_SetPosition 0077                     _SSPCON 0014                     _SSPBUF 0013  
               _MovieShape 063A                 _MovieRigth 055A       MovieShape@shapeArray 0027  
                ??_MovieUp 0073                  ??_SpiInit 0071              ??_SpiSendByte 0071  
           ShowShape@coord 0075    __end_of__initialization 07FC        __end_of_SetPosition 05FA  
           __pcstackCOMMON 0071               __pidataBANK0 0545                ?_MatrixInit 0071  
      __end_of_SpiSendByte 055A          __end_of_MovieLeft 0576          __end_of_MovieDown 05AE  
 MovieShape@_shapePosition 0025          __end_of_PortBInit 054F          __end_of_ShowShape 0717  
              ?_MovieShape 0025          main@shapePosition 0033                ?_MovieRigth 0071  
               __pmaintext 0717              MovieShape@dir 002A  ShowShape@countElemntArray 0077  
              _SetPosition 05DD                    _SSPSTAT 0094                 __stringtab 0003  
         ??_SpiClearMatrix 0075                    _MovieUp 05C4                    _SpiInit 0576  
            _SendToSegment 0588                _SpiSendByte 054F                    __ptext1 0576  
                  __ptext2 05DD                    __ptext3 0548                    __ptext4 063A  
                  __ptext5 0696                    __ptext6 05C4                    __ptext7 055A  
                  __ptext8 0565                    __ptext9 059B       end_of_initialization 07FC  
           ?_SendToSegment 0072          __end_ofmain@delay 000D        SetPosition@position 0071  
  MovieLeft@_shapePosition 0071                 main@figure 002E               ??_MatrixInit 0078  
      start_initialization 07EA         __end_of_MatrixInit 063A            ??_SendToSegment 0075  
             ??_MovieShape 0028               ??_MovieRigth 0073                  _MovieLeft 0565  
                _MovieDown 059B                  _PortBInit 0548                  _ShowShape 0696  
              __pdataBANK0 0037              ShowShape@_pos 007A               SetPosition@x 0073  
             SetPosition@y 0075                  ___latbits 0002              __pcstackBANK0 0020  
       __end_of_MovieShape 0696         __end_of_MovieRigth 0565               ?_SetPosition 0071  
      ShowShape@shapeArray 0079                 ?_MovieLeft 0071                 ?_MovieDown 0071  
                 ?_MovieUp 0071                   ?_SpiInit 0071                 ?_PortBInit 0071  
             ?_SpiSendByte 0071                 ?_ShowShape 0075                  __pstrings 0003  
  MovieDown@_shapePosition 0071      MovieUp@_shapePosition 0071                __stringbase 0008  
                main@delay 0009                ??_MovieLeft 0073                ??_MovieDown 0073  
              ??_PortBInit 0071                ??_ShowShape 0020               ShowShape@pos 007C  
       __end_of__stringtab 0009                   __ptext10 05FA                   __ptext11 05AE  
                 __ptext12 0588                   __ptext13 054F                   main@F913 0037  
     SendToSegment@segment 0072                  stringcode 0003      __end_of_SendToSegment 059B  
 MovieRigth@_shapePosition 0071                   stringdir 0003                   stringtab 0003  



Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 19 12:01:33 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    14                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41     0000                     
    42                           ; Generated 12/10/2023 GMT
    43                           ; 
    44                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F876 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76     0004                     fsr             equ	4
    77     0004                     fsr0            equ	4
    78     0000                     indf            equ	0
    79     0000                     indf0           equ	0
    80     0002                     pc              equ	2
    81     0002                     pcl             equ	2
    82     000A                     pclath          equ	10
    83     0003                     status          equ	3
    84     0000                     INDF            equ	0	;# 
    85     0001                     TMR0            equ	1	;# 
    86     0002                     PCL             equ	2	;# 
    87     0003                     STATUS          equ	3	;# 
    88     0004                     FSR             equ	4	;# 
    89     0005                     PORTA           equ	5	;# 
    90     0006                     PORTB           equ	6	;# 
    91     0007                     PORTC           equ	7	;# 
    92     000A                     PCLATH          equ	10	;# 
    93     000B                     INTCON          equ	11	;# 
    94     000C                     PIR1            equ	12	;# 
    95     000D                     PIR2            equ	13	;# 
    96     000E                     TMR1            equ	14	;# 
    97     000E                     TMR1L           equ	14	;# 
    98     000F                     TMR1H           equ	15	;# 
    99     0010                     T1CON           equ	16	;# 
   100     0011                     TMR2            equ	17	;# 
   101     0012                     T2CON           equ	18	;# 
   102     0013                     SSPBUF          equ	19	;# 
   103     0014                     SSPCON          equ	20	;# 
   104     0015                     CCPR1           equ	21	;# 
   105     0015                     CCPR1L          equ	21	;# 
   106     0016                     CCPR1H          equ	22	;# 
   107     0017                     CCP1CON         equ	23	;# 
   108     0018                     RCSTA           equ	24	;# 
   109     0019                     TXREG           equ	25	;# 
   110     001A                     RCREG           equ	26	;# 
   111     001B                     CCPR2           equ	27	;# 
   112     001B                     CCPR2L          equ	27	;# 
   113     001C                     CCPR2H          equ	28	;# 
   114     001D                     CCP2CON         equ	29	;# 
   115     001E                     ADRESH          equ	30	;# 
   116     001F                     ADCON0          equ	31	;# 
   117     0081                     OPTION_REG      equ	129	;# 
   118     0085                     TRISA           equ	133	;# 
   119     0086                     TRISB           equ	134	;# 
   120     0087                     TRISC           equ	135	;# 
   121     008C                     PIE1            equ	140	;# 
   122     008D                     PIE2            equ	141	;# 
   123     008E                     PCON            equ	142	;# 
   124     0091                     SSPCON2         equ	145	;# 
   125     0092                     PR2             equ	146	;# 
   126     0093                     SSPADD          equ	147	;# 
   127     0094                     SSPSTAT         equ	148	;# 
   128     0098                     TXSTA           equ	152	;# 
   129     0099                     SPBRG           equ	153	;# 
   130     009E                     ADRESL          equ	158	;# 
   131     009F                     ADCON1          equ	159	;# 
   132     010C                     EEDATA          equ	268	;# 
   133     010D                     EEADR           equ	269	;# 
   134     010E                     EEDATH          equ	270	;# 
   135     010F                     EEADRH          equ	271	;# 
   136     018C                     EECON1          equ	396	;# 
   137     018D                     EECON2          equ	397	;# 
   138     0000                     INDF            equ	0	;# 
   139     0001                     TMR0            equ	1	;# 
   140     0002                     PCL             equ	2	;# 
   141     0003                     STATUS          equ	3	;# 
   142     0004                     FSR             equ	4	;# 
   143     0005                     PORTA           equ	5	;# 
   144     0006                     PORTB           equ	6	;# 
   145     0007                     PORTC           equ	7	;# 
   146     000A                     PCLATH          equ	10	;# 
   147     000B                     INTCON          equ	11	;# 
   148     000C                     PIR1            equ	12	;# 
   149     000D                     PIR2            equ	13	;# 
   150     000E                     TMR1            equ	14	;# 
   151     000E                     TMR1L           equ	14	;# 
   152     000F                     TMR1H           equ	15	;# 
   153     0010                     T1CON           equ	16	;# 
   154     0011                     TMR2            equ	17	;# 
   155     0012                     T2CON           equ	18	;# 
   156     0013                     SSPBUF          equ	19	;# 
   157     0014                     SSPCON          equ	20	;# 
   158     0015                     CCPR1           equ	21	;# 
   159     0015                     CCPR1L          equ	21	;# 
   160     0016                     CCPR1H          equ	22	;# 
   161     0017                     CCP1CON         equ	23	;# 
   162     0018                     RCSTA           equ	24	;# 
   163     0019                     TXREG           equ	25	;# 
   164     001A                     RCREG           equ	26	;# 
   165     001B                     CCPR2           equ	27	;# 
   166     001B                     CCPR2L          equ	27	;# 
   167     001C                     CCPR2H          equ	28	;# 
   168     001D                     CCP2CON         equ	29	;# 
   169     001E                     ADRESH          equ	30	;# 
   170     001F                     ADCON0          equ	31	;# 
   171     0081                     OPTION_REG      equ	129	;# 
   172     0085                     TRISA           equ	133	;# 
   173     0086                     TRISB           equ	134	;# 
   174     0087                     TRISC           equ	135	;# 
   175     008C                     PIE1            equ	140	;# 
   176     008D                     PIE2            equ	141	;# 
   177     008E                     PCON            equ	142	;# 
   178     0091                     SSPCON2         equ	145	;# 
   179     0092                     PR2             equ	146	;# 
   180     0093                     SSPADD          equ	147	;# 
   181     0094                     SSPSTAT         equ	148	;# 
   182     0098                     TXSTA           equ	152	;# 
   183     0099                     SPBRG           equ	153	;# 
   184     009E                     ADRESL          equ	158	;# 
   185     009F                     ADCON1          equ	159	;# 
   186     010C                     EEDATA          equ	268	;# 
   187     010D                     EEADR           equ	269	;# 
   188     010E                     EEDATH          equ	270	;# 
   189     010F                     EEADRH          equ	271	;# 
   190     018C                     EECON1          equ	396	;# 
   191     018D                     EECON2          equ	397	;# 
   192     0000                     INDF            equ	0	;# 
   193     0001                     TMR0            equ	1	;# 
   194     0002                     PCL             equ	2	;# 
   195     0003                     STATUS          equ	3	;# 
   196     0004                     FSR             equ	4	;# 
   197     0005                     PORTA           equ	5	;# 
   198     0006                     PORTB           equ	6	;# 
   199     0007                     PORTC           equ	7	;# 
   200     000A                     PCLATH          equ	10	;# 
   201     000B                     INTCON          equ	11	;# 
   202     000C                     PIR1            equ	12	;# 
   203     000D                     PIR2            equ	13	;# 
   204     000E                     TMR1            equ	14	;# 
   205     000E                     TMR1L           equ	14	;# 
   206     000F                     TMR1H           equ	15	;# 
   207     0010                     T1CON           equ	16	;# 
   208     0011                     TMR2            equ	17	;# 
   209     0012                     T2CON           equ	18	;# 
   210     0013                     SSPBUF          equ	19	;# 
   211     0014                     SSPCON          equ	20	;# 
   212     0015                     CCPR1           equ	21	;# 
   213     0015                     CCPR1L          equ	21	;# 
   214     0016                     CCPR1H          equ	22	;# 
   215     0017                     CCP1CON         equ	23	;# 
   216     0018                     RCSTA           equ	24	;# 
   217     0019                     TXREG           equ	25	;# 
   218     001A                     RCREG           equ	26	;# 
   219     001B                     CCPR2           equ	27	;# 
   220     001B                     CCPR2L          equ	27	;# 
   221     001C                     CCPR2H          equ	28	;# 
   222     001D                     CCP2CON         equ	29	;# 
   223     001E                     ADRESH          equ	30	;# 
   224     001F                     ADCON0          equ	31	;# 
   225     0081                     OPTION_REG      equ	129	;# 
   226     0085                     TRISA           equ	133	;# 
   227     0086                     TRISB           equ	134	;# 
   228     0087                     TRISC           equ	135	;# 
   229     008C                     PIE1            equ	140	;# 
   230     008D                     PIE2            equ	141	;# 
   231     008E                     PCON            equ	142	;# 
   232     0091                     SSPCON2         equ	145	;# 
   233     0092                     PR2             equ	146	;# 
   234     0093                     SSPADD          equ	147	;# 
   235     0094                     SSPSTAT         equ	148	;# 
   236     0098                     TXSTA           equ	152	;# 
   237     0099                     SPBRG           equ	153	;# 
   238     009E                     ADRESL          equ	158	;# 
   239     009F                     ADCON1          equ	159	;# 
   240     010C                     EEDATA          equ	268	;# 
   241     010D                     EEADR           equ	269	;# 
   242     010E                     EEDATH          equ	270	;# 
   243     010F                     EEADRH          equ	271	;# 
   244     018C                     EECON1          equ	396	;# 
   245     018D                     EECON2          equ	397	;# 
   246     0000                     INDF            equ	0	;# 
   247     0001                     TMR0            equ	1	;# 
   248     0002                     PCL             equ	2	;# 
   249     0003                     STATUS          equ	3	;# 
   250     0004                     FSR             equ	4	;# 
   251     0005                     PORTA           equ	5	;# 
   252     0006                     PORTB           equ	6	;# 
   253     0007                     PORTC           equ	7	;# 
   254     000A                     PCLATH          equ	10	;# 
   255     000B                     INTCON          equ	11	;# 
   256     000C                     PIR1            equ	12	;# 
   257     000D                     PIR2            equ	13	;# 
   258     000E                     TMR1            equ	14	;# 
   259     000E                     TMR1L           equ	14	;# 
   260     000F                     TMR1H           equ	15	;# 
   261     0010                     T1CON           equ	16	;# 
   262     0011                     TMR2            equ	17	;# 
   263     0012                     T2CON           equ	18	;# 
   264     0013                     SSPBUF          equ	19	;# 
   265     0014                     SSPCON          equ	20	;# 
   266     0015                     CCPR1           equ	21	;# 
   267     0015                     CCPR1L          equ	21	;# 
   268     0016                     CCPR1H          equ	22	;# 
   269     0017                     CCP1CON         equ	23	;# 
   270     0018                     RCSTA           equ	24	;# 
   271     0019                     TXREG           equ	25	;# 
   272     001A                     RCREG           equ	26	;# 
   273     001B                     CCPR2           equ	27	;# 
   274     001B                     CCPR2L          equ	27	;# 
   275     001C                     CCPR2H          equ	28	;# 
   276     001D                     CCP2CON         equ	29	;# 
   277     001E                     ADRESH          equ	30	;# 
   278     001F                     ADCON0          equ	31	;# 
   279     0081                     OPTION_REG      equ	129	;# 
   280     0085                     TRISA           equ	133	;# 
   281     0086                     TRISB           equ	134	;# 
   282     0087                     TRISC           equ	135	;# 
   283     008C                     PIE1            equ	140	;# 
   284     008D                     PIE2            equ	141	;# 
   285     008E                     PCON            equ	142	;# 
   286     0091                     SSPCON2         equ	145	;# 
   287     0092                     PR2             equ	146	;# 
   288     0093                     SSPADD          equ	147	;# 
   289     0094                     SSPSTAT         equ	148	;# 
   290     0098                     TXSTA           equ	152	;# 
   291     0099                     SPBRG           equ	153	;# 
   292     009E                     ADRESL          equ	158	;# 
   293     009F                     ADCON1          equ	159	;# 
   294     010C                     EEDATA          equ	268	;# 
   295     010D                     EEADR           equ	269	;# 
   296     010E                     EEDATH          equ	270	;# 
   297     010F                     EEADRH          equ	271	;# 
   298     018C                     EECON1          equ	396	;# 
   299     018D                     EECON2          equ	397	;# 
   300     0000                     INDF            equ	0	;# 
   301     0001                     TMR0            equ	1	;# 
   302     0002                     PCL             equ	2	;# 
   303     0003                     STATUS          equ	3	;# 
   304     0004                     FSR             equ	4	;# 
   305     0005                     PORTA           equ	5	;# 
   306     0006                     PORTB           equ	6	;# 
   307     0007                     PORTC           equ	7	;# 
   308     000A                     PCLATH          equ	10	;# 
   309     000B                     INTCON          equ	11	;# 
   310     000C                     PIR1            equ	12	;# 
   311     000D                     PIR2            equ	13	;# 
   312     000E                     TMR1            equ	14	;# 
   313     000E                     TMR1L           equ	14	;# 
   314     000F                     TMR1H           equ	15	;# 
   315     0010                     T1CON           equ	16	;# 
   316     0011                     TMR2            equ	17	;# 
   317     0012                     T2CON           equ	18	;# 
   318     0013                     SSPBUF          equ	19	;# 
   319     0014                     SSPCON          equ	20	;# 
   320     0015                     CCPR1           equ	21	;# 
   321     0015                     CCPR1L          equ	21	;# 
   322     0016                     CCPR1H          equ	22	;# 
   323     0017                     CCP1CON         equ	23	;# 
   324     0018                     RCSTA           equ	24	;# 
   325     0019                     TXREG           equ	25	;# 
   326     001A                     RCREG           equ	26	;# 
   327     001B                     CCPR2           equ	27	;# 
   328     001B                     CCPR2L          equ	27	;# 
   329     001C                     CCPR2H          equ	28	;# 
   330     001D                     CCP2CON         equ	29	;# 
   331     001E                     ADRESH          equ	30	;# 
   332     001F                     ADCON0          equ	31	;# 
   333     0081                     OPTION_REG      equ	129	;# 
   334     0085                     TRISA           equ	133	;# 
   335     0086                     TRISB           equ	134	;# 
   336     0087                     TRISC           equ	135	;# 
   337     008C                     PIE1            equ	140	;# 
   338     008D                     PIE2            equ	141	;# 
   339     008E                     PCON            equ	142	;# 
   340     0091                     SSPCON2         equ	145	;# 
   341     0092                     PR2             equ	146	;# 
   342     0093                     SSPADD          equ	147	;# 
   343     0094                     SSPSTAT         equ	148	;# 
   344     0098                     TXSTA           equ	152	;# 
   345     0099                     SPBRG           equ	153	;# 
   346     009E                     ADRESL          equ	158	;# 
   347     009F                     ADCON1          equ	159	;# 
   348     010C                     EEDATA          equ	268	;# 
   349     010D                     EEADR           equ	269	;# 
   350     010E                     EEDATH          equ	270	;# 
   351     010F                     EEADRH          equ	271	;# 
   352     018C                     EECON1          equ	396	;# 
   353     018D                     EECON2          equ	397	;# 
   354     0000                     INDF            equ	0	;# 
   355     0001                     TMR0            equ	1	;# 
   356     0002                     PCL             equ	2	;# 
   357     0003                     STATUS          equ	3	;# 
   358     0004                     FSR             equ	4	;# 
   359     0005                     PORTA           equ	5	;# 
   360     0006                     PORTB           equ	6	;# 
   361     0007                     PORTC           equ	7	;# 
   362     000A                     PCLATH          equ	10	;# 
   363     000B                     INTCON          equ	11	;# 
   364     000C                     PIR1            equ	12	;# 
   365     000D                     PIR2            equ	13	;# 
   366     000E                     TMR1            equ	14	;# 
   367     000E                     TMR1L           equ	14	;# 
   368     000F                     TMR1H           equ	15	;# 
   369     0010                     T1CON           equ	16	;# 
   370     0011                     TMR2            equ	17	;# 
   371     0012                     T2CON           equ	18	;# 
   372     0013                     SSPBUF          equ	19	;# 
   373     0014                     SSPCON          equ	20	;# 
   374     0015                     CCPR1           equ	21	;# 
   375     0015                     CCPR1L          equ	21	;# 
   376     0016                     CCPR1H          equ	22	;# 
   377     0017                     CCP1CON         equ	23	;# 
   378     0018                     RCSTA           equ	24	;# 
   379     0019                     TXREG           equ	25	;# 
   380     001A                     RCREG           equ	26	;# 
   381     001B                     CCPR2           equ	27	;# 
   382     001B                     CCPR2L          equ	27	;# 
   383     001C                     CCPR2H          equ	28	;# 
   384     001D                     CCP2CON         equ	29	;# 
   385     001E                     ADRESH          equ	30	;# 
   386     001F                     ADCON0          equ	31	;# 
   387     0081                     OPTION_REG      equ	129	;# 
   388     0085                     TRISA           equ	133	;# 
   389     0086                     TRISB           equ	134	;# 
   390     0087                     TRISC           equ	135	;# 
   391     008C                     PIE1            equ	140	;# 
   392     008D                     PIE2            equ	141	;# 
   393     008E                     PCON            equ	142	;# 
   394     0091                     SSPCON2         equ	145	;# 
   395     0092                     PR2             equ	146	;# 
   396     0093                     SSPADD          equ	147	;# 
   397     0094                     SSPSTAT         equ	148	;# 
   398     0098                     TXSTA           equ	152	;# 
   399     0099                     SPBRG           equ	153	;# 
   400     009E                     ADRESL          equ	158	;# 
   401     009F                     ADCON1          equ	159	;# 
   402     010C                     EEDATA          equ	268	;# 
   403     010D                     EEADR           equ	269	;# 
   404     010E                     EEDATH          equ	270	;# 
   405     010F                     EEADRH          equ	271	;# 
   406     018C                     EECON1          equ	396	;# 
   407     018D                     EECON2          equ	397	;# 
   408                           
   409                           	psect	idataBANK1
   410     0004                     __pidataBANK1:
   411                           
   412                           ;initializer for main@F932
   413     0004  3407               	retlw	7
   414     0005  3405               	retlw	5
   415     0006  3402               	retlw	2
   416                           
   417                           	psect	strings
   418     0800                     __pstrings:
   419     0800                     stringtab:
   420     0800                     __stringtab:
   421     0800                     stringcode:	
   422                           ;	String table - string pointers are 1 byte each
   423                           
   424     0800                     stringdir:
   425     0800  3008               	movlw	high stringdir
   426     0801  008A               	movwf	10
   427     0802  0804               	movf	4,w
   428     0803  0A84               	incf	4,f
   429     0804  0782               	addwf	2,f
   430     0805                     __stringbase:
   431     0805  3400               	retlw	0
   432     0806                     __end_of__stringtab:
   433     0806                     ChangeOfCoordinates@delay:
   434     0806  3496               	retlw	150
   435     0807  3400               	retlw	0
   436     0808  3400               	retlw	0
   437     0809  3400               	retlw	0
   438     080A                     __end_ofChangeOfCoordinates@delay:
   439     0013                     _SSPBUF         set	19
   440     0014                     _SSPCON         set	20
   441     0005                     _PORTA          set	5
   442     0006                     _PORTB          set	6
   443     002D                     _RA5            set	45
   444     0063                     _SSPIF          set	99
   445     0094                     _SSPSTAT        set	148
   446     0085                     _TRISA          set	133
   447     0087                     _TRISC          set	135
   448     0086                     _TRISB          set	134
   449                           
   450                           	psect	cinit
   451     07D8                     start_initialization:	
   452                           ; #config settings
   453                           
   454     07D8                     __initialization:
   455                           
   456                           ; Initialize objects allocated to BANK1
   457     07D8  1683               	bsf	3,5	;RP0=1, select bank1
   458     07D9  1303               	bcf	3,6	;RP1=0, select bank1
   459     07DA  120A  118A  2004  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   460     07DF  00B1               	movwf	__pdataBANK1& (0+127)
   461     07E0  120A  118A  2005  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   462     07E5  00B2               	movwf	(__pdataBANK1+1)& (0+127)
   463     07E6  120A  118A  2006  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   464     07EB  00B3               	movwf	(__pdataBANK1+2)& (0+127)
   465                           
   466                           ; Clear objects allocated to BANK1
   467     07EC  01A9               	clrf	__pbssBANK1& (0+127)
   468     07ED  01AA               	clrf	(__pbssBANK1+1)& (0+127)
   469     07EE  01AB               	clrf	(__pbssBANK1+2)& (0+127)
   470     07EF  01AC               	clrf	(__pbssBANK1+3)& (0+127)
   471     07F0  01AD               	clrf	(__pbssBANK1+4)& (0+127)
   472     07F1  01AE               	clrf	(__pbssBANK1+5)& (0+127)
   473     07F2  01AF               	clrf	(__pbssBANK1+6)& (0+127)
   474     07F3  01B0               	clrf	(__pbssBANK1+7)& (0+127)
   475                           
   476                           ; Clear objects allocated to BANK0
   477     07F4  1283               	bcf	3,5	;RP0=0, select bank0
   478     07F5  1303               	bcf	3,6	;RP1=0, select bank0
   479     07F6  01E9               	clrf	__pbssBANK0& (0+127)
   480     07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   481     07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   482     07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   483     07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   484     07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
   485     07FC                     end_of_initialization:	
   486                           ;End of C runtime variable initialization code
   487                           
   488     07FC                     __end_of__initialization:
   489     07FC  0183               	clrf	3
   490     07FD  120A  118A  284D   	ljmp	_main	;jump to C main() function
   491                           
   492                           	psect	bssBANK0
   493     0069                     __pbssBANK0:
   494     0069                     _brkp:
   495     0069                     	ds	2
   496     006B                     malloc@cur:
   497     006B                     	ds	2
   498     006D                     ___freelist:
   499     006D                     	ds	2
   500                           
   501                           	psect	bssBANK1
   502     00A9                     __pbssBANK1:
   503     00A9                     malloc@lock:
   504     00A9                     	ds	4
   505     00AD                     malloc@end:
   506     00AD                     	ds	2
   507     00AF                     _errno:
   508     00AF                     	ds	2
   509                           
   510                           	psect	dataBANK1
   511     00B1                     __pdataBANK1:
   512     00B1                     main@F932:
   513     00B1                     	ds	3
   514                           
   515                           	psect	cstackBANK1
   516     00A0                     __pcstackBANK1:
   517     00A0                     main@square_1:
   518                           
   519                           ; 3 bytes @ 0x0
   520     00A0                     	ds	3
   521     00A3                     main@countElemntArray:
   522                           
   523                           ; 2 bytes @ 0x3
   524     00A3                     	ds	2
   525     00A5                     main@shapePosition:
   526                           
   527                           ; 4 bytes @ 0x5
   528     00A5                     	ds	4
   529                           
   530                           	psect	cstackCOMMON
   531     0071                     __pcstackCOMMON:
   532     0071                     ?_SpiInit:
   533     0071                     ?_MatrixInit:	
   534                           ; 1 bytes @ 0x0
   535                           
   536     0071                     ?_PortBInit:	
   537                           ; 1 bytes @ 0x0
   538                           
   539     0071                     ?_SetPosition:	
   540                           ; 1 bytes @ 0x0
   541                           
   542     0071                     ?_CopyArray:	
   543                           ; 1 bytes @ 0x0
   544                           
   545     0071                     ?_free:	
   546                           ; 1 bytes @ 0x0
   547                           
   548     0071                     ?_Reverse:	
   549                           ; 1 bytes @ 0x0
   550                           
   551     0071                     ?_main:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     0071                     ?_SpiSendByte:	
   555                           ; 1 bytes @ 0x0
   556                           
   557     0071                     ?_SpiClearMatrix:	
   558                           ; 1 bytes @ 0x0
   559                           
   560     0071                     ?_MovieDown:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     0071                     ?_MovieUp:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     0071                     ?_MovieLeft:	
   567                           ; 1 bytes @ 0x0
   568                           
   569     0071                     ?_MovieRigth:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0071                     ?___simple_search_fl:	
   573                           ; 1 bytes @ 0x0
   574                           
   575     0071                     ?___expand_heap:	
   576                           ; 2 bytes @ 0x0
   577                           
   578     0071                     ?___wmul:	
   579                           ; 2 bytes @ 0x0
   580                           
   581     0071                     SpiSendByte@data:	
   582                           ; 2 bytes @ 0x0
   583                           
   584     0071                     ___expand_heap@pn:	
   585                           ; 1 bytes @ 0x0
   586                           
   587     0071                     SetPosition@position:	
   588                           ; 1 bytes @ 0x0
   589                           
   590     0071                     MovieDown@_shapePosition:	
   591                           ; 2 bytes @ 0x0
   592                           
   593     0071                     MovieUp@_shapePosition:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0071                     MovieLeft@_shapePosition:	
   597                           ; 2 bytes @ 0x0
   598                           
   599     0071                     MovieRigth@_shapePosition:	
   600                           ; 2 bytes @ 0x0
   601                           
   602     0071                     Reverse@array_:	
   603                           ; 2 bytes @ 0x0
   604                           
   605     0071                     CopyArray@array_:	
   606                           ; 2 bytes @ 0x0
   607                           
   608     0071                     ___wmul@multiplier:	
   609                           ; 2 bytes @ 0x0
   610                           
   611     0071                     ___simple_search_fl@n:	
   612                           ; 2 bytes @ 0x0
   613                           
   614     0071                     free@ptr:	
   615                           ; 2 bytes @ 0x0
   616                           
   617     0071                     ??_SpiInit:	
   618                           ; 2 bytes @ 0x0
   619                           
   620     0071                     ??_PortBInit:	
   621                           ; 1 bytes @ 0x0
   622                           
   623     0071                     ??_SpiSendByte:	
   624                           ; 1 bytes @ 0x0
   625                           
   626                           
   627                           ; 1 bytes @ 0x0
   628     0071                     	ds	1
   629     0072                     ?_SendToSegment:
   630     0072                     SendToSegment@segment:	
   631                           ; 1 bytes @ 0x1
   632                           
   633     0072                     ___expand_heap@n:	
   634                           ; 2 bytes @ 0x1
   635                           
   636     0072                     ??___expand_heap:	
   637                           ; 2 bytes @ 0x1
   638                           
   639                           
   640                           ; 1 bytes @ 0x1
   641     0072                     	ds	1
   642     0073                     SetPosition@x:
   643     0073                     Reverse@countElemntArray:	
   644                           ; 2 bytes @ 0x2
   645                           
   646     0073                     CopyArray@res:	
   647                           ; 2 bytes @ 0x2
   648                           
   649     0073                     ___wmul@multiplicand:	
   650                           ; 2 bytes @ 0x2
   651                           
   652     0073                     ??_free:	
   653                           ; 2 bytes @ 0x2
   654                           
   655     0073                     ??___simple_search_fl:	
   656                           ; 1 bytes @ 0x2
   657                           
   658     0073                     ??_MovieDown:	
   659                           ; 1 bytes @ 0x2
   660                           
   661     0073                     ??_MovieUp:	
   662                           ; 1 bytes @ 0x2
   663                           
   664     0073                     ??_MovieLeft:	
   665                           ; 1 bytes @ 0x2
   666                           
   667     0073                     ??_MovieRigth:	
   668                           ; 1 bytes @ 0x2
   669                           
   670                           
   671                           ; 1 bytes @ 0x2
   672     0073                     	ds	1
   673     0074                     SendToSegment@data:
   674     0074                     ___expand_heap@new_brkp:	
   675                           ; 1 bytes @ 0x3
   676                           
   677                           
   678                           ; 2 bytes @ 0x3
   679     0074                     	ds	1
   680     0075                     ?_ShowShape:
   681     0075                     SetPosition@y:	
   682                           ; 1 bytes @ 0x4
   683                           
   684     0075                     ShowShape@coord:	
   685                           ; 2 bytes @ 0x4
   686                           
   687     0075                     CopyArray@countElemntArray:	
   688                           ; 2 bytes @ 0x4
   689                           
   690     0075                     ___wmul@product:	
   691                           ; 2 bytes @ 0x4
   692                           
   693     0075                     ??_Reverse:	
   694                           ; 2 bytes @ 0x4
   695                           
   696     0075                     ??_SendToSegment:	
   697                           ; 1 bytes @ 0x4
   698                           
   699     0075                     ??_SpiClearMatrix:	
   700                           ; 1 bytes @ 0x4
   701                           
   702     0075                     ??___wmul:	
   703                           ; 1 bytes @ 0x4
   704                           
   705                           
   706                           ; 1 bytes @ 0x4
   707     0075                     	ds	2
   708     0077                     ?_memset:
   709     0077                     SpiClearMatrix@i:	
   710                           ; 2 bytes @ 0x6
   711                           
   712     0077                     ShowShape@countElemntArray:	
   713                           ; 1 bytes @ 0x6
   714                           
   715     0077                     memset@dest:	
   716                           ; 2 bytes @ 0x6
   717                           
   718     0077                     ??_SetPosition:	
   719                           ; 2 bytes @ 0x6
   720                           
   721     0077                     ??_CopyArray:	
   722                           ; 1 bytes @ 0x6
   723                           
   724                           
   725                           ; 1 bytes @ 0x6
   726     0077                     	ds	1
   727     0078                     ??_MatrixInit:
   728                           
   729                           ; 1 bytes @ 0x7
   730     0078                     	ds	1
   731     0079                     ?_malloc:
   732     0079                     ShowShape@shapeArray:	
   733                           ; 2 bytes @ 0x8
   734                           
   735     0079                     free@cptr:	
   736                           ; 2 bytes @ 0x8
   737                           
   738     0079                     malloc@n:	
   739                           ; 2 bytes @ 0x8
   740                           
   741     0079                     memset@c:	
   742                           ; 2 bytes @ 0x8
   743                           
   744                           
   745                           ; 2 bytes @ 0x8
   746     0079                     	ds	2
   747     007B                     free@c:
   748     007B                     memset@n:	
   749                           ; 2 bytes @ 0xA
   750                           
   751     007B                     ??_MovieShape:	
   752                           ; 2 bytes @ 0xA
   753                           
   754     007B                     ??_malloc:	
   755                           ; 1 bytes @ 0xA
   756                           
   757                           
   758                           ; 1 bytes @ 0xA
   759     007B                     	ds	2
   760     007D                     MovieShape@dir:
   761     007D                     ??_calloc:	
   762                           ; 1 bytes @ 0xC
   763                           
   764     007D                     ??_memset:	
   765                           ; 1 bytes @ 0xC
   766                           
   767                           
   768                           ; 1 bytes @ 0xC
   769     007D                     	ds	1
   770     007E                     ??_RotateDirection:
   771     007E                     ??_main:	
   772                           ; 1 bytes @ 0xD
   773                           
   774                           
   775                           	psect	cstackBANK0
   776     0020                     __pcstackBANK0:	
   777                           ; 1 bytes @ 0xD
   778                           
   779     0020                     Reverse@t:
   780     0020                     CopyArray@y:	
   781                           ; 1 bytes @ 0x0
   782                           
   783     0020                     ___simple_search_fl@remaining_size:	
   784                           ; 2 bytes @ 0x0
   785                           
   786     0020                     memset@p:	
   787                           ; 2 bytes @ 0x0
   788                           
   789     0020                     ??_ShowShape:	
   790                           ; 2 bytes @ 0x0
   791                           
   792                           
   793                           ; 1 bytes @ 0x0
   794     0020                     	ds	1
   795     0021                     Reverse@i:
   796                           
   797                           ; 2 bytes @ 0x1
   798     0021                     	ds	1
   799     0022                     ___simple_search_fl@best_last:
   800                           
   801                           ; 2 bytes @ 0x2
   802     0022                     	ds	1
   803     0023                     Reverse@j:
   804                           
   805                           ; 2 bytes @ 0x3
   806     0023                     	ds	1
   807     0024                     ___simple_search_fl@split:
   808                           
   809                           ; 2 bytes @ 0x4
   810     0024                     	ds	2
   811     0026                     ShowShape@_pos:
   812     0026                     ___simple_search_fl@last:	
   813                           ; 2 bytes @ 0x6
   814                           
   815                           
   816                           ; 2 bytes @ 0x6
   817     0026                     	ds	2
   818     0028                     ShowShape@pos:
   819     0028                     ___simple_search_fl@next:	
   820                           ; 2 bytes @ 0x8
   821                           
   822                           
   823                           ; 2 bytes @ 0x8
   824     0028                     	ds	2
   825     002A                     ?_MovieShape:
   826     002A                     MovieShape@_shapePosition:	
   827                           ; 1 bytes @ 0xA
   828                           
   829     002A                     ___simple_search_fl@c:	
   830                           ; 2 bytes @ 0xA
   831                           
   832                           
   833                           ; 2 bytes @ 0xA
   834     002A                     	ds	2
   835     002C                     MovieShape@shapeArray:
   836     002C                     ___simple_search_fl@best:	
   837                           ; 2 bytes @ 0xC
   838                           
   839                           
   840                           ; 2 bytes @ 0xC
   841     002C                     	ds	2
   842     002E                     MovieShape@countElemntArray:
   843     002E                     malloc@m:	
   844                           ; 2 bytes @ 0xE
   845                           
   846                           
   847                           ; 2 bytes @ 0xE
   848     002E                     	ds	2
   849     0030                     malloc@sz:
   850                           
   851                           ; 2 bytes @ 0x10
   852     0030                     	ds	2
   853     0032                     malloc@size:
   854                           
   855                           ; 2 bytes @ 0x12
   856     0032                     	ds	2
   857     0034                     malloc@p:
   858                           
   859                           ; 2 bytes @ 0x14
   860     0034                     	ds	2
   861     0036                     malloc@new:
   862                           
   863                           ; 2 bytes @ 0x16
   864     0036                     	ds	2
   865     0038                     ?_calloc:
   866     0038                     calloc@nmemb:	
   867                           ; 2 bytes @ 0x18
   868                           
   869                           
   870                           ; 2 bytes @ 0x18
   871     0038                     	ds	2
   872     003A                     calloc@size:
   873                           
   874                           ; 2 bytes @ 0x1A
   875     003A                     	ds	2
   876     003C                     calloc@new_ptr:
   877                           
   878                           ; 2 bytes @ 0x1C
   879     003C                     	ds	2
   880     003E                     ?_Rotate:
   881     003E                     Rotate@array_:	
   882                           ; 1 bytes @ 0x1E
   883                           
   884                           
   885                           ; 2 bytes @ 0x1E
   886     003E                     	ds	2
   887     0040                     Rotate@countElemntArray:
   888                           
   889                           ; 2 bytes @ 0x20
   890     0040                     	ds	2
   891     0042                     ??_Rotate:
   892                           
   893                           ; 1 bytes @ 0x22
   894     0042                     	ds	9
   895     004B                     Rotate@x:
   896                           
   897                           ; 2 bytes @ 0x2B
   898     004B                     	ds	2
   899     004D                     Rotate@i:
   900                           
   901                           ; 2 bytes @ 0x2D
   902     004D                     	ds	2
   903     004F                     Rotate@res:
   904                           
   905                           ; 2 bytes @ 0x2F
   906     004F                     	ds	2
   907     0051                     Rotate@_i:
   908                           
   909                           ; 2 bytes @ 0x31
   910     0051                     	ds	2
   911     0053                     ?_RotateDirection:
   912     0053                     RotateDirection@step:	
   913                           ; 1 bytes @ 0x33
   914                           
   915                           
   916                           ; 2 bytes @ 0x33
   917     0053                     	ds	2
   918     0055                     RotateDirection@array_:
   919                           
   920                           ; 2 bytes @ 0x35
   921     0055                     	ds	2
   922     0057                     RotateDirection@_countElemntArray:
   923                           
   924                           ; 2 bytes @ 0x37
   925     0057                     	ds	2
   926     0059                     RotateDirection@i:
   927                           
   928                           ; 2 bytes @ 0x39
   929     0059                     	ds	2
   930     005B                     ?_ChangeOfCoordinates:
   931     005B                     ChangeOfCoordinates@_shapePosition:	
   932                           ; 1 bytes @ 0x3B
   933                           
   934                           
   935                           ; 2 bytes @ 0x3B
   936     005B                     	ds	2
   937     005D                     ChangeOfCoordinates@_figure:
   938                           
   939                           ; 1 bytes @ 0x3D
   940     005D                     	ds	1
   941     005E                     ChangeOfCoordinates@_countElemntArray:
   942                           
   943                           ; 2 bytes @ 0x3E
   944     005E                     	ds	2
   945     0060                     ??_ChangeOfCoordinates:
   946                           
   947                           ; 1 bytes @ 0x40
   948     0060                     	ds	3
   949     0063                     ChangeOfCoordinates@i:
   950                           
   951                           ; 2 bytes @ 0x43
   952     0063                     	ds	2
   953     0065                     ChangeOfCoordinates@step:
   954                           
   955                           ; 2 bytes @ 0x45
   956     0065                     	ds	2
   957     0067                     ChangeOfCoordinates@rotateArray:
   958                           
   959                           ; 2 bytes @ 0x47
   960     0067                     	ds	2
   961                           
   962                           	psect	maintext
   963     004D                     __pmaintext:	
   964 ;;
   965 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   966 ;;
   967 ;; *************** function _main *****************
   968 ;; Defined at:
   969 ;;		line 22 in file "main.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;		None
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  shapePositio    4    5[BANK1 ] struct .
   974 ;;  square_1        3    0[BANK1 ] unsigned char [3]
   975 ;;  countElemntA    2    3[BANK1 ] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : B00/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   985 ;;      Params:         0       0       0       0       0
   986 ;;      Locals:         0       0       9       0       0
   987 ;;      Temps:          0       0       0       0       0
   988 ;;      Totals:         0       0       9       0       0
   989 ;;Total ram usage:        9 bytes
   990 ;; Hardware stack levels required when called: 6
   991 ;; This function calls:
   992 ;;		_ChangeOfCoordinates
   993 ;;		_MatrixInit
   994 ;;		_PortBInit
   995 ;;		_SetPosition
   996 ;;		_SpiInit
   997 ;; This function is called by:
   998 ;;		Startup code after reset
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002     004D                     _main:	
  1003                           ;psect for function _main
  1004                           
  1005     004D                     l1689:	
  1006                           ;incstack = 0
  1007                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1008                           
  1009                           
  1010                           ;main.c: 23:     SpiInit();
  1011     004D  120A  158A  26F6  120A  118A  	fcall	_SpiInit
  1012                           
  1013                           ;main.c: 24:     MatrixInit();
  1014     0052  120A  158A  27C0  120A  118A  	fcall	_MatrixInit
  1015     0057                     l1691:
  1016                           
  1017                           ;main.c: 25:     PortBInit();
  1018     0057  120A  158A  26C8  120A  118A  	fcall	_PortBInit
  1019                           
  1020                           ;main.c: 27:     TCoord shapePosition;;main.c: 28:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
  1021     005C  1683               	bsf	3,5	;RP0=1, select bank1
  1022     005D  1303               	bcf	3,6	;RP1=0, select bank1
  1023     005E  0831               	movf	main@F932^(0+128),w
  1024     005F  00A0               	movwf	main@square_1^(0+128)
  1025     0060  0832               	movf	(main@F932+1)^(0+128),w
  1026     0061  00A1               	movwf	(main@square_1+1)^(0+128)
  1027     0062  0833               	movf	(main@F932+2)^(0+128),w
  1028     0063  00A2               	movwf	(main@square_1+2)^(0+128)
  1029                           
  1030                           ;main.c: 29:     int countElemntArray = 3;
  1031     0064  3003               	movlw	3
  1032     0065  00A3               	movwf	main@countElemntArray^(0+128)
  1033     0066  3000               	movlw	0
  1034     0067  00A4               	movwf	(main@countElemntArray^(0+128)+1)
  1035     0068                     l1693:
  1036                           
  1037                           ;main.c: 32:         SetPosition(&shapePosition, 0, 0);
  1038     0068  30A5               	movlw	low main@shapePosition
  1039     0069  00F1               	movwf	SetPosition@position
  1040     006A  3000               	movlw	high main@shapePosition
  1041     006B  00F2               	movwf	SetPosition@position+1
  1042     006C  3000               	movlw	0
  1043     006D  00F3               	movwf	SetPosition@x
  1044     006E  00F4               	movwf	SetPosition@x+1
  1045     006F  3000               	movlw	0
  1046     0070  00F5               	movwf	SetPosition@y
  1047     0071  00F6               	movwf	SetPosition@y+1
  1048     0072  120A  158A  275D  120A  118A  	fcall	_SetPosition
  1049     0077                     l1695:
  1050                           
  1051                           ;main.c: 33:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray);
  1052     0077  30A5               	movlw	low main@shapePosition
  1053     0078  1283               	bcf	3,5	;RP0=0, select bank0
  1054     0079  1303               	bcf	3,6	;RP1=0, select bank0
  1055     007A  00DB               	movwf	ChangeOfCoordinates@_shapePosition
  1056     007B  3000               	movlw	high main@shapePosition
  1057     007C  00DC               	movwf	ChangeOfCoordinates@_shapePosition+1
  1058     007D  30A0               	movlw	(low (main@square_1| 0))& (0+255)
  1059     007E  00DD               	movwf	ChangeOfCoordinates@_figure
  1060     007F  1683               	bsf	3,5	;RP0=1, select bank1
  1061     0080  1303               	bcf	3,6	;RP1=0, select bank1
  1062     0081  0824               	movf	(main@countElemntArray+1)^(0+128),w
  1063     0082  1283               	bcf	3,5	;RP0=0, select bank0
  1064     0083  1303               	bcf	3,6	;RP1=0, select bank0
  1065     0084  00DF               	movwf	ChangeOfCoordinates@_countElemntArray+1
  1066     0085  1683               	bsf	3,5	;RP0=1, select bank1
  1067     0086  1303               	bcf	3,6	;RP1=0, select bank1
  1068     0087  0823               	movf	main@countElemntArray^(0+128),w
  1069     0088  1283               	bcf	3,5	;RP0=0, select bank0
  1070     0089  1303               	bcf	3,6	;RP1=0, select bank0
  1071     008A  00DE               	movwf	ChangeOfCoordinates@_countElemntArray
  1072     008B  120A  118A  247D  120A  118A  	fcall	_ChangeOfCoordinates
  1073     0090  2868               	goto	l1693
  1074     0091  120A  118A  2800   	ljmp	start
  1075     0094                     __end_of_main:
  1076                           
  1077                           	psect	text1
  1078     0EF6                     __ptext1:	
  1079 ;; *************** function _SpiInit *****************
  1080 ;; Defined at:
  1081 ;;		line 9 in file "spi.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1095 ;;      Params:         0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0
  1098 ;;      Totals:         0       0       0       0       0
  1099 ;;Total ram usage:        0 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; This function calls:
  1102 ;;		Nothing
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108     0EF6                     _SpiInit:	
  1109                           ;psect for function _SpiInit
  1110                           
  1111     0EF6                     l1623:	
  1112                           ;incstack = 0
  1113                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
  1114                           
  1115                           
  1116                           ;spi.c: 10:     TRISC |= 0x10;
  1117     0EF6  1683               	bsf	3,5	;RP0=1, select bank1
  1118     0EF7  1303               	bcf	3,6	;RP1=0, select bank1
  1119     0EF8  1607               	bsf	7,4	;volatile
  1120     0EF9                     l1625:
  1121                           
  1122                           ;spi.c: 11:     TRISC &= ~0x28;
  1123     0EF9  30D7               	movlw	215
  1124     0EFA  0587               	andwf	7,f	;volatile
  1125                           
  1126                           ;spi.c: 12:     TRISA &= ~0x20;
  1127     0EFB  30DF               	movlw	223
  1128     0EFC  0585               	andwf	5,f	;volatile
  1129                           
  1130                           ;spi.c: 13:     PORTA &= ~0x20;
  1131     0EFD  30DF               	movlw	223
  1132     0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1133     0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1134     0F00  0585               	andwf	5,f	;volatile
  1135     0F01                     l1627:
  1136                           
  1137                           ;spi.c: 14:     SSPCON = 0x30;
  1138     0F01  3030               	movlw	48
  1139     0F02  0094               	movwf	20	;volatile
  1140     0F03                     l1629:
  1141                           
  1142                           ;spi.c: 15:     SSPSTAT = 0x80;
  1143     0F03  3080               	movlw	128
  1144     0F04  1683               	bsf	3,5	;RP0=1, select bank1
  1145     0F05  1303               	bcf	3,6	;RP1=0, select bank1
  1146     0F06  0094               	movwf	20	;volatile
  1147     0F07                     l85:
  1148     0F07  0008               	return
  1149     0F08                     __end_of_SpiInit:
  1150                           
  1151                           	psect	text2
  1152     0F5D                     __ptext2:	
  1153 ;; *************** function _SetPosition *****************
  1154 ;; Defined at:
  1155 ;;		line 3 in file "shape.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  position        2    0[COMMON] PTR struct .
  1158 ;;		 -> main@shapePosition(4), 
  1159 ;;  x               2    2[COMMON] int 
  1160 ;;  y               2    4[COMMON] int 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         6       0       0       0       0
  1173 ;;      Locals:         0       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0
  1175 ;;      Totals:         8       0       0       0       0
  1176 ;;Total ram usage:        8 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185     0F5D                     _SetPosition:	
  1186                           ;psect for function _SetPosition
  1187                           
  1188     0F5D                     l1647:	
  1189                           ;incstack = 0
  1190                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1191                           
  1192                           
  1193                           ;shape.c: 4:     position->x = x;
  1194     0F5D  0871               	movf	SetPosition@position,w
  1195     0F5E  0084               	movwf	4
  1196     0F5F  1783               	bsf	3,7
  1197     0F60  1C72               	btfss	SetPosition@position+1,0
  1198     0F61  1383               	bcf	3,7
  1199     0F62  0873               	movf	SetPosition@x,w
  1200     0F63  0080               	movwf	0
  1201     0F64  0A84               	incf	4,f
  1202     0F65  0874               	movf	SetPosition@x+1,w
  1203     0F66  0080               	movwf	0
  1204     0F67                     l1649:
  1205                           
  1206                           ;shape.c: 5:     position->y = y;
  1207     0F67  0871               	movf	SetPosition@position,w
  1208     0F68  3E02               	addlw	2
  1209     0F69  00F7               	movwf	??_SetPosition
  1210     0F6A  0872               	movf	SetPosition@position+1,w
  1211     0F6B  1803               	skipnc
  1212     0F6C  3E01               	addlw	1
  1213     0F6D  3E00               	addlw	0
  1214     0F6E  00F8               	movwf	??_SetPosition+1
  1215     0F6F  0877               	movf	??_SetPosition,w
  1216     0F70  0084               	movwf	4
  1217     0F71  1783               	bsf	3,7
  1218     0F72  1C78               	btfss	??_SetPosition+1,0
  1219     0F73  1383               	bcf	3,7
  1220     0F74  0875               	movf	SetPosition@y,w
  1221     0F75  0080               	movwf	0
  1222     0F76  0A84               	incf	4,f
  1223     0F77  0876               	movf	SetPosition@y+1,w
  1224     0F78  0080               	movwf	0
  1225     0F79                     l123:
  1226     0F79  0008               	return
  1227     0F7A                     __end_of_SetPosition:
  1228                           
  1229                           	psect	text3
  1230     0EC8                     __ptext3:	
  1231 ;; *************** function _PortBInit *****************
  1232 ;; Defined at:
  1233 ;;		line 13 in file "portsinit.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		status,2
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1247 ;;      Params:         0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used: 1
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260     0EC8                     _PortBInit:	
  1261                           ;psect for function _PortBInit
  1262                           
  1263     0EC8                     l1645:	
  1264                           ;incstack = 0
  1265                           ; Regs used in _PortBInit: [status,2]
  1266                           
  1267                           
  1268                           ;portsinit.c: 14:     TRISB = 0x00;
  1269     0EC8  1683               	bsf	3,5	;RP0=1, select bank1
  1270     0EC9  1303               	bcf	3,6	;RP1=0, select bank1
  1271     0ECA  0186               	clrf	6	;volatile
  1272                           
  1273                           ;portsinit.c: 15:     PORTB = 0x00;
  1274     0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  1275     0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  1276     0ECD  0186               	clrf	6	;volatile
  1277     0ECE                     l68:
  1278     0ECE  0008               	return
  1279     0ECF                     __end_of_PortBInit:
  1280                           
  1281                           	psect	text4
  1282     0FC0                     __ptext4:	
  1283 ;; *************** function _MatrixInit *****************
  1284 ;; Defined at:
  1285 ;;		line 20 in file "matrix.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, pclath, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1299 ;;      Params:         0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0
  1301 ;;      Temps:          3       0       0       0       0
  1302 ;;      Totals:         3       0       0       0       0
  1303 ;;Total ram usage:        3 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; Hardware stack levels required when called: 3
  1306 ;; This function calls:
  1307 ;;		_SendToSegment
  1308 ;;		_SpiClearMatrix
  1309 ;; This function is called by:
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314     0FC0                     _MatrixInit:	
  1315                           ;psect for function _MatrixInit
  1316                           
  1317     0FC0                     l1631:	
  1318                           ;incstack = 0
  1319                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1320                           
  1321                           
  1322                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1323     0FC0  3003               	movlw	3
  1324     0FC1  00FA               	movwf	??_MatrixInit+2
  1325     0FC2  3008               	movlw	8
  1326     0FC3  00F9               	movwf	??_MatrixInit+1
  1327     0FC4  3077               	movlw	119
  1328     0FC5  00F8               	movwf	??_MatrixInit
  1329     0FC6                     u1097:
  1330     0FC6  0BF8               	decfsz	??_MatrixInit,f
  1331     0FC7  2FC6               	goto	u1097
  1332     0FC8  0BF9               	decfsz	??_MatrixInit+1,f
  1333     0FC9  2FC6               	goto	u1097
  1334     0FCA  0BFA               	decfsz	??_MatrixInit+2,f
  1335     0FCB  2FC6               	goto	u1097
  1336     0FCC                     l1633:
  1337                           
  1338                           ;matrix.c: 22:     RA5=1;
  1339     0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  1340     0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  1341     0FCE  1685               	bsf	5,5	;volatile
  1342     0FCF                     l1635:
  1343                           
  1344                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1345     0FCF  3009               	movlw	9
  1346     0FD0  00F2               	movwf	SendToSegment@segment
  1347     0FD1  3000               	movlw	0
  1348     0FD2  00F3               	movwf	SendToSegment@segment+1
  1349     0FD3  01F4               	clrf	SendToSegment@data
  1350     0FD4  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1351     0FD9                     l1637:
  1352                           
  1353                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1354     0FD9  300B               	movlw	11
  1355     0FDA  00F2               	movwf	SendToSegment@segment
  1356     0FDB  3000               	movlw	0
  1357     0FDC  00F3               	movwf	SendToSegment@segment+1
  1358     0FDD  3007               	movlw	7
  1359     0FDE  00F4               	movwf	SendToSegment@data
  1360     0FDF  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1361     0FE4                     l1639:
  1362                           
  1363                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1364     0FE4  300A               	movlw	10
  1365     0FE5  00F2               	movwf	SendToSegment@segment
  1366     0FE6  3000               	movlw	0
  1367     0FE7  00F3               	movwf	SendToSegment@segment+1
  1368     0FE8  3002               	movlw	2
  1369     0FE9  00F4               	movwf	SendToSegment@data
  1370     0FEA  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1371     0FEF                     l1641:
  1372                           
  1373                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1374     0FEF  300C               	movlw	12
  1375     0FF0  00F2               	movwf	SendToSegment@segment
  1376     0FF1  3000               	movlw	0
  1377     0FF2  00F3               	movwf	SendToSegment@segment+1
  1378     0FF3  01F4               	clrf	SendToSegment@data
  1379     0FF4  0AF4               	incf	SendToSegment@data,f
  1380     0FF5  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1381     0FFA                     l1643:
  1382                           
  1383                           ;matrix.c: 27:     SpiClearMatrix();
  1384     0FFA  120A  158A  272E  120A  158A  	fcall	_SpiClearMatrix
  1385     0FFF                     l107:
  1386     0FFF  0008               	return
  1387     1000                     __end_of_MatrixInit:
  1388                           
  1389                           	psect	text5
  1390     047D                     __ptext5:	
  1391 ;; *************** function _ChangeOfCoordinates *****************
  1392 ;; Defined at:
  1393 ;;		line 39 in file "main.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  _shapePositi    2   59[BANK0 ] PTR struct .
  1396 ;;		 -> main@shapePosition(4), 
  1397 ;;  _figure         1   61[BANK0 ] PTR unsigned char 
  1398 ;;		 -> main@square_1(3), 
  1399 ;;  _countElemnt    2   62[BANK0 ] int 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  i               2   67[BANK0 ] int 
  1402 ;;  rotateArray     2   71[BANK0 ] PTR unsigned char 
  1403 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1404 ;;  step            2   69[BANK0 ] int 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1414 ;;      Params:         0       5       0       0       0
  1415 ;;      Locals:         0       6       0       0       0
  1416 ;;      Temps:          0       3       0       0       0
  1417 ;;      Totals:         0      14       0       0       0
  1418 ;;Total ram usage:       14 bytes
  1419 ;; Hardware stack levels used: 1
  1420 ;; Hardware stack levels required when called: 5
  1421 ;; This function calls:
  1422 ;;		_CopyArray
  1423 ;;		_MovieShape
  1424 ;;		_RotateDirection
  1425 ;;		_calloc
  1426 ;;		_free
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432     047D                     _ChangeOfCoordinates:	
  1433                           ;psect for function _ChangeOfCoordinates
  1434                           
  1435     047D                     l1651:	
  1436                           ;incstack = 0
  1437                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1438                           
  1439                           
  1440                           ;main.c: 40:     const unsigned long delay = 150;;main.c: 41:     char * rotateArray = c
      +                          alloc((size_t)_countElemntArray, sizeof(char));
  1441     047D  1283               	bcf	3,5	;RP0=0, select bank0
  1442     047E  1303               	bcf	3,6	;RP1=0, select bank0
  1443     047F  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1444     0480  00B9               	movwf	calloc@nmemb+1
  1445     0481  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1446     0482  00B8               	movwf	calloc@nmemb
  1447     0483  3001               	movlw	1
  1448     0484  00BA               	movwf	calloc@size
  1449     0485  3000               	movlw	0
  1450     0486  00BB               	movwf	calloc@size+1
  1451     0487  120A  118A  2094  120A  118A  	fcall	_calloc
  1452     048C  1283               	bcf	3,5	;RP0=0, select bank0
  1453     048D  1303               	bcf	3,6	;RP1=0, select bank0
  1454     048E  0838               	movf	?_calloc,w
  1455     048F  00E7               	movwf	ChangeOfCoordinates@rotateArray
  1456     0490  0839               	movf	?_calloc+1,w
  1457     0491  00E8               	movwf	ChangeOfCoordinates@rotateArray+1
  1458                           
  1459                           ;main.c: 42:     CopyArray(rotateArray, _figure, _countElemntArray);
  1460     0492  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1461     0493  00F1               	movwf	CopyArray@array_
  1462     0494  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1463     0495  00F2               	movwf	CopyArray@array_+1
  1464     0496  085D               	movf	ChangeOfCoordinates@_figure,w
  1465     0497  00F3               	movwf	CopyArray@res
  1466     0498  3000               	movlw	0
  1467     0499  00F4               	movwf	CopyArray@res+1
  1468     049A  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1469     049B  00F6               	movwf	CopyArray@countElemntArray+1
  1470     049C  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1471     049D  00F5               	movwf	CopyArray@countElemntArray
  1472     049E  120A  118A  2007  120A  118A  	fcall	_CopyArray
  1473     04A3                     l1653:
  1474                           
  1475                           ;main.c: 44:     int step = 0;
  1476     04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1477     04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1478     04A5  01E5               	clrf	ChangeOfCoordinates@step
  1479     04A6  01E6               	clrf	ChangeOfCoordinates@step+1
  1480     04A7                     l1655:
  1481                           
  1482                           ;main.c: 46:             for(int i = 0; i < 5; i++){
  1483     04A7  1283               	bcf	3,5	;RP0=0, select bank0
  1484     04A8  1303               	bcf	3,6	;RP1=0, select bank0
  1485     04A9  01E3               	clrf	ChangeOfCoordinates@i
  1486     04AA  01E4               	clrf	ChangeOfCoordinates@i+1
  1487     04AB  2CF8               	goto	l1671
  1488     04AC                     l1661:
  1489                           
  1490                           ;main.c: 49:                         MovieShape(right, _shapePosition, rotateArray, _cou
      +                          ntElemntArray);
  1491     04AC  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1492     04AD  00AA               	movwf	MovieShape@_shapePosition
  1493     04AE  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1494     04AF  00AB               	movwf	MovieShape@_shapePosition+1
  1495     04B0  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1496     04B1  00AC               	movwf	MovieShape@shapeArray
  1497     04B2  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1498     04B3  00AD               	movwf	MovieShape@shapeArray+1
  1499     04B4  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1500     04B5  00AF               	movwf	MovieShape@countElemntArray+1
  1501     04B6  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1502     04B7  00AE               	movwf	MovieShape@countElemntArray
  1503     04B8  3003               	movlw	3
  1504     04B9  120A  118A  2129  120A  118A  	fcall	_MovieShape
  1505                           
  1506                           ;main.c: 50:                         break;
  1507     04BE  2D0D               	goto	l1673
  1508     04BF                     l1663:
  1509                           
  1510                           ;main.c: 52:                         MovieShape(down, _shapePosition, rotateArray, _coun
      +                          tElemntArray);
  1511     04BF  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1512     04C0  00AA               	movwf	MovieShape@_shapePosition
  1513     04C1  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1514     04C2  00AB               	movwf	MovieShape@_shapePosition+1
  1515     04C3  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1516     04C4  00AC               	movwf	MovieShape@shapeArray
  1517     04C5  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1518     04C6  00AD               	movwf	MovieShape@shapeArray+1
  1519     04C7  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1520     04C8  00AF               	movwf	MovieShape@countElemntArray+1
  1521     04C9  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1522     04CA  00AE               	movwf	MovieShape@countElemntArray
  1523     04CB  3000               	movlw	0
  1524     04CC  120A  118A  2129  120A  118A  	fcall	_MovieShape
  1525                           
  1526                           ;main.c: 53:                         break;
  1527     04D1  2D0D               	goto	l1673
  1528     04D2                     l1665:
  1529                           
  1530                           ;main.c: 55:                         MovieShape(left, _shapePosition, rotateArray, _coun
      +                          tElemntArray);
  1531     04D2  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1532     04D3  00AA               	movwf	MovieShape@_shapePosition
  1533     04D4  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1534     04D5  00AB               	movwf	MovieShape@_shapePosition+1
  1535     04D6  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1536     04D7  00AC               	movwf	MovieShape@shapeArray
  1537     04D8  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1538     04D9  00AD               	movwf	MovieShape@shapeArray+1
  1539     04DA  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1540     04DB  00AF               	movwf	MovieShape@countElemntArray+1
  1541     04DC  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1542     04DD  00AE               	movwf	MovieShape@countElemntArray
  1543     04DE  3002               	movlw	2
  1544     04DF  120A  118A  2129  120A  118A  	fcall	_MovieShape
  1545                           
  1546                           ;main.c: 56:                         break;
  1547     04E4  2D0D               	goto	l1673
  1548     04E5                     l1667:
  1549                           
  1550                           ;main.c: 58:                         MovieShape(up, _shapePosition, rotateArray, _countE
      +                          lemntArray);
  1551     04E5  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1552     04E6  00AA               	movwf	MovieShape@_shapePosition
  1553     04E7  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1554     04E8  00AB               	movwf	MovieShape@_shapePosition+1
  1555     04E9  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1556     04EA  00AC               	movwf	MovieShape@shapeArray
  1557     04EB  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1558     04EC  00AD               	movwf	MovieShape@shapeArray+1
  1559     04ED  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1560     04EE  00AF               	movwf	MovieShape@countElemntArray+1
  1561     04EF  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1562     04F0  00AE               	movwf	MovieShape@countElemntArray
  1563     04F1  3001               	movlw	1
  1564     04F2  120A  118A  2129  120A  118A  	fcall	_MovieShape
  1565                           
  1566                           ;main.c: 59:                         break;
  1567     04F7  2D0D               	goto	l1673
  1568     04F8                     l1671:
  1569                           
  1570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1571                           ; Switch size 1, requested type "simple"
  1572                           ; Number of cases is 1, Range of values is 0 to 0
  1573                           ; switch strategies available:
  1574                           ; Name         Instructions Cycles
  1575                           ; simple_byte            4     3 (average)
  1576                           ; direct_byte           11     8 (fixed)
  1577                           ; jumptable            260     6 (fixed)
  1578                           ;	Chosen strategy is simple_byte
  1579     04F8  1283               	bcf	3,5	;RP0=0, select bank0
  1580     04F9  1303               	bcf	3,6	;RP1=0, select bank0
  1581     04FA  0866               	movf	ChangeOfCoordinates@step+1,w
  1582     04FB  3A00               	xorlw	0	; case 0
  1583     04FC  1903               	skipnz
  1584     04FD  2CFF               	goto	l1757
  1585     04FE  2D0D               	goto	l1673
  1586     04FF                     l1757:
  1587                           
  1588                           ; Switch size 1, requested type "simple"
  1589                           ; Number of cases is 4, Range of values is 0 to 3
  1590                           ; switch strategies available:
  1591                           ; Name         Instructions Cycles
  1592                           ; simple_byte           13     7 (average)
  1593                           ; direct_byte           20     8 (fixed)
  1594                           ; jumptable            260     6 (fixed)
  1595                           ;	Chosen strategy is simple_byte
  1596     04FF  0865               	movf	ChangeOfCoordinates@step,w
  1597     0500  3A00               	xorlw	0	; case 0
  1598     0501  1903               	skipnz
  1599     0502  2CAC               	goto	l1661
  1600     0503  3A01               	xorlw	1	; case 1
  1601     0504  1903               	skipnz
  1602     0505  2CBF               	goto	l1663
  1603     0506  3A03               	xorlw	3	; case 2
  1604     0507  1903               	skipnz
  1605     0508  2CD2               	goto	l1665
  1606     0509  3A01               	xorlw	1	; case 3
  1607     050A  1903               	skipnz
  1608     050B  2CE5               	goto	l1667
  1609     050C  2D0D               	goto	l1673
  1610     050D                     l1673:
  1611                           
  1612                           ;main.c: 61:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1613     050D  3004               	movlw	4
  1614     050E  1283               	bcf	3,5	;RP0=0, select bank0
  1615     050F  1303               	bcf	3,6	;RP1=0, select bank0
  1616     0510  00E2               	movwf	??_ChangeOfCoordinates+2
  1617     0511  300C               	movlw	12
  1618     0512  00E1               	movwf	??_ChangeOfCoordinates+1
  1619     0513  3033               	movlw	51
  1620     0514  00E0               	movwf	??_ChangeOfCoordinates
  1621     0515                     u1107:
  1622     0515  0BE0               	decfsz	??_ChangeOfCoordinates,f
  1623     0516  2D15               	goto	u1107
  1624     0517  0BE1               	decfsz	??_ChangeOfCoordinates+1,f
  1625     0518  2D15               	goto	u1107
  1626     0519  0BE2               	decfsz	??_ChangeOfCoordinates+2,f
  1627     051A  2D15               	goto	u1107
  1628                           
  1629                           ;main.c: 63:             }
  1630     051B  3001               	movlw	1
  1631     051C  1283               	bcf	3,5	;RP0=0, select bank0
  1632     051D  1303               	bcf	3,6	;RP1=0, select bank0
  1633     051E  07E3               	addwf	ChangeOfCoordinates@i,f
  1634     051F  1803               	skipnc
  1635     0520  0AE4               	incf	ChangeOfCoordinates@i+1,f
  1636     0521  3000               	movlw	0
  1637     0522  07E4               	addwf	ChangeOfCoordinates@i+1,f
  1638     0523                     l1675:
  1639     0523  0864               	movf	ChangeOfCoordinates@i+1,w
  1640     0524  3A80               	xorlw	128
  1641     0525  00FF               	movwf	btemp+1
  1642     0526  3080               	movlw	128
  1643     0527  027F               	subwf	btemp+1,w
  1644     0528  1D03               	skipz
  1645     0529  2D2C               	goto	u1075
  1646     052A  3005               	movlw	5
  1647     052B  0263               	subwf	ChangeOfCoordinates@i,w
  1648     052C                     u1075:
  1649     052C  1C03               	skipc
  1650     052D  2D2F               	goto	u1071
  1651     052E  2D30               	goto	u1070
  1652     052F                     u1071:
  1653     052F  2CF8               	goto	l1671
  1654     0530                     u1070:
  1655     0530                     l1677:
  1656                           
  1657                           ;main.c: 64:             RotateDirection(step, rotateArray, _countElemntArray);
  1658     0530  1283               	bcf	3,5	;RP0=0, select bank0
  1659     0531  1303               	bcf	3,6	;RP1=0, select bank0
  1660     0532  0866               	movf	ChangeOfCoordinates@step+1,w
  1661     0533  00D4               	movwf	RotateDirection@step+1
  1662     0534  0865               	movf	ChangeOfCoordinates@step,w
  1663     0535  00D3               	movwf	RotateDirection@step
  1664     0536  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1665     0537  00D5               	movwf	RotateDirection@array_
  1666     0538  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1667     0539  00D6               	movwf	RotateDirection@array_+1
  1668     053A  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1669     053B  00D8               	movwf	RotateDirection@_countElemntArray+1
  1670     053C  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1671     053D  00D7               	movwf	RotateDirection@_countElemntArray
  1672     053E  120A  118A  218D  120A  118A  	fcall	_RotateDirection
  1673     0543                     l1679:
  1674                           
  1675                           ;main.c: 65:             step++;
  1676     0543  3001               	movlw	1
  1677     0544  1283               	bcf	3,5	;RP0=0, select bank0
  1678     0545  1303               	bcf	3,6	;RP1=0, select bank0
  1679     0546  07E5               	addwf	ChangeOfCoordinates@step,f
  1680     0547  1803               	skipnc
  1681     0548  0AE6               	incf	ChangeOfCoordinates@step+1,f
  1682     0549  3000               	movlw	0
  1683     054A  07E6               	addwf	ChangeOfCoordinates@step+1,f
  1684     054B                     l1681:
  1685                           
  1686                           ;main.c: 66:         } while(step < 4);
  1687     054B  0866               	movf	ChangeOfCoordinates@step+1,w
  1688     054C  3A80               	xorlw	128
  1689     054D  00FF               	movwf	btemp+1
  1690     054E  3080               	movlw	128
  1691     054F  027F               	subwf	btemp+1,w
  1692     0550  1D03               	skipz
  1693     0551  2D54               	goto	u1085
  1694     0552  3004               	movlw	4
  1695     0553  0265               	subwf	ChangeOfCoordinates@step,w
  1696     0554                     u1085:
  1697     0554  1C03               	skipc
  1698     0555  2D57               	goto	u1081
  1699     0556  2D58               	goto	u1080
  1700     0557                     u1081:
  1701     0557  2CA7               	goto	l1655
  1702     0558                     u1080:
  1703     0558                     l1683:
  1704                           
  1705                           ;main.c: 68:         free(rotateArray);
  1706     0558  1283               	bcf	3,5	;RP0=0, select bank0
  1707     0559  1303               	bcf	3,6	;RP1=0, select bank0
  1708     055A  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1709     055B  00F1               	movwf	free@ptr
  1710     055C  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1711     055D  00F2               	movwf	free@ptr+1
  1712     055E  120A  118A  2564  120A  118A  	fcall	_free
  1713     0563                     l51:
  1714     0563  0008               	return
  1715     0564                     __end_of_ChangeOfCoordinates:
  1716                           
  1717                           	psect	text6
  1718     018D                     __ptext6:	
  1719 ;; *************** function _RotateDirection *****************
  1720 ;; Defined at:
  1721 ;;		line 71 in file "main.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  step            2   51[BANK0 ] int 
  1724 ;;  array_          2   53[BANK0 ] PTR unsigned char 
  1725 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1726 ;;  _countElemnt    2   55[BANK0 ] int 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  i               2   57[BANK0 ] int 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1738 ;;      Params:         0       6       0       0       0
  1739 ;;      Locals:         0       2       0       0       0
  1740 ;;      Temps:          0       0       0       0       0
  1741 ;;      Totals:         0       8       0       0       0
  1742 ;;Total ram usage:        8 bytes
  1743 ;; Hardware stack levels used: 1
  1744 ;; Hardware stack levels required when called: 4
  1745 ;; This function calls:
  1746 ;;		_Reverse
  1747 ;;		_Rotate
  1748 ;; This function is called by:
  1749 ;;		_ChangeOfCoordinates
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753     018D                     _RotateDirection:	
  1754                           ;psect for function _RotateDirection
  1755                           
  1756     018D                     l1593:	
  1757                           ;incstack = 0
  1758                           ; Regs used in _RotateDirection: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1759                           
  1760                           
  1761                           ;main.c: 72:     switch (step){
  1762     018D  29EF               	goto	l1617
  1763     018E                     l1595:
  1764                           
  1765                           ;main.c: 74:             Reverse(array_, _countElemntArray);
  1766     018E  0855               	movf	RotateDirection@array_,w
  1767     018F  00F1               	movwf	Reverse@array_
  1768     0190  0856               	movf	RotateDirection@array_+1,w
  1769     0191  00F2               	movwf	Reverse@array_+1
  1770     0192  0858               	movf	RotateDirection@_countElemntArray+1,w
  1771     0193  00F4               	movwf	Reverse@countElemntArray+1
  1772     0194  0857               	movf	RotateDirection@_countElemntArray,w
  1773     0195  00F3               	movwf	Reverse@countElemntArray
  1774     0196  120A  118A  2202  120A  118A  	fcall	_Reverse
  1775     019B                     l1597:
  1776                           
  1777                           ;main.c: 75:             Rotate(array_, _countElemntArray);
  1778     019B  1283               	bcf	3,5	;RP0=0, select bank0
  1779     019C  1303               	bcf	3,6	;RP1=0, select bank0
  1780     019D  0855               	movf	RotateDirection@array_,w
  1781     019E  00BE               	movwf	Rotate@array_
  1782     019F  0856               	movf	RotateDirection@array_+1,w
  1783     01A0  00BF               	movwf	Rotate@array_+1
  1784     01A1  0858               	movf	RotateDirection@_countElemntArray+1,w
  1785     01A2  00C1               	movwf	Rotate@countElemntArray+1
  1786     01A3  0857               	movf	RotateDirection@_countElemntArray,w
  1787     01A4  00C0               	movwf	Rotate@countElemntArray
  1788     01A5  120A  118A  230E  120A  118A  	fcall	_Rotate
  1789                           
  1790                           ;main.c: 76:             break;
  1791     01AA  2A01               	goto	l61
  1792     01AB                     l1599:
  1793                           
  1794                           ;main.c: 78:             Rotate(array_, _countElemntArray);
  1795     01AB  0855               	movf	RotateDirection@array_,w
  1796     01AC  00BE               	movwf	Rotate@array_
  1797     01AD  0856               	movf	RotateDirection@array_+1,w
  1798     01AE  00BF               	movwf	Rotate@array_+1
  1799     01AF  0858               	movf	RotateDirection@_countElemntArray+1,w
  1800     01B0  00C1               	movwf	Rotate@countElemntArray+1
  1801     01B1  0857               	movf	RotateDirection@_countElemntArray,w
  1802     01B2  00C0               	movwf	Rotate@countElemntArray
  1803     01B3  120A  118A  230E  120A  118A  	fcall	_Rotate
  1804     01B8                     l1601:
  1805                           
  1806                           ;main.c: 79:             Reverse(array_, _countElemntArray);
  1807     01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1808     01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1809     01BA  0855               	movf	RotateDirection@array_,w
  1810     01BB  00F1               	movwf	Reverse@array_
  1811     01BC  0856               	movf	RotateDirection@array_+1,w
  1812     01BD  00F2               	movwf	Reverse@array_+1
  1813     01BE  0858               	movf	RotateDirection@_countElemntArray+1,w
  1814     01BF  00F4               	movwf	Reverse@countElemntArray+1
  1815     01C0  0857               	movf	RotateDirection@_countElemntArray,w
  1816     01C1  00F3               	movwf	Reverse@countElemntArray
  1817     01C2  120A  118A  2202  120A  118A  	fcall	_Reverse
  1818                           
  1819                           ;main.c: 80:             break;
  1820     01C7  2A01               	goto	l61
  1821     01C8                     l1603:
  1822                           
  1823                           ;main.c: 82:             for(int i = 0; i < 3; i++){
  1824     01C8  01D9               	clrf	RotateDirection@i
  1825     01C9  01DA               	clrf	RotateDirection@i+1
  1826     01CA                     l1609:
  1827                           
  1828                           ;main.c: 83:                 Rotate(array_, _countElemntArray);
  1829     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1830     01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1831     01CC  0855               	movf	RotateDirection@array_,w
  1832     01CD  00BE               	movwf	Rotate@array_
  1833     01CE  0856               	movf	RotateDirection@array_+1,w
  1834     01CF  00BF               	movwf	Rotate@array_+1
  1835     01D0  0858               	movf	RotateDirection@_countElemntArray+1,w
  1836     01D1  00C1               	movwf	Rotate@countElemntArray+1
  1837     01D2  0857               	movf	RotateDirection@_countElemntArray,w
  1838     01D3  00C0               	movwf	Rotate@countElemntArray
  1839     01D4  120A  118A  230E  120A  118A  	fcall	_Rotate
  1840     01D9                     l1611:
  1841                           
  1842                           ;main.c: 84:             }
  1843     01D9  3001               	movlw	1
  1844     01DA  1283               	bcf	3,5	;RP0=0, select bank0
  1845     01DB  1303               	bcf	3,6	;RP1=0, select bank0
  1846     01DC  07D9               	addwf	RotateDirection@i,f
  1847     01DD  1803               	skipnc
  1848     01DE  0ADA               	incf	RotateDirection@i+1,f
  1849     01DF  3000               	movlw	0
  1850     01E0  07DA               	addwf	RotateDirection@i+1,f
  1851     01E1                     l1613:
  1852     01E1  085A               	movf	RotateDirection@i+1,w
  1853     01E2  3A80               	xorlw	128
  1854     01E3  00FF               	movwf	btemp+1
  1855     01E4  3080               	movlw	128
  1856     01E5  027F               	subwf	btemp+1,w
  1857     01E6  1D03               	skipz
  1858     01E7  29EA               	goto	u1065
  1859     01E8  3003               	movlw	3
  1860     01E9  0259               	subwf	RotateDirection@i,w
  1861     01EA                     u1065:
  1862     01EA  1C03               	skipc
  1863     01EB  29ED               	goto	u1061
  1864     01EC  29EE               	goto	u1060
  1865     01ED                     u1061:
  1866     01ED  29CA               	goto	l1609
  1867     01EE                     u1060:
  1868     01EE  2A01               	goto	l61
  1869     01EF                     l1617:
  1870                           
  1871                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1872                           ; Switch size 1, requested type "simple"
  1873                           ; Number of cases is 1, Range of values is 0 to 0
  1874                           ; switch strategies available:
  1875                           ; Name         Instructions Cycles
  1876                           ; simple_byte            4     3 (average)
  1877                           ; direct_byte           11     8 (fixed)
  1878                           ; jumptable            260     6 (fixed)
  1879                           ;	Chosen strategy is simple_byte
  1880     01EF  1283               	bcf	3,5	;RP0=0, select bank0
  1881     01F0  1303               	bcf	3,6	;RP1=0, select bank0
  1882     01F1  0854               	movf	RotateDirection@step+1,w
  1883     01F2  3A00               	xorlw	0	; case 0
  1884     01F3  1903               	skipnz
  1885     01F4  29F6               	goto	l1759
  1886     01F5  2A01               	goto	l61
  1887     01F6                     l1759:
  1888                           
  1889                           ; Switch size 1, requested type "simple"
  1890                           ; Number of cases is 3, Range of values is 0 to 2
  1891                           ; switch strategies available:
  1892                           ; Name         Instructions Cycles
  1893                           ; simple_byte           10     6 (average)
  1894                           ; direct_byte           17     8 (fixed)
  1895                           ; jumptable            260     6 (fixed)
  1896                           ;	Chosen strategy is simple_byte
  1897     01F6  0853               	movf	RotateDirection@step,w
  1898     01F7  3A00               	xorlw	0	; case 0
  1899     01F8  1903               	skipnz
  1900     01F9  298E               	goto	l1595
  1901     01FA  3A01               	xorlw	1	; case 1
  1902     01FB  1903               	skipnz
  1903     01FC  29AB               	goto	l1599
  1904     01FD  3A03               	xorlw	3	; case 2
  1905     01FE  1903               	skipnz
  1906     01FF  29C8               	goto	l1603
  1907     0200  2A01               	goto	l61
  1908     0201                     l61:
  1909     0201  0008               	return
  1910     0202                     __end_of_RotateDirection:
  1911                           
  1912                           	psect	text7
  1913     030E                     __ptext7:	
  1914 ;; *************** function _Rotate *****************
  1915 ;; Defined at:
  1916 ;;		line 55 in file "shape.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  array_          2   30[BANK0 ] PTR unsigned char 
  1919 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1920 ;;  countElemntA    2   32[BANK0 ] int 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  i               2   45[BANK0 ] int 
  1923 ;;  x               2   43[BANK0 ] int 
  1924 ;;  _i              2   49[BANK0 ] int 
  1925 ;;  res             2   47[BANK0 ] PTR unsigned char 
  1926 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1936 ;;      Params:         0       4       0       0       0
  1937 ;;      Locals:         0       8       0       0       0
  1938 ;;      Temps:          0       9       0       0       0
  1939 ;;      Totals:         0      21       0       0       0
  1940 ;;Total ram usage:       21 bytes
  1941 ;; Hardware stack levels used: 1
  1942 ;; Hardware stack levels required when called: 3
  1943 ;; This function calls:
  1944 ;;		_CopyArray
  1945 ;;		_calloc
  1946 ;;		_free
  1947 ;; This function is called by:
  1948 ;;		_RotateDirection
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952     030E                     _Rotate:	
  1953                           ;psect for function _Rotate
  1954                           
  1955     030E                     l1511:	
  1956                           ;incstack = 0
  1957                           ; Regs used in _Rotate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1958                           
  1959                           
  1960                           ;shape.c: 57:     char * res = calloc((size_t)countElemntArray, sizeof(char));
  1961     030E  1283               	bcf	3,5	;RP0=0, select bank0
  1962     030F  1303               	bcf	3,6	;RP1=0, select bank0
  1963     0310  0841               	movf	Rotate@countElemntArray+1,w
  1964     0311  00B9               	movwf	calloc@nmemb+1
  1965     0312  0840               	movf	Rotate@countElemntArray,w
  1966     0313  00B8               	movwf	calloc@nmemb
  1967     0314  3001               	movlw	1
  1968     0315  00BA               	movwf	calloc@size
  1969     0316  3000               	movlw	0
  1970     0317  00BB               	movwf	calloc@size+1
  1971     0318  120A  118A  2094  120A  118A  	fcall	_calloc
  1972     031D  1283               	bcf	3,5	;RP0=0, select bank0
  1973     031E  1303               	bcf	3,6	;RP1=0, select bank0
  1974     031F  0838               	movf	?_calloc,w
  1975     0320  00CF               	movwf	Rotate@res
  1976     0321  0839               	movf	?_calloc+1,w
  1977     0322  00D0               	movwf	Rotate@res+1
  1978     0323                     l1513:
  1979                           
  1980                           ;shape.c: 59:     if (res){
  1981     0323  084F               	movf	Rotate@res,w
  1982     0324  0450               	iorwf	Rotate@res+1,w
  1983     0325  1903               	btfsc	3,2
  1984     0326  2B28               	goto	u951
  1985     0327  2B29               	goto	u950
  1986     0328                     u951:
  1987     0328  2BA7               	goto	l1543
  1988     0329                     u950:
  1989     0329                     l1515:
  1990                           
  1991                           ;shape.c: 60:         for(int _i = countElemntArray - 1; _i >= 0; _i--){
  1992     0329  0840               	movf	Rotate@countElemntArray,w
  1993     032A  3EFF               	addlw	255
  1994     032B  00D1               	movwf	Rotate@_i
  1995     032C  0841               	movf	Rotate@countElemntArray+1,w
  1996     032D  1803               	skipnc
  1997     032E  3E01               	addlw	1
  1998     032F  3EFF               	addlw	255
  1999     0330  00D2               	movwf	Rotate@_i+1
  2000     0331                     l1517:
  2001     0331  1FD2               	btfss	Rotate@_i+1,7
  2002     0332  2B34               	goto	u961
  2003     0333  2B35               	goto	u960
  2004     0334                     u961:
  2005     0334  2B36               	goto	l1521
  2006     0335                     u960:
  2007     0335  2B96               	goto	l1541
  2008     0336                     l1521:
  2009                           
  2010                           ;shape.c: 61:             for(int i = countElemntArray - 1, x = 0; i >= 0; i--, x++){
  2011     0336  0840               	movf	Rotate@countElemntArray,w
  2012     0337  3EFF               	addlw	255
  2013     0338  00CD               	movwf	Rotate@i
  2014     0339  0841               	movf	Rotate@countElemntArray+1,w
  2015     033A  1803               	skipnc
  2016     033B  3E01               	addlw	1
  2017     033C  3EFF               	addlw	255
  2018     033D  00CE               	movwf	Rotate@i+1
  2019     033E                     l1523:
  2020     033E  01CB               	clrf	Rotate@x
  2021     033F  01CC               	clrf	Rotate@x+1
  2022     0340                     l1525:
  2023     0340  1FCE               	btfss	Rotate@i+1,7
  2024     0341  2B43               	goto	u971
  2025     0342  2B44               	goto	u970
  2026     0343                     u971:
  2027     0343  2B45               	goto	l1529
  2028     0344                     u970:
  2029     0344  2B8F               	goto	l1537
  2030     0345                     l1529:
  2031                           
  2032                           ;shape.c: 62:                 res[_i] |= ((array_[x] >> _i ) & 1) << i;
  2033     0345  084B               	movf	Rotate@x,w
  2034     0346  073E               	addwf	Rotate@array_,w
  2035     0347  00C3               	movwf	??_Rotate+1
  2036     0348  083F               	movf	Rotate@array_+1,w
  2037     0349  00C2               	movwf	??_Rotate
  2038     034A  1803               	skipnc
  2039     034B  0AC2               	incf	??_Rotate,f
  2040     034C  1FCB               	btfss	Rotate@x,7
  2041     034D  2B4F               	goto	u980
  2042     034E  03C2               	decf	??_Rotate,f
  2043     034F                     u980:
  2044     034F  1283               	bcf	3,5	;RP0=0, select bank0
  2045     0350  1303               	bcf	3,6	;RP1=0, select bank0
  2046     0351  0842               	movf	??_Rotate,w
  2047     0352  00C4               	movwf	??_Rotate+2
  2048     0353  0843               	movf	??_Rotate+1,w
  2049     0354  0084               	movwf	4
  2050     0355  1783               	bsf	3,7
  2051     0356  1C44               	btfss	??_Rotate+2,0
  2052     0357  1383               	bcf	3,7
  2053     0358  0800               	movf	0,w
  2054     0359  00C5               	movwf	??_Rotate+3
  2055     035A  0A51               	incf	Rotate@_i,w
  2056     035B  2B5E               	goto	u994
  2057     035C                     u995:
  2058     035C  1003               	clrc
  2059     035D  0CC5               	rrf	??_Rotate+3,f
  2060     035E                     u994:
  2061     035E  3EFF               	addlw	-1
  2062     035F  1D03               	skipz
  2063     0360  2B5C               	goto	u995
  2064     0361  0845               	movf	??_Rotate+3,w
  2065     0362  3901               	andlw	1
  2066     0363  00C6               	movwf	??_Rotate+4
  2067     0364  0A4D               	incf	Rotate@i,w
  2068     0365  2B68               	goto	u1004
  2069     0366                     u1005:
  2070     0366  1003               	clrc
  2071     0367  0DC6               	rlf	??_Rotate+4,f
  2072     0368                     u1004:
  2073     0368  3EFF               	addlw	-1
  2074     0369  1D03               	skipz
  2075     036A  2B66               	goto	u1005
  2076     036B  0846               	movf	??_Rotate+4,w
  2077     036C  00C7               	movwf	??_Rotate+5
  2078     036D  0851               	movf	Rotate@_i,w
  2079     036E  074F               	addwf	Rotate@res,w
  2080     036F  00C9               	movwf	??_Rotate+7
  2081     0370  0850               	movf	Rotate@res+1,w
  2082     0371  00C8               	movwf	??_Rotate+6
  2083     0372  1803               	skipnc
  2084     0373  0AC8               	incf	??_Rotate+6,f
  2085     0374  1FD1               	btfss	Rotate@_i,7
  2086     0375  2B77               	goto	u1010
  2087     0376  03C8               	decf	??_Rotate+6,f
  2088     0377                     u1010:
  2089     0377  1283               	bcf	3,5	;RP0=0, select bank0
  2090     0378  1303               	bcf	3,6	;RP1=0, select bank0
  2091     0379  0848               	movf	??_Rotate+6,w
  2092     037A  00CA               	movwf	??_Rotate+8
  2093     037B  0849               	movf	??_Rotate+7,w
  2094     037C  0084               	movwf	4
  2095     037D  1783               	bsf	3,7
  2096     037E  1C4A               	btfss	??_Rotate+8,0
  2097     037F  1383               	bcf	3,7
  2098     0380  0847               	movf	??_Rotate+5,w
  2099     0381  0480               	iorwf	0,f
  2100     0382                     l1531:
  2101                           
  2102                           ;shape.c: 63:             }
  2103     0382  30FF               	movlw	255
  2104     0383  07CD               	addwf	Rotate@i,f
  2105     0384  1803               	skipnc
  2106     0385  0ACE               	incf	Rotate@i+1,f
  2107     0386  30FF               	movlw	255
  2108     0387  07CE               	addwf	Rotate@i+1,f
  2109     0388                     l1533:
  2110     0388  3001               	movlw	1
  2111     0389  07CB               	addwf	Rotate@x,f
  2112     038A  1803               	skipnc
  2113     038B  0ACC               	incf	Rotate@x+1,f
  2114     038C  3000               	movlw	0
  2115     038D  07CC               	addwf	Rotate@x+1,f
  2116     038E  2B40               	goto	l1525
  2117     038F                     l1537:
  2118                           
  2119                           ;shape.c: 64:         }
  2120     038F  30FF               	movlw	255
  2121     0390  07D1               	addwf	Rotate@_i,f
  2122     0391  1803               	skipnc
  2123     0392  0AD2               	incf	Rotate@_i+1,f
  2124     0393  30FF               	movlw	255
  2125     0394  07D2               	addwf	Rotate@_i+1,f
  2126     0395  2B31               	goto	l1517
  2127     0396                     l1541:
  2128                           
  2129                           ;shape.c: 65:         CopyArray(array_, res, countElemntArray);
  2130     0396  083E               	movf	Rotate@array_,w
  2131     0397  00F1               	movwf	CopyArray@array_
  2132     0398  083F               	movf	Rotate@array_+1,w
  2133     0399  00F2               	movwf	CopyArray@array_+1
  2134     039A  084F               	movf	Rotate@res,w
  2135     039B  00F3               	movwf	CopyArray@res
  2136     039C  0850               	movf	Rotate@res+1,w
  2137     039D  00F4               	movwf	CopyArray@res+1
  2138     039E  0841               	movf	Rotate@countElemntArray+1,w
  2139     039F  00F6               	movwf	CopyArray@countElemntArray+1
  2140     03A0  0840               	movf	Rotate@countElemntArray,w
  2141     03A1  00F5               	movwf	CopyArray@countElemntArray
  2142     03A2  120A  118A  2007  120A  118A  	fcall	_CopyArray
  2143     03A7                     l1543:
  2144                           
  2145                           ;shape.c: 67:     free(res);
  2146     03A7  1283               	bcf	3,5	;RP0=0, select bank0
  2147     03A8  1303               	bcf	3,6	;RP1=0, select bank0
  2148     03A9  084F               	movf	Rotate@res,w
  2149     03AA  00F1               	movwf	free@ptr
  2150     03AB  0850               	movf	Rotate@res+1,w
  2151     03AC  00F2               	movwf	free@ptr+1
  2152     03AD  120A  118A  2564  120A  118A  	fcall	_free
  2153     03B2                     l159:
  2154     03B2  0008               	return
  2155     03B3                     __end_of_Rotate:
  2156                           
  2157                           	psect	text8
  2158     0564                     __ptext8:	
  2159 ;; *************** function _free *****************
  2160 ;; Defined at:
  2161 ;;		line 67 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  ptr             2    0[COMMON] PTR void 
  2164 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  c               2   10[COMMON] PTR struct chunk
  2167 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2168 ;;  cptr            2    8[COMMON] PTR unsigned char 
  2169 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2179 ;;      Params:         2       0       0       0       0
  2180 ;;      Locals:         4       0       0       0       0
  2181 ;;      Temps:          6       0       0       0       0
  2182 ;;      Totals:        12       0       0       0       0
  2183 ;;Total ram usage:       12 bytes
  2184 ;; Hardware stack levels used: 1
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_ChangeOfCoordinates
  2189 ;;		_Rotate
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193     0564                     _free:	
  2194                           ;psect for function _free
  2195                           
  2196     0564                     l1463:	
  2197                           ;incstack = 0
  2198                           ; Regs used in _free: [wreg-fsr0h+status,2+status,0+btemp+1]
  2199                           
  2200     0564  0871               	movf	free@ptr,w
  2201     0565  00F9               	movwf	free@cptr
  2202     0566  0872               	movf	free@ptr+1,w
  2203     0567  00FA               	movwf	free@cptr+1
  2204     0568  0871               	movf	free@ptr,w
  2205     0569  0472               	iorwf	free@ptr+1,w
  2206     056A  1D03               	btfss	3,2
  2207     056B  2D6D               	goto	u861
  2208     056C  2D6E               	goto	u860
  2209     056D                     u861:
  2210     056D  2D6F               	goto	l1467
  2211     056E                     u860:
  2212     056E  2E51               	goto	l744
  2213     056F                     l1467:
  2214     056F  30FE               	movlw	254
  2215     0570  00F3               	movwf	??_free
  2216     0571  0873               	movf	??_free,w
  2217     0572  0779               	addwf	free@cptr,w
  2218     0573  00FB               	movwf	free@c
  2219     0574  087A               	movf	free@cptr+1,w
  2220     0575  00F4               	movwf	??_free+1
  2221     0576  1803               	skipnc
  2222     0577  0AF4               	incf	??_free+1,f
  2223     0578  1BF3               	btfsc	??_free,7
  2224     0579  03F4               	decf	??_free+1,f
  2225     057A  0874               	movf	??_free+1,w
  2226     057B  00FC               	movwf	free@c+1
  2227     057C  1283               	bcf	3,5	;RP0=0, select bank0
  2228     057D  1303               	bcf	3,6	;RP1=0, select bank0
  2229     057E  086D               	movf	___freelist,w
  2230     057F  046E               	iorwf	___freelist+1,w
  2231     0580  1903               	btfsc	3,2
  2232     0581  2D83               	goto	u871
  2233     0582  2D84               	goto	u870
  2234     0583                     u871:
  2235     0583  2E40               	goto	l1489
  2236     0584                     u870:
  2237     0584                     l1469:
  2238     0584  087B               	movf	free@c,w
  2239     0585  0084               	movwf	4
  2240     0586  1783               	bsf	3,7
  2241     0587  1C7C               	btfss	free@c+1,0
  2242     0588  1383               	bcf	3,7
  2243     0589  0800               	movf	0,w
  2244     058A  0779               	addwf	free@cptr,w
  2245     058B  00F3               	movwf	??_free
  2246     058C  087A               	movf	free@cptr+1,w
  2247     058D  1803               	skipnc
  2248     058E  3E01               	addlw	1
  2249     058F  00F4               	movwf	??_free+1
  2250     0590  0874               	movf	??_free+1,w
  2251     0591  066E               	xorwf	___freelist+1,w
  2252     0592  1D03               	skipz
  2253     0593  2D96               	goto	u885
  2254     0594  0873               	movf	??_free,w
  2255     0595  066D               	xorwf	___freelist,w
  2256     0596                     u885:
  2257     0596  1D03               	skipz
  2258     0597  2D99               	goto	u881
  2259     0598  2D9A               	goto	u880
  2260     0599                     u881:
  2261     0599  2DE6               	goto	l1481
  2262     059A                     u880:
  2263     059A                     l1471:
  2264     059A  086D               	movf	___freelist,w
  2265     059B  3E02               	addlw	2
  2266     059C  00F3               	movwf	??_free
  2267     059D  086E               	movf	___freelist+1,w
  2268     059E  1803               	skipnc
  2269     059F  3E01               	addlw	1
  2270     05A0  3E00               	addlw	0
  2271     05A1  00F4               	movwf	??_free+1
  2272     05A2  0873               	movf	??_free,w
  2273     05A3  0084               	movwf	4
  2274     05A4  1783               	bsf	3,7
  2275     05A5  1C74               	btfss	??_free+1,0
  2276     05A6  1383               	bcf	3,7
  2277     05A7  0800               	movf	0,w
  2278     05A8  00F5               	movwf	??_free+2
  2279     05A9  0A84               	incf	4,f
  2280     05AA  0800               	movf	0,w
  2281     05AB  00F6               	movwf	??_free+3
  2282     05AC  087B               	movf	free@c,w
  2283     05AD  3E02               	addlw	2
  2284     05AE  00F7               	movwf	??_free+4
  2285     05AF  087C               	movf	free@c+1,w
  2286     05B0  1803               	skipnc
  2287     05B1  3E01               	addlw	1
  2288     05B2  3E00               	addlw	0
  2289     05B3  00F8               	movwf	??_free+5
  2290     05B4  0877               	movf	??_free+4,w
  2291     05B5  0084               	movwf	4
  2292     05B6  1783               	bsf	3,7
  2293     05B7  1C78               	btfss	??_free+5,0
  2294     05B8  1383               	bcf	3,7
  2295     05B9  0875               	movf	??_free+2,w
  2296     05BA  0080               	movwf	0
  2297     05BB  0876               	movf	??_free+3,w
  2298     05BC  0A84               	incf	4,f
  2299     05BD  0080               	movwf	0
  2300     05BE  0384               	decf	4,f
  2301     05BF                     l1473:
  2302     05BF  086D               	movf	___freelist,w
  2303     05C0  0084               	movwf	4
  2304     05C1  1783               	bsf	3,7
  2305     05C2  1C6E               	btfss	___freelist+1,0
  2306     05C3  1383               	bcf	3,7
  2307     05C4  0800               	movf	0,w
  2308     05C5  00F3               	movwf	??_free
  2309     05C6  0A84               	incf	4,f
  2310     05C7  0800               	movf	0,w
  2311     05C8  00F4               	movwf	??_free+1
  2312     05C9  0873               	movf	??_free,w
  2313     05CA  3E02               	addlw	2
  2314     05CB  00F5               	movwf	??_free+2
  2315     05CC  0874               	movf	??_free+1,w
  2316     05CD  1803               	skipnc
  2317     05CE  3E01               	addlw	1
  2318     05CF  3E00               	addlw	0
  2319     05D0  00F6               	movwf	??_free+3
  2320     05D1  087B               	movf	free@c,w
  2321     05D2  0084               	movwf	4
  2322     05D3  1783               	bsf	3,7
  2323     05D4  1C7C               	btfss	free@c+1,0
  2324     05D5  1383               	bcf	3,7
  2325     05D6  0875               	movf	??_free+2,w
  2326     05D7  0780               	addwf	0,f
  2327     05D8  0F84               	incfsz	4,f
  2328     05D9  0800               	movf	0,w
  2329     05DA  1803               	skipnc
  2330     05DB  0A00               	incf	0,w
  2331     05DC  00FF               	movwf	btemp+1
  2332     05DD  0876               	movf	??_free+3,w
  2333     05DE  077F               	addwf	btemp+1,w
  2334     05DF  0080               	movwf	0
  2335     05E0  0384               	decf	4,f
  2336     05E1                     l1475:
  2337     05E1  087B               	movf	free@c,w
  2338     05E2  00ED               	movwf	___freelist
  2339     05E3  087C               	movf	free@c+1,w
  2340     05E4  00EE               	movwf	___freelist+1
  2341     05E5  2E51               	goto	l744
  2342     05E6                     l1481:
  2343     05E6  086D               	movf	___freelist,w
  2344     05E7  0084               	movwf	4
  2345     05E8  1783               	bsf	3,7
  2346     05E9  1C6E               	btfss	___freelist+1,0
  2347     05EA  1383               	bcf	3,7
  2348     05EB  0800               	movf	0,w
  2349     05EC  00F3               	movwf	??_free
  2350     05ED  0A84               	incf	4,f
  2351     05EE  0800               	movf	0,w
  2352     05EF  00F4               	movwf	??_free+1
  2353     05F0  0873               	movf	??_free,w
  2354     05F1  076D               	addwf	___freelist,w
  2355     05F2  00F5               	movwf	??_free+2
  2356     05F3  0874               	movf	??_free+1,w
  2357     05F4  1803               	skipnc
  2358     05F5  0A74               	incf	??_free+1,w
  2359     05F6  076E               	addwf	___freelist+1,w
  2360     05F7  00F6               	movwf	??_free+3
  2361     05F8  0875               	movf	??_free+2,w
  2362     05F9  3E02               	addlw	2
  2363     05FA  00F7               	movwf	??_free+4
  2364     05FB  0876               	movf	??_free+3,w
  2365     05FC  1803               	skipnc
  2366     05FD  3E01               	addlw	1
  2367     05FE  3E00               	addlw	0
  2368     05FF  00F8               	movwf	??_free+5
  2369     0600  087C               	movf	free@c+1,w
  2370     0601  0678               	xorwf	??_free+5,w
  2371     0602  1D03               	skipz
  2372     0603  2E06               	goto	u895
  2373     0604  087B               	movf	free@c,w
  2374     0605  0677               	xorwf	??_free+4,w
  2375     0606                     u895:
  2376     0606  1D03               	skipz
  2377     0607  2E09               	goto	u891
  2378     0608  2E0A               	goto	u890
  2379     0609                     u891:
  2380     0609  2E2D               	goto	l1487
  2381     060A                     u890:
  2382     060A                     l1483:
  2383     060A  087B               	movf	free@c,w
  2384     060B  0084               	movwf	4
  2385     060C  1783               	bsf	3,7
  2386     060D  1C7C               	btfss	free@c+1,0
  2387     060E  1383               	bcf	3,7
  2388     060F  0800               	movf	0,w
  2389     0610  00F3               	movwf	??_free
  2390     0611  0A84               	incf	4,f
  2391     0612  0800               	movf	0,w
  2392     0613  00F4               	movwf	??_free+1
  2393     0614  0873               	movf	??_free,w
  2394     0615  3E02               	addlw	2
  2395     0616  00F5               	movwf	??_free+2
  2396     0617  0874               	movf	??_free+1,w
  2397     0618  1803               	skipnc
  2398     0619  3E01               	addlw	1
  2399     061A  3E00               	addlw	0
  2400     061B  00F6               	movwf	??_free+3
  2401     061C  086D               	movf	___freelist,w
  2402     061D  0084               	movwf	4
  2403     061E  1783               	bsf	3,7
  2404     061F  1C6E               	btfss	___freelist+1,0
  2405     0620  1383               	bcf	3,7
  2406     0621  0875               	movf	??_free+2,w
  2407     0622  0780               	addwf	0,f
  2408     0623  0F84               	incfsz	4,f
  2409     0624  0800               	movf	0,w
  2410     0625  1803               	skipnc
  2411     0626  0A00               	incf	0,w
  2412     0627  00FF               	movwf	btemp+1
  2413     0628  0876               	movf	??_free+3,w
  2414     0629  077F               	addwf	btemp+1,w
  2415     062A  0080               	movwf	0
  2416     062B  0384               	decf	4,f
  2417     062C  2E51               	goto	l744
  2418     062D                     l1487:
  2419     062D  087B               	movf	free@c,w
  2420     062E  3E02               	addlw	2
  2421     062F  00F3               	movwf	??_free
  2422     0630  087C               	movf	free@c+1,w
  2423     0631  1803               	skipnc
  2424     0632  3E01               	addlw	1
  2425     0633  3E00               	addlw	0
  2426     0634  00F4               	movwf	??_free+1
  2427     0635  0873               	movf	??_free,w
  2428     0636  0084               	movwf	4
  2429     0637  1783               	bsf	3,7
  2430     0638  1C74               	btfss	??_free+1,0
  2431     0639  1383               	bcf	3,7
  2432     063A  086D               	movf	___freelist,w
  2433     063B  0080               	movwf	0
  2434     063C  0A84               	incf	4,f
  2435     063D  086E               	movf	___freelist+1,w
  2436     063E  0080               	movwf	0
  2437     063F  2DE1               	goto	l1475
  2438     0640                     l1489:
  2439     0640  087B               	movf	free@c,w
  2440     0641  3E02               	addlw	2
  2441     0642  00F3               	movwf	??_free
  2442     0643  087C               	movf	free@c+1,w
  2443     0644  1803               	skipnc
  2444     0645  3E01               	addlw	1
  2445     0646  3E00               	addlw	0
  2446     0647  00F4               	movwf	??_free+1
  2447     0648  0873               	movf	??_free,w
  2448     0649  0084               	movwf	4
  2449     064A  1783               	bsf	3,7
  2450     064B  1C74               	btfss	??_free+1,0
  2451     064C  1383               	bcf	3,7
  2452     064D  0180               	clrf	0
  2453     064E  0A84               	incf	4,f
  2454     064F  0180               	clrf	0
  2455     0650  2DE1               	goto	l1475
  2456     0651                     l744:
  2457     0651  0008               	return
  2458     0652                     __end_of_free:
  2459                           
  2460                           	psect	text9
  2461     0094                     __ptext9:	
  2462 ;; *************** function _calloc *****************
  2463 ;; Defined at:
  2464 ;;		line 10 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_calloc.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  nmemb           2   24[BANK0 ] unsigned int 
  2467 ;;  size            2   26[BANK0 ] unsigned int 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  new_ptr         2   28[BANK0 ] PTR void 
  2470 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  2   24[BANK0 ] PTR void 
  2473 ;; Registers used:
  2474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2480 ;;      Params:         0       4       0       0       0
  2481 ;;      Locals:         0       2       0       0       0
  2482 ;;      Temps:          0       0       0       0       0
  2483 ;;      Totals:         0       6       0       0       0
  2484 ;;Total ram usage:        6 bytes
  2485 ;; Hardware stack levels used: 1
  2486 ;; Hardware stack levels required when called: 2
  2487 ;; This function calls:
  2488 ;;		___wmul
  2489 ;;		_malloc
  2490 ;;		_memset
  2491 ;; This function is called by:
  2492 ;;		_ChangeOfCoordinates
  2493 ;;		_Rotate
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497     0094                     _calloc:	
  2498                           ;psect for function _calloc
  2499                           
  2500     0094                     l1445:	
  2501                           ;incstack = 0
  2502                           ; Regs used in _calloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2503                           
  2504     0094  1283               	bcf	3,5	;RP0=0, select bank0
  2505     0095  1303               	bcf	3,6	;RP1=0, select bank0
  2506     0096  0839               	movf	calloc@nmemb+1,w
  2507     0097  00F2               	movwf	___wmul@multiplier+1
  2508     0098  0838               	movf	calloc@nmemb,w
  2509     0099  00F1               	movwf	___wmul@multiplier
  2510     009A  083B               	movf	calloc@size+1,w
  2511     009B  00F4               	movwf	___wmul@multiplicand+1
  2512     009C  083A               	movf	calloc@size,w
  2513     009D  00F3               	movwf	___wmul@multiplicand
  2514     009E  120A  158A  279B  120A  118A  	fcall	___wmul
  2515     00A3  0872               	movf	?___wmul+1,w
  2516     00A4  00FA               	movwf	malloc@n+1
  2517     00A5  0871               	movf	?___wmul,w
  2518     00A6  00F9               	movwf	malloc@n
  2519     00A7  120A  118A  23B3  120A  118A  	fcall	_malloc
  2520     00AC  0879               	movf	?_malloc,w
  2521     00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2522     00AE  1303               	bcf	3,6	;RP1=0, select bank0
  2523     00AF  00BC               	movwf	calloc@new_ptr
  2524     00B0  087A               	movf	?_malloc+1,w
  2525     00B1  00BD               	movwf	calloc@new_ptr+1
  2526     00B2                     l1447:
  2527     00B2  083C               	movf	calloc@new_ptr,w
  2528     00B3  043D               	iorwf	calloc@new_ptr+1,w
  2529     00B4  1903               	btfsc	3,2
  2530     00B5  28B7               	goto	u821
  2531     00B6  28B8               	goto	u820
  2532     00B7                     u821:
  2533     00B7  28D5               	goto	l1451
  2534     00B8                     u820:
  2535     00B8                     l1449:
  2536     00B8  083C               	movf	calloc@new_ptr,w
  2537     00B9  00F7               	movwf	memset@dest
  2538     00BA  083D               	movf	calloc@new_ptr+1,w
  2539     00BB  00F8               	movwf	memset@dest+1
  2540     00BC  3000               	movlw	0
  2541     00BD  00F9               	movwf	memset@c
  2542     00BE  00FA               	movwf	memset@c+1
  2543     00BF  0839               	movf	calloc@nmemb+1,w
  2544     00C0  00F2               	movwf	___wmul@multiplier+1
  2545     00C1  0838               	movf	calloc@nmemb,w
  2546     00C2  00F1               	movwf	___wmul@multiplier
  2547     00C3  083B               	movf	calloc@size+1,w
  2548     00C4  00F4               	movwf	___wmul@multiplicand+1
  2549     00C5  083A               	movf	calloc@size,w
  2550     00C6  00F3               	movwf	___wmul@multiplicand
  2551     00C7  120A  158A  279B  120A  118A  	fcall	___wmul
  2552     00CC  0872               	movf	?___wmul+1,w
  2553     00CD  00FC               	movwf	memset@n+1
  2554     00CE  0871               	movf	?___wmul,w
  2555     00CF  00FB               	movwf	memset@n
  2556     00D0  120A  158A  277A  120A  118A  	fcall	_memset
  2557     00D5                     l1451:
  2558     00D5  1283               	bcf	3,5	;RP0=0, select bank0
  2559     00D6  1303               	bcf	3,6	;RP1=0, select bank0
  2560     00D7  083C               	movf	calloc@new_ptr,w
  2561     00D8  00B8               	movwf	?_calloc
  2562     00D9  083D               	movf	calloc@new_ptr+1,w
  2563     00DA  00B9               	movwf	?_calloc+1
  2564     00DB                     l721:
  2565     00DB  0008               	return
  2566     00DC                     __end_of_calloc:
  2567                           
  2568                           	psect	text10
  2569     0F7A                     __ptext10:	
  2570 ;; *************** function _memset *****************
  2571 ;; Defined at:
  2572 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;  dest            2    6[COMMON] PTR void 
  2575 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2576 ;;  c               2    8[COMMON] int 
  2577 ;;  n               2   10[COMMON] unsigned int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;  p               2    0[BANK0 ] PTR unsigned char 
  2580 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  2    6[COMMON] PTR void 
  2583 ;; Registers used:
  2584 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2590 ;;      Params:         6       0       0       0       0
  2591 ;;      Locals:         0       2       0       0       0
  2592 ;;      Temps:          0       0       0       0       0
  2593 ;;      Totals:         6       2       0       0       0
  2594 ;;Total ram usage:        8 bytes
  2595 ;; Hardware stack levels used: 1
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_calloc
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603     0F7A                     _memset:	
  2604                           ;psect for function _memset
  2605                           
  2606     0F7A                     l1437:	
  2607                           ;incstack = 0
  2608                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2609                           
  2610     0F7A  0877               	movf	memset@dest,w
  2611     0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  2612     0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  2613     0F7D  00A0               	movwf	memset@p
  2614     0F7E  0878               	movf	memset@dest+1,w
  2615     0F7F  00A1               	movwf	memset@p+1
  2616     0F80  2F8C               	goto	l1443
  2617     0F81                     l1439:
  2618     0F81  0820               	movf	memset@p,w
  2619     0F82  0084               	movwf	4
  2620     0F83  1783               	bsf	3,7
  2621     0F84  1C21               	btfss	memset@p+1,0
  2622     0F85  1383               	bcf	3,7
  2623     0F86  0879               	movf	memset@c,w
  2624     0F87  0080               	movwf	0
  2625     0F88                     l1441:
  2626     0F88  3001               	movlw	1
  2627     0F89  07A0               	addwf	memset@p,f
  2628     0F8A  1803               	skipnc
  2629     0F8B  0AA1               	incf	memset@p+1,f
  2630     0F8C                     l1443:
  2631     0F8C  3001               	movlw	1
  2632     0F8D  02FB               	subwf	memset@n,f
  2633     0F8E  3000               	movlw	0
  2634     0F8F  1C03               	skipc
  2635     0F90  03FC               	decf	memset@n+1,f
  2636     0F91  02FC               	subwf	memset@n+1,f
  2637     0F92  0A7B               	incf	memset@n,w
  2638     0F93  1D03               	skipz
  2639     0F94  2F99               	goto	u811
  2640     0F95  0A7C               	incf	memset@n+1,w
  2641     0F96  1D03               	btfss	3,2
  2642     0F97  2F99               	goto	u811
  2643     0F98  2F9A               	goto	u810
  2644     0F99                     u811:
  2645     0F99  2F81               	goto	l1439
  2646     0F9A                     u810:
  2647     0F9A                     l797:
  2648     0F9A  0008               	return
  2649     0F9B                     __end_of_memset:
  2650                           
  2651                           	psect	text11
  2652     03B3                     __ptext11:	
  2653 ;; *************** function _malloc *****************
  2654 ;; Defined at:
  2655 ;;		line 16 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_malloc.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  n               2    8[COMMON] unsigned int 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  sz              2   16[BANK0 ] PTR unsigned int 
  2660 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2661 ;;  new             2   22[BANK0 ] PTR unsigned char 
  2662 ;;		 -> __heap_hi(0), NULL(0), 
  2663 ;;  m               2   14[BANK0 ] unsigned int 
  2664 ;;  p               2   20[BANK0 ] PTR void 
  2665 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2666 ;;  size            2   18[BANK0 ] unsigned int 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  2    8[COMMON] PTR void 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2676 ;;      Params:         2       0       0       0       0
  2677 ;;      Locals:         0      10       0       0       0
  2678 ;;      Temps:          2       0       0       0       0
  2679 ;;      Totals:         4      10       0       0       0
  2680 ;;Total ram usage:       14 bytes
  2681 ;; Hardware stack levels used: 1
  2682 ;; Hardware stack levels required when called: 1
  2683 ;; This function calls:
  2684 ;;		___expand_heap
  2685 ;;		___simple_search_fl
  2686 ;; This function is called by:
  2687 ;;		_calloc
  2688 ;; This function uses a non-reentrant model
  2689 ;;
  2690                           
  2691     03B3                     _malloc:	
  2692                           ;psect for function _malloc
  2693                           
  2694     03B3                     l1385:	
  2695                           ;incstack = 0
  2696                           ; Regs used in _malloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2697                           
  2698     03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2699     03B4  1303               	bcf	3,6	;RP1=0, select bank0
  2700     03B5  01B2               	clrf	malloc@size
  2701     03B6  01B3               	clrf	malloc@size+1
  2702     03B7                     l1387:
  2703     03B7  0879               	movf	malloc@n,w
  2704     03B8  047A               	iorwf	malloc@n+1,w
  2705     03B9  1D03               	btfss	3,2
  2706     03BA  2BBC               	goto	u741
  2707     03BB  2BBD               	goto	u740
  2708     03BC                     u741:
  2709     03BC  2BC3               	goto	l764
  2710     03BD                     u740:
  2711     03BD                     l1389:
  2712     03BD  3001               	movlw	1
  2713     03BE  07F9               	addwf	malloc@n,f
  2714     03BF  1803               	skipnc
  2715     03C0  0AFA               	incf	malloc@n+1,f
  2716     03C1  3000               	movlw	0
  2717     03C2  07FA               	addwf	malloc@n+1,f
  2718     03C3                     l764:
  2719     03C3  3000               	movlw	0
  2720     03C4  027A               	subwf	malloc@n+1,w
  2721     03C5  3002               	movlw	2
  2722     03C6  1903               	skipnz
  2723     03C7  0279               	subwf	malloc@n,w
  2724     03C8  1803               	skipnc
  2725     03C9  2BCB               	goto	u751
  2726     03CA  2BCC               	goto	u750
  2727     03CB                     u751:
  2728     03CB  2BD1               	goto	l1393
  2729     03CC                     u750:
  2730     03CC                     l1391:
  2731     03CC  3002               	movlw	2
  2732     03CD  00F9               	movwf	malloc@n
  2733     03CE  3000               	movlw	0
  2734     03CF  00FA               	movwf	malloc@n+1
  2735     03D0  2BE9               	goto	l1401
  2736     03D1                     l1393:
  2737     03D1  087A               	movf	malloc@n+1,w
  2738     03D2  00FC               	movwf	??_malloc+1
  2739     03D3  0879               	movf	malloc@n,w
  2740     03D4  00FB               	movwf	??_malloc
  2741     03D5  09FB               	comf	??_malloc,f
  2742     03D6  09FC               	comf	??_malloc+1,f
  2743     03D7  3000               	movlw	0
  2744     03D8  027C               	subwf	??_malloc+1,w
  2745     03D9  3002               	movlw	2
  2746     03DA  1903               	skipnz
  2747     03DB  027B               	subwf	??_malloc,w
  2748     03DC  1803               	skipnc
  2749     03DD  2BDF               	goto	u761
  2750     03DE  2BE0               	goto	u760
  2751     03DF                     u761:
  2752     03DF  2BE9               	goto	l1401
  2753     03E0                     u760:
  2754     03E0                     l1395:
  2755     03E0  300C               	movlw	12
  2756     03E1  1683               	bsf	3,5	;RP0=1, select bank1
  2757     03E2  1303               	bcf	3,6	;RP1=0, select bank1
  2758     03E3  00AF               	movwf	_errno^(0+128)
  2759     03E4  3000               	movlw	0
  2760     03E5  00B0               	movwf	(_errno^(0+128)+1)
  2761     03E6                     l1397:
  2762     03E6  01F9               	clrf	?_malloc
  2763     03E7  01FA               	clrf	?_malloc+1
  2764     03E8  2C7C               	goto	l768
  2765     03E9                     l1401:
  2766     03E9                     l1403:
  2767     03E9  087A               	movf	malloc@n+1,w
  2768     03EA  00F2               	movwf	___simple_search_fl@n+1
  2769     03EB  0879               	movf	malloc@n,w
  2770     03EC  00F1               	movwf	___simple_search_fl@n
  2771     03ED  120A  118A  2652  120A  118A  	fcall	___simple_search_fl
  2772     03F2  0871               	movf	?___simple_search_fl,w
  2773     03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2774     03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2775     03F5  00B4               	movwf	malloc@p
  2776     03F6  0872               	movf	?___simple_search_fl+1,w
  2777     03F7  00B5               	movwf	malloc@p+1
  2778     03F8                     l1405:
  2779     03F8  0834               	movf	malloc@p,w
  2780     03F9  0435               	iorwf	malloc@p+1,w
  2781     03FA  1D03               	btfss	3,2
  2782     03FB  2BFD               	goto	u771
  2783     03FC  2BFE               	goto	u770
  2784     03FD                     u771:
  2785     03FD  2C78               	goto	l1433
  2786     03FE                     u770:
  2787     03FE                     l1407:
  2788     03FE  086B               	movf	malloc@cur,w
  2789     03FF  1683               	bsf	3,5	;RP0=1, select bank1
  2790     0400  1303               	bcf	3,6	;RP1=0, select bank1
  2791     0401  022D               	subwf	malloc@end^(0+128),w
  2792     0402  00FB               	movwf	??_malloc
  2793     0403  1283               	bcf	3,5	;RP0=0, select bank0
  2794     0404  1303               	bcf	3,6	;RP1=0, select bank0
  2795     0405  086C               	movf	malloc@cur+1,w
  2796     0406  1C03               	skipc
  2797     0407  0A6C               	incf	malloc@cur+1,w
  2798     0408  1683               	bsf	3,5	;RP0=1, select bank1
  2799     0409  1303               	bcf	3,6	;RP1=0, select bank1
  2800     040A  022E               	subwf	(malloc@end+1)^(0+128),w
  2801     040B  00FC               	movwf	??_malloc+1
  2802     040C  087A               	movf	malloc@n+1,w
  2803     040D  027C               	subwf	??_malloc+1,w
  2804     040E  1D03               	skipz
  2805     040F  2C12               	goto	u785
  2806     0410  0879               	movf	malloc@n,w
  2807     0411  027B               	subwf	??_malloc,w
  2808     0412                     u785:
  2809     0412  1803               	skipnc
  2810     0413  2C15               	goto	u781
  2811     0414  2C16               	goto	u780
  2812     0415                     u781:
  2813     0415  2C57               	goto	l770
  2814     0416                     u780:
  2815     0416                     l1409:
  2816     0416  0879               	movf	malloc@n,w
  2817     0417  3E02               	addlw	2
  2818     0418  1283               	bcf	3,5	;RP0=0, select bank0
  2819     0419  1303               	bcf	3,6	;RP1=0, select bank0
  2820     041A  00AE               	movwf	malloc@m
  2821     041B  087A               	movf	malloc@n+1,w
  2822     041C  1803               	skipnc
  2823     041D  3E01               	addlw	1
  2824     041E  3E00               	addlw	0
  2825     041F  00AF               	movwf	malloc@m+1
  2826     0420                     l1411:
  2827     0420  302E               	movlw	(low (malloc@m| 0))& (0+255)
  2828     0421  00F1               	movwf	___expand_heap@pn
  2829     0422  120A  118A  20DC  120A  118A  	fcall	___expand_heap
  2830     0427  0871               	movf	?___expand_heap,w
  2831     0428  1283               	bcf	3,5	;RP0=0, select bank0
  2832     0429  1303               	bcf	3,6	;RP1=0, select bank0
  2833     042A  00B6               	movwf	malloc@new
  2834     042B  0872               	movf	?___expand_heap+1,w
  2835     042C  00B7               	movwf	malloc@new+1
  2836     042D                     l1413:
  2837     042D  0836               	movf	malloc@new,w
  2838     042E  0437               	iorwf	malloc@new+1,w
  2839     042F  1D03               	btfss	3,2
  2840     0430  2C32               	goto	u791
  2841     0431  2C33               	goto	u790
  2842     0432                     u791:
  2843     0432  2C34               	goto	l1419
  2844     0433                     u790:
  2845     0433  2BE6               	goto	l1397
  2846     0434                     l1419:
  2847     0434  1683               	bsf	3,5	;RP0=1, select bank1
  2848     0435  1303               	bcf	3,6	;RP1=0, select bank1
  2849     0436  082E               	movf	(malloc@end+1)^(0+128),w
  2850     0437  1283               	bcf	3,5	;RP0=0, select bank0
  2851     0438  1303               	bcf	3,6	;RP1=0, select bank0
  2852     0439  0637               	xorwf	malloc@new+1,w
  2853     043A  1D03               	skipz
  2854     043B  2C42               	goto	u805
  2855     043C  1683               	bsf	3,5	;RP0=1, select bank1
  2856     043D  1303               	bcf	3,6	;RP1=0, select bank1
  2857     043E  082D               	movf	malloc@end^(0+128),w
  2858     043F  1283               	bcf	3,5	;RP0=0, select bank0
  2859     0440  1303               	bcf	3,6	;RP1=0, select bank0
  2860     0441  0636               	xorwf	malloc@new,w
  2861     0442                     u805:
  2862     0442  1903               	skipnz
  2863     0443  2C45               	goto	u801
  2864     0444  2C46               	goto	u800
  2865     0445                     u801:
  2866     0445  2C4A               	goto	l772
  2867     0446                     u800:
  2868     0446                     l1421:
  2869     0446  0836               	movf	malloc@new,w
  2870     0447  00EB               	movwf	malloc@cur
  2871     0448  0837               	movf	malloc@new+1,w
  2872     0449  00EC               	movwf	malloc@cur+1
  2873     044A                     l772:
  2874     044A  082E               	movf	malloc@m,w
  2875     044B  0736               	addwf	malloc@new,w
  2876     044C  1683               	bsf	3,5	;RP0=1, select bank1
  2877     044D  1303               	bcf	3,6	;RP1=0, select bank1
  2878     044E  00AD               	movwf	malloc@end^(0+128)
  2879     044F  1283               	bcf	3,5	;RP0=0, select bank0
  2880     0450  1303               	bcf	3,6	;RP1=0, select bank0
  2881     0451  0837               	movf	malloc@new+1,w
  2882     0452  1803               	skipnc
  2883     0453  3E01               	addlw	1
  2884     0454  1683               	bsf	3,5	;RP0=1, select bank1
  2885     0455  1303               	bcf	3,6	;RP1=0, select bank1
  2886     0456  00AE               	movwf	(malloc@end^(0+128)+1)
  2887     0457                     l770:
  2888     0457  1283               	bcf	3,5	;RP0=0, select bank0
  2889     0458  1303               	bcf	3,6	;RP1=0, select bank0
  2890     0459  086B               	movf	malloc@cur,w
  2891     045A  00B4               	movwf	malloc@p
  2892     045B  086C               	movf	malloc@cur+1,w
  2893     045C  00B5               	movwf	malloc@p+1
  2894     045D                     l1423:
  2895     045D  0834               	movf	malloc@p,w
  2896     045E  00B0               	movwf	malloc@sz
  2897     045F  0835               	movf	malloc@p+1,w
  2898     0460  00B1               	movwf	malloc@sz+1
  2899     0461                     l1425:
  2900     0461  0830               	movf	malloc@sz,w
  2901     0462  0084               	movwf	4
  2902     0463  1783               	bsf	3,7
  2903     0464  1C31               	btfss	malloc@sz+1,0
  2904     0465  1383               	bcf	3,7
  2905     0466  0879               	movf	malloc@n,w
  2906     0467  0080               	movwf	0
  2907     0468  0A84               	incf	4,f
  2908     0469  087A               	movf	malloc@n+1,w
  2909     046A  0080               	movwf	0
  2910     046B                     l1427:
  2911     046B  3002               	movlw	2
  2912     046C  07B0               	addwf	malloc@sz,f
  2913     046D  1803               	skipnc
  2914     046E  0AB1               	incf	malloc@sz+1,f
  2915     046F                     l1429:
  2916     046F  0830               	movf	malloc@sz,w
  2917     0470  00B4               	movwf	malloc@p
  2918     0471  0831               	movf	malloc@sz+1,w
  2919     0472  00B5               	movwf	malloc@p+1
  2920     0473                     l1431:
  2921     0473  0879               	movf	malloc@n,w
  2922     0474  3E02               	addlw	2
  2923     0475  07EB               	addwf	malloc@cur,f
  2924     0476  1803               	skipnc
  2925     0477  0AEC               	incf	malloc@cur+1,f
  2926     0478                     l1433:
  2927     0478  0834               	movf	malloc@p,w
  2928     0479  00F9               	movwf	?_malloc
  2929     047A  0835               	movf	malloc@p+1,w
  2930     047B  00FA               	movwf	?_malloc+1
  2931     047C                     l768:
  2932     047C  0008               	return
  2933     047D                     __end_of_malloc:
  2934                           
  2935                           	psect	text12
  2936     0652                     __ptext12:	
  2937 ;; *************** function ___simple_search_fl *****************
  2938 ;; Defined at:
  2939 ;;		line 19 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  n               2    0[COMMON] unsigned int 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  split           2    4[BANK0 ] PTR struct chunk
  2944 ;;		 -> __heap_hi$.$next(2), NULL(0), 
  2945 ;;  remaining_si    2    0[BANK0 ] unsigned int 
  2946 ;;  next            2    8[BANK0 ] PTR struct chunk
  2947 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2948 ;;  best            2   12[BANK0 ] PTR struct chunk
  2949 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2950 ;;  c               2   10[BANK0 ] PTR struct chunk
  2951 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2952 ;;  last            2    6[BANK0 ] PTR struct chunk
  2953 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2954 ;;  best_last       2    2[BANK0 ] PTR struct chunk
  2955 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  2    0[COMMON] PTR void 
  2958 ;; Registers used:
  2959 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2965 ;;      Params:         2       0       0       0       0
  2966 ;;      Locals:         0      14       0       0       0
  2967 ;;      Temps:          6       0       0       0       0
  2968 ;;      Totals:         8      14       0       0       0
  2969 ;;Total ram usage:       22 bytes
  2970 ;; Hardware stack levels used: 1
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_malloc
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978     0652                     ___simple_search_fl:	
  2979                           ;psect for function ___simple_search_fl
  2980                           
  2981     0652                     l1283:	
  2982                           ;incstack = 0
  2983                           ; Regs used in ___simple_search_fl: [wreg-fsr0h+status,2+status,0]
  2984                           
  2985     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2986     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2987     0654  01AC               	clrf	___simple_search_fl@best
  2988     0655  01AD               	clrf	___simple_search_fl@best+1
  2989     0656  01A2               	clrf	___simple_search_fl@best_last
  2990     0657  01A3               	clrf	___simple_search_fl@best_last+1
  2991     0658  01A6               	clrf	___simple_search_fl@last
  2992     0659  01A7               	clrf	___simple_search_fl@last+1
  2993     065A                     l1285:
  2994     065A  086D               	movf	___freelist,w
  2995     065B  046E               	iorwf	___freelist+1,w
  2996     065C  1D03               	btfss	3,2
  2997     065D  2E5F               	goto	u551
  2998     065E  2E60               	goto	u550
  2999     065F                     u551:
  3000     065F  2E63               	goto	l1291
  3001     0660                     u550:
  3002     0660                     l1287:
  3003     0660  01F1               	clrf	?___simple_search_fl
  3004     0661  01F2               	clrf	?___simple_search_fl+1
  3005     0662  2FD7               	goto	l727
  3006     0663                     l1291:
  3007     0663  086D               	movf	___freelist,w
  3008     0664  00AA               	movwf	___simple_search_fl@c
  3009     0665  086E               	movf	___freelist+1,w
  3010     0666  00AB               	movwf	___simple_search_fl@c+1
  3011     0667  2F1C               	goto	l1317
  3012     0668                     l1293:
  3013     0668  082A               	movf	___simple_search_fl@c,w
  3014     0669  0084               	movwf	4
  3015     066A  1783               	bsf	3,7
  3016     066B  1C2B               	btfss	___simple_search_fl@c+1,0
  3017     066C  1383               	bcf	3,7
  3018     066D  0800               	movf	0,w
  3019     066E  00F3               	movwf	??___simple_search_fl
  3020     066F  0A84               	incf	4,f
  3021     0670  0800               	movf	0,w
  3022     0671  00F4               	movwf	??___simple_search_fl+1
  3023     0672  0872               	movf	___simple_search_fl@n+1,w
  3024     0673  0674               	xorwf	??___simple_search_fl+1,w
  3025     0674  1D03               	skipz
  3026     0675  2E78               	goto	u565
  3027     0676  0871               	movf	___simple_search_fl@n,w
  3028     0677  0673               	xorwf	??___simple_search_fl,w
  3029     0678                     u565:
  3030     0678  1D03               	skipz
  3031     0679  2E7B               	goto	u561
  3032     067A  2E7C               	goto	u560
  3033     067B                     u561:
  3034     067B  2EC4               	goto	l1305
  3035     067C                     u560:
  3036     067C                     l1295:
  3037     067C  0826               	movf	___simple_search_fl@last,w
  3038     067D  0427               	iorwf	___simple_search_fl@last+1,w
  3039     067E  1903               	btfsc	3,2
  3040     067F  2E81               	goto	u571
  3041     0680  2E82               	goto	u570
  3042     0681                     u571:
  3043     0681  2EA8               	goto	l1299
  3044     0682                     u570:
  3045     0682                     l1297:
  3046     0682  082A               	movf	___simple_search_fl@c,w
  3047     0683  3E02               	addlw	2
  3048     0684  00F3               	movwf	??___simple_search_fl
  3049     0685  082B               	movf	___simple_search_fl@c+1,w
  3050     0686  1803               	skipnc
  3051     0687  3E01               	addlw	1
  3052     0688  3E00               	addlw	0
  3053     0689  00F4               	movwf	??___simple_search_fl+1
  3054     068A  0873               	movf	??___simple_search_fl,w
  3055     068B  0084               	movwf	4
  3056     068C  1783               	bsf	3,7
  3057     068D  1C74               	btfss	??___simple_search_fl+1,0
  3058     068E  1383               	bcf	3,7
  3059     068F  0800               	movf	0,w
  3060     0690  00F5               	movwf	??___simple_search_fl+2
  3061     0691  0A84               	incf	4,f
  3062     0692  0800               	movf	0,w
  3063     0693  00F6               	movwf	??___simple_search_fl+3
  3064     0694  0826               	movf	___simple_search_fl@last,w
  3065     0695  3E02               	addlw	2
  3066     0696  00F7               	movwf	??___simple_search_fl+4
  3067     0697  0827               	movf	___simple_search_fl@last+1,w
  3068     0698  1803               	skipnc
  3069     0699  3E01               	addlw	1
  3070     069A  3E00               	addlw	0
  3071     069B  00F8               	movwf	??___simple_search_fl+5
  3072     069C  0877               	movf	??___simple_search_fl+4,w
  3073     069D  0084               	movwf	4
  3074     069E  1783               	bsf	3,7
  3075     069F  1C78               	btfss	??___simple_search_fl+5,0
  3076     06A0  1383               	bcf	3,7
  3077     06A1  0875               	movf	??___simple_search_fl+2,w
  3078     06A2  0080               	movwf	0
  3079     06A3  0876               	movf	??___simple_search_fl+3,w
  3080     06A4  0A84               	incf	4,f
  3081     06A5  0080               	movwf	0
  3082     06A6  0384               	decf	4,f
  3083     06A7  2EBB               	goto	l1301
  3084     06A8                     l1299:
  3085     06A8  082A               	movf	___simple_search_fl@c,w
  3086     06A9  3E02               	addlw	2
  3087     06AA  00F3               	movwf	??___simple_search_fl
  3088     06AB  082B               	movf	___simple_search_fl@c+1,w
  3089     06AC  1803               	skipnc
  3090     06AD  3E01               	addlw	1
  3091     06AE  3E00               	addlw	0
  3092     06AF  00F4               	movwf	??___simple_search_fl+1
  3093     06B0  0873               	movf	??___simple_search_fl,w
  3094     06B1  0084               	movwf	4
  3095     06B2  1783               	bsf	3,7
  3096     06B3  1C74               	btfss	??___simple_search_fl+1,0
  3097     06B4  1383               	bcf	3,7
  3098     06B5  0800               	movf	0,w
  3099     06B6  00ED               	movwf	___freelist
  3100     06B7  0A84               	incf	4,f
  3101     06B8  0800               	movf	0,w
  3102     06B9  0384               	decf	4,f
  3103     06BA  00EE               	movwf	___freelist+1
  3104     06BB                     l1301:
  3105     06BB  082A               	movf	___simple_search_fl@c,w
  3106     06BC  3E02               	addlw	2
  3107     06BD  00F1               	movwf	?___simple_search_fl
  3108     06BE  082B               	movf	___simple_search_fl@c+1,w
  3109     06BF  1803               	skipnc
  3110     06C0  3E01               	addlw	1
  3111     06C1  3E00               	addlw	0
  3112     06C2  00F2               	movwf	?___simple_search_fl+1
  3113     06C3  2FD7               	goto	l727
  3114     06C4                     l1305:
  3115     06C4  082A               	movf	___simple_search_fl@c,w
  3116     06C5  0084               	movwf	4
  3117     06C6  1783               	bsf	3,7
  3118     06C7  1C2B               	btfss	___simple_search_fl@c+1,0
  3119     06C8  1383               	bcf	3,7
  3120     06C9  0800               	movf	0,w
  3121     06CA  00F3               	movwf	??___simple_search_fl
  3122     06CB  0A84               	incf	4,f
  3123     06CC  0800               	movf	0,w
  3124     06CD  00F4               	movwf	??___simple_search_fl+1
  3125     06CE  0874               	movf	??___simple_search_fl+1,w
  3126     06CF  0272               	subwf	___simple_search_fl@n+1,w
  3127     06D0  1D03               	skipz
  3128     06D1  2ED4               	goto	u585
  3129     06D2  0873               	movf	??___simple_search_fl,w
  3130     06D3  0271               	subwf	___simple_search_fl@n,w
  3131     06D4                     u585:
  3132     06D4  1803               	skipnc
  3133     06D5  2ED7               	goto	u581
  3134     06D6  2ED8               	goto	u580
  3135     06D7                     u581:
  3136     06D7  2F05               	goto	l735
  3137     06D8                     u580:
  3138     06D8                     l1307:
  3139     06D8  082C               	movf	___simple_search_fl@best,w
  3140     06D9  042D               	iorwf	___simple_search_fl@best+1,w
  3141     06DA  1903               	btfsc	3,2
  3142     06DB  2EDD               	goto	u591
  3143     06DC  2EDE               	goto	u590
  3144     06DD                     u591:
  3145     06DD  2EFD               	goto	l1313
  3146     06DE                     u590:
  3147     06DE                     l1309:
  3148     06DE  082C               	movf	___simple_search_fl@best,w
  3149     06DF  0084               	movwf	4
  3150     06E0  1783               	bsf	3,7
  3151     06E1  1C2D               	btfss	___simple_search_fl@best+1,0
  3152     06E2  1383               	bcf	3,7
  3153     06E3  0800               	movf	0,w
  3154     06E4  00F3               	movwf	??___simple_search_fl
  3155     06E5  0A84               	incf	4,f
  3156     06E6  0800               	movf	0,w
  3157     06E7  00F4               	movwf	??___simple_search_fl+1
  3158     06E8  082A               	movf	___simple_search_fl@c,w
  3159     06E9  0084               	movwf	4
  3160     06EA  1783               	bsf	3,7
  3161     06EB  1C2B               	btfss	___simple_search_fl@c+1,0
  3162     06EC  1383               	bcf	3,7
  3163     06ED  0800               	movf	0,w
  3164     06EE  00F5               	movwf	??___simple_search_fl+2
  3165     06EF  0A84               	incf	4,f
  3166     06F0  0800               	movf	0,w
  3167     06F1  00F6               	movwf	??___simple_search_fl+3
  3168     06F2  0874               	movf	??___simple_search_fl+1,w
  3169     06F3  0276               	subwf	??___simple_search_fl+3,w
  3170     06F4  1D03               	skipz
  3171     06F5  2EF8               	goto	u605
  3172     06F6  0873               	movf	??___simple_search_fl,w
  3173     06F7  0275               	subwf	??___simple_search_fl+2,w
  3174     06F8                     u605:
  3175     06F8  1C03               	skipc
  3176     06F9  2EFB               	goto	u601
  3177     06FA  2EFC               	goto	u600
  3178     06FB                     u601:
  3179     06FB  2EFD               	goto	l1313
  3180     06FC                     u600:
  3181     06FC  2F05               	goto	l735
  3182     06FD                     l1313:
  3183     06FD  082A               	movf	___simple_search_fl@c,w
  3184     06FE  00AC               	movwf	___simple_search_fl@best
  3185     06FF  082B               	movf	___simple_search_fl@c+1,w
  3186     0700  00AD               	movwf	___simple_search_fl@best+1
  3187     0701  0826               	movf	___simple_search_fl@last,w
  3188     0702  00A2               	movwf	___simple_search_fl@best_last
  3189     0703  0827               	movf	___simple_search_fl@last+1,w
  3190     0704  00A3               	movwf	___simple_search_fl@best_last+1
  3191     0705                     l735:
  3192     0705  082A               	movf	___simple_search_fl@c,w
  3193     0706  00A6               	movwf	___simple_search_fl@last
  3194     0707  082B               	movf	___simple_search_fl@c+1,w
  3195     0708  00A7               	movwf	___simple_search_fl@last+1
  3196     0709                     l1315:
  3197     0709  082A               	movf	___simple_search_fl@c,w
  3198     070A  3E02               	addlw	2
  3199     070B  00F3               	movwf	??___simple_search_fl
  3200     070C  082B               	movf	___simple_search_fl@c+1,w
  3201     070D  1803               	skipnc
  3202     070E  3E01               	addlw	1
  3203     070F  3E00               	addlw	0
  3204     0710  00F4               	movwf	??___simple_search_fl+1
  3205     0711  0873               	movf	??___simple_search_fl,w
  3206     0712  0084               	movwf	4
  3207     0713  1783               	bsf	3,7
  3208     0714  1C74               	btfss	??___simple_search_fl+1,0
  3209     0715  1383               	bcf	3,7
  3210     0716  0800               	movf	0,w
  3211     0717  00AA               	movwf	___simple_search_fl@c
  3212     0718  0A84               	incf	4,f
  3213     0719  0800               	movf	0,w
  3214     071A  0384               	decf	4,f
  3215     071B  00AB               	movwf	___simple_search_fl@c+1
  3216     071C                     l1317:
  3217     071C  082A               	movf	___simple_search_fl@c,w
  3218     071D  042B               	iorwf	___simple_search_fl@c+1,w
  3219     071E  1D03               	btfss	3,2
  3220     071F  2F21               	goto	u611
  3221     0720  2F22               	goto	u610
  3222     0721                     u611:
  3223     0721  2E68               	goto	l1293
  3224     0722                     u610:
  3225     0722                     l1319:
  3226     0722  082C               	movf	___simple_search_fl@best,w
  3227     0723  042D               	iorwf	___simple_search_fl@best+1,w
  3228     0724  1903               	btfsc	3,2
  3229     0725  2F27               	goto	u621
  3230     0726  2F28               	goto	u620
  3231     0727                     u621:
  3232     0727  2E60               	goto	l1287
  3233     0728                     u620:
  3234     0728                     l1321:
  3235     0728  082C               	movf	___simple_search_fl@best,w
  3236     0729  3E02               	addlw	2
  3237     072A  00F3               	movwf	??___simple_search_fl
  3238     072B  082D               	movf	___simple_search_fl@best+1,w
  3239     072C  1803               	skipnc
  3240     072D  3E01               	addlw	1
  3241     072E  3E00               	addlw	0
  3242     072F  00F4               	movwf	??___simple_search_fl+1
  3243     0730  0873               	movf	??___simple_search_fl,w
  3244     0731  0084               	movwf	4
  3245     0732  1783               	bsf	3,7
  3246     0733  1C74               	btfss	??___simple_search_fl+1,0
  3247     0734  1383               	bcf	3,7
  3248     0735  0800               	movf	0,w
  3249     0736  00A8               	movwf	___simple_search_fl@next
  3250     0737  0A84               	incf	4,f
  3251     0738  0800               	movf	0,w
  3252     0739  0384               	decf	4,f
  3253     073A  00A9               	movwf	___simple_search_fl@next+1
  3254     073B  082C               	movf	___simple_search_fl@best,w
  3255     073C  0084               	movwf	4
  3256     073D  1783               	bsf	3,7
  3257     073E  1C2D               	btfss	___simple_search_fl@best+1,0
  3258     073F  1383               	bcf	3,7
  3259     0740  0800               	movf	0,w
  3260     0741  00F3               	movwf	??___simple_search_fl
  3261     0742  0A84               	incf	4,f
  3262     0743  0800               	movf	0,w
  3263     0744  00F4               	movwf	??___simple_search_fl+1
  3264     0745  0871               	movf	___simple_search_fl@n,w
  3265     0746  0273               	subwf	??___simple_search_fl,w
  3266     0747  00F5               	movwf	??___simple_search_fl+2
  3267     0748  0872               	movf	___simple_search_fl@n+1,w
  3268     0749  1C03               	skipc
  3269     074A  0A72               	incf	___simple_search_fl@n+1,w
  3270     074B  0274               	subwf	??___simple_search_fl+1,w
  3271     074C  00F6               	movwf	??___simple_search_fl+3
  3272     074D  3000               	movlw	0
  3273     074E  0276               	subwf	??___simple_search_fl+3,w
  3274     074F  3005               	movlw	5
  3275     0750  1903               	skipnz
  3276     0751  0275               	subwf	??___simple_search_fl+2,w
  3277     0752  1C03               	skipc
  3278     0753  2F55               	goto	u631
  3279     0754  2F56               	goto	u630
  3280     0755                     u631:
  3281     0755  2FAE               	goto	l738
  3282     0756                     u630:
  3283     0756                     l1323:
  3284     0756  082C               	movf	___simple_search_fl@best,w
  3285     0757  0084               	movwf	4
  3286     0758  1783               	bsf	3,7
  3287     0759  1C2D               	btfss	___simple_search_fl@best+1,0
  3288     075A  1383               	bcf	3,7
  3289     075B  0800               	movf	0,w
  3290     075C  00F3               	movwf	??___simple_search_fl
  3291     075D  0A84               	incf	4,f
  3292     075E  0800               	movf	0,w
  3293     075F  00F4               	movwf	??___simple_search_fl+1
  3294     0760  0871               	movf	___simple_search_fl@n,w
  3295     0761  0273               	subwf	??___simple_search_fl,w
  3296     0762  00F5               	movwf	??___simple_search_fl+2
  3297     0763  0872               	movf	___simple_search_fl@n+1,w
  3298     0764  1C03               	skipc
  3299     0765  0A72               	incf	___simple_search_fl@n+1,w
  3300     0766  0274               	subwf	??___simple_search_fl+1,w
  3301     0767  00F6               	movwf	??___simple_search_fl+3
  3302     0768  0875               	movf	??___simple_search_fl+2,w
  3303     0769  3EFE               	addlw	254
  3304     076A  00A0               	movwf	___simple_search_fl@remaining_size
  3305     076B  0876               	movf	??___simple_search_fl+3,w
  3306     076C  1803               	skipnc
  3307     076D  3E01               	addlw	1
  3308     076E  3EFF               	addlw	255
  3309     076F  00A1               	movwf	___simple_search_fl@remaining_size+1
  3310     0770                     l1325:
  3311     0770  082C               	movf	___simple_search_fl@best,w
  3312     0771  0084               	movwf	4
  3313     0772  1783               	bsf	3,7
  3314     0773  1C2D               	btfss	___simple_search_fl@best+1,0
  3315     0774  1383               	bcf	3,7
  3316     0775  0871               	movf	___simple_search_fl@n,w
  3317     0776  0080               	movwf	0
  3318     0777  0A84               	incf	4,f
  3319     0778  0872               	movf	___simple_search_fl@n+1,w
  3320     0779  0080               	movwf	0
  3321     077A                     l1327:
  3322     077A  082C               	movf	___simple_search_fl@best,w
  3323     077B  0084               	movwf	4
  3324     077C  1783               	bsf	3,7
  3325     077D  1C2D               	btfss	___simple_search_fl@best+1,0
  3326     077E  1383               	bcf	3,7
  3327     077F  0800               	movf	0,w
  3328     0780  072C               	addwf	___simple_search_fl@best,w
  3329     0781  00F3               	movwf	??___simple_search_fl
  3330     0782  082D               	movf	___simple_search_fl@best+1,w
  3331     0783  1803               	skipnc
  3332     0784  3E01               	addlw	1
  3333     0785  00F4               	movwf	??___simple_search_fl+1
  3334     0786  0873               	movf	??___simple_search_fl,w
  3335     0787  3E02               	addlw	2
  3336     0788  00A4               	movwf	___simple_search_fl@split
  3337     0789  0874               	movf	??___simple_search_fl+1,w
  3338     078A  1803               	skipnc
  3339     078B  3E01               	addlw	1
  3340     078C  3E00               	addlw	0
  3341     078D  00A5               	movwf	___simple_search_fl@split+1
  3342     078E  0824               	movf	___simple_search_fl@split,w
  3343     078F  0084               	movwf	4
  3344     0790  1783               	bsf	3,7
  3345     0791  1C25               	btfss	___simple_search_fl@split+1,0
  3346     0792  1383               	bcf	3,7
  3347     0793  0820               	movf	___simple_search_fl@remaining_size,w
  3348     0794  0080               	movwf	0
  3349     0795  0A84               	incf	4,f
  3350     0796  0821               	movf	___simple_search_fl@remaining_size+1,w
  3351     0797  0080               	movwf	0
  3352     0798                     l1329:
  3353     0798  0824               	movf	___simple_search_fl@split,w
  3354     0799  3E02               	addlw	2
  3355     079A  00F3               	movwf	??___simple_search_fl
  3356     079B  0825               	movf	___simple_search_fl@split+1,w
  3357     079C  1803               	skipnc
  3358     079D  3E01               	addlw	1
  3359     079E  3E00               	addlw	0
  3360     079F  00F4               	movwf	??___simple_search_fl+1
  3361     07A0  0873               	movf	??___simple_search_fl,w
  3362     07A1  0084               	movwf	4
  3363     07A2  1783               	bsf	3,7
  3364     07A3  1C74               	btfss	??___simple_search_fl+1,0
  3365     07A4  1383               	bcf	3,7
  3366     07A5  0828               	movf	___simple_search_fl@next,w
  3367     07A6  0080               	movwf	0
  3368     07A7  0A84               	incf	4,f
  3369     07A8  0829               	movf	___simple_search_fl@next+1,w
  3370     07A9  0080               	movwf	0
  3371     07AA                     l1331:
  3372     07AA  0824               	movf	___simple_search_fl@split,w
  3373     07AB  00A8               	movwf	___simple_search_fl@next
  3374     07AC  0825               	movf	___simple_search_fl@split+1,w
  3375     07AD  00A9               	movwf	___simple_search_fl@next+1
  3376     07AE                     l738:
  3377     07AE  082D               	movf	___simple_search_fl@best+1,w
  3378     07AF  066E               	xorwf	___freelist+1,w
  3379     07B0  1D03               	skipz
  3380     07B1  2FB4               	goto	u645
  3381     07B2  082C               	movf	___simple_search_fl@best,w
  3382     07B3  066D               	xorwf	___freelist,w
  3383     07B4                     u645:
  3384     07B4  1D03               	skipz
  3385     07B5  2FB7               	goto	u641
  3386     07B6  2FB8               	goto	u640
  3387     07B7                     u641:
  3388     07B7  2FBD               	goto	l1335
  3389     07B8                     u640:
  3390     07B8                     l1333:
  3391     07B8  0828               	movf	___simple_search_fl@next,w
  3392     07B9  00ED               	movwf	___freelist
  3393     07BA  0829               	movf	___simple_search_fl@next+1,w
  3394     07BB  00EE               	movwf	___freelist+1
  3395     07BC  2FCF               	goto	l1337
  3396     07BD                     l1335:
  3397     07BD  0822               	movf	___simple_search_fl@best_last,w
  3398     07BE  3E02               	addlw	2
  3399     07BF  00F3               	movwf	??___simple_search_fl
  3400     07C0  0823               	movf	___simple_search_fl@best_last+1,w
  3401     07C1  1803               	skipnc
  3402     07C2  3E01               	addlw	1
  3403     07C3  3E00               	addlw	0
  3404     07C4  00F4               	movwf	??___simple_search_fl+1
  3405     07C5  0873               	movf	??___simple_search_fl,w
  3406     07C6  0084               	movwf	4
  3407     07C7  1783               	bsf	3,7
  3408     07C8  1C74               	btfss	??___simple_search_fl+1,0
  3409     07C9  1383               	bcf	3,7
  3410     07CA  0828               	movf	___simple_search_fl@next,w
  3411     07CB  0080               	movwf	0
  3412     07CC  0A84               	incf	4,f
  3413     07CD  0829               	movf	___simple_search_fl@next+1,w
  3414     07CE  0080               	movwf	0
  3415     07CF                     l1337:
  3416     07CF  082C               	movf	___simple_search_fl@best,w
  3417     07D0  3E02               	addlw	2
  3418     07D1  00F1               	movwf	?___simple_search_fl
  3419     07D2  082D               	movf	___simple_search_fl@best+1,w
  3420     07D3  1803               	skipnc
  3421     07D4  3E01               	addlw	1
  3422     07D5  3E00               	addlw	0
  3423     07D6  00F2               	movwf	?___simple_search_fl+1
  3424     07D7                     l727:
  3425     07D7  0008               	return
  3426     07D8                     __end_of___simple_search_fl:
  3427                           
  3428                           	psect	text13
  3429     00DC                     __ptext13:	
  3430 ;; *************** function ___expand_heap *****************
  3431 ;; Defined at:
  3432 ;;		line 14 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/expand_heap.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  pn              1    0[COMMON] PTR unsigned int 
  3435 ;;		 -> malloc@m(2), 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  new_brkp        2    3[COMMON] PTR unsigned char 
  3438 ;;		 -> __heap_hi(0), NULL(0), 
  3439 ;;  n               2    1[COMMON] unsigned int 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  2    0[COMMON] PTR void 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3449 ;;      Params:         1       0       0       0       0
  3450 ;;      Locals:         4       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0
  3452 ;;      Totals:         5       0       0       0       0
  3453 ;;Total ram usage:        5 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_malloc
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462     00DC                     ___expand_heap:	
  3463                           ;psect for function ___expand_heap
  3464                           
  3465     00DC                     l1345:	
  3466                           ;incstack = 0
  3467                           ; Regs used in ___expand_heap: [wreg-fsr0h+status,2+status,0]
  3468                           
  3469     00DC  0871               	movf	___expand_heap@pn,w
  3470     00DD  0084               	movwf	4
  3471     00DE  1383               	bcf	3,7	;select IRP bank0
  3472     00DF  0800               	movf	0,w
  3473     00E0  00F2               	movwf	___expand_heap@n
  3474     00E1  0A84               	incf	4,f
  3475     00E2  0800               	movf	0,w
  3476     00E3  00F3               	movwf	___expand_heap@n+1
  3477     00E4                     l1347:
  3478     00E4  1283               	bcf	3,5	;RP0=0, select bank0
  3479     00E5  1303               	bcf	3,6	;RP1=0, select bank0
  3480     00E6  0869               	movf	_brkp,w
  3481     00E7  046A               	iorwf	_brkp+1,w
  3482     00E8  1D03               	btfss	3,2
  3483     00E9  28EB               	goto	u651
  3484     00EA  28EC               	goto	u650
  3485     00EB                     u651:
  3486     00EB  28F0               	goto	l786
  3487     00EC                     u650:
  3488     00EC                     l1349:
  3489     00EC  3070               	movlw	low ___heap_hi
  3490     00ED  00E9               	movwf	_brkp
  3491     00EE  3001               	movlw	high ___heap_hi
  3492     00EF  00EA               	movwf	_brkp+1
  3493     00F0                     l786:
  3494     00F0  3000               	movlw	0
  3495     00F1  0273               	subwf	___expand_heap@n+1,w
  3496     00F2  3004               	movlw	4
  3497     00F3  1903               	skipnz
  3498     00F4  0272               	subwf	___expand_heap@n,w
  3499     00F5  1803               	skipnc
  3500     00F6  28F8               	goto	u661
  3501     00F7  28F9               	goto	u660
  3502     00F8                     u661:
  3503     00F8  28FD               	goto	l1353
  3504     00F9                     u660:
  3505     00F9                     l1351:
  3506     00F9  3004               	movlw	4
  3507     00FA  00F2               	movwf	___expand_heap@n
  3508     00FB  3000               	movlw	0
  3509     00FC  00F3               	movwf	___expand_heap@n+1
  3510     00FD                     l1353:
  3511     00FD  0872               	movf	___expand_heap@n,w
  3512     00FE  0269               	subwf	_brkp,w
  3513     00FF  00F4               	movwf	___expand_heap@new_brkp
  3514     0100  086A               	movf	_brkp+1,w
  3515     0101  1C03               	skipc
  3516     0102  036A               	decf	_brkp+1,w
  3517     0103  00F5               	movwf	___expand_heap@new_brkp+1
  3518     0104                     l1355:
  3519     0104  3001               	movlw	high ___heap_lo
  3520     0105  0275               	subwf	___expand_heap@new_brkp+1,w
  3521     0106  3010               	movlw	low ___heap_lo
  3522     0107  1903               	skipnz
  3523     0108  0274               	subwf	___expand_heap@new_brkp,w
  3524     0109  1C03               	skipc
  3525     010A  290C               	goto	u671
  3526     010B  290D               	goto	u670
  3527     010C                     u671:
  3528     010C  2917               	goto	l1359
  3529     010D                     u670:
  3530     010D                     l1357:
  3531     010D  086A               	movf	_brkp+1,w
  3532     010E  0275               	subwf	___expand_heap@new_brkp+1,w
  3533     010F  1D03               	skipz
  3534     0110  2913               	goto	u685
  3535     0111  0869               	movf	_brkp,w
  3536     0112  0274               	subwf	___expand_heap@new_brkp,w
  3537     0113                     u685:
  3538     0113  1C03               	skipc
  3539     0114  2916               	goto	u681
  3540     0115  2917               	goto	u680
  3541     0116                     u681:
  3542     0116  2920               	goto	l1365
  3543     0117                     u680:
  3544     0117                     l1359:
  3545     0117  300C               	movlw	12
  3546     0118  1683               	bsf	3,5	;RP0=1, select bank1
  3547     0119  1303               	bcf	3,6	;RP1=0, select bank1
  3548     011A  00AF               	movwf	_errno^(0+128)
  3549     011B  3000               	movlw	0
  3550     011C  00B0               	movwf	(_errno^(0+128)+1)
  3551     011D                     l1361:
  3552     011D  01F1               	clrf	?___expand_heap
  3553     011E  01F2               	clrf	?___expand_heap+1
  3554     011F  2928               	goto	l791
  3555     0120                     l1365:
  3556     0120  0874               	movf	___expand_heap@new_brkp,w
  3557     0121  00E9               	movwf	_brkp
  3558     0122  0875               	movf	___expand_heap@new_brkp+1,w
  3559     0123  00EA               	movwf	_brkp+1
  3560     0124  0869               	movf	_brkp,w
  3561     0125  00F1               	movwf	?___expand_heap
  3562     0126  086A               	movf	_brkp+1,w
  3563     0127  00F2               	movwf	?___expand_heap+1
  3564     0128                     l791:
  3565     0128  0008               	return
  3566     0129                     __end_of___expand_heap:
  3567                           
  3568                           	psect	text14
  3569     0F9B                     __ptext14:	
  3570 ;; *************** function ___wmul *****************
  3571 ;; Defined at:
  3572 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  multiplier      2    0[COMMON] unsigned int 
  3575 ;;  multiplicand    2    2[COMMON] unsigned int 
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;  product         2    4[COMMON] unsigned int 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  2    0[COMMON] unsigned int 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3587 ;;      Params:         4       0       0       0       0
  3588 ;;      Locals:         2       0       0       0       0
  3589 ;;      Temps:          0       0       0       0       0
  3590 ;;      Totals:         6       0       0       0       0
  3591 ;;Total ram usage:        6 bytes
  3592 ;; Hardware stack levels used: 1
  3593 ;; This function calls:
  3594 ;;		Nothing
  3595 ;; This function is called by:
  3596 ;;		_calloc
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600     0F9B                     ___wmul:	
  3601                           ;psect for function ___wmul
  3602                           
  3603     0F9B                     l1371:	
  3604                           ;incstack = 0
  3605                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3606                           
  3607     0F9B  01F5               	clrf	___wmul@product
  3608     0F9C  01F6               	clrf	___wmul@product+1
  3609     0F9D                     l1373:
  3610     0F9D  1C71               	btfss	___wmul@multiplier,0
  3611     0F9E  2FA0               	goto	u701
  3612     0F9F  2FA1               	goto	u700
  3613     0FA0                     u701:
  3614     0FA0  2FA7               	goto	l257
  3615     0FA1                     u700:
  3616     0FA1                     l1375:
  3617     0FA1  0873               	movf	___wmul@multiplicand,w
  3618     0FA2  07F5               	addwf	___wmul@product,f
  3619     0FA3  1803               	skipnc
  3620     0FA4  0AF6               	incf	___wmul@product+1,f
  3621     0FA5  0874               	movf	___wmul@multiplicand+1,w
  3622     0FA6  07F6               	addwf	___wmul@product+1,f
  3623     0FA7                     l257:
  3624     0FA7  3001               	movlw	1
  3625     0FA8                     u715:
  3626     0FA8  1003               	clrc
  3627     0FA9  0DF3               	rlf	___wmul@multiplicand,f
  3628     0FAA  0DF4               	rlf	___wmul@multiplicand+1,f
  3629     0FAB  3EFF               	addlw	-1
  3630     0FAC  1D03               	skipz
  3631     0FAD  2FA8               	goto	u715
  3632     0FAE                     l1377:
  3633     0FAE  3001               	movlw	1
  3634     0FAF                     u725:
  3635     0FAF  1003               	clrc
  3636     0FB0  0CF2               	rrf	___wmul@multiplier+1,f
  3637     0FB1  0CF1               	rrf	___wmul@multiplier,f
  3638     0FB2  3EFF               	addlw	-1
  3639     0FB3  1D03               	skipz
  3640     0FB4  2FAF               	goto	u725
  3641     0FB5                     l1379:
  3642     0FB5  0871               	movf	___wmul@multiplier,w
  3643     0FB6  0472               	iorwf	___wmul@multiplier+1,w
  3644     0FB7  1D03               	btfss	3,2
  3645     0FB8  2FBA               	goto	u731
  3646     0FB9  2FBB               	goto	u730
  3647     0FBA                     u731:
  3648     0FBA  2F9D               	goto	l1373
  3649     0FBB                     u730:
  3650     0FBB                     l1381:
  3651     0FBB  0876               	movf	___wmul@product+1,w
  3652     0FBC  00F2               	movwf	?___wmul+1
  3653     0FBD  0875               	movf	___wmul@product,w
  3654     0FBE  00F1               	movwf	?___wmul
  3655     0FBF                     l259:
  3656     0FBF  0008               	return
  3657     0FC0                     __end_of___wmul:
  3658                           
  3659                           	psect	text15
  3660     0007                     __ptext15:	
  3661 ;; *************** function _CopyArray *****************
  3662 ;; Defined at:
  3663 ;;		line 80 in file "shape.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  array_          2    0[COMMON] PTR unsigned char 
  3666 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3667 ;;  res             2    2[COMMON] PTR unsigned char 
  3668 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), main@square_1(3), 
  3669 ;;  countElemntA    2    4[COMMON] int 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  y               2    0[BANK0 ] int 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3681 ;;      Params:         6       0       0       0       0
  3682 ;;      Locals:         0       2       0       0       0
  3683 ;;      Temps:          7       0       0       0       0
  3684 ;;      Totals:        13       2       0       0       0
  3685 ;;Total ram usage:       15 bytes
  3686 ;; Hardware stack levels used: 1
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_ChangeOfCoordinates
  3691 ;;		_Rotate
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695     0007                     _CopyArray:	
  3696                           ;psect for function _CopyArray
  3697                           
  3698     0007                     l1455:	
  3699                           ;incstack = 0
  3700                           ; Regs used in _CopyArray: [wreg-fsr0h+status,2+status,0]
  3701                           
  3702                           
  3703                           ;shape.c: 81:     for(int y = 0; y < countElemntArray; y++){
  3704     0007  1283               	bcf	3,5	;RP0=0, select bank0
  3705     0008  1303               	bcf	3,6	;RP1=0, select bank0
  3706     0009  01A0               	clrf	CopyArray@y
  3707     000A  01A1               	clrf	CopyArray@y+1
  3708     000B  283E               	goto	l1461
  3709     000C                     l1457:
  3710                           
  3711                           ;shape.c: 82:         array_[y] = res[y];
  3712     000C  1283               	bcf	3,5	;RP0=0, select bank0
  3713     000D  1303               	bcf	3,6	;RP1=0, select bank0
  3714     000E  0820               	movf	CopyArray@y,w
  3715     000F  0773               	addwf	CopyArray@res,w
  3716     0010  00F8               	movwf	??_CopyArray+1
  3717     0011  0874               	movf	CopyArray@res+1,w
  3718     0012  00F7               	movwf	??_CopyArray
  3719     0013  1803               	skipnc
  3720     0014  0AF7               	incf	??_CopyArray,f
  3721     0015  1FA0               	btfss	CopyArray@y,7
  3722     0016  2818               	goto	u830
  3723     0017  03F7               	decf	??_CopyArray,f
  3724     0018                     u830:
  3725     0018  0877               	movf	??_CopyArray,w
  3726     0019  00F9               	movwf	??_CopyArray+2
  3727     001A  0878               	movf	??_CopyArray+1,w
  3728     001B  0084               	movwf	4
  3729     001C  1783               	bsf	3,7
  3730     001D  1C79               	btfss	??_CopyArray+2,0
  3731     001E  1383               	bcf	3,7
  3732     001F  0800               	movf	0,w
  3733     0020  00FA               	movwf	??_CopyArray+3
  3734     0021  1283               	bcf	3,5	;RP0=0, select bank0
  3735     0022  1303               	bcf	3,6	;RP1=0, select bank0
  3736     0023  0820               	movf	CopyArray@y,w
  3737     0024  0771               	addwf	CopyArray@array_,w
  3738     0025  00FC               	movwf	??_CopyArray+5
  3739     0026  0872               	movf	CopyArray@array_+1,w
  3740     0027  00FB               	movwf	??_CopyArray+4
  3741     0028  1803               	skipnc
  3742     0029  0AFB               	incf	??_CopyArray+4,f
  3743     002A  1FA0               	btfss	CopyArray@y,7
  3744     002B  282D               	goto	u840
  3745     002C  03FB               	decf	??_CopyArray+4,f
  3746     002D                     u840:
  3747     002D  087B               	movf	??_CopyArray+4,w
  3748     002E  00FD               	movwf	??_CopyArray+6
  3749     002F  087C               	movf	??_CopyArray+5,w
  3750     0030  0084               	movwf	4
  3751     0031  1783               	bsf	3,7
  3752     0032  1C7D               	btfss	??_CopyArray+6,0
  3753     0033  1383               	bcf	3,7
  3754     0034  087A               	movf	??_CopyArray+3,w
  3755     0035  0080               	movwf	0
  3756     0036                     l1459:
  3757                           
  3758                           ;shape.c: 83:     }
  3759     0036  3001               	movlw	1
  3760     0037  1283               	bcf	3,5	;RP0=0, select bank0
  3761     0038  1303               	bcf	3,6	;RP1=0, select bank0
  3762     0039  07A0               	addwf	CopyArray@y,f
  3763     003A  1803               	skipnc
  3764     003B  0AA1               	incf	CopyArray@y+1,f
  3765     003C  3000               	movlw	0
  3766     003D  07A1               	addwf	CopyArray@y+1,f
  3767     003E                     l1461:
  3768     003E  0821               	movf	CopyArray@y+1,w
  3769     003F  3A80               	xorlw	128
  3770     0040  00F7               	movwf	??_CopyArray
  3771     0041  0876               	movf	CopyArray@countElemntArray+1,w
  3772     0042  3A80               	xorlw	128
  3773     0043  0277               	subwf	??_CopyArray,w
  3774     0044  1D03               	skipz
  3775     0045  2848               	goto	u855
  3776     0046  0875               	movf	CopyArray@countElemntArray,w
  3777     0047  0220               	subwf	CopyArray@y,w
  3778     0048                     u855:
  3779     0048  1C03               	skipc
  3780     0049  284B               	goto	u851
  3781     004A  284C               	goto	u850
  3782     004B                     u851:
  3783     004B  280C               	goto	l1457
  3784     004C                     u850:
  3785     004C                     l171:
  3786     004C  0008               	return
  3787     004D                     __end_of_CopyArray:
  3788                           
  3789                           	psect	text16
  3790     0202                     __ptext16:	
  3791 ;; *************** function _Reverse *****************
  3792 ;; Defined at:
  3793 ;;		line 70 in file "shape.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  array_          2    0[COMMON] PTR unsigned char 
  3796 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3797 ;;  countElemntA    2    2[COMMON] int 
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;  t               1    0[BANK0 ] unsigned char 
  3800 ;;  j               2    3[BANK0 ] int 
  3801 ;;  i               2    1[BANK0 ] int 
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3811 ;;      Params:         4       0       0       0       0
  3812 ;;      Locals:         0       5       0       0       0
  3813 ;;      Temps:          7       0       0       0       0
  3814 ;;      Totals:        11       5       0       0       0
  3815 ;;Total ram usage:       16 bytes
  3816 ;; Hardware stack levels used: 1
  3817 ;; This function calls:
  3818 ;;		Nothing
  3819 ;; This function is called by:
  3820 ;;		_RotateDirection
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824     0202                     _Reverse:	
  3825                           ;psect for function _Reverse
  3826                           
  3827     0202                     l1499:	
  3828                           ;incstack = 0
  3829                           ; Regs used in _Reverse: [wreg-fsr0h+status,2+status,0]
  3830                           
  3831                           
  3832                           ;shape.c: 70: void Reverse(char * array_, int countElemntArray);shape.c: 71: {;shape.c: 
      +                          72:     for(int i = 0, j = countElemntArray - 1; i < j; i++, j--)
  3833     0202  1283               	bcf	3,5	;RP0=0, select bank0
  3834     0203  1303               	bcf	3,6	;RP1=0, select bank0
  3835     0204  01A1               	clrf	Reverse@i
  3836     0205  01A2               	clrf	Reverse@i+1
  3837     0206                     l1501:
  3838     0206  0873               	movf	Reverse@countElemntArray,w
  3839     0207  3EFF               	addlw	255
  3840     0208  00A3               	movwf	Reverse@j
  3841     0209  0874               	movf	Reverse@countElemntArray+1,w
  3842     020A  1803               	skipnc
  3843     020B  3E01               	addlw	1
  3844     020C  3EFF               	addlw	255
  3845     020D  00A4               	movwf	Reverse@j+1
  3846     020E  2A71               	goto	l1509
  3847     020F                     l1503:
  3848                           
  3849                           ;shape.c: 73:     {;shape.c: 74:         char t = array_[i];
  3850     020F  1283               	bcf	3,5	;RP0=0, select bank0
  3851     0210  1303               	bcf	3,6	;RP1=0, select bank0
  3852     0211  0821               	movf	Reverse@i,w
  3853     0212  0771               	addwf	Reverse@array_,w
  3854     0213  00F6               	movwf	??_Reverse+1
  3855     0214  0872               	movf	Reverse@array_+1,w
  3856     0215  00F5               	movwf	??_Reverse
  3857     0216  1803               	skipnc
  3858     0217  0AF5               	incf	??_Reverse,f
  3859     0218  1FA1               	btfss	Reverse@i,7
  3860     0219  2A1B               	goto	u900
  3861     021A  03F5               	decf	??_Reverse,f
  3862     021B                     u900:
  3863     021B  0875               	movf	??_Reverse,w
  3864     021C  00F7               	movwf	??_Reverse+2
  3865     021D  0876               	movf	??_Reverse+1,w
  3866     021E  0084               	movwf	4
  3867     021F  1783               	bsf	3,7
  3868     0220  1C77               	btfss	??_Reverse+2,0
  3869     0221  1383               	bcf	3,7
  3870     0222  0800               	movf	0,w
  3871     0223  1283               	bcf	3,5	;RP0=0, select bank0
  3872     0224  1303               	bcf	3,6	;RP1=0, select bank0
  3873     0225  00A0               	movwf	Reverse@t
  3874                           
  3875                           ;shape.c: 75:         array_[i] = array_[j];
  3876     0226  0823               	movf	Reverse@j,w
  3877     0227  0771               	addwf	Reverse@array_,w
  3878     0228  00F6               	movwf	??_Reverse+1
  3879     0229  0872               	movf	Reverse@array_+1,w
  3880     022A  00F5               	movwf	??_Reverse
  3881     022B  1803               	skipnc
  3882     022C  0AF5               	incf	??_Reverse,f
  3883     022D  1FA3               	btfss	Reverse@j,7
  3884     022E  2A30               	goto	u910
  3885     022F  03F5               	decf	??_Reverse,f
  3886     0230                     u910:
  3887     0230  0875               	movf	??_Reverse,w
  3888     0231  00F7               	movwf	??_Reverse+2
  3889     0232  0876               	movf	??_Reverse+1,w
  3890     0233  0084               	movwf	4
  3891     0234  1783               	bsf	3,7
  3892     0235  1C77               	btfss	??_Reverse+2,0
  3893     0236  1383               	bcf	3,7
  3894     0237  0800               	movf	0,w
  3895     0238  00F8               	movwf	??_Reverse+3
  3896     0239  1283               	bcf	3,5	;RP0=0, select bank0
  3897     023A  1303               	bcf	3,6	;RP1=0, select bank0
  3898     023B  0821               	movf	Reverse@i,w
  3899     023C  0771               	addwf	Reverse@array_,w
  3900     023D  00FA               	movwf	??_Reverse+5
  3901     023E  0872               	movf	Reverse@array_+1,w
  3902     023F  00F9               	movwf	??_Reverse+4
  3903     0240  1803               	skipnc
  3904     0241  0AF9               	incf	??_Reverse+4,f
  3905     0242  1FA1               	btfss	Reverse@i,7
  3906     0243  2A45               	goto	u920
  3907     0244  03F9               	decf	??_Reverse+4,f
  3908     0245                     u920:
  3909     0245  0879               	movf	??_Reverse+4,w
  3910     0246  00FB               	movwf	??_Reverse+6
  3911     0247  087A               	movf	??_Reverse+5,w
  3912     0248  0084               	movwf	4
  3913     0249  1783               	bsf	3,7
  3914     024A  1C7B               	btfss	??_Reverse+6,0
  3915     024B  1383               	bcf	3,7
  3916     024C  0878               	movf	??_Reverse+3,w
  3917     024D  0080               	movwf	0
  3918                           
  3919                           ;shape.c: 76:         array_[j] = t;
  3920     024E  1283               	bcf	3,5	;RP0=0, select bank0
  3921     024F  1303               	bcf	3,6	;RP1=0, select bank0
  3922     0250  0823               	movf	Reverse@j,w
  3923     0251  0771               	addwf	Reverse@array_,w
  3924     0252  00F6               	movwf	??_Reverse+1
  3925     0253  0872               	movf	Reverse@array_+1,w
  3926     0254  00F5               	movwf	??_Reverse
  3927     0255  1803               	skipnc
  3928     0256  0AF5               	incf	??_Reverse,f
  3929     0257  1FA3               	btfss	Reverse@j,7
  3930     0258  2A5A               	goto	u930
  3931     0259  03F5               	decf	??_Reverse,f
  3932     025A                     u930:
  3933     025A  0875               	movf	??_Reverse,w
  3934     025B  00F7               	movwf	??_Reverse+2
  3935     025C  0876               	movf	??_Reverse+1,w
  3936     025D  0084               	movwf	4
  3937     025E  1783               	bsf	3,7
  3938     025F  1C77               	btfss	??_Reverse+2,0
  3939     0260  1383               	bcf	3,7
  3940     0261  1283               	bcf	3,5	;RP0=0, select bank0
  3941     0262  1303               	bcf	3,6	;RP1=0, select bank0
  3942     0263  0820               	movf	Reverse@t,w
  3943     0264  0080               	movwf	0
  3944     0265                     l1505:
  3945                           
  3946                           ;shape.c: 77:     }
  3947     0265  3001               	movlw	1
  3948     0266  07A1               	addwf	Reverse@i,f
  3949     0267  1803               	skipnc
  3950     0268  0AA2               	incf	Reverse@i+1,f
  3951     0269  3000               	movlw	0
  3952     026A  07A2               	addwf	Reverse@i+1,f
  3953     026B                     l1507:
  3954     026B  30FF               	movlw	255
  3955     026C  07A3               	addwf	Reverse@j,f
  3956     026D  1803               	skipnc
  3957     026E  0AA4               	incf	Reverse@j+1,f
  3958     026F  30FF               	movlw	255
  3959     0270  07A4               	addwf	Reverse@j+1,f
  3960     0271                     l1509:
  3961     0271  0822               	movf	Reverse@i+1,w
  3962     0272  3A80               	xorlw	128
  3963     0273  00F5               	movwf	??_Reverse
  3964     0274  0824               	movf	Reverse@j+1,w
  3965     0275  3A80               	xorlw	128
  3966     0276  0275               	subwf	??_Reverse,w
  3967     0277  1D03               	skipz
  3968     0278  2A7B               	goto	u945
  3969     0279  0823               	movf	Reverse@j,w
  3970     027A  0221               	subwf	Reverse@i,w
  3971     027B                     u945:
  3972     027B  1C03               	skipc
  3973     027C  2A7E               	goto	u941
  3974     027D  2A7F               	goto	u940
  3975     027E                     u941:
  3976     027E  2A0F               	goto	l1503
  3977     027F                     u940:
  3978     027F                     l165:
  3979     027F  0008               	return
  3980     0280                     __end_of_Reverse:
  3981                           
  3982                           	psect	text17
  3983     0129                     __ptext17:	
  3984 ;; *************** function _MovieShape *****************
  3985 ;; Defined at:
  3986 ;;		line 32 in file "shape.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  dir             1    wreg     enum E885
  3989 ;;  _shapePositi    2   10[BANK0 ] PTR struct .
  3990 ;;		 -> main@shapePosition(4), 
  3991 ;;  shapeArray      2   12[BANK0 ] PTR unsigned char 
  3992 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3993 ;;  countElemntA    2   14[BANK0 ] int 
  3994 ;; Auto vars:     Size  Location     Type
  3995 ;;  dir             1   12[COMMON] enum E885
  3996 ;; Return value:  Size  Location     Type
  3997 ;;                  1    wreg      void 
  3998 ;; Registers used:
  3999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4000 ;; Tracked objects:
  4001 ;;		On entry : 0/0
  4002 ;;		On exit  : 0/0
  4003 ;;		Unchanged: 0/0
  4004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4005 ;;      Params:         0       6       0       0       0
  4006 ;;      Locals:         1       0       0       0       0
  4007 ;;      Temps:          2       0       0       0       0
  4008 ;;      Totals:         3       6       0       0       0
  4009 ;;Total ram usage:        9 bytes
  4010 ;; Hardware stack levels used: 1
  4011 ;; Hardware stack levels required when called: 3
  4012 ;; This function calls:
  4013 ;;		_MovieDown
  4014 ;;		_MovieLeft
  4015 ;;		_MovieRigth
  4016 ;;		_MovieUp
  4017 ;;		_ShowShape
  4018 ;;		_SpiClearMatrix
  4019 ;; This function is called by:
  4020 ;;		_ChangeOfCoordinates
  4021 ;; This function uses a non-reentrant model
  4022 ;;
  4023                           
  4024     0129                     _MovieShape:	
  4025                           ;psect for function _MovieShape
  4026                           
  4027                           
  4028                           ;incstack = 0
  4029                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4030                           ;MovieShape@dir stored from wreg
  4031     0129  00FD               	movwf	MovieShape@dir
  4032     012A                     l1571:
  4033                           
  4034                           ;shape.c: 34:     switch (dir){
  4035     012A  295B               	goto	l1583
  4036     012B                     l1573:
  4037                           
  4038                           ;shape.c: 36:             MovieDown(_shapePosition);
  4039     012B  1283               	bcf	3,5	;RP0=0, select bank0
  4040     012C  1303               	bcf	3,6	;RP1=0, select bank0
  4041     012D  082A               	movf	MovieShape@_shapePosition,w
  4042     012E  00F1               	movwf	MovieDown@_shapePosition
  4043     012F  082B               	movf	MovieShape@_shapePosition+1,w
  4044     0130  00F2               	movwf	MovieDown@_shapePosition+1
  4045     0131  120A  158A  2708  120A  118A  	fcall	_MovieDown
  4046                           
  4047                           ;shape.c: 37:             break;
  4048     0136  2974               	goto	l1585
  4049     0137                     l1575:
  4050                           
  4051                           ;shape.c: 39:             MovieUp(_shapePosition);
  4052     0137  1283               	bcf	3,5	;RP0=0, select bank0
  4053     0138  1303               	bcf	3,6	;RP1=0, select bank0
  4054     0139  082A               	movf	MovieShape@_shapePosition,w
  4055     013A  00F1               	movwf	MovieUp@_shapePosition
  4056     013B  082B               	movf	MovieShape@_shapePosition+1,w
  4057     013C  00F2               	movwf	MovieUp@_shapePosition+1
  4058     013D  120A  158A  2744  120A  118A  	fcall	_MovieUp
  4059                           
  4060                           ;shape.c: 40:             break;
  4061     0142  2974               	goto	l1585
  4062     0143                     l1577:
  4063                           
  4064                           ;shape.c: 42:             MovieLeft(_shapePosition);
  4065     0143  1283               	bcf	3,5	;RP0=0, select bank0
  4066     0144  1303               	bcf	3,6	;RP1=0, select bank0
  4067     0145  082A               	movf	MovieShape@_shapePosition,w
  4068     0146  00F1               	movwf	MovieLeft@_shapePosition
  4069     0147  082B               	movf	MovieShape@_shapePosition+1,w
  4070     0148  00F2               	movwf	MovieLeft@_shapePosition+1
  4071     0149  120A  158A  26E5  120A  118A  	fcall	_MovieLeft
  4072                           
  4073                           ;shape.c: 43:             break;
  4074     014E  2974               	goto	l1585
  4075     014F                     l1579:
  4076                           
  4077                           ;shape.c: 45:             MovieRigth(_shapePosition);
  4078     014F  1283               	bcf	3,5	;RP0=0, select bank0
  4079     0150  1303               	bcf	3,6	;RP1=0, select bank0
  4080     0151  082A               	movf	MovieShape@_shapePosition,w
  4081     0152  00F1               	movwf	MovieRigth@_shapePosition
  4082     0153  082B               	movf	MovieShape@_shapePosition+1,w
  4083     0154  00F2               	movwf	MovieRigth@_shapePosition+1
  4084     0155  120A  158A  26CF  120A  118A  	fcall	_MovieRigth
  4085                           
  4086                           ;shape.c: 46:             break;
  4087     015A  2974               	goto	l1585
  4088     015B                     l1583:
  4089     015B  087D               	movf	MovieShape@dir,w
  4090     015C  00FB               	movwf	??_MovieShape
  4091     015D  01FC               	clrf	??_MovieShape+1
  4092                           
  4093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4094                           ; Switch size 1, requested type "simple"
  4095                           ; Number of cases is 1, Range of values is 0 to 0
  4096                           ; switch strategies available:
  4097                           ; Name         Instructions Cycles
  4098                           ; simple_byte            4     3 (average)
  4099                           ; direct_byte           11     8 (fixed)
  4100                           ; jumptable            260     6 (fixed)
  4101                           ;	Chosen strategy is simple_byte
  4102     015E  087C               	movf	??_MovieShape+1,w
  4103     015F  3A00               	xorlw	0	; case 0
  4104     0160  1903               	skipnz
  4105     0161  2963               	goto	l1761
  4106     0162  2974               	goto	l1585
  4107     0163                     l1761:
  4108                           
  4109                           ; Switch size 1, requested type "simple"
  4110                           ; Number of cases is 5, Range of values is 0 to 4
  4111                           ; switch strategies available:
  4112                           ; Name         Instructions Cycles
  4113                           ; simple_byte           16     9 (average)
  4114                           ; direct_byte           23     8 (fixed)
  4115                           ; jumptable            260     6 (fixed)
  4116                           ;	Chosen strategy is simple_byte
  4117     0163  087B               	movf	??_MovieShape,w
  4118     0164  3A00               	xorlw	0	; case 0
  4119     0165  1903               	skipnz
  4120     0166  292B               	goto	l1573
  4121     0167  3A01               	xorlw	1	; case 1
  4122     0168  1903               	skipnz
  4123     0169  2937               	goto	l1575
  4124     016A  3A03               	xorlw	3	; case 2
  4125     016B  1903               	skipnz
  4126     016C  2943               	goto	l1577
  4127     016D  3A01               	xorlw	1	; case 3
  4128     016E  1903               	skipnz
  4129     016F  294F               	goto	l1579
  4130     0170  3A07               	xorlw	7	; case 4
  4131     0171  1903               	skipnz
  4132     0172  2974               	goto	l1585
  4133     0173  2974               	goto	l1585
  4134     0174                     l1585:
  4135                           
  4136                           ;shape.c: 51:     SpiClearMatrix();
  4137     0174  120A  158A  272E  120A  118A  	fcall	_SpiClearMatrix
  4138     0179                     l1587:
  4139                           
  4140                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  4141     0179  1283               	bcf	3,5	;RP0=0, select bank0
  4142     017A  1303               	bcf	3,6	;RP1=0, select bank0
  4143     017B  082A               	movf	MovieShape@_shapePosition,w
  4144     017C  00F5               	movwf	ShowShape@coord
  4145     017D  082B               	movf	MovieShape@_shapePosition+1,w
  4146     017E  00F6               	movwf	ShowShape@coord+1
  4147     017F  082F               	movf	MovieShape@countElemntArray+1,w
  4148     0180  00F8               	movwf	ShowShape@countElemntArray+1
  4149     0181  082E               	movf	MovieShape@countElemntArray,w
  4150     0182  00F7               	movwf	ShowShape@countElemntArray
  4151     0183  082C               	movf	MovieShape@shapeArray,w
  4152     0184  00F9               	movwf	ShowShape@shapeArray
  4153     0185  082D               	movf	MovieShape@shapeArray+1,w
  4154     0186  00FA               	movwf	ShowShape@shapeArray+1
  4155     0187  120A  118A  2280  120A  118A  	fcall	_ShowShape
  4156     018C                     l151:
  4157     018C  0008               	return
  4158     018D                     __end_of_MovieShape:
  4159                           
  4160                           	psect	text18
  4161     0F2E                     __ptext18:	
  4162 ;; *************** function _SpiClearMatrix *****************
  4163 ;; Defined at:
  4164 ;;		line 10 in file "matrix.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  i               1    6[COMMON] unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4178 ;;      Params:         0       0       0       0       0
  4179 ;;      Locals:         1       0       0       0       0
  4180 ;;      Temps:          2       0       0       0       0
  4181 ;;      Totals:         3       0       0       0       0
  4182 ;;Total ram usage:        3 bytes
  4183 ;; Hardware stack levels used: 1
  4184 ;; Hardware stack levels required when called: 2
  4185 ;; This function calls:
  4186 ;;		_SendToSegment
  4187 ;; This function is called by:
  4188 ;;		_MatrixInit
  4189 ;;		_MovieShape
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193     0F2E                     _SpiClearMatrix:	
  4194                           ;psect for function _SpiClearMatrix
  4195                           
  4196     0F2E                     l1545:	
  4197                           ;incstack = 0
  4198                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  4199                           
  4200                           
  4201                           ;matrix.c: 12:   char i = 8;
  4202     0F2E  3008               	movlw	8
  4203     0F2F  00F7               	movwf	SpiClearMatrix@i
  4204     0F30                     l1547:
  4205                           
  4206                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  4207     0F30  0877               	movf	SpiClearMatrix@i,w
  4208     0F31  00F5               	movwf	??_SpiClearMatrix
  4209     0F32  01F6               	clrf	??_SpiClearMatrix+1
  4210     0F33  0875               	movf	??_SpiClearMatrix,w
  4211     0F34  00F2               	movwf	SendToSegment@segment
  4212     0F35  0876               	movf	??_SpiClearMatrix+1,w
  4213     0F36  00F3               	movwf	SendToSegment@segment+1
  4214     0F37  01F4               	clrf	SendToSegment@data
  4215     0F38  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  4216     0F3D                     l1549:
  4217                           
  4218                           ;matrix.c: 16:   } while (--i);
  4219     0F3D  3001               	movlw	1
  4220     0F3E  02F7               	subwf	SpiClearMatrix@i,f
  4221     0F3F  1D03               	btfss	3,2
  4222     0F40  2F42               	goto	u1021
  4223     0F41  2F43               	goto	u1020
  4224     0F42                     u1021:
  4225     0F42  2F30               	goto	l1547
  4226     0F43                     u1020:
  4227     0F43                     l104:
  4228     0F43  0008               	return
  4229     0F44                     __end_of_SpiClearMatrix:
  4230                           
  4231                           	psect	text19
  4232     0280                     __ptext19:	
  4233 ;; *************** function _ShowShape *****************
  4234 ;; Defined at:
  4235 ;;		line 8 in file "shape.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  coord           2    4[COMMON] PTR struct .
  4238 ;;		 -> main@shapePosition(4), 
  4239 ;;  countElemntA    2    6[COMMON] int 
  4240 ;;  shapeArray      2    8[COMMON] PTR unsigned char 
  4241 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  pos             2    8[BANK0 ] int 
  4244 ;;  _pos            2    6[BANK0 ] int 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4254 ;;      Params:         6       0       0       0       0
  4255 ;;      Locals:         0       4       0       0       0
  4256 ;;      Temps:          0       6       0       0       0
  4257 ;;      Totals:         6      10       0       0       0
  4258 ;;Total ram usage:       16 bytes
  4259 ;; Hardware stack levels used: 1
  4260 ;; Hardware stack levels required when called: 2
  4261 ;; This function calls:
  4262 ;;		_SendToSegment
  4263 ;; This function is called by:
  4264 ;;		_MovieShape
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268     0280                     _ShowShape:	
  4269                           ;psect for function _ShowShape
  4270                           
  4271     0280                     l1551:	
  4272                           ;incstack = 0
  4273                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4274                           
  4275     0280                     l1553:
  4276                           
  4277                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  4278     0280  0875               	movf	ShowShape@coord,w
  4279     0281  0084               	movwf	4
  4280     0282  1783               	bsf	3,7
  4281     0283  1C76               	btfss	ShowShape@coord+1,0
  4282     0284  1383               	bcf	3,7
  4283     0285  0800               	movf	0,w
  4284     0286  1283               	bcf	3,5	;RP0=0, select bank0
  4285     0287  1303               	bcf	3,6	;RP1=0, select bank0
  4286     0288  00A0               	movwf	??_ShowShape
  4287     0289  0A84               	incf	4,f
  4288     028A  0800               	movf	0,w
  4289     028B  00A1               	movwf	??_ShowShape+1
  4290     028C  0820               	movf	??_ShowShape,w
  4291     028D  3E01               	addlw	1
  4292     028E  00A8               	movwf	ShowShape@pos
  4293     028F  0821               	movf	??_ShowShape+1,w
  4294     0290  1803               	skipnc
  4295     0291  3E01               	addlw	1
  4296     0292  3E00               	addlw	0
  4297     0293  00A9               	movwf	ShowShape@pos+1
  4298     0294  2AED               	goto	l1561
  4299     0295                     l1555:
  4300                           
  4301                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  4302     0295  0875               	movf	ShowShape@coord,w
  4303     0296  0084               	movwf	4
  4304     0297  1783               	bsf	3,7
  4305     0298  1C76               	btfss	ShowShape@coord+1,0
  4306     0299  1383               	bcf	3,7
  4307     029A  0800               	movf	0,w
  4308     029B  1283               	bcf	3,5	;RP0=0, select bank0
  4309     029C  1303               	bcf	3,6	;RP1=0, select bank0
  4310     029D  00A0               	movwf	??_ShowShape
  4311     029E  0A84               	incf	4,f
  4312     029F  0800               	movf	0,w
  4313     02A0  00A1               	movwf	??_ShowShape+1
  4314     02A1  0820               	movf	??_ShowShape,w
  4315     02A2  0228               	subwf	ShowShape@pos,w
  4316     02A3  00A2               	movwf	??_ShowShape+2
  4317     02A4  0821               	movf	??_ShowShape+1,w
  4318     02A5  1C03               	skipc
  4319     02A6  0A21               	incf	??_ShowShape+1,w
  4320     02A7  0229               	subwf	ShowShape@pos+1,w
  4321     02A8  00A3               	movwf	??_ShowShape+3
  4322     02A9  0822               	movf	??_ShowShape+2,w
  4323     02AA  3EFF               	addlw	255
  4324     02AB  00A6               	movwf	ShowShape@_pos
  4325     02AC  0823               	movf	??_ShowShape+3,w
  4326     02AD  1803               	skipnc
  4327     02AE  3E01               	addlw	1
  4328     02AF  3EFF               	addlw	255
  4329     02B0  00A7               	movwf	ShowShape@_pos+1
  4330     02B1                     l1557:
  4331                           
  4332                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  4333     02B1  0829               	movf	ShowShape@pos+1,w
  4334     02B2  00F3               	movwf	SendToSegment@segment+1
  4335     02B3  0828               	movf	ShowShape@pos,w
  4336     02B4  00F2               	movwf	SendToSegment@segment
  4337     02B5  0826               	movf	ShowShape@_pos,w
  4338     02B6  0779               	addwf	ShowShape@shapeArray,w
  4339     02B7  00A1               	movwf	??_ShowShape+1
  4340     02B8  087A               	movf	ShowShape@shapeArray+1,w
  4341     02B9  00A0               	movwf	??_ShowShape
  4342     02BA  1803               	skipnc
  4343     02BB  0AA0               	incf	??_ShowShape,f
  4344     02BC  1FA6               	btfss	ShowShape@_pos,7
  4345     02BD  2ABF               	goto	u1030
  4346     02BE  03A0               	decf	??_ShowShape,f
  4347     02BF                     u1030:
  4348     02BF  1283               	bcf	3,5	;RP0=0, select bank0
  4349     02C0  1303               	bcf	3,6	;RP1=0, select bank0
  4350     02C1  0820               	movf	??_ShowShape,w
  4351     02C2  00A2               	movwf	??_ShowShape+2
  4352     02C3  0821               	movf	??_ShowShape+1,w
  4353     02C4  0084               	movwf	4
  4354     02C5  1783               	bsf	3,7
  4355     02C6  1C22               	btfss	??_ShowShape+2,0
  4356     02C7  1383               	bcf	3,7
  4357     02C8  0800               	movf	0,w
  4358     02C9  00A3               	movwf	??_ShowShape+3
  4359     02CA  0875               	movf	ShowShape@coord,w
  4360     02CB  3E02               	addlw	2
  4361     02CC  00A4               	movwf	??_ShowShape+4
  4362     02CD  0876               	movf	ShowShape@coord+1,w
  4363     02CE  1803               	skipnc
  4364     02CF  3E01               	addlw	1
  4365     02D0  3E00               	addlw	0
  4366     02D1  00A5               	movwf	??_ShowShape+5
  4367     02D2  0824               	movf	??_ShowShape+4,w
  4368     02D3  0084               	movwf	4
  4369     02D4  1783               	bsf	3,7
  4370     02D5  1C25               	btfss	??_ShowShape+5,0
  4371     02D6  1383               	bcf	3,7
  4372     02D7  0A00               	incf	0,w
  4373     02D8  2ADB               	goto	u1044
  4374     02D9                     u1045:
  4375     02D9  1003               	clrc
  4376     02DA  0DA3               	rlf	??_ShowShape+3,f
  4377     02DB                     u1044:
  4378     02DB  3EFF               	addlw	-1
  4379     02DC  1D03               	skipz
  4380     02DD  2AD9               	goto	u1045
  4381     02DE  0823               	movf	??_ShowShape+3,w
  4382     02DF  00F4               	movwf	SendToSegment@data
  4383     02E0  120A  158A  271B  120A  118A  	fcall	_SendToSegment
  4384     02E5                     l1559:
  4385                           
  4386                           ;shape.c: 13:     }
  4387     02E5  3001               	movlw	1
  4388     02E6  1283               	bcf	3,5	;RP0=0, select bank0
  4389     02E7  1303               	bcf	3,6	;RP1=0, select bank0
  4390     02E8  07A8               	addwf	ShowShape@pos,f
  4391     02E9  1803               	skipnc
  4392     02EA  0AA9               	incf	ShowShape@pos+1,f
  4393     02EB  3000               	movlw	0
  4394     02EC  07A9               	addwf	ShowShape@pos+1,f
  4395     02ED                     l1561:
  4396     02ED  0875               	movf	ShowShape@coord,w
  4397     02EE  0084               	movwf	4
  4398     02EF  1783               	bsf	3,7
  4399     02F0  1C76               	btfss	ShowShape@coord+1,0
  4400     02F1  1383               	bcf	3,7
  4401     02F2  0800               	movf	0,w
  4402     02F3  00A0               	movwf	??_ShowShape
  4403     02F4  0A84               	incf	4,f
  4404     02F5  0800               	movf	0,w
  4405     02F6  00A1               	movwf	??_ShowShape+1
  4406     02F7  0877               	movf	ShowShape@countElemntArray,w
  4407     02F8  0720               	addwf	??_ShowShape,w
  4408     02F9  00A2               	movwf	??_ShowShape+2
  4409     02FA  0878               	movf	ShowShape@countElemntArray+1,w
  4410     02FB  1803               	skipnc
  4411     02FC  0A78               	incf	ShowShape@countElemntArray+1,w
  4412     02FD  0721               	addwf	??_ShowShape+1,w
  4413     02FE  00A3               	movwf	??_ShowShape+3
  4414     02FF  0823               	movf	??_ShowShape+3,w
  4415     0300  3A80               	xorlw	128
  4416     0301  00A4               	movwf	??_ShowShape+4
  4417     0302  0829               	movf	ShowShape@pos+1,w
  4418     0303  3A80               	xorlw	128
  4419     0304  0224               	subwf	??_ShowShape+4,w
  4420     0305  1D03               	skipz
  4421     0306  2B09               	goto	u1055
  4422     0307  0828               	movf	ShowShape@pos,w
  4423     0308  0222               	subwf	??_ShowShape+2,w
  4424     0309                     u1055:
  4425     0309  1803               	skipnc
  4426     030A  2B0C               	goto	u1051
  4427     030B  2B0D               	goto	u1050
  4428     030C                     u1051:
  4429     030C  2A95               	goto	l1555
  4430     030D                     u1050:
  4431     030D                     l129:
  4432     030D  0008               	return
  4433     030E                     __end_of_ShowShape:
  4434                           
  4435                           	psect	text20
  4436     0F1B                     __ptext20:	
  4437 ;; *************** function _SendToSegment *****************
  4438 ;; Defined at:
  4439 ;;		line 34 in file "matrix.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  segment         2    1[COMMON] int 
  4442 ;;  data            1    3[COMMON] unsigned char 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      void 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0, pclath, cstack
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4454 ;;      Params:         3       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0
  4457 ;;      Totals:         3       0       0       0       0
  4458 ;;Total ram usage:        3 bytes
  4459 ;; Hardware stack levels used: 1
  4460 ;; Hardware stack levels required when called: 1
  4461 ;; This function calls:
  4462 ;;		_SpiSendByte
  4463 ;; This function is called by:
  4464 ;;		_SpiClearMatrix
  4465 ;;		_MatrixInit
  4466 ;;		_ShowShape
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470     0F1B                     _SendToSegment:	
  4471                           ;psect for function _SendToSegment
  4472                           
  4473     0F1B                     l1493:	
  4474                           ;incstack = 0
  4475                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  4476                           
  4477                           
  4478                           ;matrix.c: 35:     RA5 = 0;
  4479     0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  4480     0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  4481     0F1D  1285               	bcf	5,5	;volatile
  4482     0F1E                     l1495:
  4483                           
  4484                           ;matrix.c: 36:     SpiSendByte((char)segment);
  4485     0F1E  0872               	movf	SendToSegment@segment,w
  4486     0F1F  120A  158A  26DA  120A  158A  	fcall	_SpiSendByte
  4487                           
  4488                           ;matrix.c: 37:     SpiSendByte(data);
  4489     0F24  0874               	movf	SendToSegment@data,w
  4490     0F25  120A  158A  26DA  120A  158A  	fcall	_SpiSendByte
  4491     0F2A                     l1497:
  4492                           
  4493                           ;matrix.c: 38:     RA5 = 1;
  4494     0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  4495     0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  4496     0F2C  1685               	bsf	5,5	;volatile
  4497     0F2D                     l110:
  4498     0F2D  0008               	return
  4499     0F2E                     __end_of_SendToSegment:
  4500                           
  4501                           	psect	text21
  4502     0EDA                     __ptext21:	
  4503 ;; *************** function _SpiSendByte *****************
  4504 ;; Defined at:
  4505 ;;		line 18 in file "spi.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;  data            1    wreg     unsigned char 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  data            1    0[COMMON] unsigned char 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4519 ;;      Params:         0       0       0       0       0
  4520 ;;      Locals:         1       0       0       0       0
  4521 ;;      Temps:          0       0       0       0       0
  4522 ;;      Totals:         1       0       0       0       0
  4523 ;;Total ram usage:        1 bytes
  4524 ;; Hardware stack levels used: 1
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_SendToSegment
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532     0EDA                     _SpiSendByte:	
  4533                           ;psect for function _SpiSendByte
  4534                           
  4535                           
  4536                           ;incstack = 0
  4537                           ; Regs used in _SpiSendByte: [wreg]
  4538                           ;SpiSendByte@data stored from wreg
  4539     0EDA  00F1               	movwf	SpiSendByte@data
  4540     0EDB                     l1369:
  4541                           
  4542                           ;spi.c: 19:     SSPBUF = data;
  4543     0EDB  0871               	movf	SpiSendByte@data,w
  4544     0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  4545     0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  4546     0EDE  0093               	movwf	19	;volatile
  4547     0EDF                     l88:	
  4548                           ;spi.c: 20:     while (!SSPIF);
  4549                           
  4550     0EDF  1D8C               	btfss	12,3	;volatile
  4551     0EE0  2EE2               	goto	u691
  4552     0EE1  2EE3               	goto	u690
  4553     0EE2                     u691:
  4554     0EE2  2EDF               	goto	l88
  4555     0EE3                     u690:
  4556     0EE3                     l90:
  4557                           
  4558                           ;spi.c: 21:     SSPIF = 0;
  4559     0EE3  118C               	bcf	12,3	;volatile
  4560     0EE4                     l91:
  4561     0EE4  0008               	return
  4562     0EE5                     __end_of_SpiSendByte:
  4563                           
  4564                           	psect	text22
  4565     0F44                     __ptext22:	
  4566 ;; *************** function _MovieUp *****************
  4567 ;; Defined at:
  4568 ;;		line 20 in file "shape.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4571 ;;		 -> main@shapePosition(4), 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;		None
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4583 ;;      Params:         2       0       0       0       0
  4584 ;;      Locals:         0       0       0       0       0
  4585 ;;      Temps:          2       0       0       0       0
  4586 ;;      Totals:         4       0       0       0       0
  4587 ;;Total ram usage:        4 bytes
  4588 ;; Hardware stack levels used: 1
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_MovieShape
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596     0F44                     _MovieUp:	
  4597                           ;psect for function _MovieUp
  4598                           
  4599     0F44                     l1565:	
  4600                           ;incstack = 0
  4601                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4602                           
  4603                           
  4604                           ;shape.c: 21:     _shapePosition->y--;
  4605     0F44  0871               	movf	MovieUp@_shapePosition,w
  4606     0F45  3E02               	addlw	2
  4607     0F46  00F3               	movwf	??_MovieUp
  4608     0F47  0872               	movf	MovieUp@_shapePosition+1,w
  4609     0F48  1803               	skipnc
  4610     0F49  3E01               	addlw	1
  4611     0F4A  3E00               	addlw	0
  4612     0F4B  00F4               	movwf	??_MovieUp+1
  4613     0F4C  0873               	movf	??_MovieUp,w
  4614     0F4D  0084               	movwf	4
  4615     0F4E  1783               	bsf	3,7
  4616     0F4F  1C74               	btfss	??_MovieUp+1,0
  4617     0F50  1383               	bcf	3,7
  4618     0F51  30FF               	movlw	255
  4619     0F52  0780               	addwf	0,f
  4620     0F53  0F84               	incfsz	4,f
  4621     0F54  0800               	movf	0,w
  4622     0F55  1803               	skipnc
  4623     0F56  0A00               	incf	0,w
  4624     0F57  00FF               	movwf	btemp+1
  4625     0F58  30FF               	movlw	255
  4626     0F59  077F               	addwf	btemp+1,w
  4627     0F5A  0080               	movwf	0
  4628     0F5B  0384               	decf	4,f
  4629     0F5C                     l135:
  4630     0F5C  0008               	return
  4631     0F5D                     __end_of_MovieUp:
  4632                           
  4633                           	psect	text23
  4634     0ECF                     __ptext23:	
  4635 ;; *************** function _MovieRigth *****************
  4636 ;; Defined at:
  4637 ;;		line 28 in file "shape.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4640 ;;		 -> main@shapePosition(4), 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4652 ;;      Params:         2       0       0       0       0
  4653 ;;      Locals:         0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0
  4655 ;;      Totals:         2       0       0       0       0
  4656 ;;Total ram usage:        2 bytes
  4657 ;; Hardware stack levels used: 1
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_MovieShape
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665     0ECF                     _MovieRigth:	
  4666                           ;psect for function _MovieRigth
  4667                           
  4668     0ECF                     l1569:	
  4669                           ;incstack = 0
  4670                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  4671                           
  4672                           
  4673                           ;shape.c: 29:     _shapePosition->x++;
  4674     0ECF  0871               	movf	MovieRigth@_shapePosition,w
  4675     0ED0  0084               	movwf	4
  4676     0ED1  1783               	bsf	3,7
  4677     0ED2  1C72               	btfss	MovieRigth@_shapePosition+1,0
  4678     0ED3  1383               	bcf	3,7
  4679     0ED4  3001               	movlw	1
  4680     0ED5  0780               	addwf	0,f
  4681     0ED6  0A84               	incf	4,f
  4682     0ED7  1803               	skipnc
  4683     0ED8  0A80               	incf	0,f
  4684     0ED9                     l141:
  4685     0ED9  0008               	return
  4686     0EDA                     __end_of_MovieRigth:
  4687                           
  4688                           	psect	text24
  4689     0EE5                     __ptext24:	
  4690 ;; *************** function _MovieLeft *****************
  4691 ;; Defined at:
  4692 ;;		line 24 in file "shape.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4695 ;;		 -> main@shapePosition(4), 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;		None
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      void 
  4700 ;; Registers used:
  4701 ;;		wreg, fsr0l, fsr0h, btemp+1
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4707 ;;      Params:         2       0       0       0       0
  4708 ;;      Locals:         0       0       0       0       0
  4709 ;;      Temps:          0       0       0       0       0
  4710 ;;      Totals:         2       0       0       0       0
  4711 ;;Total ram usage:        2 bytes
  4712 ;; Hardware stack levels used: 1
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_MovieShape
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720     0EE5                     _MovieLeft:	
  4721                           ;psect for function _MovieLeft
  4722                           
  4723     0EE5                     l1567:	
  4724                           ;incstack = 0
  4725                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  4726                           
  4727                           
  4728                           ;shape.c: 25:     _shapePosition->x--;
  4729     0EE5  0871               	movf	MovieLeft@_shapePosition,w
  4730     0EE6  0084               	movwf	4
  4731     0EE7  1783               	bsf	3,7
  4732     0EE8  1C72               	btfss	MovieLeft@_shapePosition+1,0
  4733     0EE9  1383               	bcf	3,7
  4734     0EEA  30FF               	movlw	255
  4735     0EEB  0780               	addwf	0,f
  4736     0EEC  0F84               	incfsz	4,f
  4737     0EED  0800               	movf	0,w
  4738     0EEE  1803               	skipnc
  4739     0EEF  0A00               	incf	0,w
  4740     0EF0  00FF               	movwf	btemp+1
  4741     0EF1  30FF               	movlw	255
  4742     0EF2  077F               	addwf	btemp+1,w
  4743     0EF3  0080               	movwf	0
  4744     0EF4  0384               	decf	4,f
  4745     0EF5                     l138:
  4746     0EF5  0008               	return
  4747     0EF6                     __end_of_MovieLeft:
  4748                           
  4749                           	psect	text25
  4750     0F08                     __ptext25:	
  4751 ;; *************** function _MovieDown *****************
  4752 ;; Defined at:
  4753 ;;		line 16 in file "shape.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4756 ;;		 -> main@shapePosition(4), 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4768 ;;      Params:         2       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0
  4770 ;;      Temps:          2       0       0       0       0
  4771 ;;      Totals:         4       0       0       0       0
  4772 ;;Total ram usage:        4 bytes
  4773 ;; Hardware stack levels used: 1
  4774 ;; This function calls:
  4775 ;;		Nothing
  4776 ;; This function is called by:
  4777 ;;		_MovieShape
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781     0F08                     _MovieDown:	
  4782                           ;psect for function _MovieDown
  4783                           
  4784     0F08                     l1563:	
  4785                           ;incstack = 0
  4786                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  4787                           
  4788                           
  4789                           ;shape.c: 17:     _shapePosition->y++;
  4790     0F08  0871               	movf	MovieDown@_shapePosition,w
  4791     0F09  3E02               	addlw	2
  4792     0F0A  00F3               	movwf	??_MovieDown
  4793     0F0B  0872               	movf	MovieDown@_shapePosition+1,w
  4794     0F0C  1803               	skipnc
  4795     0F0D  3E01               	addlw	1
  4796     0F0E  3E00               	addlw	0
  4797     0F0F  00F4               	movwf	??_MovieDown+1
  4798     0F10  0873               	movf	??_MovieDown,w
  4799     0F11  0084               	movwf	4
  4800     0F12  1783               	bsf	3,7
  4801     0F13  1C74               	btfss	??_MovieDown+1,0
  4802     0F14  1383               	bcf	3,7
  4803     0F15  3001               	movlw	1
  4804     0F16  0780               	addwf	0,f
  4805     0F17  0A84               	incf	4,f
  4806     0F18  1803               	skipnc
  4807     0F19  0A80               	incf	0,f
  4808     0F1A                     l132:
  4809     0F1A  0008               	return
  4810     0F1B                     __end_of_MovieDown:
  4811     0002                     ___latbits      equ	2
  4812     007E                     btemp           set	126	;btemp
  4813     007E                     wtemp0          set	126
  4814                           
  4815                           	psect	config
  4816                           
  4817                           ;Config register CONFIG @ 0x2007
  4818                           ;	Oscillator Selection bits
  4819                           ;	FOSC = HS, HS oscillator
  4820                           ;	Watchdog Timer Enable bit
  4821                           ;	WDTE = OFF, WDT disabled
  4822                           ;	Power-up Timer Enable bit
  4823                           ;	PWRTE = OFF, PWRT disabled
  4824                           ;	FLASH Program Memory Code Protection bits
  4825                           ;	CP = OFF, Code protection off
  4826                           ;	Brown-out Reset Enable bit
  4827                           ;	BOREN = OFF, BOR disabled
  4828                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  4829                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4830                           ;	Data EE Memory Code Protection
  4831                           ;	CPD = OFF, Code Protection off
  4832                           ;	FLASH Program Memory Write Enable
  4833                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  4834                           ;	In-Circuit Debugger Mode bit
  4835                           ;	DEBUG = 0x1, unprogrammed default
  4836     2007                     	org	8199
  4837     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     73      79
    BANK1            80      9      20
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    calloc@new_ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK1[3]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ChangeOfCoordinates@rotateArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    CopyArray@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    CopyArray@res	PTR unsigned char  size(2) Largest target is 3
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), main@square_1(BANK1[3]), NULL(NULL[0]), 

    __expand_heap@new_brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __expand_heap@pn	PTR unsigned int  size(1) Largest target is 2
		 -> malloc@m(BANK0[2]), 

    free@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@cptr	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@cur	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@end	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@new	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@p	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@sz	PTR unsigned int  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    Reverse@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    Rotate@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    Rotate@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    RotateDirection@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    S693$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ?___simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____expand_heap	PTR void  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl	PTR void  size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp__calloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _ChangeOfCoordinates->_CopyArray
    _ChangeOfCoordinates->_MovieShape
    _Rotate->_CopyArray
    _calloc->_malloc
    _calloc->_memset
    _memset->___wmul
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_RotateDirection
    _RotateDirection->_Rotate
    _Rotate->_calloc
    _calloc->_malloc
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    7141
                                              0 BANK1      9     9      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 14     9      5    6728
                                             59 BANK0     14     9      5
                          _CopyArray
                         _MovieShape
                    _RotateDirection
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (2) _RotateDirection                                      8     2      6    3218
                                             51 BANK0      8     2      6
                            _Reverse
                             _Rotate
 ---------------------------------------------------------------------------------
 (3) _Rotate                                              21    17      4    2654
                                             30 BANK0     21    17      4
                          _CopyArray
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (2) _free                                                12    10      2     290
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (2) _calloc                                               6     2      4    1815
                                             24 BANK0      6     2      4
                             ___wmul
                             _malloc
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6      99
                                              6 COMMON     6     0      6
                                              0 BANK0      2     2      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _malloc                                              14    12      2    1461
                                              8 COMMON     4     2      2
                                             14 BANK0     10    10      0
                      ___expand_heap
                 ___simple_search_fl
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___simple_search_fl                                  22    20      2     827
                                              0 COMMON     8     6      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (4) ___expand_heap                                        5     4      1     136
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      96
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _CopyArray                                           15     9      6     140
                                              0 COMMON    13     7      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Reverse                                             16    12      4     273
                                              0 COMMON    11     7      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           9     3      6     729
                                             10 COMMON     3     3      0
                                             10 BANK0      6     0      6
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           16    10      6     312
                                              4 COMMON     6     0      6
                                              0 BANK0     10    10      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _CopyArray
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
     _RotateDirection
       _Reverse
       _Rotate
         _CopyArray
         _calloc
           ___wmul
           _malloc
             ___expand_heap
             ___simple_search_fl
             ___wmul (ARG)
           _memset
             ___wmul (ARG)
         _free
     _calloc
     _free
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               85      0       0      0.0%
BITBANK3            85      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      9      20     25.0%
BITBANK1            80      0       0      0.0%
BANK0               80     73      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0     112      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 19 12:01:33 2024

                      _SpiClearMatrix 0F2E                                     pc 0002  
                                  l51 0563                                    l61 0201  
                                  l90 0EE3                                    l91 0EE4  
                                  l68 0ECE                                    l85 0F07  
                                  l88 0EDF                                    fsr 0004  
                 ___wmul@multiplicand 0073                       SpiSendByte@data 0071  
                                 l110 0F2D                                   l104 0F43  
                                 l107 0FFF                                   l123 0F79  
                                 l132 0F1A                                   l141 0ED9  
                                 l135 0F5C                                   l151 018C  
                                 l129 030D                                   l138 0EF5  
                                 l171 004C                                   l165 027F  
                                 l159 03B2                                   l257 0FA7  
                                 l259 0FBF                                   l721 00DB  
                                 l735 0705                                   l727 07D7  
                                 l744 0651                                   l738 07AE  
                                 l770 0457                                   l772 044A  
                                 l764 03C3                                   l791 0128  
                                 l768 047C                                   l786 00F0  
                                 l797 0F9A                                   _RA5 002D  
                                 u600 06FC                                   u601 06FB  
                                 u610 0722                                   u611 0721  
                                 u700 0FA1                                   u620 0728  
                                 u701 0FA0                                   u621 0727  
                                 u605 06F8                                   u630 0756  
                                 u550 0660                                   u631 0755  
                                 u551 065F                                   u640 07B8  
                                 u560 067C                                   u800 0446  
                                 u641 07B7                                   u561 067B  
                                 u801 0445                                   u730 0FBB  
                                 u650 00EC                                   u570 0682  
                                 u810 0F9A                                   u731 0FBA  
                                 u715 0FA8                                   u651 00EB  
                                 u571 0681                                   u811 0F99  
                                 u900 021B                                   u660 00F9  
                                 u580 06D8                                   u740 03BD  
                                 u820 00B8                                   u725 0FAF  
                                 u661 00F8                                   u645 07B4  
                                 u581 06D7                                   u565 0678  
                                 u805 0442                                   u741 03BC  
                                 u821 00B7                                   u910 0230  
                                 u830 0018                                   u670 010D  
                                 u590 06DE                                   u750 03CC  
                                 u671 010C                                   u591 06DD  
                                 u751 03CB                                   u920 0245  
                                 u840 002D                                   u680 0117  
                                 u760 03E0                                   u681 0116  
                                 u585 06D4                                   u761 03DF  
                                 u690 0EE3                                   u930 025A  
                                 u850 004C                                   u770 03FE  
                                 u691 0EE2                                   u851 004B  
                                 u771 03FD                                   u940 027F  
                                 u780 0416                                   u860 056E  
                                 u941 027E                                   u685 0113  
                                 u781 0415                                   u861 056D  
                                 u790 0433                                   u870 0584  
                                 u950 0329                                   u855 0048  
                                 u791 0432                                   u871 0583  
                                 u951 0328                                   u880 059A  
                                 u960 0335                                   u945 027B  
                                 u785 0412                                   u881 0599  
                                 u961 0334                                   u890 060A  
                                 u970 0344                                   u891 0609  
                                 u971 0343                                   u980 034F  
                                 u885 0596                                   u895 0606  
                                 u994 035E                                   u995 035C  
                                 fsr0 0004                                   indf 0000  
    RotateDirection@_countElemntArray 0057                                  l1301 06BB  
                                l1321 0728                                  l1313 06FD  
                                l1305 06C4                                  l1401 03E9  
                                l1331 07AA                                  l1323 0756  
                                l1315 0709                                  l1307 06D8  
                                l1411 0420                                  l1403 03E9  
                                l1501 0206                                  l1333 07B8  
                                l1325 0770                                  l1309 06DE  
                                l1317 071C                                  l1421 0446  
                                l1413 042D                                  l1405 03F8  
                                l1503 020F                                  l1351 00F9  
                                l1335 07BD                                  l1327 077A  
                                l1319 0722                                  l1431 0473  
                                l1423 045D                                  l1407 03FE  
                                l1511 030E                                  l1505 0265  
                                l1361 011D                                  l1353 00FD  
                                l1345 00DC                                  l1337 07CF  
                                l1329 0798                                  l1425 0461  
                                l1409 0416                                  l1433 0478  
                                l1441 0F88                                  l1521 0336  
                                l1513 0323                                  l1601 01B8  
                                l1507 026B                                  l1371 0F9B  
                                l1355 0104                                  l1347 00E4  
                                l1291 0663                                  l1283 0652  
                                l1427 046B                                  l1419 0434  
                                l1443 0F8C                                  l1451 00D5  
                                l1531 0382                                  l1523 033E  
                                l1515 0329                                  l1611 01D9  
                                l1603 01C8                                  l1509 0271  
                                l1461 003E                                  l1381 0FBB  
                                l1373 0F9D                                  l1365 0120  
                                l1357 010D                                  l1349 00EC  
                                l1293 0668                                  l1285 065A  
                                l1429 046F                                  l1437 0F7A  
                                l1445 0094                                  l1533 0388  
                                l1525 0340                                  l1541 0396  
                                l1517 0331                                  l1613 01E1  
                                l1551 0280                                  l1455 0007  
                                l1375 0FA1                                  l1359 0117  
                                l1295 067C                                  l1287 0660  
                                l1391 03CC                                  l1439 0F81  
                                l1447 00B2                                  l1471 059A  
                                l1463 0564                                  l1543 03A7  
                                l1631 0FC0                                  l1623 0EF6  
                                l1369 0EDB                                  l1561 02ED  
                                l1553 0280                                  l1545 0F2E  
                                l1457 000C                                  l1377 0FAE  
                                l1297 0682                                  l1393 03D1  
                                l1385 03B3                                  l1449 00B8  
                                l1473 05BF                                  l1481 05E6  
                                l1537 038F                                  l1529 0345  
                                l1609 01CA                                  l1617 01EF  
                                l1641 0FEF                                  l1633 0FCC  
                                l1625 0EF9                                  l1563 0F08  
                                l1555 0295                                  l1547 0F30  
                                l1571 012A                                  l1459 0036  
                                l1379 0FB5                                  l1299 06A8  
                                l1395 03E0                                  l1387 03B7  
                                l1483 060A                                  l1475 05E1  
                                l1467 056F                                  l1651 047D  
                                l1643 0FFA                                  l1635 0FCF  
                                l1627 0F01                                  l1565 0F44  
                                l1493 0F1B                                  l1557 02B1  
                                l1549 0F3D                                  l1573 012B  
                                l1397 03E6                                  l1389 03BD  
                                l1469 0584                                  l1661 04AC  
                                l1653 04A3                                  l1637 0FD9  
                                l1645 0EC8                                  l1629 0F03  
                                l1567 0EE5                                  l1495 0F1E  
                                l1559 02E5                                  l1575 0137  
                                l1583 015B                                  l1487 062D  
                                l1663 04BF                                  l1671 04F8  
                                l1655 04A7                                  l1639 0FE4  
                                l1647 0F5D                                  l1569 0ECF  
                                l1497 0F2A                                  l1761 0163  
                                l1577 0143                                  l1585 0174  
                                l1489 0640                                  l1593 018D  
                                l1681 054B                                  l1665 04D2  
                                l1673 050D                                  l1649 0F67  
                                l1587 0179                                  l1579 014F  
                                l1499 0202                                  l1595 018E  
                                l1683 0558                                  l1675 0523  
                                l1667 04E5                                  l1691 0057  
                                l1597 019B                                  l1677 0530  
                                l1757 04FF                                  l1693 0068  
                                l1759 01F6                                  l1599 01AB  
                                l1679 0543                                  l1695 0077  
                                l1689 004D                                  u1010 0377  
                                u1020 0F43                                  u1004 0368  
                                u1021 0F42                                  u1005 0366  
                                u1030 02BF                                  u1050 030D  
                                u1051 030C                                  u1107 0515  
                                u1044 02DB                                  u1060 01EE  
                                u1045 02D9                                  u1061 01ED  
                                u1070 0530                                  u1055 0309  
                                u1071 052F                                  u1080 0558  
                                u1065 01EA                                  u1081 0557  
                                u1075 052C                                  u1085 0554  
                                u1097 0FC6                                  _brkp 0069  
                                _free 0564                                  _main 004D  
                                btemp 007E                                  start 0000  
              __end_of_SpiClearMatrix 0F44                       __end_of_MovieUp 0F5D  
                     __end_of_SpiInit 0F08                       __end_of_Reverse 0280  
                               ?_free 0071                                 ?_main 0071  
                 _ChangeOfCoordinates 047D                                 _PORTA 0005  
                               _PORTB 0006                                 _TRISA 0085  
                               _TRISB 0086                                 _TRISC 0087  
                               _SSPIF 0063                       SpiClearMatrix@i 0077  
                   SendToSegment@data 0074                                 _errno 00AF  
                               free@c 007B                                 pclath 000A  
                    ___expand_heap@pn 0071                                 status 0003  
                               wtemp0 007E                          main@square_1 00A0  
                ?_ChangeOfCoordinates 005B                       ?_SpiClearMatrix 0071  
                     __initialization 07D8                          __end_of_free 0652  
                        __end_of_main 0094                         ___expand_heap 00DC  
                          _MatrixInit 0FC0                                ??_free 0073  
                              ??_main 007E                     ??_RotateDirection 007E  
           CopyArray@countElemntArray 0075                         ??_SetPosition 0077  
                       calloc@new_ptr 003C                 ??_ChangeOfCoordinates 0060  
                              _SSPCON 0014                                _SSPBUF 0013  
                          _MovieShape 0129                            _MovieRigth 0ECF  
                MovieShape@shapeArray 002C                             ??_MovieUp 0073  
                           ??_SpiInit 0071                             ??_Reverse 0075  
                       ??_SpiSendByte 0071                                _Rotate 030E  
                      ?___expand_heap 0071               ___simple_search_fl@best 002C  
             ___simple_search_fl@last 0026               ___simple_search_fl@next 0028  
                              ___wmul 0F9B                                _calloc 0094  
                              _malloc 03B3                                _memset 0F7A  
                      ShowShape@coord 0075               __end_of__initialization 07FC  
                 __end_of_SetPosition 0F7A                            ___freelist 006D  
                      __pcstackCOMMON 0071                          __pidataBANK1 0004  
                   __end_of_CopyArray 004D                           ?_MatrixInit 0071  
                 __end_of_SpiSendByte 0EE5     ChangeOfCoordinates@_shapePosition 005B  
ChangeOfCoordinates@_countElemntArray 005E            __end_of___simple_search_fl 07D8  
                          __pbssBANK0 0069                            __pbssBANK1 00A9  
                   __end_of_MovieLeft 0EF6                     __end_of_MovieDown 0F1B  
            MovieShape@_shapePosition 002A                     __end_of_PortBInit 0ECF  
                   __end_of_ShowShape 030E                           ?_MovieShape 002A  
                   main@shapePosition 00A5                           ?_MovieRigth 0071  
                     ??___expand_heap 0072                            __pmaintext 004D  
                             ?_Rotate 003E                               ?___wmul 0071  
                             ?_calloc 0038                               ?_malloc 0079  
                             ?_memset 0077                         MovieShape@dir 007D  
           ShowShape@countElemntArray 0077                           _SetPosition 0F5D  
                             _SSPSTAT 0094                            __stringtab 0800  
                    ??_SpiClearMatrix 0075                       _RotateDirection 018D  
                          calloc@size 003A                               _MovieUp 0F44  
                             _SpiInit 0EF6                         _SendToSegment 0F1B  
                ___simple_search_fl@c 002A                               _Reverse 0202  
                ___simple_search_fl@n 0071                           _SpiSendByte 0EDA  
                             Rotate@i 004D                               Rotate@x 004B  
            ___simple_search_fl@split 0024                               __ptext1 0EF6  
                             __ptext2 0F5D                               __ptext3 0EC8  
                             __ptext4 0FC0                               __ptext5 047D  
                             __ptext6 018D                               __ptext7 030E  
                             __ptext8 0564                               __ptext9 0094  
             ChangeOfCoordinates@step 0065                               free@ptr 0071  
                end_of_initialization 07FC                               malloc@m 002E  
                             malloc@n 0079                               malloc@p 0034  
              ___expand_heap@new_brkp 0074                               memset@c 0079  
                             memset@n 007B                               memset@p 0020  
                      ?_SendToSegment 0072                         Reverse@array_ 0071  
                 SetPosition@position 0071           __end_of_ChangeOfCoordinates 0564  
             __end_of_RotateDirection 0202               MovieLeft@_shapePosition 0071  
          ChangeOfCoordinates@_figure 005D                        __end_of_Rotate 03B3  
                      __end_of___wmul 0FC0                          ??_MatrixInit 0078  
                      __end_of_calloc 00DC                             _CopyArray 0007  
                      __end_of_malloc 047D                        __end_of_memset 0F9B  
                     ___expand_heap@n 0072                   start_initialization 07D8  
                          malloc@lock 00A9                            malloc@size 0032  
                  __end_of_MatrixInit 1000                       ??_SendToSegment 0075  
                        ??_MovieShape 007B                          ??_MovieRigth 0073  
                           _MovieLeft 0EE5                             _MovieDown 0F08  
                  ___simple_search_fl 0652                             _PortBInit 0EC8  
                            ??_Rotate 0042                             _ShowShape 0280  
        ___simple_search_fl@best_last 0022                              ??___wmul 0075  
                            ??_calloc 007D                           __pdataBANK1 00B1  
                            ??_malloc 007B                              ??_memset 007D  
                 ?___simple_search_fl 0071                            memset@dest 0077  
                       ShowShape@_pos 0026                            ?_CopyArray 0071  
                        SetPosition@x 0073                          SetPosition@y 0075  
                           Rotate@res 004F                             ___heap_hi 0170  
                           ___heap_lo 0110                             ___latbits 0002  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                  __end_of_MovieShape 018D                    __end_of_MovieRigth 0EDA  
                        ?_SetPosition 0071                  main@countElemntArray 00A3  
                 ShowShape@shapeArray 0079                  ??___simple_search_fl 0073  
                    ?_RotateDirection 0053                       CopyArray@array_ 0071  
                          ?_MovieLeft 0071                            ?_MovieDown 0071  
                            ?_MovieUp 0071                              ?_SpiInit 0071  
                            ?_Reverse 0071                            ?_PortBInit 0071  
               __end_of___expand_heap 0129                          ?_SpiSendByte 0071  
                          ?_ShowShape 0075                             __pstrings 0800  
             MovieDown@_shapePosition 0071      __end_ofChangeOfCoordinates@delay 080A  
               MovieUp@_shapePosition 0071                        ___wmul@product 0075  
      ChangeOfCoordinates@rotateArray 0067                      RotateDirection@i 0059  
                         ??_CopyArray 0077                           __stringbase 0805  
                   ___wmul@multiplier 0071                Rotate@countElemntArray 0040  
                           malloc@end 00AD                             malloc@cur 006B  
                           malloc@new 0036                           ??_MovieLeft 0073  
                         ??_MovieDown 0073                           calloc@nmemb 0038  
                            Reverse@i 0021                              Reverse@j 0023  
                            Reverse@t 0020                           ??_PortBInit 0071  
             Reverse@countElemntArray 0073                           ??_ShowShape 0020  
                        ShowShape@pos 0028                              Rotate@_i 0051  
                  __end_of__stringtab 0806                              __ptext10 0F7A  
                            __ptext11 03B3                              __ptext20 0F1B  
                            __ptext12 0652                              __ptext21 0EDA  
                            __ptext13 00DC                              __ptext22 0F44  
                            __ptext14 0F9B                              __ptext23 0ECF  
                            __ptext15 0007                              __ptext24 0EE5  
                            __ptext16 0202                              __ptext25 0F08  
                            __ptext17 0129                              __ptext18 0F2E  
                            __ptext19 0280              ChangeOfCoordinates@delay 0806  
                            main@F932 00B1                  SendToSegment@segment 0072  
                            free@cptr 0079                              malloc@sz 0030  
   ___simple_search_fl@remaining_size 0020                 RotateDirection@array_ 0055  
                ChangeOfCoordinates@i 0063                             stringcode 0800  
               __end_of_SendToSegment 0F2E              MovieRigth@_shapePosition 0071  
                        CopyArray@res 0073            MovieShape@countElemntArray 002E  
                            stringdir 0800                              stringtab 0800  
                        Rotate@array_ 003E                   RotateDirection@step 0053  
                          CopyArray@y 0020  

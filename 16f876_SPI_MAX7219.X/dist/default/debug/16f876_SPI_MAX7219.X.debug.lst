

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Dec 18 17:10:50 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    21                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=1
    26                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38     0000                     
    39                           ; Generated 12/10/2023 GMT
    40                           ; 
    41                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F876 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73     0004                     fsr             equ	4
    74     0004                     fsr0            equ	4
    75     0000                     indf            equ	0
    76     0000                     indf0           equ	0
    77     0002                     pc              equ	2
    78     0002                     pcl             equ	2
    79     000A                     pclath          equ	10
    80     0003                     status          equ	3
    81     0000                     INDF            equ	0	;# 
    82     0001                     TMR0            equ	1	;# 
    83     0002                     PCL             equ	2	;# 
    84     0003                     STATUS          equ	3	;# 
    85     0004                     FSR             equ	4	;# 
    86     0005                     PORTA           equ	5	;# 
    87     0006                     PORTB           equ	6	;# 
    88     0007                     PORTC           equ	7	;# 
    89     000A                     PCLATH          equ	10	;# 
    90     000B                     INTCON          equ	11	;# 
    91     000C                     PIR1            equ	12	;# 
    92     000D                     PIR2            equ	13	;# 
    93     000E                     TMR1            equ	14	;# 
    94     000E                     TMR1L           equ	14	;# 
    95     000F                     TMR1H           equ	15	;# 
    96     0010                     T1CON           equ	16	;# 
    97     0011                     TMR2            equ	17	;# 
    98     0012                     T2CON           equ	18	;# 
    99     0013                     SSPBUF          equ	19	;# 
   100     0014                     SSPCON          equ	20	;# 
   101     0015                     CCPR1           equ	21	;# 
   102     0015                     CCPR1L          equ	21	;# 
   103     0016                     CCPR1H          equ	22	;# 
   104     0017                     CCP1CON         equ	23	;# 
   105     0018                     RCSTA           equ	24	;# 
   106     0019                     TXREG           equ	25	;# 
   107     001A                     RCREG           equ	26	;# 
   108     001B                     CCPR2           equ	27	;# 
   109     001B                     CCPR2L          equ	27	;# 
   110     001C                     CCPR2H          equ	28	;# 
   111     001D                     CCP2CON         equ	29	;# 
   112     001E                     ADRESH          equ	30	;# 
   113     001F                     ADCON0          equ	31	;# 
   114     0081                     OPTION_REG      equ	129	;# 
   115     0085                     TRISA           equ	133	;# 
   116     0086                     TRISB           equ	134	;# 
   117     0087                     TRISC           equ	135	;# 
   118     008C                     PIE1            equ	140	;# 
   119     008D                     PIE2            equ	141	;# 
   120     008E                     PCON            equ	142	;# 
   121     0091                     SSPCON2         equ	145	;# 
   122     0092                     PR2             equ	146	;# 
   123     0093                     SSPADD          equ	147	;# 
   124     0094                     SSPSTAT         equ	148	;# 
   125     0098                     TXSTA           equ	152	;# 
   126     0099                     SPBRG           equ	153	;# 
   127     009E                     ADRESL          equ	158	;# 
   128     009F                     ADCON1          equ	159	;# 
   129     010C                     EEDATA          equ	268	;# 
   130     010D                     EEADR           equ	269	;# 
   131     010E                     EEDATH          equ	270	;# 
   132     010F                     EEADRH          equ	271	;# 
   133     018C                     EECON1          equ	396	;# 
   134     018D                     EECON2          equ	397	;# 
   135     0000                     INDF            equ	0	;# 
   136     0001                     TMR0            equ	1	;# 
   137     0002                     PCL             equ	2	;# 
   138     0003                     STATUS          equ	3	;# 
   139     0004                     FSR             equ	4	;# 
   140     0005                     PORTA           equ	5	;# 
   141     0006                     PORTB           equ	6	;# 
   142     0007                     PORTC           equ	7	;# 
   143     000A                     PCLATH          equ	10	;# 
   144     000B                     INTCON          equ	11	;# 
   145     000C                     PIR1            equ	12	;# 
   146     000D                     PIR2            equ	13	;# 
   147     000E                     TMR1            equ	14	;# 
   148     000E                     TMR1L           equ	14	;# 
   149     000F                     TMR1H           equ	15	;# 
   150     0010                     T1CON           equ	16	;# 
   151     0011                     TMR2            equ	17	;# 
   152     0012                     T2CON           equ	18	;# 
   153     0013                     SSPBUF          equ	19	;# 
   154     0014                     SSPCON          equ	20	;# 
   155     0015                     CCPR1           equ	21	;# 
   156     0015                     CCPR1L          equ	21	;# 
   157     0016                     CCPR1H          equ	22	;# 
   158     0017                     CCP1CON         equ	23	;# 
   159     0018                     RCSTA           equ	24	;# 
   160     0019                     TXREG           equ	25	;# 
   161     001A                     RCREG           equ	26	;# 
   162     001B                     CCPR2           equ	27	;# 
   163     001B                     CCPR2L          equ	27	;# 
   164     001C                     CCPR2H          equ	28	;# 
   165     001D                     CCP2CON         equ	29	;# 
   166     001E                     ADRESH          equ	30	;# 
   167     001F                     ADCON0          equ	31	;# 
   168     0081                     OPTION_REG      equ	129	;# 
   169     0085                     TRISA           equ	133	;# 
   170     0086                     TRISB           equ	134	;# 
   171     0087                     TRISC           equ	135	;# 
   172     008C                     PIE1            equ	140	;# 
   173     008D                     PIE2            equ	141	;# 
   174     008E                     PCON            equ	142	;# 
   175     0091                     SSPCON2         equ	145	;# 
   176     0092                     PR2             equ	146	;# 
   177     0093                     SSPADD          equ	147	;# 
   178     0094                     SSPSTAT         equ	148	;# 
   179     0098                     TXSTA           equ	152	;# 
   180     0099                     SPBRG           equ	153	;# 
   181     009E                     ADRESL          equ	158	;# 
   182     009F                     ADCON1          equ	159	;# 
   183     010C                     EEDATA          equ	268	;# 
   184     010D                     EEADR           equ	269	;# 
   185     010E                     EEDATH          equ	270	;# 
   186     010F                     EEADRH          equ	271	;# 
   187     018C                     EECON1          equ	396	;# 
   188     018D                     EECON2          equ	397	;# 
   189     0000                     INDF            equ	0	;# 
   190     0001                     TMR0            equ	1	;# 
   191     0002                     PCL             equ	2	;# 
   192     0003                     STATUS          equ	3	;# 
   193     0004                     FSR             equ	4	;# 
   194     0005                     PORTA           equ	5	;# 
   195     0006                     PORTB           equ	6	;# 
   196     0007                     PORTC           equ	7	;# 
   197     000A                     PCLATH          equ	10	;# 
   198     000B                     INTCON          equ	11	;# 
   199     000C                     PIR1            equ	12	;# 
   200     000D                     PIR2            equ	13	;# 
   201     000E                     TMR1            equ	14	;# 
   202     000E                     TMR1L           equ	14	;# 
   203     000F                     TMR1H           equ	15	;# 
   204     0010                     T1CON           equ	16	;# 
   205     0011                     TMR2            equ	17	;# 
   206     0012                     T2CON           equ	18	;# 
   207     0013                     SSPBUF          equ	19	;# 
   208     0014                     SSPCON          equ	20	;# 
   209     0015                     CCPR1           equ	21	;# 
   210     0015                     CCPR1L          equ	21	;# 
   211     0016                     CCPR1H          equ	22	;# 
   212     0017                     CCP1CON         equ	23	;# 
   213     0018                     RCSTA           equ	24	;# 
   214     0019                     TXREG           equ	25	;# 
   215     001A                     RCREG           equ	26	;# 
   216     001B                     CCPR2           equ	27	;# 
   217     001B                     CCPR2L          equ	27	;# 
   218     001C                     CCPR2H          equ	28	;# 
   219     001D                     CCP2CON         equ	29	;# 
   220     001E                     ADRESH          equ	30	;# 
   221     001F                     ADCON0          equ	31	;# 
   222     0081                     OPTION_REG      equ	129	;# 
   223     0085                     TRISA           equ	133	;# 
   224     0086                     TRISB           equ	134	;# 
   225     0087                     TRISC           equ	135	;# 
   226     008C                     PIE1            equ	140	;# 
   227     008D                     PIE2            equ	141	;# 
   228     008E                     PCON            equ	142	;# 
   229     0091                     SSPCON2         equ	145	;# 
   230     0092                     PR2             equ	146	;# 
   231     0093                     SSPADD          equ	147	;# 
   232     0094                     SSPSTAT         equ	148	;# 
   233     0098                     TXSTA           equ	152	;# 
   234     0099                     SPBRG           equ	153	;# 
   235     009E                     ADRESL          equ	158	;# 
   236     009F                     ADCON1          equ	159	;# 
   237     010C                     EEDATA          equ	268	;# 
   238     010D                     EEADR           equ	269	;# 
   239     010E                     EEDATH          equ	270	;# 
   240     010F                     EEADRH          equ	271	;# 
   241     018C                     EECON1          equ	396	;# 
   242     018D                     EECON2          equ	397	;# 
   243     0000                     INDF            equ	0	;# 
   244     0001                     TMR0            equ	1	;# 
   245     0002                     PCL             equ	2	;# 
   246     0003                     STATUS          equ	3	;# 
   247     0004                     FSR             equ	4	;# 
   248     0005                     PORTA           equ	5	;# 
   249     0006                     PORTB           equ	6	;# 
   250     0007                     PORTC           equ	7	;# 
   251     000A                     PCLATH          equ	10	;# 
   252     000B                     INTCON          equ	11	;# 
   253     000C                     PIR1            equ	12	;# 
   254     000D                     PIR2            equ	13	;# 
   255     000E                     TMR1            equ	14	;# 
   256     000E                     TMR1L           equ	14	;# 
   257     000F                     TMR1H           equ	15	;# 
   258     0010                     T1CON           equ	16	;# 
   259     0011                     TMR2            equ	17	;# 
   260     0012                     T2CON           equ	18	;# 
   261     0013                     SSPBUF          equ	19	;# 
   262     0014                     SSPCON          equ	20	;# 
   263     0015                     CCPR1           equ	21	;# 
   264     0015                     CCPR1L          equ	21	;# 
   265     0016                     CCPR1H          equ	22	;# 
   266     0017                     CCP1CON         equ	23	;# 
   267     0018                     RCSTA           equ	24	;# 
   268     0019                     TXREG           equ	25	;# 
   269     001A                     RCREG           equ	26	;# 
   270     001B                     CCPR2           equ	27	;# 
   271     001B                     CCPR2L          equ	27	;# 
   272     001C                     CCPR2H          equ	28	;# 
   273     001D                     CCP2CON         equ	29	;# 
   274     001E                     ADRESH          equ	30	;# 
   275     001F                     ADCON0          equ	31	;# 
   276     0081                     OPTION_REG      equ	129	;# 
   277     0085                     TRISA           equ	133	;# 
   278     0086                     TRISB           equ	134	;# 
   279     0087                     TRISC           equ	135	;# 
   280     008C                     PIE1            equ	140	;# 
   281     008D                     PIE2            equ	141	;# 
   282     008E                     PCON            equ	142	;# 
   283     0091                     SSPCON2         equ	145	;# 
   284     0092                     PR2             equ	146	;# 
   285     0093                     SSPADD          equ	147	;# 
   286     0094                     SSPSTAT         equ	148	;# 
   287     0098                     TXSTA           equ	152	;# 
   288     0099                     SPBRG           equ	153	;# 
   289     009E                     ADRESL          equ	158	;# 
   290     009F                     ADCON1          equ	159	;# 
   291     010C                     EEDATA          equ	268	;# 
   292     010D                     EEADR           equ	269	;# 
   293     010E                     EEDATH          equ	270	;# 
   294     010F                     EEADRH          equ	271	;# 
   295     018C                     EECON1          equ	396	;# 
   296     018D                     EECON2          equ	397	;# 
   297     0000                     INDF            equ	0	;# 
   298     0001                     TMR0            equ	1	;# 
   299     0002                     PCL             equ	2	;# 
   300     0003                     STATUS          equ	3	;# 
   301     0004                     FSR             equ	4	;# 
   302     0005                     PORTA           equ	5	;# 
   303     0006                     PORTB           equ	6	;# 
   304     0007                     PORTC           equ	7	;# 
   305     000A                     PCLATH          equ	10	;# 
   306     000B                     INTCON          equ	11	;# 
   307     000C                     PIR1            equ	12	;# 
   308     000D                     PIR2            equ	13	;# 
   309     000E                     TMR1            equ	14	;# 
   310     000E                     TMR1L           equ	14	;# 
   311     000F                     TMR1H           equ	15	;# 
   312     0010                     T1CON           equ	16	;# 
   313     0011                     TMR2            equ	17	;# 
   314     0012                     T2CON           equ	18	;# 
   315     0013                     SSPBUF          equ	19	;# 
   316     0014                     SSPCON          equ	20	;# 
   317     0015                     CCPR1           equ	21	;# 
   318     0015                     CCPR1L          equ	21	;# 
   319     0016                     CCPR1H          equ	22	;# 
   320     0017                     CCP1CON         equ	23	;# 
   321     0018                     RCSTA           equ	24	;# 
   322     0019                     TXREG           equ	25	;# 
   323     001A                     RCREG           equ	26	;# 
   324     001B                     CCPR2           equ	27	;# 
   325     001B                     CCPR2L          equ	27	;# 
   326     001C                     CCPR2H          equ	28	;# 
   327     001D                     CCP2CON         equ	29	;# 
   328     001E                     ADRESH          equ	30	;# 
   329     001F                     ADCON0          equ	31	;# 
   330     0081                     OPTION_REG      equ	129	;# 
   331     0085                     TRISA           equ	133	;# 
   332     0086                     TRISB           equ	134	;# 
   333     0087                     TRISC           equ	135	;# 
   334     008C                     PIE1            equ	140	;# 
   335     008D                     PIE2            equ	141	;# 
   336     008E                     PCON            equ	142	;# 
   337     0091                     SSPCON2         equ	145	;# 
   338     0092                     PR2             equ	146	;# 
   339     0093                     SSPADD          equ	147	;# 
   340     0094                     SSPSTAT         equ	148	;# 
   341     0098                     TXSTA           equ	152	;# 
   342     0099                     SPBRG           equ	153	;# 
   343     009E                     ADRESL          equ	158	;# 
   344     009F                     ADCON1          equ	159	;# 
   345     010C                     EEDATA          equ	268	;# 
   346     010D                     EEADR           equ	269	;# 
   347     010E                     EEDATH          equ	270	;# 
   348     010F                     EEADRH          equ	271	;# 
   349     018C                     EECON1          equ	396	;# 
   350     018D                     EECON2          equ	397	;# 
   351     0000                     INDF            equ	0	;# 
   352     0001                     TMR0            equ	1	;# 
   353     0002                     PCL             equ	2	;# 
   354     0003                     STATUS          equ	3	;# 
   355     0004                     FSR             equ	4	;# 
   356     0005                     PORTA           equ	5	;# 
   357     0006                     PORTB           equ	6	;# 
   358     0007                     PORTC           equ	7	;# 
   359     000A                     PCLATH          equ	10	;# 
   360     000B                     INTCON          equ	11	;# 
   361     000C                     PIR1            equ	12	;# 
   362     000D                     PIR2            equ	13	;# 
   363     000E                     TMR1            equ	14	;# 
   364     000E                     TMR1L           equ	14	;# 
   365     000F                     TMR1H           equ	15	;# 
   366     0010                     T1CON           equ	16	;# 
   367     0011                     TMR2            equ	17	;# 
   368     0012                     T2CON           equ	18	;# 
   369     0013                     SSPBUF          equ	19	;# 
   370     0014                     SSPCON          equ	20	;# 
   371     0015                     CCPR1           equ	21	;# 
   372     0015                     CCPR1L          equ	21	;# 
   373     0016                     CCPR1H          equ	22	;# 
   374     0017                     CCP1CON         equ	23	;# 
   375     0018                     RCSTA           equ	24	;# 
   376     0019                     TXREG           equ	25	;# 
   377     001A                     RCREG           equ	26	;# 
   378     001B                     CCPR2           equ	27	;# 
   379     001B                     CCPR2L          equ	27	;# 
   380     001C                     CCPR2H          equ	28	;# 
   381     001D                     CCP2CON         equ	29	;# 
   382     001E                     ADRESH          equ	30	;# 
   383     001F                     ADCON0          equ	31	;# 
   384     0081                     OPTION_REG      equ	129	;# 
   385     0085                     TRISA           equ	133	;# 
   386     0086                     TRISB           equ	134	;# 
   387     0087                     TRISC           equ	135	;# 
   388     008C                     PIE1            equ	140	;# 
   389     008D                     PIE2            equ	141	;# 
   390     008E                     PCON            equ	142	;# 
   391     0091                     SSPCON2         equ	145	;# 
   392     0092                     PR2             equ	146	;# 
   393     0093                     SSPADD          equ	147	;# 
   394     0094                     SSPSTAT         equ	148	;# 
   395     0098                     TXSTA           equ	152	;# 
   396     0099                     SPBRG           equ	153	;# 
   397     009E                     ADRESL          equ	158	;# 
   398     009F                     ADCON1          equ	159	;# 
   399     010C                     EEDATA          equ	268	;# 
   400     010D                     EEADR           equ	269	;# 
   401     010E                     EEDATH          equ	270	;# 
   402     010F                     EEADRH          equ	271	;# 
   403     018C                     EECON1          equ	396	;# 
   404     018D                     EECON2          equ	397	;# 
   405                           
   406                           	psect	idataBANK1
   407     0FCF                     __pidataBANK1:
   408                           
   409                           ;initializer for main@F928
   410     0FCF  3407               	retlw	7
   411     0FD0  3405               	retlw	5
   412     0FD1  3402               	retlw	2
   413                           
   414                           	psect	strings
   415     0003                     __pstrings:
   416     0003                     stringtab:
   417     0003                     __stringtab:
   418     0003                     stringcode:	
   419                           ;	String table - string pointers are 1 byte each
   420                           
   421     0003                     stringdir:
   422     0003  3000               	movlw	high stringdir
   423     0004  008A               	movwf	10
   424     0005  0804               	movf	4,w
   425     0006  0A84               	incf	4,f
   426     0007  0782               	addwf	2,f
   427     0008                     __stringbase:
   428     0008  3400               	retlw	0
   429     0009                     __end_of__stringtab:
   430     0009                     ChangeOfCoordinates@delay:
   431     0009  3496               	retlw	150
   432     000A  3400               	retlw	0
   433     000B  3400               	retlw	0
   434     000C  3400               	retlw	0
   435     000D                     __end_ofChangeOfCoordinates@delay:
   436     0013                     _SSPBUF         set	19
   437     0014                     _SSPCON         set	20
   438     0005                     _PORTA          set	5
   439     0006                     _PORTB          set	6
   440     002D                     _RA5            set	45
   441     0063                     _SSPIF          set	99
   442     0094                     _SSPSTAT        set	148
   443     0085                     _TRISA          set	133
   444     0087                     _TRISC          set	135
   445     0086                     _TRISB          set	134
   446                           
   447                           	psect	cinit
   448     07D8                     start_initialization:	
   449                           ; #config settings
   450                           
   451     07D8                     __initialization:
   452                           
   453                           ; Initialize objects allocated to BANK1
   454     07D8  1683               	bsf	3,5	;RP0=1, select bank1
   455     07D9  1303               	bcf	3,6	;RP1=0, select bank1
   456     07DA  120A  158A  27CF  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   457     07DF  00A8               	movwf	__pdataBANK1& (0+127)
   458     07E0  120A  158A  27D0  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   459     07E5  00A9               	movwf	(__pdataBANK1+1)& (0+127)
   460     07E6  120A  158A  27D1  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   461     07EB  00AA               	movwf	(__pdataBANK1+2)& (0+127)
   462                           
   463                           ; Clear objects allocated to BANK1
   464     07EC  01A0               	clrf	__pbssBANK1& (0+127)
   465     07ED  01A1               	clrf	(__pbssBANK1+1)& (0+127)
   466     07EE  01A2               	clrf	(__pbssBANK1+2)& (0+127)
   467     07EF  01A3               	clrf	(__pbssBANK1+3)& (0+127)
   468     07F0  01A4               	clrf	(__pbssBANK1+4)& (0+127)
   469     07F1  01A5               	clrf	(__pbssBANK1+5)& (0+127)
   470     07F2  01A6               	clrf	(__pbssBANK1+6)& (0+127)
   471     07F3  01A7               	clrf	(__pbssBANK1+7)& (0+127)
   472                           
   473                           ; Clear objects allocated to BANK0
   474     07F4  1283               	bcf	3,5	;RP0=0, select bank0
   475     07F5  1303               	bcf	3,6	;RP1=0, select bank0
   476     07F6  01E9               	clrf	__pbssBANK0& (0+127)
   477     07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   478     07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   479     07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   480     07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   481     07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
   482     07FC                     end_of_initialization:	
   483                           ;End of C runtime variable initialization code
   484                           
   485     07FC                     __end_of__initialization:
   486     07FC  0183               	clrf	3
   487     07FD  120A  118A  29EF   	ljmp	_main	;jump to C main() function
   488                           
   489                           	psect	bssBANK0
   490     0069                     __pbssBANK0:
   491     0069                     _brkp:
   492     0069                     	ds	2
   493     006B                     malloc@cur:
   494     006B                     	ds	2
   495     006D                     ___freelist:
   496     006D                     	ds	2
   497                           
   498                           	psect	bssBANK1
   499     00A0                     __pbssBANK1:
   500     00A0                     malloc@lock:
   501     00A0                     	ds	4
   502     00A4                     malloc@end:
   503     00A4                     	ds	2
   504     00A6                     _errno:
   505     00A6                     	ds	2
   506                           
   507                           	psect	dataBANK1
   508     00A8                     __pdataBANK1:
   509     00A8                     main@F928:
   510     00A8                     	ds	3
   511                           
   512                           	psect	cstackCOMMON
   513     0071                     __pcstackCOMMON:
   514     0071                     ?_Reverse:
   515     0071                     ?_SpiInit:	
   516                           ; 1 bytes @ 0x0
   517                           
   518     0071                     ?_MatrixInit:	
   519                           ; 1 bytes @ 0x0
   520                           
   521     0071                     ?_PortBInit:	
   522                           ; 1 bytes @ 0x0
   523                           
   524     0071                     ?_SetPosition:	
   525                           ; 1 bytes @ 0x0
   526                           
   527     0071                     ?_free:	
   528                           ; 1 bytes @ 0x0
   529                           
   530     0071                     ?_main:	
   531                           ; 1 bytes @ 0x0
   532                           
   533     0071                     ?_SpiSendByte:	
   534                           ; 1 bytes @ 0x0
   535                           
   536     0071                     ?_SpiClearMatrix:	
   537                           ; 1 bytes @ 0x0
   538                           
   539     0071                     ?_MovieDown:	
   540                           ; 1 bytes @ 0x0
   541                           
   542     0071                     ?_MovieUp:	
   543                           ; 1 bytes @ 0x0
   544                           
   545     0071                     ?_MovieLeft:	
   546                           ; 1 bytes @ 0x0
   547                           
   548     0071                     ?_MovieRigth:	
   549                           ; 1 bytes @ 0x0
   550                           
   551     0071                     ?___simple_search_fl:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     0071                     ?___expand_heap:	
   555                           ; 2 bytes @ 0x0
   556                           
   557     0071                     ?___wmul:	
   558                           ; 2 bytes @ 0x0
   559                           
   560     0071                     SpiSendByte@data:	
   561                           ; 2 bytes @ 0x0
   562                           
   563     0071                     Reverse@array:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     0071                     ___expand_heap@pn:	
   567                           ; 1 bytes @ 0x0
   568                           
   569     0071                     SetPosition@position:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0071                     MovieDown@_shapePosition:	
   573                           ; 2 bytes @ 0x0
   574                           
   575     0071                     MovieUp@_shapePosition:	
   576                           ; 2 bytes @ 0x0
   577                           
   578     0071                     MovieLeft@_shapePosition:	
   579                           ; 2 bytes @ 0x0
   580                           
   581     0071                     MovieRigth@_shapePosition:	
   582                           ; 2 bytes @ 0x0
   583                           
   584     0071                     ___wmul@multiplier:	
   585                           ; 2 bytes @ 0x0
   586                           
   587     0071                     ___simple_search_fl@n:	
   588                           ; 2 bytes @ 0x0
   589                           
   590     0071                     free@ptr:	
   591                           ; 2 bytes @ 0x0
   592                           
   593     0071                     ??_SpiInit:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0071                     ??_PortBInit:	
   597                           ; 1 bytes @ 0x0
   598                           
   599     0071                     ??_SpiSendByte:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604     0071                     	ds	1
   605     0072                     ?_SendToSegment:
   606     0072                     SendToSegment@segment:	
   607                           ; 1 bytes @ 0x1
   608                           
   609     0072                     Reverse@countElemnt:	
   610                           ; 2 bytes @ 0x1
   611                           
   612     0072                     ___expand_heap@n:	
   613                           ; 2 bytes @ 0x1
   614                           
   615     0072                     ??___expand_heap:	
   616                           ; 2 bytes @ 0x1
   617                           
   618                           
   619                           ; 1 bytes @ 0x1
   620     0072                     	ds	1
   621     0073                     SetPosition@x:
   622     0073                     ___wmul@multiplicand:	
   623                           ; 2 bytes @ 0x2
   624                           
   625     0073                     ??_free:	
   626                           ; 2 bytes @ 0x2
   627                           
   628     0073                     ??___simple_search_fl:	
   629                           ; 1 bytes @ 0x2
   630                           
   631     0073                     ??_MovieDown:	
   632                           ; 1 bytes @ 0x2
   633                           
   634     0073                     ??_MovieUp:	
   635                           ; 1 bytes @ 0x2
   636                           
   637     0073                     ??_MovieLeft:	
   638                           ; 1 bytes @ 0x2
   639                           
   640     0073                     ??_MovieRigth:	
   641                           ; 1 bytes @ 0x2
   642                           
   643                           
   644                           ; 1 bytes @ 0x2
   645     0073                     	ds	1
   646     0074                     SendToSegment@data:
   647     0074                     ___expand_heap@new_brkp:	
   648                           ; 1 bytes @ 0x3
   649                           
   650     0074                     ??_Reverse:	
   651                           ; 2 bytes @ 0x3
   652                           
   653                           
   654                           ; 1 bytes @ 0x3
   655     0074                     	ds	1
   656     0075                     ?_ShowShape:
   657     0075                     SetPosition@y:	
   658                           ; 1 bytes @ 0x4
   659                           
   660     0075                     ShowShape@coord:	
   661                           ; 2 bytes @ 0x4
   662                           
   663     0075                     ___wmul@product:	
   664                           ; 2 bytes @ 0x4
   665                           
   666     0075                     ??_SendToSegment:	
   667                           ; 2 bytes @ 0x4
   668                           
   669     0075                     ??_SpiClearMatrix:	
   670                           ; 1 bytes @ 0x4
   671                           
   672     0075                     ??___wmul:	
   673                           ; 1 bytes @ 0x4
   674                           
   675                           
   676                           ; 1 bytes @ 0x4
   677     0075                     	ds	2
   678     0077                     ?_memset:
   679     0077                     SpiClearMatrix@i:	
   680                           ; 2 bytes @ 0x6
   681                           
   682     0077                     Reverse@t:	
   683                           ; 1 bytes @ 0x6
   684                           
   685     0077                     ShowShape@countElemntArray:	
   686                           ; 1 bytes @ 0x6
   687                           
   688     0077                     memset@dest:	
   689                           ; 2 bytes @ 0x6
   690                           
   691     0077                     ??_SetPosition:	
   692                           ; 2 bytes @ 0x6
   693                           
   694                           
   695                           ; 1 bytes @ 0x6
   696     0077                     	ds	1
   697     0078                     Reverse@i:
   698     0078                     ??_MatrixInit:	
   699                           ; 2 bytes @ 0x7
   700                           
   701                           
   702                           ; 1 bytes @ 0x7
   703     0078                     	ds	1
   704     0079                     ?_malloc:
   705     0079                     ShowShape@shapeArray:	
   706                           ; 2 bytes @ 0x8
   707                           
   708     0079                     free@cptr:	
   709                           ; 1 bytes @ 0x8
   710                           
   711     0079                     malloc@n:	
   712                           ; 2 bytes @ 0x8
   713                           
   714     0079                     memset@c:	
   715                           ; 2 bytes @ 0x8
   716                           
   717                           
   718                           ; 2 bytes @ 0x8
   719     0079                     	ds	1
   720     007A                     ShowShape@_pos:
   721     007A                     Reverse@j:	
   722                           ; 2 bytes @ 0x9
   723                           
   724                           
   725                           ; 2 bytes @ 0x9
   726     007A                     	ds	1
   727     007B                     free@c:
   728     007B                     memset@n:	
   729                           ; 2 bytes @ 0xA
   730                           
   731     007B                     ??_malloc:	
   732                           ; 2 bytes @ 0xA
   733                           
   734                           
   735                           ; 1 bytes @ 0xA
   736     007B                     	ds	1
   737     007C                     ShowShape@pos:
   738                           
   739                           ; 2 bytes @ 0xB
   740     007C                     	ds	1
   741     007D                     ??_calloc:
   742     007D                     ??_memset:	
   743                           ; 1 bytes @ 0xC
   744                           
   745                           
   746                           ; 1 bytes @ 0xC
   747     007D                     	ds	1
   748     007E                     ??_main:
   749                           
   750                           	psect	cstackBANK0
   751     0020                     __pcstackBANK0:	
   752                           ; 1 bytes @ 0xD
   753                           
   754     0020                     ___simple_search_fl@remaining_size:
   755     0020                     memset@p:	
   756                           ; 2 bytes @ 0x0
   757                           
   758     0020                     ??_ShowShape:	
   759                           ; 2 bytes @ 0x0
   760                           
   761                           
   762                           ; 1 bytes @ 0x0
   763     0020                     	ds	2
   764     0022                     ___simple_search_fl@best_last:
   765                           
   766                           ; 2 bytes @ 0x2
   767     0022                     	ds	2
   768     0024                     ___simple_search_fl@split:
   769                           
   770                           ; 2 bytes @ 0x4
   771     0024                     	ds	1
   772     0025                     ?_MovieShape:
   773     0025                     MovieShape@_shapePosition:	
   774                           ; 1 bytes @ 0x5
   775                           
   776                           
   777                           ; 2 bytes @ 0x5
   778     0025                     	ds	1
   779     0026                     ___simple_search_fl@last:
   780                           
   781                           ; 2 bytes @ 0x6
   782     0026                     	ds	1
   783     0027                     MovieShape@shapeArray:
   784                           
   785                           ; 1 bytes @ 0x7
   786     0027                     	ds	1
   787     0028                     MovieShape@countElemntArray:
   788     0028                     ___simple_search_fl@next:	
   789                           ; 2 bytes @ 0x8
   790                           
   791                           
   792                           ; 2 bytes @ 0x8
   793     0028                     	ds	2
   794     002A                     ___simple_search_fl@c:
   795     002A                     ??_MovieShape:	
   796                           ; 2 bytes @ 0xA
   797                           
   798                           
   799                           ; 1 bytes @ 0xA
   800     002A                     	ds	2
   801     002C                     MovieShape@dir:
   802     002C                     ___simple_search_fl@best:	
   803                           ; 1 bytes @ 0xC
   804                           
   805                           
   806                           ; 2 bytes @ 0xC
   807     002C                     	ds	2
   808     002E                     malloc@m:
   809                           
   810                           ; 2 bytes @ 0xE
   811     002E                     	ds	2
   812     0030                     malloc@sz:
   813                           
   814                           ; 2 bytes @ 0x10
   815     0030                     	ds	2
   816     0032                     malloc@size:
   817                           
   818                           ; 2 bytes @ 0x12
   819     0032                     	ds	2
   820     0034                     malloc@p:
   821                           
   822                           ; 2 bytes @ 0x14
   823     0034                     	ds	2
   824     0036                     malloc@new:
   825                           
   826                           ; 2 bytes @ 0x16
   827     0036                     	ds	2
   828     0038                     ?_calloc:
   829     0038                     calloc@nmemb:	
   830                           ; 2 bytes @ 0x18
   831                           
   832                           
   833                           ; 2 bytes @ 0x18
   834     0038                     	ds	2
   835     003A                     calloc@size:
   836                           
   837                           ; 2 bytes @ 0x1A
   838     003A                     	ds	2
   839     003C                     calloc@new_ptr:
   840                           
   841                           ; 2 bytes @ 0x1C
   842     003C                     	ds	2
   843     003E                     ?_Rotate:
   844     003E                     Rotate@array_:	
   845                           ; 1 bytes @ 0x1E
   846                           
   847                           
   848                           ; 1 bytes @ 0x1E
   849     003E                     	ds	1
   850     003F                     Rotate@length:
   851                           
   852                           ; 2 bytes @ 0x1F
   853     003F                     	ds	2
   854     0041                     ??_Rotate:
   855                           
   856                           ; 1 bytes @ 0x21
   857     0041                     	ds	7
   858     0048                     Rotate@x:
   859                           
   860                           ; 2 bytes @ 0x28
   861     0048                     	ds	2
   862     004A                     Rotate@i:
   863                           
   864                           ; 2 bytes @ 0x2A
   865     004A                     	ds	2
   866     004C                     Rotate@y:
   867                           
   868                           ; 2 bytes @ 0x2C
   869     004C                     	ds	2
   870     004E                     Rotate@res:
   871                           
   872                           ; 2 bytes @ 0x2E
   873     004E                     	ds	2
   874     0050                     Rotate@_i:
   875                           
   876                           ; 2 bytes @ 0x30
   877     0050                     	ds	2
   878     0052                     ?_ChangeOfCoordinates:
   879     0052                     ChangeOfCoordinates@_shapePosition:	
   880                           ; 1 bytes @ 0x32
   881                           
   882                           
   883                           ; 2 bytes @ 0x32
   884     0052                     	ds	2
   885     0054                     ChangeOfCoordinates@_figure:
   886                           
   887                           ; 1 bytes @ 0x34
   888     0054                     	ds	1
   889     0055                     ChangeOfCoordinates@_countElemntArray:
   890                           
   891                           ; 2 bytes @ 0x35
   892     0055                     	ds	2
   893     0057                     ChangeOfCoordinates@_reverse:
   894                           
   895                           ; 1 bytes @ 0x37
   896     0057                     	ds	1
   897     0058                     ??_ChangeOfCoordinates:
   898                           
   899                           ; 1 bytes @ 0x38
   900     0058                     	ds	3
   901     005B                     ChangeOfCoordinates@i:
   902                           
   903                           ; 2 bytes @ 0x3B
   904     005B                     	ds	2
   905     005D                     ChangeOfCoordinates@step:
   906                           
   907                           ; 2 bytes @ 0x3D
   908     005D                     	ds	2
   909     005F                     main@square_1:
   910                           
   911                           ; 3 bytes @ 0x3F
   912     005F                     	ds	3
   913     0062                     main@countElemntArray:
   914                           
   915                           ; 2 bytes @ 0x42
   916     0062                     	ds	2
   917     0064                     main@reverse:
   918                           
   919                           ; 1 bytes @ 0x44
   920     0064                     	ds	1
   921     0065                     main@shapePosition:
   922                           
   923                           ; 4 bytes @ 0x45
   924     0065                     	ds	4
   925                           
   926                           	psect	maintext
   927     01EF                     __pmaintext:	
   928 ;;
   929 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   930 ;;
   931 ;; *************** function _main *****************
   932 ;; Defined at:
   933 ;;		line 53 in file "main.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;  shapePositio    4   69[BANK0 ] struct .
   938 ;;  square_1        3   63[BANK0 ] unsigned char [3]
   939 ;;  countElemntA    2   66[BANK0 ] int 
   940 ;;  reverse         1   68[BANK0 ] _Bool 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : B00/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   950 ;;      Params:         0       0       0       0       0
   951 ;;      Locals:         0      10       0       0       0
   952 ;;      Temps:          0       0       0       0       0
   953 ;;      Totals:         0      10       0       0       0
   954 ;;Total ram usage:       10 bytes
   955 ;; Hardware stack levels required when called: 5
   956 ;; This function calls:
   957 ;;		_ChangeOfCoordinates
   958 ;;		_MatrixInit
   959 ;;		_PortBInit
   960 ;;		_SetPosition
   961 ;;		_SpiInit
   962 ;; This function is called by:
   963 ;;		Startup code after reset
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967     01EF                     _main:	
   968                           ;psect for function _main
   969                           
   970     01EF                     l1577:	
   971                           ;incstack = 0
   972                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   973                           
   974                           
   975                           ;main.c: 54:     SpiInit();
   976     01EF  120A  118A  200D  120A  118A  	fcall	_SpiInit
   977                           
   978                           ;main.c: 55:     MatrixInit();
   979     01F4  120A  118A  20D7  120A  118A  	fcall	_MatrixInit
   980     01F9                     l1579:
   981                           
   982                           ;main.c: 56:     PortBInit();
   983     01F9  120A  158A  27D2  120A  118A  	fcall	_PortBInit
   984                           
   985                           ;main.c: 58:     TCoord shapePosition;;main.c: 59:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
   986     01FE  1683               	bsf	3,5	;RP0=1, select bank1
   987     01FF  1303               	bcf	3,6	;RP1=0, select bank1
   988     0200  0828               	movf	main@F928^(0+128),w
   989     0201  1283               	bcf	3,5	;RP0=0, select bank0
   990     0202  1303               	bcf	3,6	;RP1=0, select bank0
   991     0203  00DF               	movwf	main@square_1
   992     0204  1683               	bsf	3,5	;RP0=1, select bank1
   993     0205  1303               	bcf	3,6	;RP1=0, select bank1
   994     0206  0829               	movf	(main@F928+1)^(0+128),w
   995     0207  1283               	bcf	3,5	;RP0=0, select bank0
   996     0208  1303               	bcf	3,6	;RP1=0, select bank0
   997     0209  00E0               	movwf	main@square_1+1
   998     020A  1683               	bsf	3,5	;RP0=1, select bank1
   999     020B  1303               	bcf	3,6	;RP1=0, select bank1
  1000     020C  082A               	movf	(main@F928+2)^(0+128),w
  1001     020D  1283               	bcf	3,5	;RP0=0, select bank0
  1002     020E  1303               	bcf	3,6	;RP1=0, select bank0
  1003     020F  00E1               	movwf	main@square_1+2
  1004                           
  1005                           ;main.c: 60:     int countElemntArray = 3;
  1006     0210  3003               	movlw	3
  1007     0211  00E2               	movwf	main@countElemntArray
  1008     0212  3000               	movlw	0
  1009     0213  00E3               	movwf	main@countElemntArray+1
  1010     0214                     l1581:
  1011                           
  1012                           ;main.c: 61:     _Bool reverse = 1;
  1013     0214  3001               	movlw	1
  1014     0215  00E4               	movwf	main@reverse
  1015     0216                     l1583:
  1016                           
  1017                           ;main.c: 64:         SetPosition(&shapePosition, 0, 0);
  1018     0216  3065               	movlw	low main@shapePosition
  1019     0217  00F1               	movwf	SetPosition@position
  1020     0218  3000               	movlw	high main@shapePosition
  1021     0219  00F2               	movwf	SetPosition@position+1
  1022     021A  3000               	movlw	0
  1023     021B  00F3               	movwf	SetPosition@x
  1024     021C  00F4               	movwf	SetPosition@x+1
  1025     021D  3000               	movlw	0
  1026     021E  00F5               	movwf	SetPosition@y
  1027     021F  00F6               	movwf	SetPosition@y+1
  1028     0220  120A  118A  2074  120A  118A  	fcall	_SetPosition
  1029     0225                     l1585:
  1030                           
  1031                           ;main.c: 65:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray, &re
      +                          verse);
  1032     0225  3065               	movlw	low main@shapePosition
  1033     0226  1283               	bcf	3,5	;RP0=0, select bank0
  1034     0227  1303               	bcf	3,6	;RP1=0, select bank0
  1035     0228  00D2               	movwf	ChangeOfCoordinates@_shapePosition
  1036     0229  3000               	movlw	high main@shapePosition
  1037     022A  00D3               	movwf	ChangeOfCoordinates@_shapePosition+1
  1038     022B  305F               	movlw	(low (main@square_1| 0))& (0+255)
  1039     022C  00D4               	movwf	ChangeOfCoordinates@_figure
  1040     022D  0863               	movf	main@countElemntArray+1,w
  1041     022E  00D6               	movwf	ChangeOfCoordinates@_countElemntArray+1
  1042     022F  0862               	movf	main@countElemntArray,w
  1043     0230  00D5               	movwf	ChangeOfCoordinates@_countElemntArray
  1044     0231  3064               	movlw	(low (main@reverse| 0))& (0+255)
  1045     0232  00D7               	movwf	ChangeOfCoordinates@_reverse
  1046     0233  120A  118A  23D6  120A  118A  	fcall	_ChangeOfCoordinates
  1047     0238  2A16               	goto	l1583
  1048     0239  120A  118A  2800   	ljmp	start
  1049     023C                     __end_of_main:
  1050                           
  1051                           	psect	text1
  1052     000D                     __ptext1:	
  1053 ;; *************** function _SpiInit *****************
  1054 ;; Defined at:
  1055 ;;		line 9 in file "spi.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, status,2, status,0
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1069 ;;      Params:         0       0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used: 1
  1075 ;; This function calls:
  1076 ;;		Nothing
  1077 ;; This function is called by:
  1078 ;;		_main
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082     000D                     _SpiInit:	
  1083                           ;psect for function _SpiInit
  1084                           
  1085     000D                     l1549:	
  1086                           ;incstack = 0
  1087                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
  1088                           
  1089                           
  1090                           ;spi.c: 10:     TRISC |= 0x10;
  1091     000D  1683               	bsf	3,5	;RP0=1, select bank1
  1092     000E  1303               	bcf	3,6	;RP1=0, select bank1
  1093     000F  1607               	bsf	7,4	;volatile
  1094     0010                     l1551:
  1095                           
  1096                           ;spi.c: 11:     TRISC &= ~0x28;
  1097     0010  30D7               	movlw	215
  1098     0011  0587               	andwf	7,f	;volatile
  1099                           
  1100                           ;spi.c: 12:     TRISA &= ~0x20;
  1101     0012  30DF               	movlw	223
  1102     0013  0585               	andwf	5,f	;volatile
  1103                           
  1104                           ;spi.c: 13:     PORTA &= ~0x20;
  1105     0014  30DF               	movlw	223
  1106     0015  1283               	bcf	3,5	;RP0=0, select bank0
  1107     0016  1303               	bcf	3,6	;RP1=0, select bank0
  1108     0017  0585               	andwf	5,f	;volatile
  1109     0018                     l1553:
  1110                           
  1111                           ;spi.c: 14:     SSPCON = 0x30;
  1112     0018  3030               	movlw	48
  1113     0019  0094               	movwf	20	;volatile
  1114     001A                     l1555:
  1115                           
  1116                           ;spi.c: 15:     SSPSTAT = 0x80;
  1117     001A  3080               	movlw	128
  1118     001B  1683               	bsf	3,5	;RP0=1, select bank1
  1119     001C  1303               	bcf	3,6	;RP1=0, select bank1
  1120     001D  0094               	movwf	20	;volatile
  1121     001E                     l66:
  1122     001E  0008               	return
  1123     001F                     __end_of_SpiInit:
  1124                           
  1125                           	psect	text2
  1126     0074                     __ptext2:	
  1127 ;; *************** function _SetPosition *****************
  1128 ;; Defined at:
  1129 ;;		line 3 in file "shape.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;  position        2    0[COMMON] PTR struct .
  1132 ;;		 -> main@shapePosition(4), 
  1133 ;;  x               2    2[COMMON] int 
  1134 ;;  y               2    4[COMMON] int 
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1146 ;;      Params:         6       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0
  1148 ;;      Temps:          2       0       0       0       0
  1149 ;;      Totals:         8       0       0       0       0
  1150 ;;Total ram usage:        8 bytes
  1151 ;; Hardware stack levels used: 1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159     0074                     _SetPosition:	
  1160                           ;psect for function _SetPosition
  1161                           
  1162     0074                     l1573:	
  1163                           ;incstack = 0
  1164                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1165                           
  1166                           
  1167                           ;shape.c: 4:     position->x = x;
  1168     0074  0871               	movf	SetPosition@position,w
  1169     0075  0084               	movwf	4
  1170     0076  1783               	bsf	3,7
  1171     0077  1C72               	btfss	SetPosition@position+1,0
  1172     0078  1383               	bcf	3,7
  1173     0079  0873               	movf	SetPosition@x,w
  1174     007A  0080               	movwf	0
  1175     007B  0A84               	incf	4,f
  1176     007C  0874               	movf	SetPosition@x+1,w
  1177     007D  0080               	movwf	0
  1178     007E                     l1575:
  1179                           
  1180                           ;shape.c: 5:     position->y = y;
  1181     007E  0871               	movf	SetPosition@position,w
  1182     007F  3E02               	addlw	2
  1183     0080  00F7               	movwf	??_SetPosition
  1184     0081  0872               	movf	SetPosition@position+1,w
  1185     0082  1803               	skipnc
  1186     0083  3E01               	addlw	1
  1187     0084  3E00               	addlw	0
  1188     0085  00F8               	movwf	??_SetPosition+1
  1189     0086  0877               	movf	??_SetPosition,w
  1190     0087  0084               	movwf	4
  1191     0088  1783               	bsf	3,7
  1192     0089  1C78               	btfss	??_SetPosition+1,0
  1193     008A  1383               	bcf	3,7
  1194     008B  0875               	movf	SetPosition@y,w
  1195     008C  0080               	movwf	0
  1196     008D  0A84               	incf	4,f
  1197     008E  0876               	movf	SetPosition@y+1,w
  1198     008F  0080               	movwf	0
  1199     0090                     l102:
  1200     0090  0008               	return
  1201     0091                     __end_of_SetPosition:
  1202                           
  1203                           	psect	text3
  1204     0FD2                     __ptext3:	
  1205 ;; *************** function _PortBInit *****************
  1206 ;; Defined at:
  1207 ;;		line 13 in file "portsinit.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		status,2
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1221 ;;      Params:         0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0
  1224 ;;      Totals:         0       0       0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used: 1
  1227 ;; This function calls:
  1228 ;;		Nothing
  1229 ;; This function is called by:
  1230 ;;		_main
  1231 ;; This function uses a non-reentrant model
  1232 ;;
  1233                           
  1234     0FD2                     _PortBInit:	
  1235                           ;psect for function _PortBInit
  1236                           
  1237     0FD2                     l1571:	
  1238                           ;incstack = 0
  1239                           ; Regs used in _PortBInit: [status,2]
  1240                           
  1241                           
  1242                           ;portsinit.c: 14:     TRISB = 0x00;
  1243     0FD2  1683               	bsf	3,5	;RP0=1, select bank1
  1244     0FD3  1303               	bcf	3,6	;RP1=0, select bank1
  1245     0FD4  0186               	clrf	6	;volatile
  1246                           
  1247                           ;portsinit.c: 15:     PORTB = 0x00;
  1248     0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  1249     0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  1250     0FD7  0186               	clrf	6	;volatile
  1251     0FD8                     l49:
  1252     0FD8  0008               	return
  1253     0FD9                     __end_of_PortBInit:
  1254                           
  1255                           	psect	text4
  1256     00D7                     __ptext4:	
  1257 ;; *************** function _MatrixInit *****************
  1258 ;; Defined at:
  1259 ;;		line 20 in file "matrix.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2, status,0, pclath, cstack
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1273 ;;      Params:         0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0
  1275 ;;      Temps:          3       0       0       0       0
  1276 ;;      Totals:         3       0       0       0       0
  1277 ;;Total ram usage:        3 bytes
  1278 ;; Hardware stack levels used: 1
  1279 ;; Hardware stack levels required when called: 3
  1280 ;; This function calls:
  1281 ;;		_SendToSegment
  1282 ;;		_SpiClearMatrix
  1283 ;; This function is called by:
  1284 ;;		_main
  1285 ;; This function uses a non-reentrant model
  1286 ;;
  1287                           
  1288     00D7                     _MatrixInit:	
  1289                           ;psect for function _MatrixInit
  1290                           
  1291     00D7                     l1557:	
  1292                           ;incstack = 0
  1293                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1294                           
  1295                           
  1296                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1297     00D7  3003               	movlw	3
  1298     00D8  00FA               	movwf	??_MatrixInit+2
  1299     00D9  3008               	movlw	8
  1300     00DA  00F9               	movwf	??_MatrixInit+1
  1301     00DB  3077               	movlw	119
  1302     00DC  00F8               	movwf	??_MatrixInit
  1303     00DD                     u977:
  1304     00DD  0BF8               	decfsz	??_MatrixInit,f
  1305     00DE  28DD               	goto	u977
  1306     00DF  0BF9               	decfsz	??_MatrixInit+1,f
  1307     00E0  28DD               	goto	u977
  1308     00E1  0BFA               	decfsz	??_MatrixInit+2,f
  1309     00E2  28DD               	goto	u977
  1310     00E3                     l1559:
  1311                           
  1312                           ;matrix.c: 22:     RA5=1;
  1313     00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1314     00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1315     00E5  1685               	bsf	5,5	;volatile
  1316     00E6                     l1561:
  1317                           
  1318                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1319     00E6  3009               	movlw	9
  1320     00E7  00F2               	movwf	SendToSegment@segment
  1321     00E8  3000               	movlw	0
  1322     00E9  00F3               	movwf	SendToSegment@segment+1
  1323     00EA  01F4               	clrf	SendToSegment@data
  1324     00EB  120A  118A  2032  120A  118A  	fcall	_SendToSegment
  1325     00F0                     l1563:
  1326                           
  1327                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1328     00F0  300B               	movlw	11
  1329     00F1  00F2               	movwf	SendToSegment@segment
  1330     00F2  3000               	movlw	0
  1331     00F3  00F3               	movwf	SendToSegment@segment+1
  1332     00F4  3007               	movlw	7
  1333     00F5  00F4               	movwf	SendToSegment@data
  1334     00F6  120A  118A  2032  120A  118A  	fcall	_SendToSegment
  1335     00FB                     l1565:
  1336                           
  1337                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1338     00FB  300A               	movlw	10
  1339     00FC  00F2               	movwf	SendToSegment@segment
  1340     00FD  3000               	movlw	0
  1341     00FE  00F3               	movwf	SendToSegment@segment+1
  1342     00FF  3002               	movlw	2
  1343     0100  00F4               	movwf	SendToSegment@data
  1344     0101  120A  118A  2032  120A  118A  	fcall	_SendToSegment
  1345     0106                     l1567:
  1346                           
  1347                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1348     0106  300C               	movlw	12
  1349     0107  00F2               	movwf	SendToSegment@segment
  1350     0108  3000               	movlw	0
  1351     0109  00F3               	movwf	SendToSegment@segment+1
  1352     010A  01F4               	clrf	SendToSegment@data
  1353     010B  0AF4               	incf	SendToSegment@data,f
  1354     010C  120A  118A  2032  120A  118A  	fcall	_SendToSegment
  1355     0111                     l1569:
  1356                           
  1357                           ;matrix.c: 27:     SpiClearMatrix();
  1358     0111  120A  118A  2045  120A  118A  	fcall	_SpiClearMatrix
  1359     0116                     l88:
  1360     0116  0008               	return
  1361     0117                     __end_of_MatrixInit:
  1362                           
  1363                           	psect	text5
  1364     03D6                     __ptext5:	
  1365 ;; *************** function _ChangeOfCoordinates *****************
  1366 ;; Defined at:
  1367 ;;		line 19 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  _shapePositi    2   50[BANK0 ] PTR struct .
  1370 ;;		 -> main@shapePosition(4), 
  1371 ;;  _figure         1   52[BANK0 ] PTR unsigned char 
  1372 ;;		 -> main@square_1(3), 
  1373 ;;  _countElemnt    2   53[BANK0 ] int 
  1374 ;;  _reverse        1   55[BANK0 ] PTR _Bool 
  1375 ;;		 -> main@reverse(1), NULL(0), 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  i               2   59[BANK0 ] int 
  1378 ;;  step            2   61[BANK0 ] int 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         0       6       0       0       0
  1389 ;;      Locals:         0       4       0       0       0
  1390 ;;      Temps:          0       3       0       0       0
  1391 ;;      Totals:         0      13       0       0       0
  1392 ;;Total ram usage:       13 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 4
  1395 ;; This function calls:
  1396 ;;		_MovieShape
  1397 ;;		_Reverse
  1398 ;;		_Rotate
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404     03D6                     _ChangeOfCoordinates:	
  1405                           ;psect for function _ChangeOfCoordinates
  1406                           
  1407     03D6                     l1509:	
  1408                           ;incstack = 0
  1409                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1410                           
  1411                           
  1412                           ;main.c: 20:     const unsigned long delay = 150;;main.c: 22:     int step = 0;
  1413     03D6  1283               	bcf	3,5	;RP0=0, select bank0
  1414     03D7  1303               	bcf	3,6	;RP1=0, select bank0
  1415     03D8  01DD               	clrf	ChangeOfCoordinates@step
  1416     03D9  01DE               	clrf	ChangeOfCoordinates@step+1
  1417     03DA                     l21:	
  1418                           ;main.c: 23:         do{
  1419                           
  1420                           
  1421                           ;main.c: 24:             for(int i = 0; i < 5; i++){
  1422     03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1423     03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1424     03DC  01DB               	clrf	ChangeOfCoordinates@i
  1425     03DD  01DC               	clrf	ChangeOfCoordinates@i+1
  1426     03DE  2C23               	goto	l1525
  1427     03DF                     l1515:
  1428                           
  1429                           ;main.c: 27:                         MovieShape(right, _shapePosition, _figure, _countEl
      +                          emntArray);
  1430     03DF  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1431     03E0  00A5               	movwf	MovieShape@_shapePosition
  1432     03E1  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1433     03E2  00A6               	movwf	MovieShape@_shapePosition+1
  1434     03E3  0854               	movf	ChangeOfCoordinates@_figure,w
  1435     03E4  00A7               	movwf	MovieShape@shapeArray
  1436     03E5  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1437     03E6  00A9               	movwf	MovieShape@countElemntArray+1
  1438     03E7  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1439     03E8  00A8               	movwf	MovieShape@countElemntArray
  1440     03E9  3003               	movlw	3
  1441     03EA  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1442                           
  1443                           ;main.c: 28:                         break;
  1444     03EF  2C38               	goto	l1527
  1445     03F0                     l1517:
  1446                           
  1447                           ;main.c: 30:                         MovieShape(down, _shapePosition, _figure, _countEle
      +                          mntArray);
  1448     03F0  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1449     03F1  00A5               	movwf	MovieShape@_shapePosition
  1450     03F2  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1451     03F3  00A6               	movwf	MovieShape@_shapePosition+1
  1452     03F4  0854               	movf	ChangeOfCoordinates@_figure,w
  1453     03F5  00A7               	movwf	MovieShape@shapeArray
  1454     03F6  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1455     03F7  00A9               	movwf	MovieShape@countElemntArray+1
  1456     03F8  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1457     03F9  00A8               	movwf	MovieShape@countElemntArray
  1458     03FA  3000               	movlw	0
  1459     03FB  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1460                           
  1461                           ;main.c: 31:                         break;
  1462     0400  2C38               	goto	l1527
  1463     0401                     l1519:
  1464                           
  1465                           ;main.c: 33:                         MovieShape(left, _shapePosition, _figure, _countEle
      +                          mntArray);
  1466     0401  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1467     0402  00A5               	movwf	MovieShape@_shapePosition
  1468     0403  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1469     0404  00A6               	movwf	MovieShape@_shapePosition+1
  1470     0405  0854               	movf	ChangeOfCoordinates@_figure,w
  1471     0406  00A7               	movwf	MovieShape@shapeArray
  1472     0407  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1473     0408  00A9               	movwf	MovieShape@countElemntArray+1
  1474     0409  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1475     040A  00A8               	movwf	MovieShape@countElemntArray
  1476     040B  3002               	movlw	2
  1477     040C  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1478                           
  1479                           ;main.c: 34:                         break;
  1480     0411  2C38               	goto	l1527
  1481     0412                     l1521:
  1482                           
  1483                           ;main.c: 36:                         MovieShape(up, _shapePosition, _figure, _countElemn
      +                          tArray);
  1484     0412  0852               	movf	ChangeOfCoordinates@_shapePosition,w
  1485     0413  00A5               	movwf	MovieShape@_shapePosition
  1486     0414  0853               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1487     0415  00A6               	movwf	MovieShape@_shapePosition+1
  1488     0416  0854               	movf	ChangeOfCoordinates@_figure,w
  1489     0417  00A7               	movwf	MovieShape@shapeArray
  1490     0418  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1491     0419  00A9               	movwf	MovieShape@countElemntArray+1
  1492     041A  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1493     041B  00A8               	movwf	MovieShape@countElemntArray
  1494     041C  3001               	movlw	1
  1495     041D  120A  118A  223C  120A  118A  	fcall	_MovieShape
  1496                           
  1497                           ;main.c: 37:                         break;
  1498     0422  2C38               	goto	l1527
  1499     0423                     l1525:
  1500                           
  1501                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1502                           ; Switch size 1, requested type "simple"
  1503                           ; Number of cases is 1, Range of values is 0 to 0
  1504                           ; switch strategies available:
  1505                           ; Name         Instructions Cycles
  1506                           ; simple_byte            4     3 (average)
  1507                           ; direct_byte           11     8 (fixed)
  1508                           ; jumptable            260     6 (fixed)
  1509                           ;	Chosen strategy is simple_byte
  1510     0423  1283               	bcf	3,5	;RP0=0, select bank0
  1511     0424  1303               	bcf	3,6	;RP1=0, select bank0
  1512     0425  085E               	movf	ChangeOfCoordinates@step+1,w
  1513     0426  3A00               	xorlw	0	; case 0
  1514     0427  1903               	skipnz
  1515     0428  2C2A               	goto	l1637
  1516     0429  2C38               	goto	l1527
  1517     042A                     l1637:
  1518                           
  1519                           ; Switch size 1, requested type "simple"
  1520                           ; Number of cases is 4, Range of values is 0 to 3
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte           13     7 (average)
  1524                           ; direct_byte           20     8 (fixed)
  1525                           ; jumptable            260     6 (fixed)
  1526                           ;	Chosen strategy is simple_byte
  1527     042A  085D               	movf	ChangeOfCoordinates@step,w
  1528     042B  3A00               	xorlw	0	; case 0
  1529     042C  1903               	skipnz
  1530     042D  2BDF               	goto	l1515
  1531     042E  3A01               	xorlw	1	; case 1
  1532     042F  1903               	skipnz
  1533     0430  2BF0               	goto	l1517
  1534     0431  3A03               	xorlw	3	; case 2
  1535     0432  1903               	skipnz
  1536     0433  2C01               	goto	l1519
  1537     0434  3A01               	xorlw	1	; case 3
  1538     0435  1903               	skipnz
  1539     0436  2C12               	goto	l1521
  1540     0437  2C38               	goto	l1527
  1541     0438                     l1527:
  1542                           
  1543                           ;main.c: 39:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1544     0438  3004               	movlw	4
  1545     0439  1283               	bcf	3,5	;RP0=0, select bank0
  1546     043A  1303               	bcf	3,6	;RP1=0, select bank0
  1547     043B  00DA               	movwf	??_ChangeOfCoordinates+2
  1548     043C  300C               	movlw	12
  1549     043D  00D9               	movwf	??_ChangeOfCoordinates+1
  1550     043E  3033               	movlw	51
  1551     043F  00D8               	movwf	??_ChangeOfCoordinates
  1552     0440                     u987:
  1553     0440  0BD8               	decfsz	??_ChangeOfCoordinates,f
  1554     0441  2C40               	goto	u987
  1555     0442  0BD9               	decfsz	??_ChangeOfCoordinates+1,f
  1556     0443  2C40               	goto	u987
  1557     0444  0BDA               	decfsz	??_ChangeOfCoordinates+2,f
  1558     0445  2C40               	goto	u987
  1559                           
  1560                           ;main.c: 41:             }
  1561     0446  3001               	movlw	1
  1562     0447  1283               	bcf	3,5	;RP0=0, select bank0
  1563     0448  1303               	bcf	3,6	;RP1=0, select bank0
  1564     0449  07DB               	addwf	ChangeOfCoordinates@i,f
  1565     044A  1803               	skipnc
  1566     044B  0ADC               	incf	ChangeOfCoordinates@i+1,f
  1567     044C  3000               	movlw	0
  1568     044D  07DC               	addwf	ChangeOfCoordinates@i+1,f
  1569     044E                     l1529:
  1570     044E  085C               	movf	ChangeOfCoordinates@i+1,w
  1571     044F  3A80               	xorlw	128
  1572     0450  00FF               	movwf	btemp+1
  1573     0451  3080               	movlw	128
  1574     0452  027F               	subwf	btemp+1,w
  1575     0453  1D03               	skipz
  1576     0454  2C57               	goto	u935
  1577     0455  3005               	movlw	5
  1578     0456  025B               	subwf	ChangeOfCoordinates@i,w
  1579     0457                     u935:
  1580     0457  1C03               	skipc
  1581     0458  2C5A               	goto	u931
  1582     0459  2C5B               	goto	u930
  1583     045A                     u931:
  1584     045A  2C23               	goto	l1525
  1585     045B                     u930:
  1586     045B                     l1531:
  1587                           
  1588                           ;main.c: 42:             if(step == 0 && *_reverse) {
  1589     045B  1283               	bcf	3,5	;RP0=0, select bank0
  1590     045C  1303               	bcf	3,6	;RP1=0, select bank0
  1591     045D  085D               	movf	ChangeOfCoordinates@step,w
  1592     045E  045E               	iorwf	ChangeOfCoordinates@step+1,w
  1593     045F  1D03               	btfss	3,2
  1594     0460  2C62               	goto	u941
  1595     0461  2C63               	goto	u940
  1596     0462                     u941:
  1597     0462  2C79               	goto	l1539
  1598     0463                     u940:
  1599     0463                     l1533:
  1600     0463  0857               	movf	ChangeOfCoordinates@_reverse,w
  1601     0464  0084               	movwf	4
  1602     0465  1383               	bcf	3,7	;select IRP bank0
  1603     0466  0800               	movf	0,w
  1604     0467  1903               	btfsc	3,2
  1605     0468  2C6A               	goto	u951
  1606     0469  2C6B               	goto	u950
  1607     046A                     u951:
  1608     046A  2C79               	goto	l1539
  1609     046B                     u950:
  1610     046B                     l1535:
  1611                           
  1612                           ;main.c: 43:                 Reverse(_figure, _countElemntArray);
  1613     046B  0854               	movf	ChangeOfCoordinates@_figure,w
  1614     046C  00F1               	movwf	Reverse@array
  1615     046D  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1616     046E  00F3               	movwf	Reverse@countElemnt+1
  1617     046F  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1618     0470  00F2               	movwf	Reverse@countElemnt
  1619     0471  120A  118A  2117  120A  118A  	fcall	_Reverse
  1620     0476                     l1537:
  1621                           
  1622                           ;main.c: 44:                 _reverse = 0;
  1623     0476  1283               	bcf	3,5	;RP0=0, select bank0
  1624     0477  1303               	bcf	3,6	;RP1=0, select bank0
  1625     0478  01D7               	clrf	ChangeOfCoordinates@_reverse
  1626     0479                     l1539:
  1627                           
  1628                           ;main.c: 46:             Rotate(_figure, _countElemntArray);
  1629     0479  0854               	movf	ChangeOfCoordinates@_figure,w
  1630     047A  00BE               	movwf	Rotate@array_
  1631     047B  0856               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1632     047C  00C0               	movwf	Rotate@length+1
  1633     047D  0855               	movf	ChangeOfCoordinates@_countElemntArray,w
  1634     047E  00BF               	movwf	Rotate@length
  1635     047F  120A  118A  2319  120A  118A  	fcall	_Rotate
  1636     0484                     l1541:
  1637                           
  1638                           ;main.c: 47:             step++;
  1639     0484  3001               	movlw	1
  1640     0485  1283               	bcf	3,5	;RP0=0, select bank0
  1641     0486  1303               	bcf	3,6	;RP1=0, select bank0
  1642     0487  07DD               	addwf	ChangeOfCoordinates@step,f
  1643     0488  1803               	skipnc
  1644     0489  0ADE               	incf	ChangeOfCoordinates@step+1,f
  1645     048A  3000               	movlw	0
  1646     048B  07DE               	addwf	ChangeOfCoordinates@step+1,f
  1647     048C                     l1543:
  1648                           
  1649                           ;main.c: 48:         } while(step < 4);
  1650     048C  085E               	movf	ChangeOfCoordinates@step+1,w
  1651     048D  3A80               	xorlw	128
  1652     048E  00FF               	movwf	btemp+1
  1653     048F  3080               	movlw	128
  1654     0490  027F               	subwf	btemp+1,w
  1655     0491  1D03               	skipz
  1656     0492  2C95               	goto	u965
  1657     0493  3004               	movlw	4
  1658     0494  025D               	subwf	ChangeOfCoordinates@step,w
  1659     0495                     u965:
  1660     0495  1C03               	skipc
  1661     0496  2C98               	goto	u961
  1662     0497  2C99               	goto	u960
  1663     0498                     u961:
  1664     0498  2BDA               	goto	l21
  1665     0499                     u960:
  1666     0499                     l32:
  1667     0499  0008               	return
  1668     049A                     __end_of_ChangeOfCoordinates:
  1669                           
  1670                           	psect	text6
  1671     0319                     __ptext6:	
  1672 ;; *************** function _Rotate *****************
  1673 ;; Defined at:
  1674 ;;		line 55 in file "shape.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  array_          1   30[BANK0 ] PTR unsigned char 
  1677 ;;		 -> main@square_1(3), 
  1678 ;;  length          2   31[BANK0 ] int 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  i               2   42[BANK0 ] int 
  1681 ;;  x               2   40[BANK0 ] int 
  1682 ;;  y               2   44[BANK0 ] int 
  1683 ;;  _i              2   48[BANK0 ] int 
  1684 ;;  res             2   46[BANK0 ] PTR unsigned char 
  1685 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1695 ;;      Params:         0       3       0       0       0
  1696 ;;      Locals:         0      10       0       0       0
  1697 ;;      Temps:          0       7       0       0       0
  1698 ;;      Totals:         0      20       0       0       0
  1699 ;;Total ram usage:       20 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; Hardware stack levels required when called: 3
  1702 ;; This function calls:
  1703 ;;		_calloc
  1704 ;;		_free
  1705 ;; This function is called by:
  1706 ;;		_ChangeOfCoordinates
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710     0319                     _Rotate:	
  1711                           ;psect for function _Rotate
  1712                           
  1713     0319                     l1469:	
  1714                           ;incstack = 0
  1715                           ; Regs used in _Rotate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1716                           
  1717                           
  1718                           ;shape.c: 57:     char * res = calloc((size_t)length, sizeof(char));
  1719     0319  1283               	bcf	3,5	;RP0=0, select bank0
  1720     031A  1303               	bcf	3,6	;RP1=0, select bank0
  1721     031B  0840               	movf	Rotate@length+1,w
  1722     031C  00B9               	movwf	calloc@nmemb+1
  1723     031D  083F               	movf	Rotate@length,w
  1724     031E  00B8               	movwf	calloc@nmemb
  1725     031F  3001               	movlw	1
  1726     0320  00BA               	movwf	calloc@size
  1727     0321  3000               	movlw	0
  1728     0322  00BB               	movwf	calloc@size+1
  1729     0323  120A  118A  215A  120A  118A  	fcall	_calloc
  1730     0328  1283               	bcf	3,5	;RP0=0, select bank0
  1731     0329  1303               	bcf	3,6	;RP1=0, select bank0
  1732     032A  0838               	movf	?_calloc,w
  1733     032B  00CE               	movwf	Rotate@res
  1734     032C  0839               	movf	?_calloc+1,w
  1735     032D  00CF               	movwf	Rotate@res+1
  1736     032E                     l1471:
  1737                           
  1738                           ;shape.c: 59:     if (res){
  1739     032E  084E               	movf	Rotate@res,w
  1740     032F  044F               	iorwf	Rotate@res+1,w
  1741     0330  1903               	btfsc	3,2
  1742     0331  2B33               	goto	u851
  1743     0332  2B34               	goto	u850
  1744     0333                     u851:
  1745     0333  2BCA               	goto	l1507
  1746     0334                     u850:
  1747     0334                     l1473:
  1748                           
  1749                           ;shape.c: 60:         for(int _i = length - 1; _i >= 0; _i--){
  1750     0334  083F               	movf	Rotate@length,w
  1751     0335  3EFF               	addlw	255
  1752     0336  00D0               	movwf	Rotate@_i
  1753     0337  0840               	movf	Rotate@length+1,w
  1754     0338  1803               	skipnc
  1755     0339  3E01               	addlw	1
  1756     033A  3EFF               	addlw	255
  1757     033B  00D1               	movwf	Rotate@_i+1
  1758     033C                     l1475:
  1759     033C  1FD1               	btfss	Rotate@_i+1,7
  1760     033D  2B3F               	goto	u861
  1761     033E  2B40               	goto	u860
  1762     033F                     u861:
  1763     033F  2B41               	goto	l1479
  1764     0340                     u860:
  1765     0340  2B94               	goto	l1499
  1766     0341                     l1479:
  1767                           
  1768                           ;shape.c: 61:             for(int i = length - 1, x = 0; i >= 0; i--, x++){
  1769     0341  083F               	movf	Rotate@length,w
  1770     0342  3EFF               	addlw	255
  1771     0343  00CA               	movwf	Rotate@i
  1772     0344  0840               	movf	Rotate@length+1,w
  1773     0345  1803               	skipnc
  1774     0346  3E01               	addlw	1
  1775     0347  3EFF               	addlw	255
  1776     0348  00CB               	movwf	Rotate@i+1
  1777     0349                     l1481:
  1778     0349  01C8               	clrf	Rotate@x
  1779     034A  01C9               	clrf	Rotate@x+1
  1780     034B                     l1483:
  1781     034B  1FCB               	btfss	Rotate@i+1,7
  1782     034C  2B4E               	goto	u871
  1783     034D  2B4F               	goto	u870
  1784     034E                     u871:
  1785     034E  2B50               	goto	l1487
  1786     034F                     u870:
  1787     034F  2B8D               	goto	l1495
  1788     0350                     l1487:
  1789                           
  1790                           ;shape.c: 62:                 res[_i] |= ((array_[x] >> _i ) & 1) << i;
  1791     0350  0848               	movf	Rotate@x,w
  1792     0351  073E               	addwf	Rotate@array_,w
  1793     0352  00C1               	movwf	??_Rotate
  1794     0353  0841               	movf	??_Rotate,w
  1795     0354  0084               	movwf	4
  1796     0355  1383               	bcf	3,7	;select IRP bank0
  1797     0356  0800               	movf	0,w
  1798     0357  00C2               	movwf	??_Rotate+1
  1799     0358  0A50               	incf	Rotate@_i,w
  1800     0359  2B5C               	goto	u884
  1801     035A                     u885:
  1802     035A  1003               	clrc
  1803     035B  0CC2               	rrf	??_Rotate+1,f
  1804     035C                     u884:
  1805     035C  3EFF               	addlw	-1
  1806     035D  1D03               	skipz
  1807     035E  2B5A               	goto	u885
  1808     035F  0842               	movf	??_Rotate+1,w
  1809     0360  3901               	andlw	1
  1810     0361  00C3               	movwf	??_Rotate+2
  1811     0362  0A4A               	incf	Rotate@i,w
  1812     0363  2B66               	goto	u894
  1813     0364                     u895:
  1814     0364  1003               	clrc
  1815     0365  0DC3               	rlf	??_Rotate+2,f
  1816     0366                     u894:
  1817     0366  3EFF               	addlw	-1
  1818     0367  1D03               	skipz
  1819     0368  2B64               	goto	u895
  1820     0369  0843               	movf	??_Rotate+2,w
  1821     036A  00C4               	movwf	??_Rotate+3
  1822     036B  0850               	movf	Rotate@_i,w
  1823     036C  074E               	addwf	Rotate@res,w
  1824     036D  00C6               	movwf	??_Rotate+5
  1825     036E  084F               	movf	Rotate@res+1,w
  1826     036F  00C5               	movwf	??_Rotate+4
  1827     0370  1803               	skipnc
  1828     0371  0AC5               	incf	??_Rotate+4,f
  1829     0372  1FD0               	btfss	Rotate@_i,7
  1830     0373  2B75               	goto	u900
  1831     0374  03C5               	decf	??_Rotate+4,f
  1832     0375                     u900:
  1833     0375  1283               	bcf	3,5	;RP0=0, select bank0
  1834     0376  1303               	bcf	3,6	;RP1=0, select bank0
  1835     0377  0845               	movf	??_Rotate+4,w
  1836     0378  00C7               	movwf	??_Rotate+6
  1837     0379  0846               	movf	??_Rotate+5,w
  1838     037A  0084               	movwf	4
  1839     037B  1783               	bsf	3,7
  1840     037C  1C47               	btfss	??_Rotate+6,0
  1841     037D  1383               	bcf	3,7
  1842     037E  0844               	movf	??_Rotate+3,w
  1843     037F  0480               	iorwf	0,f
  1844     0380                     l1489:
  1845                           
  1846                           ;shape.c: 63:             }
  1847     0380  30FF               	movlw	255
  1848     0381  07CA               	addwf	Rotate@i,f
  1849     0382  1803               	skipnc
  1850     0383  0ACB               	incf	Rotate@i+1,f
  1851     0384  30FF               	movlw	255
  1852     0385  07CB               	addwf	Rotate@i+1,f
  1853     0386                     l1491:
  1854     0386  3001               	movlw	1
  1855     0387  07C8               	addwf	Rotate@x,f
  1856     0388  1803               	skipnc
  1857     0389  0AC9               	incf	Rotate@x+1,f
  1858     038A  3000               	movlw	0
  1859     038B  07C9               	addwf	Rotate@x+1,f
  1860     038C  2B4B               	goto	l1483
  1861     038D                     l1495:
  1862                           
  1863                           ;shape.c: 64:         }
  1864     038D  30FF               	movlw	255
  1865     038E  07D0               	addwf	Rotate@_i,f
  1866     038F  1803               	skipnc
  1867     0390  0AD1               	incf	Rotate@_i+1,f
  1868     0391  30FF               	movlw	255
  1869     0392  07D1               	addwf	Rotate@_i+1,f
  1870     0393  2B3C               	goto	l1475
  1871     0394                     l1499:
  1872                           
  1873                           ;shape.c: 66:         for(int y = 0; y < length; y++){
  1874     0394  01CC               	clrf	Rotate@y
  1875     0395  01CD               	clrf	Rotate@y+1
  1876     0396  2BBC               	goto	l1505
  1877     0397                     l1501:
  1878                           
  1879                           ;shape.c: 67:             array_[y] = res[y];
  1880     0397  1283               	bcf	3,5	;RP0=0, select bank0
  1881     0398  1303               	bcf	3,6	;RP1=0, select bank0
  1882     0399  084C               	movf	Rotate@y,w
  1883     039A  074E               	addwf	Rotate@res,w
  1884     039B  00C2               	movwf	??_Rotate+1
  1885     039C  084F               	movf	Rotate@res+1,w
  1886     039D  00C1               	movwf	??_Rotate
  1887     039E  1803               	skipnc
  1888     039F  0AC1               	incf	??_Rotate,f
  1889     03A0  1FCC               	btfss	Rotate@y,7
  1890     03A1  2BA3               	goto	u910
  1891     03A2  03C1               	decf	??_Rotate,f
  1892     03A3                     u910:
  1893     03A3  1283               	bcf	3,5	;RP0=0, select bank0
  1894     03A4  1303               	bcf	3,6	;RP1=0, select bank0
  1895     03A5  0841               	movf	??_Rotate,w
  1896     03A6  00C3               	movwf	??_Rotate+2
  1897     03A7  0842               	movf	??_Rotate+1,w
  1898     03A8  0084               	movwf	4
  1899     03A9  1783               	bsf	3,7
  1900     03AA  1C43               	btfss	??_Rotate+2,0
  1901     03AB  1383               	bcf	3,7
  1902     03AC  0800               	movf	0,w
  1903     03AD  00C4               	movwf	??_Rotate+3
  1904     03AE  084C               	movf	Rotate@y,w
  1905     03AF  073E               	addwf	Rotate@array_,w
  1906     03B0  00C5               	movwf	??_Rotate+4
  1907     03B1  0845               	movf	??_Rotate+4,w
  1908     03B2  0084               	movwf	4
  1909     03B3  0844               	movf	??_Rotate+3,w
  1910     03B4  1383               	bcf	3,7	;select IRP bank0
  1911     03B5  0080               	movwf	0
  1912     03B6                     l1503:
  1913                           
  1914                           ;shape.c: 68:         }
  1915     03B6  3001               	movlw	1
  1916     03B7  07CC               	addwf	Rotate@y,f
  1917     03B8  1803               	skipnc
  1918     03B9  0ACD               	incf	Rotate@y+1,f
  1919     03BA  3000               	movlw	0
  1920     03BB  07CD               	addwf	Rotate@y+1,f
  1921     03BC                     l1505:
  1922     03BC  084D               	movf	Rotate@y+1,w
  1923     03BD  3A80               	xorlw	128
  1924     03BE  00C1               	movwf	??_Rotate
  1925     03BF  0840               	movf	Rotate@length+1,w
  1926     03C0  3A80               	xorlw	128
  1927     03C1  0241               	subwf	??_Rotate,w
  1928     03C2  1D03               	skipz
  1929     03C3  2BC6               	goto	u925
  1930     03C4  083F               	movf	Rotate@length,w
  1931     03C5  024C               	subwf	Rotate@y,w
  1932     03C6                     u925:
  1933     03C6  1C03               	skipc
  1934     03C7  2BC9               	goto	u921
  1935     03C8  2BCA               	goto	u920
  1936     03C9                     u921:
  1937     03C9  2B97               	goto	l1501
  1938     03CA                     u920:
  1939     03CA                     l1507:
  1940                           
  1941                           ;shape.c: 70:     free(res);
  1942     03CA  1283               	bcf	3,5	;RP0=0, select bank0
  1943     03CB  1303               	bcf	3,6	;RP1=0, select bank0
  1944     03CC  084E               	movf	Rotate@res,w
  1945     03CD  00F1               	movwf	free@ptr
  1946     03CE  084F               	movf	Rotate@res+1,w
  1947     03CF  00F2               	movwf	free@ptr+1
  1948     03D0  120A  118A  2564  120A  118A  	fcall	_free
  1949     03D5                     l141:
  1950     03D5  0008               	return
  1951     03D6                     __end_of_Rotate:
  1952                           
  1953                           	psect	text7
  1954     0564                     __ptext7:	
  1955 ;; *************** function _free *****************
  1956 ;; Defined at:
  1957 ;;		line 67 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  ptr             2    0[COMMON] PTR void 
  1960 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  c               2   10[COMMON] PTR struct chunk
  1963 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1964 ;;  cptr            2    8[COMMON] PTR unsigned char 
  1965 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1975 ;;      Params:         2       0       0       0       0
  1976 ;;      Locals:         4       0       0       0       0
  1977 ;;      Temps:          6       0       0       0       0
  1978 ;;      Totals:        12       0       0       0       0
  1979 ;;Total ram usage:       12 bytes
  1980 ;; Hardware stack levels used: 1
  1981 ;; This function calls:
  1982 ;;		Nothing
  1983 ;; This function is called by:
  1984 ;;		_Rotate
  1985 ;; This function uses a non-reentrant model
  1986 ;;
  1987                           
  1988     0564                     _free:	
  1989                           ;psect for function _free
  1990                           
  1991     0564                     l1403:	
  1992                           ;incstack = 0
  1993                           ; Regs used in _free: [wreg-fsr0h+status,2+status,0+btemp+1]
  1994                           
  1995     0564  0871               	movf	free@ptr,w
  1996     0565  00F9               	movwf	free@cptr
  1997     0566  0872               	movf	free@ptr+1,w
  1998     0567  00FA               	movwf	free@cptr+1
  1999     0568  0871               	movf	free@ptr,w
  2000     0569  0472               	iorwf	free@ptr+1,w
  2001     056A  1D03               	btfss	3,2
  2002     056B  2D6D               	goto	u801
  2003     056C  2D6E               	goto	u800
  2004     056D                     u801:
  2005     056D  2D6F               	goto	l1407
  2006     056E                     u800:
  2007     056E  2E51               	goto	l720
  2008     056F                     l1407:
  2009     056F  30FE               	movlw	254
  2010     0570  00F3               	movwf	??_free
  2011     0571  0873               	movf	??_free,w
  2012     0572  0779               	addwf	free@cptr,w
  2013     0573  00FB               	movwf	free@c
  2014     0574  087A               	movf	free@cptr+1,w
  2015     0575  00F4               	movwf	??_free+1
  2016     0576  1803               	skipnc
  2017     0577  0AF4               	incf	??_free+1,f
  2018     0578  1BF3               	btfsc	??_free,7
  2019     0579  03F4               	decf	??_free+1,f
  2020     057A  0874               	movf	??_free+1,w
  2021     057B  00FC               	movwf	free@c+1
  2022     057C  1283               	bcf	3,5	;RP0=0, select bank0
  2023     057D  1303               	bcf	3,6	;RP1=0, select bank0
  2024     057E  086D               	movf	___freelist,w
  2025     057F  046E               	iorwf	___freelist+1,w
  2026     0580  1903               	btfsc	3,2
  2027     0581  2D83               	goto	u811
  2028     0582  2D84               	goto	u810
  2029     0583                     u811:
  2030     0583  2E40               	goto	l1429
  2031     0584                     u810:
  2032     0584                     l1409:
  2033     0584  087B               	movf	free@c,w
  2034     0585  0084               	movwf	4
  2035     0586  1783               	bsf	3,7
  2036     0587  1C7C               	btfss	free@c+1,0
  2037     0588  1383               	bcf	3,7
  2038     0589  0800               	movf	0,w
  2039     058A  0779               	addwf	free@cptr,w
  2040     058B  00F3               	movwf	??_free
  2041     058C  087A               	movf	free@cptr+1,w
  2042     058D  1803               	skipnc
  2043     058E  3E01               	addlw	1
  2044     058F  00F4               	movwf	??_free+1
  2045     0590  0874               	movf	??_free+1,w
  2046     0591  066E               	xorwf	___freelist+1,w
  2047     0592  1D03               	skipz
  2048     0593  2D96               	goto	u825
  2049     0594  0873               	movf	??_free,w
  2050     0595  066D               	xorwf	___freelist,w
  2051     0596                     u825:
  2052     0596  1D03               	skipz
  2053     0597  2D99               	goto	u821
  2054     0598  2D9A               	goto	u820
  2055     0599                     u821:
  2056     0599  2DE6               	goto	l1421
  2057     059A                     u820:
  2058     059A                     l1411:
  2059     059A  086D               	movf	___freelist,w
  2060     059B  3E02               	addlw	2
  2061     059C  00F3               	movwf	??_free
  2062     059D  086E               	movf	___freelist+1,w
  2063     059E  1803               	skipnc
  2064     059F  3E01               	addlw	1
  2065     05A0  3E00               	addlw	0
  2066     05A1  00F4               	movwf	??_free+1
  2067     05A2  0873               	movf	??_free,w
  2068     05A3  0084               	movwf	4
  2069     05A4  1783               	bsf	3,7
  2070     05A5  1C74               	btfss	??_free+1,0
  2071     05A6  1383               	bcf	3,7
  2072     05A7  0800               	movf	0,w
  2073     05A8  00F5               	movwf	??_free+2
  2074     05A9  0A84               	incf	4,f
  2075     05AA  0800               	movf	0,w
  2076     05AB  00F6               	movwf	??_free+3
  2077     05AC  087B               	movf	free@c,w
  2078     05AD  3E02               	addlw	2
  2079     05AE  00F7               	movwf	??_free+4
  2080     05AF  087C               	movf	free@c+1,w
  2081     05B0  1803               	skipnc
  2082     05B1  3E01               	addlw	1
  2083     05B2  3E00               	addlw	0
  2084     05B3  00F8               	movwf	??_free+5
  2085     05B4  0877               	movf	??_free+4,w
  2086     05B5  0084               	movwf	4
  2087     05B6  1783               	bsf	3,7
  2088     05B7  1C78               	btfss	??_free+5,0
  2089     05B8  1383               	bcf	3,7
  2090     05B9  0875               	movf	??_free+2,w
  2091     05BA  0080               	movwf	0
  2092     05BB  0876               	movf	??_free+3,w
  2093     05BC  0A84               	incf	4,f
  2094     05BD  0080               	movwf	0
  2095     05BE  0384               	decf	4,f
  2096     05BF                     l1413:
  2097     05BF  086D               	movf	___freelist,w
  2098     05C0  0084               	movwf	4
  2099     05C1  1783               	bsf	3,7
  2100     05C2  1C6E               	btfss	___freelist+1,0
  2101     05C3  1383               	bcf	3,7
  2102     05C4  0800               	movf	0,w
  2103     05C5  00F3               	movwf	??_free
  2104     05C6  0A84               	incf	4,f
  2105     05C7  0800               	movf	0,w
  2106     05C8  00F4               	movwf	??_free+1
  2107     05C9  0873               	movf	??_free,w
  2108     05CA  3E02               	addlw	2
  2109     05CB  00F5               	movwf	??_free+2
  2110     05CC  0874               	movf	??_free+1,w
  2111     05CD  1803               	skipnc
  2112     05CE  3E01               	addlw	1
  2113     05CF  3E00               	addlw	0
  2114     05D0  00F6               	movwf	??_free+3
  2115     05D1  087B               	movf	free@c,w
  2116     05D2  0084               	movwf	4
  2117     05D3  1783               	bsf	3,7
  2118     05D4  1C7C               	btfss	free@c+1,0
  2119     05D5  1383               	bcf	3,7
  2120     05D6  0875               	movf	??_free+2,w
  2121     05D7  0780               	addwf	0,f
  2122     05D8  0F84               	incfsz	4,f
  2123     05D9  0800               	movf	0,w
  2124     05DA  1803               	skipnc
  2125     05DB  0A00               	incf	0,w
  2126     05DC  00FF               	movwf	btemp+1
  2127     05DD  0876               	movf	??_free+3,w
  2128     05DE  077F               	addwf	btemp+1,w
  2129     05DF  0080               	movwf	0
  2130     05E0  0384               	decf	4,f
  2131     05E1                     l1415:
  2132     05E1  087B               	movf	free@c,w
  2133     05E2  00ED               	movwf	___freelist
  2134     05E3  087C               	movf	free@c+1,w
  2135     05E4  00EE               	movwf	___freelist+1
  2136     05E5  2E51               	goto	l720
  2137     05E6                     l1421:
  2138     05E6  086D               	movf	___freelist,w
  2139     05E7  0084               	movwf	4
  2140     05E8  1783               	bsf	3,7
  2141     05E9  1C6E               	btfss	___freelist+1,0
  2142     05EA  1383               	bcf	3,7
  2143     05EB  0800               	movf	0,w
  2144     05EC  00F3               	movwf	??_free
  2145     05ED  0A84               	incf	4,f
  2146     05EE  0800               	movf	0,w
  2147     05EF  00F4               	movwf	??_free+1
  2148     05F0  0873               	movf	??_free,w
  2149     05F1  076D               	addwf	___freelist,w
  2150     05F2  00F5               	movwf	??_free+2
  2151     05F3  0874               	movf	??_free+1,w
  2152     05F4  1803               	skipnc
  2153     05F5  0A74               	incf	??_free+1,w
  2154     05F6  076E               	addwf	___freelist+1,w
  2155     05F7  00F6               	movwf	??_free+3
  2156     05F8  0875               	movf	??_free+2,w
  2157     05F9  3E02               	addlw	2
  2158     05FA  00F7               	movwf	??_free+4
  2159     05FB  0876               	movf	??_free+3,w
  2160     05FC  1803               	skipnc
  2161     05FD  3E01               	addlw	1
  2162     05FE  3E00               	addlw	0
  2163     05FF  00F8               	movwf	??_free+5
  2164     0600  087C               	movf	free@c+1,w
  2165     0601  0678               	xorwf	??_free+5,w
  2166     0602  1D03               	skipz
  2167     0603  2E06               	goto	u835
  2168     0604  087B               	movf	free@c,w
  2169     0605  0677               	xorwf	??_free+4,w
  2170     0606                     u835:
  2171     0606  1D03               	skipz
  2172     0607  2E09               	goto	u831
  2173     0608  2E0A               	goto	u830
  2174     0609                     u831:
  2175     0609  2E2D               	goto	l1427
  2176     060A                     u830:
  2177     060A                     l1423:
  2178     060A  087B               	movf	free@c,w
  2179     060B  0084               	movwf	4
  2180     060C  1783               	bsf	3,7
  2181     060D  1C7C               	btfss	free@c+1,0
  2182     060E  1383               	bcf	3,7
  2183     060F  0800               	movf	0,w
  2184     0610  00F3               	movwf	??_free
  2185     0611  0A84               	incf	4,f
  2186     0612  0800               	movf	0,w
  2187     0613  00F4               	movwf	??_free+1
  2188     0614  0873               	movf	??_free,w
  2189     0615  3E02               	addlw	2
  2190     0616  00F5               	movwf	??_free+2
  2191     0617  0874               	movf	??_free+1,w
  2192     0618  1803               	skipnc
  2193     0619  3E01               	addlw	1
  2194     061A  3E00               	addlw	0
  2195     061B  00F6               	movwf	??_free+3
  2196     061C  086D               	movf	___freelist,w
  2197     061D  0084               	movwf	4
  2198     061E  1783               	bsf	3,7
  2199     061F  1C6E               	btfss	___freelist+1,0
  2200     0620  1383               	bcf	3,7
  2201     0621  0875               	movf	??_free+2,w
  2202     0622  0780               	addwf	0,f
  2203     0623  0F84               	incfsz	4,f
  2204     0624  0800               	movf	0,w
  2205     0625  1803               	skipnc
  2206     0626  0A00               	incf	0,w
  2207     0627  00FF               	movwf	btemp+1
  2208     0628  0876               	movf	??_free+3,w
  2209     0629  077F               	addwf	btemp+1,w
  2210     062A  0080               	movwf	0
  2211     062B  0384               	decf	4,f
  2212     062C  2E51               	goto	l720
  2213     062D                     l1427:
  2214     062D  087B               	movf	free@c,w
  2215     062E  3E02               	addlw	2
  2216     062F  00F3               	movwf	??_free
  2217     0630  087C               	movf	free@c+1,w
  2218     0631  1803               	skipnc
  2219     0632  3E01               	addlw	1
  2220     0633  3E00               	addlw	0
  2221     0634  00F4               	movwf	??_free+1
  2222     0635  0873               	movf	??_free,w
  2223     0636  0084               	movwf	4
  2224     0637  1783               	bsf	3,7
  2225     0638  1C74               	btfss	??_free+1,0
  2226     0639  1383               	bcf	3,7
  2227     063A  086D               	movf	___freelist,w
  2228     063B  0080               	movwf	0
  2229     063C  0A84               	incf	4,f
  2230     063D  086E               	movf	___freelist+1,w
  2231     063E  0080               	movwf	0
  2232     063F  2DE1               	goto	l1415
  2233     0640                     l1429:
  2234     0640  087B               	movf	free@c,w
  2235     0641  3E02               	addlw	2
  2236     0642  00F3               	movwf	??_free
  2237     0643  087C               	movf	free@c+1,w
  2238     0644  1803               	skipnc
  2239     0645  3E01               	addlw	1
  2240     0646  3E00               	addlw	0
  2241     0647  00F4               	movwf	??_free+1
  2242     0648  0873               	movf	??_free,w
  2243     0649  0084               	movwf	4
  2244     064A  1783               	bsf	3,7
  2245     064B  1C74               	btfss	??_free+1,0
  2246     064C  1383               	bcf	3,7
  2247     064D  0180               	clrf	0
  2248     064E  0A84               	incf	4,f
  2249     064F  0180               	clrf	0
  2250     0650  2DE1               	goto	l1415
  2251     0651                     l720:
  2252     0651  0008               	return
  2253     0652                     __end_of_free:
  2254                           
  2255                           	psect	text8
  2256     015A                     __ptext8:	
  2257 ;; *************** function _calloc *****************
  2258 ;; Defined at:
  2259 ;;		line 10 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_calloc.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  nmemb           2   24[BANK0 ] unsigned int 
  2262 ;;  size            2   26[BANK0 ] unsigned int 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  new_ptr         2   28[BANK0 ] PTR void 
  2265 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2   24[BANK0 ] PTR void 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2275 ;;      Params:         0       4       0       0       0
  2276 ;;      Locals:         0       2       0       0       0
  2277 ;;      Temps:          0       0       0       0       0
  2278 ;;      Totals:         0       6       0       0       0
  2279 ;;Total ram usage:        6 bytes
  2280 ;; Hardware stack levels used: 1
  2281 ;; Hardware stack levels required when called: 2
  2282 ;; This function calls:
  2283 ;;		___wmul
  2284 ;;		_malloc
  2285 ;;		_memset
  2286 ;; This function is called by:
  2287 ;;		_Rotate
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291     015A                     _calloc:	
  2292                           ;psect for function _calloc
  2293                           
  2294     015A                     l1393:	
  2295                           ;incstack = 0
  2296                           ; Regs used in _calloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2297                           
  2298     015A  1283               	bcf	3,5	;RP0=0, select bank0
  2299     015B  1303               	bcf	3,6	;RP1=0, select bank0
  2300     015C  0839               	movf	calloc@nmemb+1,w
  2301     015D  00F2               	movwf	___wmul@multiplier+1
  2302     015E  0838               	movf	calloc@nmemb,w
  2303     015F  00F1               	movwf	___wmul@multiplier
  2304     0160  083B               	movf	calloc@size+1,w
  2305     0161  00F4               	movwf	___wmul@multiplicand+1
  2306     0162  083A               	movf	calloc@size,w
  2307     0163  00F3               	movwf	___wmul@multiplicand
  2308     0164  120A  118A  20B2  120A  118A  	fcall	___wmul
  2309     0169  0872               	movf	?___wmul+1,w
  2310     016A  00FA               	movwf	malloc@n+1
  2311     016B  0871               	movf	?___wmul,w
  2312     016C  00F9               	movwf	malloc@n
  2313     016D  120A  118A  249A  120A  118A  	fcall	_malloc
  2314     0172  0879               	movf	?_malloc,w
  2315     0173  1283               	bcf	3,5	;RP0=0, select bank0
  2316     0174  1303               	bcf	3,6	;RP1=0, select bank0
  2317     0175  00BC               	movwf	calloc@new_ptr
  2318     0176  087A               	movf	?_malloc+1,w
  2319     0177  00BD               	movwf	calloc@new_ptr+1
  2320     0178                     l1395:
  2321     0178  083C               	movf	calloc@new_ptr,w
  2322     0179  043D               	iorwf	calloc@new_ptr+1,w
  2323     017A  1903               	btfsc	3,2
  2324     017B  297D               	goto	u791
  2325     017C  297E               	goto	u790
  2326     017D                     u791:
  2327     017D  299B               	goto	l1399
  2328     017E                     u790:
  2329     017E                     l1397:
  2330     017E  083C               	movf	calloc@new_ptr,w
  2331     017F  00F7               	movwf	memset@dest
  2332     0180  083D               	movf	calloc@new_ptr+1,w
  2333     0181  00F8               	movwf	memset@dest+1
  2334     0182  3000               	movlw	0
  2335     0183  00F9               	movwf	memset@c
  2336     0184  00FA               	movwf	memset@c+1
  2337     0185  0839               	movf	calloc@nmemb+1,w
  2338     0186  00F2               	movwf	___wmul@multiplier+1
  2339     0187  0838               	movf	calloc@nmemb,w
  2340     0188  00F1               	movwf	___wmul@multiplier
  2341     0189  083B               	movf	calloc@size+1,w
  2342     018A  00F4               	movwf	___wmul@multiplicand+1
  2343     018B  083A               	movf	calloc@size,w
  2344     018C  00F3               	movwf	___wmul@multiplicand
  2345     018D  120A  118A  20B2  120A  118A  	fcall	___wmul
  2346     0192  0872               	movf	?___wmul+1,w
  2347     0193  00FC               	movwf	memset@n+1
  2348     0194  0871               	movf	?___wmul,w
  2349     0195  00FB               	movwf	memset@n
  2350     0196  120A  118A  2091  120A  118A  	fcall	_memset
  2351     019B                     l1399:
  2352     019B  1283               	bcf	3,5	;RP0=0, select bank0
  2353     019C  1303               	bcf	3,6	;RP1=0, select bank0
  2354     019D  083C               	movf	calloc@new_ptr,w
  2355     019E  00B8               	movwf	?_calloc
  2356     019F  083D               	movf	calloc@new_ptr+1,w
  2357     01A0  00B9               	movwf	?_calloc+1
  2358     01A1                     l697:
  2359     01A1  0008               	return
  2360     01A2                     __end_of_calloc:
  2361                           
  2362                           	psect	text9
  2363     0091                     __ptext9:	
  2364 ;; *************** function _memset *****************
  2365 ;; Defined at:
  2366 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  dest            2    6[COMMON] PTR void 
  2369 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2370 ;;  c               2    8[COMMON] int 
  2371 ;;  n               2   10[COMMON] unsigned int 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  p               2    0[BANK0 ] PTR unsigned char 
  2374 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  2    6[COMMON] PTR void 
  2377 ;; Registers used:
  2378 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2384 ;;      Params:         6       0       0       0       0
  2385 ;;      Locals:         0       2       0       0       0
  2386 ;;      Temps:          0       0       0       0       0
  2387 ;;      Totals:         6       2       0       0       0
  2388 ;;Total ram usage:        8 bytes
  2389 ;; Hardware stack levels used: 1
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_calloc
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397     0091                     _memset:	
  2398                           ;psect for function _memset
  2399                           
  2400     0091                     l1359:	
  2401                           ;incstack = 0
  2402                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2403                           
  2404     0091  0877               	movf	memset@dest,w
  2405     0092  1283               	bcf	3,5	;RP0=0, select bank0
  2406     0093  1303               	bcf	3,6	;RP1=0, select bank0
  2407     0094  00A0               	movwf	memset@p
  2408     0095  0878               	movf	memset@dest+1,w
  2409     0096  00A1               	movwf	memset@p+1
  2410     0097  28A3               	goto	l1365
  2411     0098                     l1361:
  2412     0098  0820               	movf	memset@p,w
  2413     0099  0084               	movwf	4
  2414     009A  1783               	bsf	3,7
  2415     009B  1C21               	btfss	memset@p+1,0
  2416     009C  1383               	bcf	3,7
  2417     009D  0879               	movf	memset@c,w
  2418     009E  0080               	movwf	0
  2419     009F                     l1363:
  2420     009F  3001               	movlw	1
  2421     00A0  07A0               	addwf	memset@p,f
  2422     00A1  1803               	skipnc
  2423     00A2  0AA1               	incf	memset@p+1,f
  2424     00A3                     l1365:
  2425     00A3  3001               	movlw	1
  2426     00A4  02FB               	subwf	memset@n,f
  2427     00A5  3000               	movlw	0
  2428     00A6  1C03               	skipc
  2429     00A7  03FC               	decf	memset@n+1,f
  2430     00A8  02FC               	subwf	memset@n+1,f
  2431     00A9  0A7B               	incf	memset@n,w
  2432     00AA  1D03               	skipz
  2433     00AB  28B0               	goto	u751
  2434     00AC  0A7C               	incf	memset@n+1,w
  2435     00AD  1D03               	btfss	3,2
  2436     00AE  28B0               	goto	u751
  2437     00AF  28B1               	goto	u750
  2438     00B0                     u751:
  2439     00B0  2898               	goto	l1361
  2440     00B1                     u750:
  2441     00B1                     l773:
  2442     00B1  0008               	return
  2443     00B2                     __end_of_memset:
  2444                           
  2445                           	psect	text10
  2446     049A                     __ptext10:	
  2447 ;; *************** function _malloc *****************
  2448 ;; Defined at:
  2449 ;;		line 16 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_malloc.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  n               2    8[COMMON] unsigned int 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  sz              2   16[BANK0 ] PTR unsigned int 
  2454 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2455 ;;  new             2   22[BANK0 ] PTR unsigned char 
  2456 ;;		 -> __heap_hi(0), NULL(0), 
  2457 ;;  m               2   14[BANK0 ] unsigned int 
  2458 ;;  p               2   20[BANK0 ] PTR void 
  2459 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2460 ;;  size            2   18[BANK0 ] unsigned int 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  2    8[COMMON] PTR void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2470 ;;      Params:         2       0       0       0       0
  2471 ;;      Locals:         0      10       0       0       0
  2472 ;;      Temps:          2       0       0       0       0
  2473 ;;      Totals:         4      10       0       0       0
  2474 ;;Total ram usage:       14 bytes
  2475 ;; Hardware stack levels used: 1
  2476 ;; Hardware stack levels required when called: 1
  2477 ;; This function calls:
  2478 ;;		___expand_heap
  2479 ;;		___simple_search_fl
  2480 ;; This function is called by:
  2481 ;;		_calloc
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485     049A                     _malloc:	
  2486                           ;psect for function _malloc
  2487                           
  2488     049A                     l1307:	
  2489                           ;incstack = 0
  2490                           ; Regs used in _malloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2491                           
  2492     049A  1283               	bcf	3,5	;RP0=0, select bank0
  2493     049B  1303               	bcf	3,6	;RP1=0, select bank0
  2494     049C  01B2               	clrf	malloc@size
  2495     049D  01B3               	clrf	malloc@size+1
  2496     049E                     l1309:
  2497     049E  0879               	movf	malloc@n,w
  2498     049F  047A               	iorwf	malloc@n+1,w
  2499     04A0  1D03               	btfss	3,2
  2500     04A1  2CA3               	goto	u681
  2501     04A2  2CA4               	goto	u680
  2502     04A3                     u681:
  2503     04A3  2CAA               	goto	l740
  2504     04A4                     u680:
  2505     04A4                     l1311:
  2506     04A4  3001               	movlw	1
  2507     04A5  07F9               	addwf	malloc@n,f
  2508     04A6  1803               	skipnc
  2509     04A7  0AFA               	incf	malloc@n+1,f
  2510     04A8  3000               	movlw	0
  2511     04A9  07FA               	addwf	malloc@n+1,f
  2512     04AA                     l740:
  2513     04AA  3000               	movlw	0
  2514     04AB  027A               	subwf	malloc@n+1,w
  2515     04AC  3002               	movlw	2
  2516     04AD  1903               	skipnz
  2517     04AE  0279               	subwf	malloc@n,w
  2518     04AF  1803               	skipnc
  2519     04B0  2CB2               	goto	u691
  2520     04B1  2CB3               	goto	u690
  2521     04B2                     u691:
  2522     04B2  2CB8               	goto	l1315
  2523     04B3                     u690:
  2524     04B3                     l1313:
  2525     04B3  3002               	movlw	2
  2526     04B4  00F9               	movwf	malloc@n
  2527     04B5  3000               	movlw	0
  2528     04B6  00FA               	movwf	malloc@n+1
  2529     04B7  2CD0               	goto	l1323
  2530     04B8                     l1315:
  2531     04B8  087A               	movf	malloc@n+1,w
  2532     04B9  00FC               	movwf	??_malloc+1
  2533     04BA  0879               	movf	malloc@n,w
  2534     04BB  00FB               	movwf	??_malloc
  2535     04BC  09FB               	comf	??_malloc,f
  2536     04BD  09FC               	comf	??_malloc+1,f
  2537     04BE  3000               	movlw	0
  2538     04BF  027C               	subwf	??_malloc+1,w
  2539     04C0  3002               	movlw	2
  2540     04C1  1903               	skipnz
  2541     04C2  027B               	subwf	??_malloc,w
  2542     04C3  1803               	skipnc
  2543     04C4  2CC6               	goto	u701
  2544     04C5  2CC7               	goto	u700
  2545     04C6                     u701:
  2546     04C6  2CD0               	goto	l1323
  2547     04C7                     u700:
  2548     04C7                     l1317:
  2549     04C7  300C               	movlw	12
  2550     04C8  1683               	bsf	3,5	;RP0=1, select bank1
  2551     04C9  1303               	bcf	3,6	;RP1=0, select bank1
  2552     04CA  00A6               	movwf	_errno^(0+128)
  2553     04CB  3000               	movlw	0
  2554     04CC  00A7               	movwf	(_errno^(0+128)+1)
  2555     04CD                     l1319:
  2556     04CD  01F9               	clrf	?_malloc
  2557     04CE  01FA               	clrf	?_malloc+1
  2558     04CF  2D63               	goto	l744
  2559     04D0                     l1323:
  2560     04D0                     l1325:
  2561     04D0  087A               	movf	malloc@n+1,w
  2562     04D1  00F2               	movwf	___simple_search_fl@n+1
  2563     04D2  0879               	movf	malloc@n,w
  2564     04D3  00F1               	movwf	___simple_search_fl@n
  2565     04D4  120A  118A  2652  120A  118A  	fcall	___simple_search_fl
  2566     04D9  0871               	movf	?___simple_search_fl,w
  2567     04DA  1283               	bcf	3,5	;RP0=0, select bank0
  2568     04DB  1303               	bcf	3,6	;RP1=0, select bank0
  2569     04DC  00B4               	movwf	malloc@p
  2570     04DD  0872               	movf	?___simple_search_fl+1,w
  2571     04DE  00B5               	movwf	malloc@p+1
  2572     04DF                     l1327:
  2573     04DF  0834               	movf	malloc@p,w
  2574     04E0  0435               	iorwf	malloc@p+1,w
  2575     04E1  1D03               	btfss	3,2
  2576     04E2  2CE4               	goto	u711
  2577     04E3  2CE5               	goto	u710
  2578     04E4                     u711:
  2579     04E4  2D5F               	goto	l1355
  2580     04E5                     u710:
  2581     04E5                     l1329:
  2582     04E5  086B               	movf	malloc@cur,w
  2583     04E6  1683               	bsf	3,5	;RP0=1, select bank1
  2584     04E7  1303               	bcf	3,6	;RP1=0, select bank1
  2585     04E8  0224               	subwf	malloc@end^(0+128),w
  2586     04E9  00FB               	movwf	??_malloc
  2587     04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2588     04EB  1303               	bcf	3,6	;RP1=0, select bank0
  2589     04EC  086C               	movf	malloc@cur+1,w
  2590     04ED  1C03               	skipc
  2591     04EE  0A6C               	incf	malloc@cur+1,w
  2592     04EF  1683               	bsf	3,5	;RP0=1, select bank1
  2593     04F0  1303               	bcf	3,6	;RP1=0, select bank1
  2594     04F1  0225               	subwf	(malloc@end+1)^(0+128),w
  2595     04F2  00FC               	movwf	??_malloc+1
  2596     04F3  087A               	movf	malloc@n+1,w
  2597     04F4  027C               	subwf	??_malloc+1,w
  2598     04F5  1D03               	skipz
  2599     04F6  2CF9               	goto	u725
  2600     04F7  0879               	movf	malloc@n,w
  2601     04F8  027B               	subwf	??_malloc,w
  2602     04F9                     u725:
  2603     04F9  1803               	skipnc
  2604     04FA  2CFC               	goto	u721
  2605     04FB  2CFD               	goto	u720
  2606     04FC                     u721:
  2607     04FC  2D3E               	goto	l746
  2608     04FD                     u720:
  2609     04FD                     l1331:
  2610     04FD  0879               	movf	malloc@n,w
  2611     04FE  3E02               	addlw	2
  2612     04FF  1283               	bcf	3,5	;RP0=0, select bank0
  2613     0500  1303               	bcf	3,6	;RP1=0, select bank0
  2614     0501  00AE               	movwf	malloc@m
  2615     0502  087A               	movf	malloc@n+1,w
  2616     0503  1803               	skipnc
  2617     0504  3E01               	addlw	1
  2618     0505  3E00               	addlw	0
  2619     0506  00AF               	movwf	malloc@m+1
  2620     0507                     l1333:
  2621     0507  302E               	movlw	(low (malloc@m| 0))& (0+255)
  2622     0508  00F1               	movwf	___expand_heap@pn
  2623     0509  120A  118A  21A2  120A  118A  	fcall	___expand_heap
  2624     050E  0871               	movf	?___expand_heap,w
  2625     050F  1283               	bcf	3,5	;RP0=0, select bank0
  2626     0510  1303               	bcf	3,6	;RP1=0, select bank0
  2627     0511  00B6               	movwf	malloc@new
  2628     0512  0872               	movf	?___expand_heap+1,w
  2629     0513  00B7               	movwf	malloc@new+1
  2630     0514                     l1335:
  2631     0514  0836               	movf	malloc@new,w
  2632     0515  0437               	iorwf	malloc@new+1,w
  2633     0516  1D03               	btfss	3,2
  2634     0517  2D19               	goto	u731
  2635     0518  2D1A               	goto	u730
  2636     0519                     u731:
  2637     0519  2D1B               	goto	l1341
  2638     051A                     u730:
  2639     051A  2CCD               	goto	l1319
  2640     051B                     l1341:
  2641     051B  1683               	bsf	3,5	;RP0=1, select bank1
  2642     051C  1303               	bcf	3,6	;RP1=0, select bank1
  2643     051D  0825               	movf	(malloc@end+1)^(0+128),w
  2644     051E  1283               	bcf	3,5	;RP0=0, select bank0
  2645     051F  1303               	bcf	3,6	;RP1=0, select bank0
  2646     0520  0637               	xorwf	malloc@new+1,w
  2647     0521  1D03               	skipz
  2648     0522  2D29               	goto	u745
  2649     0523  1683               	bsf	3,5	;RP0=1, select bank1
  2650     0524  1303               	bcf	3,6	;RP1=0, select bank1
  2651     0525  0824               	movf	malloc@end^(0+128),w
  2652     0526  1283               	bcf	3,5	;RP0=0, select bank0
  2653     0527  1303               	bcf	3,6	;RP1=0, select bank0
  2654     0528  0636               	xorwf	malloc@new,w
  2655     0529                     u745:
  2656     0529  1903               	skipnz
  2657     052A  2D2C               	goto	u741
  2658     052B  2D2D               	goto	u740
  2659     052C                     u741:
  2660     052C  2D31               	goto	l748
  2661     052D                     u740:
  2662     052D                     l1343:
  2663     052D  0836               	movf	malloc@new,w
  2664     052E  00EB               	movwf	malloc@cur
  2665     052F  0837               	movf	malloc@new+1,w
  2666     0530  00EC               	movwf	malloc@cur+1
  2667     0531                     l748:
  2668     0531  082E               	movf	malloc@m,w
  2669     0532  0736               	addwf	malloc@new,w
  2670     0533  1683               	bsf	3,5	;RP0=1, select bank1
  2671     0534  1303               	bcf	3,6	;RP1=0, select bank1
  2672     0535  00A4               	movwf	malloc@end^(0+128)
  2673     0536  1283               	bcf	3,5	;RP0=0, select bank0
  2674     0537  1303               	bcf	3,6	;RP1=0, select bank0
  2675     0538  0837               	movf	malloc@new+1,w
  2676     0539  1803               	skipnc
  2677     053A  3E01               	addlw	1
  2678     053B  1683               	bsf	3,5	;RP0=1, select bank1
  2679     053C  1303               	bcf	3,6	;RP1=0, select bank1
  2680     053D  00A5               	movwf	(malloc@end^(0+128)+1)
  2681     053E                     l746:
  2682     053E  1283               	bcf	3,5	;RP0=0, select bank0
  2683     053F  1303               	bcf	3,6	;RP1=0, select bank0
  2684     0540  086B               	movf	malloc@cur,w
  2685     0541  00B4               	movwf	malloc@p
  2686     0542  086C               	movf	malloc@cur+1,w
  2687     0543  00B5               	movwf	malloc@p+1
  2688     0544                     l1345:
  2689     0544  0834               	movf	malloc@p,w
  2690     0545  00B0               	movwf	malloc@sz
  2691     0546  0835               	movf	malloc@p+1,w
  2692     0547  00B1               	movwf	malloc@sz+1
  2693     0548                     l1347:
  2694     0548  0830               	movf	malloc@sz,w
  2695     0549  0084               	movwf	4
  2696     054A  1783               	bsf	3,7
  2697     054B  1C31               	btfss	malloc@sz+1,0
  2698     054C  1383               	bcf	3,7
  2699     054D  0879               	movf	malloc@n,w
  2700     054E  0080               	movwf	0
  2701     054F  0A84               	incf	4,f
  2702     0550  087A               	movf	malloc@n+1,w
  2703     0551  0080               	movwf	0
  2704     0552                     l1349:
  2705     0552  3002               	movlw	2
  2706     0553  07B0               	addwf	malloc@sz,f
  2707     0554  1803               	skipnc
  2708     0555  0AB1               	incf	malloc@sz+1,f
  2709     0556                     l1351:
  2710     0556  0830               	movf	malloc@sz,w
  2711     0557  00B4               	movwf	malloc@p
  2712     0558  0831               	movf	malloc@sz+1,w
  2713     0559  00B5               	movwf	malloc@p+1
  2714     055A                     l1353:
  2715     055A  0879               	movf	malloc@n,w
  2716     055B  3E02               	addlw	2
  2717     055C  07EB               	addwf	malloc@cur,f
  2718     055D  1803               	skipnc
  2719     055E  0AEC               	incf	malloc@cur+1,f
  2720     055F                     l1355:
  2721     055F  0834               	movf	malloc@p,w
  2722     0560  00F9               	movwf	?_malloc
  2723     0561  0835               	movf	malloc@p+1,w
  2724     0562  00FA               	movwf	?_malloc+1
  2725     0563                     l744:
  2726     0563  0008               	return
  2727     0564                     __end_of_malloc:
  2728                           
  2729                           	psect	text11
  2730     0652                     __ptext11:	
  2731 ;; *************** function ___simple_search_fl *****************
  2732 ;; Defined at:
  2733 ;;		line 19 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  n               2    0[COMMON] unsigned int 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  split           2    4[BANK0 ] PTR struct chunk
  2738 ;;		 -> __heap_hi$.$next(2), NULL(0), 
  2739 ;;  remaining_si    2    0[BANK0 ] unsigned int 
  2740 ;;  next            2    8[BANK0 ] PTR struct chunk
  2741 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2742 ;;  best            2   12[BANK0 ] PTR struct chunk
  2743 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2744 ;;  c               2   10[BANK0 ] PTR struct chunk
  2745 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2746 ;;  last            2    6[BANK0 ] PTR struct chunk
  2747 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2748 ;;  best_last       2    2[BANK0 ] PTR struct chunk
  2749 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  2    0[COMMON] PTR void 
  2752 ;; Registers used:
  2753 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2759 ;;      Params:         2       0       0       0       0
  2760 ;;      Locals:         0      14       0       0       0
  2761 ;;      Temps:          6       0       0       0       0
  2762 ;;      Totals:         8      14       0       0       0
  2763 ;;Total ram usage:       22 bytes
  2764 ;; Hardware stack levels used: 1
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_malloc
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772     0652                     ___simple_search_fl:	
  2773                           ;psect for function ___simple_search_fl
  2774                           
  2775     0652                     l1201:	
  2776                           ;incstack = 0
  2777                           ; Regs used in ___simple_search_fl: [wreg-fsr0h+status,2+status,0]
  2778                           
  2779     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2780     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2781     0654  01AC               	clrf	___simple_search_fl@best
  2782     0655  01AD               	clrf	___simple_search_fl@best+1
  2783     0656  01A2               	clrf	___simple_search_fl@best_last
  2784     0657  01A3               	clrf	___simple_search_fl@best_last+1
  2785     0658  01A6               	clrf	___simple_search_fl@last
  2786     0659  01A7               	clrf	___simple_search_fl@last+1
  2787     065A                     l1203:
  2788     065A  086D               	movf	___freelist,w
  2789     065B  046E               	iorwf	___freelist+1,w
  2790     065C  1D03               	btfss	3,2
  2791     065D  2E5F               	goto	u501
  2792     065E  2E60               	goto	u500
  2793     065F                     u501:
  2794     065F  2E63               	goto	l1209
  2795     0660                     u500:
  2796     0660                     l1205:
  2797     0660  01F1               	clrf	?___simple_search_fl
  2798     0661  01F2               	clrf	?___simple_search_fl+1
  2799     0662  2FD7               	goto	l703
  2800     0663                     l1209:
  2801     0663  086D               	movf	___freelist,w
  2802     0664  00AA               	movwf	___simple_search_fl@c
  2803     0665  086E               	movf	___freelist+1,w
  2804     0666  00AB               	movwf	___simple_search_fl@c+1
  2805     0667  2F1C               	goto	l1235
  2806     0668                     l1211:
  2807     0668  082A               	movf	___simple_search_fl@c,w
  2808     0669  0084               	movwf	4
  2809     066A  1783               	bsf	3,7
  2810     066B  1C2B               	btfss	___simple_search_fl@c+1,0
  2811     066C  1383               	bcf	3,7
  2812     066D  0800               	movf	0,w
  2813     066E  00F3               	movwf	??___simple_search_fl
  2814     066F  0A84               	incf	4,f
  2815     0670  0800               	movf	0,w
  2816     0671  00F4               	movwf	??___simple_search_fl+1
  2817     0672  0872               	movf	___simple_search_fl@n+1,w
  2818     0673  0674               	xorwf	??___simple_search_fl+1,w
  2819     0674  1D03               	skipz
  2820     0675  2E78               	goto	u515
  2821     0676  0871               	movf	___simple_search_fl@n,w
  2822     0677  0673               	xorwf	??___simple_search_fl,w
  2823     0678                     u515:
  2824     0678  1D03               	skipz
  2825     0679  2E7B               	goto	u511
  2826     067A  2E7C               	goto	u510
  2827     067B                     u511:
  2828     067B  2EC4               	goto	l1223
  2829     067C                     u510:
  2830     067C                     l1213:
  2831     067C  0826               	movf	___simple_search_fl@last,w
  2832     067D  0427               	iorwf	___simple_search_fl@last+1,w
  2833     067E  1903               	btfsc	3,2
  2834     067F  2E81               	goto	u521
  2835     0680  2E82               	goto	u520
  2836     0681                     u521:
  2837     0681  2EA8               	goto	l1217
  2838     0682                     u520:
  2839     0682                     l1215:
  2840     0682  082A               	movf	___simple_search_fl@c,w
  2841     0683  3E02               	addlw	2
  2842     0684  00F3               	movwf	??___simple_search_fl
  2843     0685  082B               	movf	___simple_search_fl@c+1,w
  2844     0686  1803               	skipnc
  2845     0687  3E01               	addlw	1
  2846     0688  3E00               	addlw	0
  2847     0689  00F4               	movwf	??___simple_search_fl+1
  2848     068A  0873               	movf	??___simple_search_fl,w
  2849     068B  0084               	movwf	4
  2850     068C  1783               	bsf	3,7
  2851     068D  1C74               	btfss	??___simple_search_fl+1,0
  2852     068E  1383               	bcf	3,7
  2853     068F  0800               	movf	0,w
  2854     0690  00F5               	movwf	??___simple_search_fl+2
  2855     0691  0A84               	incf	4,f
  2856     0692  0800               	movf	0,w
  2857     0693  00F6               	movwf	??___simple_search_fl+3
  2858     0694  0826               	movf	___simple_search_fl@last,w
  2859     0695  3E02               	addlw	2
  2860     0696  00F7               	movwf	??___simple_search_fl+4
  2861     0697  0827               	movf	___simple_search_fl@last+1,w
  2862     0698  1803               	skipnc
  2863     0699  3E01               	addlw	1
  2864     069A  3E00               	addlw	0
  2865     069B  00F8               	movwf	??___simple_search_fl+5
  2866     069C  0877               	movf	??___simple_search_fl+4,w
  2867     069D  0084               	movwf	4
  2868     069E  1783               	bsf	3,7
  2869     069F  1C78               	btfss	??___simple_search_fl+5,0
  2870     06A0  1383               	bcf	3,7
  2871     06A1  0875               	movf	??___simple_search_fl+2,w
  2872     06A2  0080               	movwf	0
  2873     06A3  0876               	movf	??___simple_search_fl+3,w
  2874     06A4  0A84               	incf	4,f
  2875     06A5  0080               	movwf	0
  2876     06A6  0384               	decf	4,f
  2877     06A7  2EBB               	goto	l1219
  2878     06A8                     l1217:
  2879     06A8  082A               	movf	___simple_search_fl@c,w
  2880     06A9  3E02               	addlw	2
  2881     06AA  00F3               	movwf	??___simple_search_fl
  2882     06AB  082B               	movf	___simple_search_fl@c+1,w
  2883     06AC  1803               	skipnc
  2884     06AD  3E01               	addlw	1
  2885     06AE  3E00               	addlw	0
  2886     06AF  00F4               	movwf	??___simple_search_fl+1
  2887     06B0  0873               	movf	??___simple_search_fl,w
  2888     06B1  0084               	movwf	4
  2889     06B2  1783               	bsf	3,7
  2890     06B3  1C74               	btfss	??___simple_search_fl+1,0
  2891     06B4  1383               	bcf	3,7
  2892     06B5  0800               	movf	0,w
  2893     06B6  00ED               	movwf	___freelist
  2894     06B7  0A84               	incf	4,f
  2895     06B8  0800               	movf	0,w
  2896     06B9  0384               	decf	4,f
  2897     06BA  00EE               	movwf	___freelist+1
  2898     06BB                     l1219:
  2899     06BB  082A               	movf	___simple_search_fl@c,w
  2900     06BC  3E02               	addlw	2
  2901     06BD  00F1               	movwf	?___simple_search_fl
  2902     06BE  082B               	movf	___simple_search_fl@c+1,w
  2903     06BF  1803               	skipnc
  2904     06C0  3E01               	addlw	1
  2905     06C1  3E00               	addlw	0
  2906     06C2  00F2               	movwf	?___simple_search_fl+1
  2907     06C3  2FD7               	goto	l703
  2908     06C4                     l1223:
  2909     06C4  082A               	movf	___simple_search_fl@c,w
  2910     06C5  0084               	movwf	4
  2911     06C6  1783               	bsf	3,7
  2912     06C7  1C2B               	btfss	___simple_search_fl@c+1,0
  2913     06C8  1383               	bcf	3,7
  2914     06C9  0800               	movf	0,w
  2915     06CA  00F3               	movwf	??___simple_search_fl
  2916     06CB  0A84               	incf	4,f
  2917     06CC  0800               	movf	0,w
  2918     06CD  00F4               	movwf	??___simple_search_fl+1
  2919     06CE  0874               	movf	??___simple_search_fl+1,w
  2920     06CF  0272               	subwf	___simple_search_fl@n+1,w
  2921     06D0  1D03               	skipz
  2922     06D1  2ED4               	goto	u535
  2923     06D2  0873               	movf	??___simple_search_fl,w
  2924     06D3  0271               	subwf	___simple_search_fl@n,w
  2925     06D4                     u535:
  2926     06D4  1803               	skipnc
  2927     06D5  2ED7               	goto	u531
  2928     06D6  2ED8               	goto	u530
  2929     06D7                     u531:
  2930     06D7  2F05               	goto	l711
  2931     06D8                     u530:
  2932     06D8                     l1225:
  2933     06D8  082C               	movf	___simple_search_fl@best,w
  2934     06D9  042D               	iorwf	___simple_search_fl@best+1,w
  2935     06DA  1903               	btfsc	3,2
  2936     06DB  2EDD               	goto	u541
  2937     06DC  2EDE               	goto	u540
  2938     06DD                     u541:
  2939     06DD  2EFD               	goto	l1231
  2940     06DE                     u540:
  2941     06DE                     l1227:
  2942     06DE  082C               	movf	___simple_search_fl@best,w
  2943     06DF  0084               	movwf	4
  2944     06E0  1783               	bsf	3,7
  2945     06E1  1C2D               	btfss	___simple_search_fl@best+1,0
  2946     06E2  1383               	bcf	3,7
  2947     06E3  0800               	movf	0,w
  2948     06E4  00F3               	movwf	??___simple_search_fl
  2949     06E5  0A84               	incf	4,f
  2950     06E6  0800               	movf	0,w
  2951     06E7  00F4               	movwf	??___simple_search_fl+1
  2952     06E8  082A               	movf	___simple_search_fl@c,w
  2953     06E9  0084               	movwf	4
  2954     06EA  1783               	bsf	3,7
  2955     06EB  1C2B               	btfss	___simple_search_fl@c+1,0
  2956     06EC  1383               	bcf	3,7
  2957     06ED  0800               	movf	0,w
  2958     06EE  00F5               	movwf	??___simple_search_fl+2
  2959     06EF  0A84               	incf	4,f
  2960     06F0  0800               	movf	0,w
  2961     06F1  00F6               	movwf	??___simple_search_fl+3
  2962     06F2  0874               	movf	??___simple_search_fl+1,w
  2963     06F3  0276               	subwf	??___simple_search_fl+3,w
  2964     06F4  1D03               	skipz
  2965     06F5  2EF8               	goto	u555
  2966     06F6  0873               	movf	??___simple_search_fl,w
  2967     06F7  0275               	subwf	??___simple_search_fl+2,w
  2968     06F8                     u555:
  2969     06F8  1C03               	skipc
  2970     06F9  2EFB               	goto	u551
  2971     06FA  2EFC               	goto	u550
  2972     06FB                     u551:
  2973     06FB  2EFD               	goto	l1231
  2974     06FC                     u550:
  2975     06FC  2F05               	goto	l711
  2976     06FD                     l1231:
  2977     06FD  082A               	movf	___simple_search_fl@c,w
  2978     06FE  00AC               	movwf	___simple_search_fl@best
  2979     06FF  082B               	movf	___simple_search_fl@c+1,w
  2980     0700  00AD               	movwf	___simple_search_fl@best+1
  2981     0701  0826               	movf	___simple_search_fl@last,w
  2982     0702  00A2               	movwf	___simple_search_fl@best_last
  2983     0703  0827               	movf	___simple_search_fl@last+1,w
  2984     0704  00A3               	movwf	___simple_search_fl@best_last+1
  2985     0705                     l711:
  2986     0705  082A               	movf	___simple_search_fl@c,w
  2987     0706  00A6               	movwf	___simple_search_fl@last
  2988     0707  082B               	movf	___simple_search_fl@c+1,w
  2989     0708  00A7               	movwf	___simple_search_fl@last+1
  2990     0709                     l1233:
  2991     0709  082A               	movf	___simple_search_fl@c,w
  2992     070A  3E02               	addlw	2
  2993     070B  00F3               	movwf	??___simple_search_fl
  2994     070C  082B               	movf	___simple_search_fl@c+1,w
  2995     070D  1803               	skipnc
  2996     070E  3E01               	addlw	1
  2997     070F  3E00               	addlw	0
  2998     0710  00F4               	movwf	??___simple_search_fl+1
  2999     0711  0873               	movf	??___simple_search_fl,w
  3000     0712  0084               	movwf	4
  3001     0713  1783               	bsf	3,7
  3002     0714  1C74               	btfss	??___simple_search_fl+1,0
  3003     0715  1383               	bcf	3,7
  3004     0716  0800               	movf	0,w
  3005     0717  00AA               	movwf	___simple_search_fl@c
  3006     0718  0A84               	incf	4,f
  3007     0719  0800               	movf	0,w
  3008     071A  0384               	decf	4,f
  3009     071B  00AB               	movwf	___simple_search_fl@c+1
  3010     071C                     l1235:
  3011     071C  082A               	movf	___simple_search_fl@c,w
  3012     071D  042B               	iorwf	___simple_search_fl@c+1,w
  3013     071E  1D03               	btfss	3,2
  3014     071F  2F21               	goto	u561
  3015     0720  2F22               	goto	u560
  3016     0721                     u561:
  3017     0721  2E68               	goto	l1211
  3018     0722                     u560:
  3019     0722                     l1237:
  3020     0722  082C               	movf	___simple_search_fl@best,w
  3021     0723  042D               	iorwf	___simple_search_fl@best+1,w
  3022     0724  1903               	btfsc	3,2
  3023     0725  2F27               	goto	u571
  3024     0726  2F28               	goto	u570
  3025     0727                     u571:
  3026     0727  2E60               	goto	l1205
  3027     0728                     u570:
  3028     0728                     l1239:
  3029     0728  082C               	movf	___simple_search_fl@best,w
  3030     0729  3E02               	addlw	2
  3031     072A  00F3               	movwf	??___simple_search_fl
  3032     072B  082D               	movf	___simple_search_fl@best+1,w
  3033     072C  1803               	skipnc
  3034     072D  3E01               	addlw	1
  3035     072E  3E00               	addlw	0
  3036     072F  00F4               	movwf	??___simple_search_fl+1
  3037     0730  0873               	movf	??___simple_search_fl,w
  3038     0731  0084               	movwf	4
  3039     0732  1783               	bsf	3,7
  3040     0733  1C74               	btfss	??___simple_search_fl+1,0
  3041     0734  1383               	bcf	3,7
  3042     0735  0800               	movf	0,w
  3043     0736  00A8               	movwf	___simple_search_fl@next
  3044     0737  0A84               	incf	4,f
  3045     0738  0800               	movf	0,w
  3046     0739  0384               	decf	4,f
  3047     073A  00A9               	movwf	___simple_search_fl@next+1
  3048     073B  082C               	movf	___simple_search_fl@best,w
  3049     073C  0084               	movwf	4
  3050     073D  1783               	bsf	3,7
  3051     073E  1C2D               	btfss	___simple_search_fl@best+1,0
  3052     073F  1383               	bcf	3,7
  3053     0740  0800               	movf	0,w
  3054     0741  00F3               	movwf	??___simple_search_fl
  3055     0742  0A84               	incf	4,f
  3056     0743  0800               	movf	0,w
  3057     0744  00F4               	movwf	??___simple_search_fl+1
  3058     0745  0871               	movf	___simple_search_fl@n,w
  3059     0746  0273               	subwf	??___simple_search_fl,w
  3060     0747  00F5               	movwf	??___simple_search_fl+2
  3061     0748  0872               	movf	___simple_search_fl@n+1,w
  3062     0749  1C03               	skipc
  3063     074A  0A72               	incf	___simple_search_fl@n+1,w
  3064     074B  0274               	subwf	??___simple_search_fl+1,w
  3065     074C  00F6               	movwf	??___simple_search_fl+3
  3066     074D  3000               	movlw	0
  3067     074E  0276               	subwf	??___simple_search_fl+3,w
  3068     074F  3005               	movlw	5
  3069     0750  1903               	skipnz
  3070     0751  0275               	subwf	??___simple_search_fl+2,w
  3071     0752  1C03               	skipc
  3072     0753  2F55               	goto	u581
  3073     0754  2F56               	goto	u580
  3074     0755                     u581:
  3075     0755  2FAE               	goto	l714
  3076     0756                     u580:
  3077     0756                     l1241:
  3078     0756  082C               	movf	___simple_search_fl@best,w
  3079     0757  0084               	movwf	4
  3080     0758  1783               	bsf	3,7
  3081     0759  1C2D               	btfss	___simple_search_fl@best+1,0
  3082     075A  1383               	bcf	3,7
  3083     075B  0800               	movf	0,w
  3084     075C  00F3               	movwf	??___simple_search_fl
  3085     075D  0A84               	incf	4,f
  3086     075E  0800               	movf	0,w
  3087     075F  00F4               	movwf	??___simple_search_fl+1
  3088     0760  0871               	movf	___simple_search_fl@n,w
  3089     0761  0273               	subwf	??___simple_search_fl,w
  3090     0762  00F5               	movwf	??___simple_search_fl+2
  3091     0763  0872               	movf	___simple_search_fl@n+1,w
  3092     0764  1C03               	skipc
  3093     0765  0A72               	incf	___simple_search_fl@n+1,w
  3094     0766  0274               	subwf	??___simple_search_fl+1,w
  3095     0767  00F6               	movwf	??___simple_search_fl+3
  3096     0768  0875               	movf	??___simple_search_fl+2,w
  3097     0769  3EFE               	addlw	254
  3098     076A  00A0               	movwf	___simple_search_fl@remaining_size
  3099     076B  0876               	movf	??___simple_search_fl+3,w
  3100     076C  1803               	skipnc
  3101     076D  3E01               	addlw	1
  3102     076E  3EFF               	addlw	255
  3103     076F  00A1               	movwf	___simple_search_fl@remaining_size+1
  3104     0770                     l1243:
  3105     0770  082C               	movf	___simple_search_fl@best,w
  3106     0771  0084               	movwf	4
  3107     0772  1783               	bsf	3,7
  3108     0773  1C2D               	btfss	___simple_search_fl@best+1,0
  3109     0774  1383               	bcf	3,7
  3110     0775  0871               	movf	___simple_search_fl@n,w
  3111     0776  0080               	movwf	0
  3112     0777  0A84               	incf	4,f
  3113     0778  0872               	movf	___simple_search_fl@n+1,w
  3114     0779  0080               	movwf	0
  3115     077A                     l1245:
  3116     077A  082C               	movf	___simple_search_fl@best,w
  3117     077B  0084               	movwf	4
  3118     077C  1783               	bsf	3,7
  3119     077D  1C2D               	btfss	___simple_search_fl@best+1,0
  3120     077E  1383               	bcf	3,7
  3121     077F  0800               	movf	0,w
  3122     0780  072C               	addwf	___simple_search_fl@best,w
  3123     0781  00F3               	movwf	??___simple_search_fl
  3124     0782  082D               	movf	___simple_search_fl@best+1,w
  3125     0783  1803               	skipnc
  3126     0784  3E01               	addlw	1
  3127     0785  00F4               	movwf	??___simple_search_fl+1
  3128     0786  0873               	movf	??___simple_search_fl,w
  3129     0787  3E02               	addlw	2
  3130     0788  00A4               	movwf	___simple_search_fl@split
  3131     0789  0874               	movf	??___simple_search_fl+1,w
  3132     078A  1803               	skipnc
  3133     078B  3E01               	addlw	1
  3134     078C  3E00               	addlw	0
  3135     078D  00A5               	movwf	___simple_search_fl@split+1
  3136     078E  0824               	movf	___simple_search_fl@split,w
  3137     078F  0084               	movwf	4
  3138     0790  1783               	bsf	3,7
  3139     0791  1C25               	btfss	___simple_search_fl@split+1,0
  3140     0792  1383               	bcf	3,7
  3141     0793  0820               	movf	___simple_search_fl@remaining_size,w
  3142     0794  0080               	movwf	0
  3143     0795  0A84               	incf	4,f
  3144     0796  0821               	movf	___simple_search_fl@remaining_size+1,w
  3145     0797  0080               	movwf	0
  3146     0798                     l1247:
  3147     0798  0824               	movf	___simple_search_fl@split,w
  3148     0799  3E02               	addlw	2
  3149     079A  00F3               	movwf	??___simple_search_fl
  3150     079B  0825               	movf	___simple_search_fl@split+1,w
  3151     079C  1803               	skipnc
  3152     079D  3E01               	addlw	1
  3153     079E  3E00               	addlw	0
  3154     079F  00F4               	movwf	??___simple_search_fl+1
  3155     07A0  0873               	movf	??___simple_search_fl,w
  3156     07A1  0084               	movwf	4
  3157     07A2  1783               	bsf	3,7
  3158     07A3  1C74               	btfss	??___simple_search_fl+1,0
  3159     07A4  1383               	bcf	3,7
  3160     07A5  0828               	movf	___simple_search_fl@next,w
  3161     07A6  0080               	movwf	0
  3162     07A7  0A84               	incf	4,f
  3163     07A8  0829               	movf	___simple_search_fl@next+1,w
  3164     07A9  0080               	movwf	0
  3165     07AA                     l1249:
  3166     07AA  0824               	movf	___simple_search_fl@split,w
  3167     07AB  00A8               	movwf	___simple_search_fl@next
  3168     07AC  0825               	movf	___simple_search_fl@split+1,w
  3169     07AD  00A9               	movwf	___simple_search_fl@next+1
  3170     07AE                     l714:
  3171     07AE  082D               	movf	___simple_search_fl@best+1,w
  3172     07AF  066E               	xorwf	___freelist+1,w
  3173     07B0  1D03               	skipz
  3174     07B1  2FB4               	goto	u595
  3175     07B2  082C               	movf	___simple_search_fl@best,w
  3176     07B3  066D               	xorwf	___freelist,w
  3177     07B4                     u595:
  3178     07B4  1D03               	skipz
  3179     07B5  2FB7               	goto	u591
  3180     07B6  2FB8               	goto	u590
  3181     07B7                     u591:
  3182     07B7  2FBD               	goto	l1253
  3183     07B8                     u590:
  3184     07B8                     l1251:
  3185     07B8  0828               	movf	___simple_search_fl@next,w
  3186     07B9  00ED               	movwf	___freelist
  3187     07BA  0829               	movf	___simple_search_fl@next+1,w
  3188     07BB  00EE               	movwf	___freelist+1
  3189     07BC  2FCF               	goto	l1255
  3190     07BD                     l1253:
  3191     07BD  0822               	movf	___simple_search_fl@best_last,w
  3192     07BE  3E02               	addlw	2
  3193     07BF  00F3               	movwf	??___simple_search_fl
  3194     07C0  0823               	movf	___simple_search_fl@best_last+1,w
  3195     07C1  1803               	skipnc
  3196     07C2  3E01               	addlw	1
  3197     07C3  3E00               	addlw	0
  3198     07C4  00F4               	movwf	??___simple_search_fl+1
  3199     07C5  0873               	movf	??___simple_search_fl,w
  3200     07C6  0084               	movwf	4
  3201     07C7  1783               	bsf	3,7
  3202     07C8  1C74               	btfss	??___simple_search_fl+1,0
  3203     07C9  1383               	bcf	3,7
  3204     07CA  0828               	movf	___simple_search_fl@next,w
  3205     07CB  0080               	movwf	0
  3206     07CC  0A84               	incf	4,f
  3207     07CD  0829               	movf	___simple_search_fl@next+1,w
  3208     07CE  0080               	movwf	0
  3209     07CF                     l1255:
  3210     07CF  082C               	movf	___simple_search_fl@best,w
  3211     07D0  3E02               	addlw	2
  3212     07D1  00F1               	movwf	?___simple_search_fl
  3213     07D2  082D               	movf	___simple_search_fl@best+1,w
  3214     07D3  1803               	skipnc
  3215     07D4  3E01               	addlw	1
  3216     07D5  3E00               	addlw	0
  3217     07D6  00F2               	movwf	?___simple_search_fl+1
  3218     07D7                     l703:
  3219     07D7  0008               	return
  3220     07D8                     __end_of___simple_search_fl:
  3221                           
  3222                           	psect	text12
  3223     01A2                     __ptext12:	
  3224 ;; *************** function ___expand_heap *****************
  3225 ;; Defined at:
  3226 ;;		line 14 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/expand_heap.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  pn              1    0[COMMON] PTR unsigned int 
  3229 ;;		 -> malloc@m(2), 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  new_brkp        2    3[COMMON] PTR unsigned char 
  3232 ;;		 -> __heap_hi(0), NULL(0), 
  3233 ;;  n               2    1[COMMON] unsigned int 
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  2    0[COMMON] PTR void 
  3236 ;; Registers used:
  3237 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3243 ;;      Params:         1       0       0       0       0
  3244 ;;      Locals:         4       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0
  3246 ;;      Totals:         5       0       0       0       0
  3247 ;;Total ram usage:        5 bytes
  3248 ;; Hardware stack levels used: 1
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_malloc
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256     01A2                     ___expand_heap:	
  3257                           ;psect for function ___expand_heap
  3258                           
  3259     01A2                     l1263:	
  3260                           ;incstack = 0
  3261                           ; Regs used in ___expand_heap: [wreg-fsr0h+status,2+status,0]
  3262                           
  3263     01A2  0871               	movf	___expand_heap@pn,w
  3264     01A3  0084               	movwf	4
  3265     01A4  1383               	bcf	3,7	;select IRP bank0
  3266     01A5  0800               	movf	0,w
  3267     01A6  00F2               	movwf	___expand_heap@n
  3268     01A7  0A84               	incf	4,f
  3269     01A8  0800               	movf	0,w
  3270     01A9  00F3               	movwf	___expand_heap@n+1
  3271     01AA                     l1265:
  3272     01AA  1283               	bcf	3,5	;RP0=0, select bank0
  3273     01AB  1303               	bcf	3,6	;RP1=0, select bank0
  3274     01AC  0869               	movf	_brkp,w
  3275     01AD  046A               	iorwf	_brkp+1,w
  3276     01AE  1D03               	btfss	3,2
  3277     01AF  29B1               	goto	u601
  3278     01B0  29B2               	goto	u600
  3279     01B1                     u601:
  3280     01B1  29B6               	goto	l762
  3281     01B2                     u600:
  3282     01B2                     l1267:
  3283     01B2  3070               	movlw	low ___heap_hi
  3284     01B3  00E9               	movwf	_brkp
  3285     01B4  3001               	movlw	high ___heap_hi
  3286     01B5  00EA               	movwf	_brkp+1
  3287     01B6                     l762:
  3288     01B6  3000               	movlw	0
  3289     01B7  0273               	subwf	___expand_heap@n+1,w
  3290     01B8  3004               	movlw	4
  3291     01B9  1903               	skipnz
  3292     01BA  0272               	subwf	___expand_heap@n,w
  3293     01BB  1803               	skipnc
  3294     01BC  29BE               	goto	u611
  3295     01BD  29BF               	goto	u610
  3296     01BE                     u611:
  3297     01BE  29C3               	goto	l1271
  3298     01BF                     u610:
  3299     01BF                     l1269:
  3300     01BF  3004               	movlw	4
  3301     01C0  00F2               	movwf	___expand_heap@n
  3302     01C1  3000               	movlw	0
  3303     01C2  00F3               	movwf	___expand_heap@n+1
  3304     01C3                     l1271:
  3305     01C3  0872               	movf	___expand_heap@n,w
  3306     01C4  0269               	subwf	_brkp,w
  3307     01C5  00F4               	movwf	___expand_heap@new_brkp
  3308     01C6  086A               	movf	_brkp+1,w
  3309     01C7  1C03               	skipc
  3310     01C8  036A               	decf	_brkp+1,w
  3311     01C9  00F5               	movwf	___expand_heap@new_brkp+1
  3312     01CA                     l1273:
  3313     01CA  3001               	movlw	high ___heap_lo
  3314     01CB  0275               	subwf	___expand_heap@new_brkp+1,w
  3315     01CC  3010               	movlw	low ___heap_lo
  3316     01CD  1903               	skipnz
  3317     01CE  0274               	subwf	___expand_heap@new_brkp,w
  3318     01CF  1C03               	skipc
  3319     01D0  29D2               	goto	u621
  3320     01D1  29D3               	goto	u620
  3321     01D2                     u621:
  3322     01D2  29DD               	goto	l1277
  3323     01D3                     u620:
  3324     01D3                     l1275:
  3325     01D3  086A               	movf	_brkp+1,w
  3326     01D4  0275               	subwf	___expand_heap@new_brkp+1,w
  3327     01D5  1D03               	skipz
  3328     01D6  29D9               	goto	u635
  3329     01D7  0869               	movf	_brkp,w
  3330     01D8  0274               	subwf	___expand_heap@new_brkp,w
  3331     01D9                     u635:
  3332     01D9  1C03               	skipc
  3333     01DA  29DC               	goto	u631
  3334     01DB  29DD               	goto	u630
  3335     01DC                     u631:
  3336     01DC  29E6               	goto	l1283
  3337     01DD                     u630:
  3338     01DD                     l1277:
  3339     01DD  300C               	movlw	12
  3340     01DE  1683               	bsf	3,5	;RP0=1, select bank1
  3341     01DF  1303               	bcf	3,6	;RP1=0, select bank1
  3342     01E0  00A6               	movwf	_errno^(0+128)
  3343     01E1  3000               	movlw	0
  3344     01E2  00A7               	movwf	(_errno^(0+128)+1)
  3345     01E3                     l1279:
  3346     01E3  01F1               	clrf	?___expand_heap
  3347     01E4  01F2               	clrf	?___expand_heap+1
  3348     01E5  29EE               	goto	l767
  3349     01E6                     l1283:
  3350     01E6  0874               	movf	___expand_heap@new_brkp,w
  3351     01E7  00E9               	movwf	_brkp
  3352     01E8  0875               	movf	___expand_heap@new_brkp+1,w
  3353     01E9  00EA               	movwf	_brkp+1
  3354     01EA  0869               	movf	_brkp,w
  3355     01EB  00F1               	movwf	?___expand_heap
  3356     01EC  086A               	movf	_brkp+1,w
  3357     01ED  00F2               	movwf	?___expand_heap+1
  3358     01EE                     l767:
  3359     01EE  0008               	return
  3360     01EF                     __end_of___expand_heap:
  3361                           
  3362                           	psect	text13
  3363     00B2                     __ptext13:	
  3364 ;; *************** function ___wmul *****************
  3365 ;; Defined at:
  3366 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  3367 ;; Parameters:    Size  Location     Type
  3368 ;;  multiplier      2    0[COMMON] unsigned int 
  3369 ;;  multiplicand    2    2[COMMON] unsigned int 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  product         2    4[COMMON] unsigned int 
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  2    0[COMMON] unsigned int 
  3374 ;; Registers used:
  3375 ;;		wreg, status,2, status,0
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3381 ;;      Params:         4       0       0       0       0
  3382 ;;      Locals:         2       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0
  3384 ;;      Totals:         6       0       0       0       0
  3385 ;;Total ram usage:        6 bytes
  3386 ;; Hardware stack levels used: 1
  3387 ;; This function calls:
  3388 ;;		Nothing
  3389 ;; This function is called by:
  3390 ;;		_calloc
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394     00B2                     ___wmul:	
  3395                           ;psect for function ___wmul
  3396                           
  3397     00B2                     l1293:	
  3398                           ;incstack = 0
  3399                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3400                           
  3401     00B2  01F5               	clrf	___wmul@product
  3402     00B3  01F6               	clrf	___wmul@product+1
  3403     00B4                     l1295:
  3404     00B4  1C71               	btfss	___wmul@multiplier,0
  3405     00B5  28B7               	goto	u641
  3406     00B6  28B8               	goto	u640
  3407     00B7                     u641:
  3408     00B7  28BE               	goto	l233
  3409     00B8                     u640:
  3410     00B8                     l1297:
  3411     00B8  0873               	movf	___wmul@multiplicand,w
  3412     00B9  07F5               	addwf	___wmul@product,f
  3413     00BA  1803               	skipnc
  3414     00BB  0AF6               	incf	___wmul@product+1,f
  3415     00BC  0874               	movf	___wmul@multiplicand+1,w
  3416     00BD  07F6               	addwf	___wmul@product+1,f
  3417     00BE                     l233:
  3418     00BE  3001               	movlw	1
  3419     00BF                     u655:
  3420     00BF  1003               	clrc
  3421     00C0  0DF3               	rlf	___wmul@multiplicand,f
  3422     00C1  0DF4               	rlf	___wmul@multiplicand+1,f
  3423     00C2  3EFF               	addlw	-1
  3424     00C3  1D03               	skipz
  3425     00C4  28BF               	goto	u655
  3426     00C5                     l1299:
  3427     00C5  3001               	movlw	1
  3428     00C6                     u665:
  3429     00C6  1003               	clrc
  3430     00C7  0CF2               	rrf	___wmul@multiplier+1,f
  3431     00C8  0CF1               	rrf	___wmul@multiplier,f
  3432     00C9  3EFF               	addlw	-1
  3433     00CA  1D03               	skipz
  3434     00CB  28C6               	goto	u665
  3435     00CC                     l1301:
  3436     00CC  0871               	movf	___wmul@multiplier,w
  3437     00CD  0472               	iorwf	___wmul@multiplier+1,w
  3438     00CE  1D03               	btfss	3,2
  3439     00CF  28D1               	goto	u671
  3440     00D0  28D2               	goto	u670
  3441     00D1                     u671:
  3442     00D1  28B4               	goto	l1295
  3443     00D2                     u670:
  3444     00D2                     l1303:
  3445     00D2  0876               	movf	___wmul@product+1,w
  3446     00D3  00F2               	movwf	?___wmul+1
  3447     00D4  0875               	movf	___wmul@product,w
  3448     00D5  00F1               	movwf	?___wmul
  3449     00D6                     l235:
  3450     00D6  0008               	return
  3451     00D7                     __end_of___wmul:
  3452                           
  3453                           	psect	text14
  3454     0117                     __ptext14:	
  3455 ;; *************** function _Reverse *****************
  3456 ;; Defined at:
  3457 ;;		line 73 in file "shape.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  array           1    0[COMMON] PTR unsigned char 
  3460 ;;		 -> main@square_1(3), 
  3461 ;;  countElemnt     2    1[COMMON] int 
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  t               1    6[COMMON] unsigned char 
  3464 ;;  j               2    9[COMMON] int 
  3465 ;;  i               2    7[COMMON] int 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3475 ;;      Params:         3       0       0       0       0
  3476 ;;      Locals:         5       0       0       0       0
  3477 ;;      Temps:          3       0       0       0       0
  3478 ;;      Totals:        11       0       0       0       0
  3479 ;;Total ram usage:       11 bytes
  3480 ;; Hardware stack levels used: 1
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_ChangeOfCoordinates
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488     0117                     _Reverse:	
  3489                           ;psect for function _Reverse
  3490                           
  3491     0117                     l1457:	
  3492                           ;incstack = 0
  3493                           ; Regs used in _Reverse: [wreg-fsr0h+status,2+status,0]
  3494                           
  3495                           
  3496                           ;shape.c: 73: void Reverse(char * array, int countElemnt);shape.c: 74: {;shape.c: 75:   
      +                            for(int i = 0, j = countElemnt - 1; i < j; i++, j--)
  3497     0117  01F8               	clrf	Reverse@i
  3498     0118  01F9               	clrf	Reverse@i+1
  3499     0119                     l1459:
  3500     0119  0872               	movf	Reverse@countElemnt,w
  3501     011A  3EFF               	addlw	255
  3502     011B  00FA               	movwf	Reverse@j
  3503     011C  0873               	movf	Reverse@countElemnt+1,w
  3504     011D  1803               	skipnc
  3505     011E  3E01               	addlw	1
  3506     011F  3EFF               	addlw	255
  3507     0120  00FB               	movwf	Reverse@j+1
  3508     0121  294B               	goto	l1467
  3509     0122                     l1461:
  3510                           
  3511                           ;shape.c: 76:     {;shape.c: 77:         char t = array[i];
  3512     0122  0878               	movf	Reverse@i,w
  3513     0123  0771               	addwf	Reverse@array,w
  3514     0124  00F4               	movwf	??_Reverse
  3515     0125  0874               	movf	??_Reverse,w
  3516     0126  0084               	movwf	4
  3517     0127  1383               	bcf	3,7	;select IRP bank0
  3518     0128  0800               	movf	0,w
  3519     0129  00F7               	movwf	Reverse@t
  3520                           
  3521                           ;shape.c: 78:         array[i] = array[j];
  3522     012A  087A               	movf	Reverse@j,w
  3523     012B  0771               	addwf	Reverse@array,w
  3524     012C  00F4               	movwf	??_Reverse
  3525     012D  0874               	movf	??_Reverse,w
  3526     012E  0084               	movwf	4
  3527     012F  0800               	movf	0,w
  3528     0130  00F5               	movwf	??_Reverse+1
  3529     0131  0878               	movf	Reverse@i,w
  3530     0132  0771               	addwf	Reverse@array,w
  3531     0133  00F6               	movwf	??_Reverse+2
  3532     0134  0876               	movf	??_Reverse+2,w
  3533     0135  0084               	movwf	4
  3534     0136  0875               	movf	??_Reverse+1,w
  3535     0137  0080               	movwf	0
  3536                           
  3537                           ;shape.c: 79:         array[j] = t;
  3538     0138  087A               	movf	Reverse@j,w
  3539     0139  0771               	addwf	Reverse@array,w
  3540     013A  00F4               	movwf	??_Reverse
  3541     013B  0874               	movf	??_Reverse,w
  3542     013C  0084               	movwf	4
  3543     013D  0877               	movf	Reverse@t,w
  3544     013E  0080               	movwf	0
  3545     013F                     l1463:
  3546                           
  3547                           ;shape.c: 80:     }
  3548     013F  3001               	movlw	1
  3549     0140  07F8               	addwf	Reverse@i,f
  3550     0141  1803               	skipnc
  3551     0142  0AF9               	incf	Reverse@i+1,f
  3552     0143  3000               	movlw	0
  3553     0144  07F9               	addwf	Reverse@i+1,f
  3554     0145                     l1465:
  3555     0145  30FF               	movlw	255
  3556     0146  07FA               	addwf	Reverse@j,f
  3557     0147  1803               	skipnc
  3558     0148  0AFB               	incf	Reverse@j+1,f
  3559     0149  30FF               	movlw	255
  3560     014A  07FB               	addwf	Reverse@j+1,f
  3561     014B                     l1467:
  3562     014B  0879               	movf	Reverse@i+1,w
  3563     014C  3A80               	xorlw	128
  3564     014D  00F4               	movwf	??_Reverse
  3565     014E  087B               	movf	Reverse@j+1,w
  3566     014F  3A80               	xorlw	128
  3567     0150  0274               	subwf	??_Reverse,w
  3568     0151  1D03               	skipz
  3569     0152  2955               	goto	u845
  3570     0153  087A               	movf	Reverse@j,w
  3571     0154  0278               	subwf	Reverse@i,w
  3572     0155                     u845:
  3573     0155  1C03               	skipc
  3574     0156  2958               	goto	u841
  3575     0157  2959               	goto	u840
  3576     0158                     u841:
  3577     0158  2922               	goto	l1461
  3578     0159                     u840:
  3579     0159                     l147:
  3580     0159  0008               	return
  3581     015A                     __end_of_Reverse:
  3582                           
  3583                           	psect	text15
  3584     023C                     __ptext15:	
  3585 ;; *************** function _MovieShape *****************
  3586 ;; Defined at:
  3587 ;;		line 32 in file "shape.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  dir             1    wreg     enum E885
  3590 ;;  _shapePositi    2    5[BANK0 ] PTR struct .
  3591 ;;		 -> main@shapePosition(4), 
  3592 ;;  shapeArray      1    7[BANK0 ] PTR unsigned char 
  3593 ;;		 -> main@square_1(3), 
  3594 ;;  countElemntA    2    8[BANK0 ] int 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  dir             1   12[BANK0 ] enum E885
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3606 ;;      Params:         0       5       0       0       0
  3607 ;;      Locals:         0       1       0       0       0
  3608 ;;      Temps:          0       2       0       0       0
  3609 ;;      Totals:         0       8       0       0       0
  3610 ;;Total ram usage:        8 bytes
  3611 ;; Hardware stack levels used: 1
  3612 ;; Hardware stack levels required when called: 3
  3613 ;; This function calls:
  3614 ;;		_MovieDown
  3615 ;;		_MovieLeft
  3616 ;;		_MovieRigth
  3617 ;;		_MovieUp
  3618 ;;		_ShowShape
  3619 ;;		_SpiClearMatrix
  3620 ;; This function is called by:
  3621 ;;		_ChangeOfCoordinates
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625     023C                     _MovieShape:	
  3626                           ;psect for function _MovieShape
  3627                           
  3628                           
  3629                           ;incstack = 0
  3630                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3631                           ;MovieShape@dir stored from wreg
  3632     023C  1283               	bcf	3,5	;RP0=0, select bank0
  3633     023D  1303               	bcf	3,6	;RP1=0, select bank0
  3634     023E  00AC               	movwf	MovieShape@dir
  3635     023F                     l1433:
  3636                           
  3637                           ;shape.c: 34:     switch (dir){
  3638     023F  2A68               	goto	l1445
  3639     0240                     l1435:
  3640                           
  3641                           ;shape.c: 36:             MovieDown(_shapePosition);
  3642     0240  0825               	movf	MovieShape@_shapePosition,w
  3643     0241  00F1               	movwf	MovieDown@_shapePosition
  3644     0242  0826               	movf	MovieShape@_shapePosition+1,w
  3645     0243  00F2               	movwf	MovieDown@_shapePosition+1
  3646     0244  120A  118A  201F  120A  118A  	fcall	_MovieDown
  3647                           
  3648                           ;shape.c: 37:             break;
  3649     0249  2A81               	goto	l1447
  3650     024A                     l1437:
  3651                           
  3652                           ;shape.c: 39:             MovieUp(_shapePosition);
  3653     024A  0825               	movf	MovieShape@_shapePosition,w
  3654     024B  00F1               	movwf	MovieUp@_shapePosition
  3655     024C  0826               	movf	MovieShape@_shapePosition+1,w
  3656     024D  00F2               	movwf	MovieUp@_shapePosition+1
  3657     024E  120A  118A  205B  120A  118A  	fcall	_MovieUp
  3658                           
  3659                           ;shape.c: 40:             break;
  3660     0253  2A81               	goto	l1447
  3661     0254                     l1439:
  3662                           
  3663                           ;shape.c: 42:             MovieLeft(_shapePosition);
  3664     0254  0825               	movf	MovieShape@_shapePosition,w
  3665     0255  00F1               	movwf	MovieLeft@_shapePosition
  3666     0256  0826               	movf	MovieShape@_shapePosition+1,w
  3667     0257  00F2               	movwf	MovieLeft@_shapePosition+1
  3668     0258  120A  158A  27EF  120A  118A  	fcall	_MovieLeft
  3669                           
  3670                           ;shape.c: 43:             break;
  3671     025D  2A81               	goto	l1447
  3672     025E                     l1441:
  3673                           
  3674                           ;shape.c: 45:             MovieRigth(_shapePosition);
  3675     025E  0825               	movf	MovieShape@_shapePosition,w
  3676     025F  00F1               	movwf	MovieRigth@_shapePosition
  3677     0260  0826               	movf	MovieShape@_shapePosition+1,w
  3678     0261  00F2               	movwf	MovieRigth@_shapePosition+1
  3679     0262  120A  158A  27D9  120A  118A  	fcall	_MovieRigth
  3680                           
  3681                           ;shape.c: 46:             break;
  3682     0267  2A81               	goto	l1447
  3683     0268                     l1445:
  3684     0268  082C               	movf	MovieShape@dir,w
  3685     0269  00AA               	movwf	??_MovieShape
  3686     026A  01AB               	clrf	??_MovieShape+1
  3687                           
  3688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3689                           ; Switch size 1, requested type "simple"
  3690                           ; Number of cases is 1, Range of values is 0 to 0
  3691                           ; switch strategies available:
  3692                           ; Name         Instructions Cycles
  3693                           ; simple_byte            4     3 (average)
  3694                           ; direct_byte           11     8 (fixed)
  3695                           ; jumptable            260     6 (fixed)
  3696                           ;	Chosen strategy is simple_byte
  3697     026B  082B               	movf	??_MovieShape+1,w
  3698     026C  3A00               	xorlw	0	; case 0
  3699     026D  1903               	skipnz
  3700     026E  2A70               	goto	l1639
  3701     026F  2A81               	goto	l1447
  3702     0270                     l1639:
  3703                           
  3704                           ; Switch size 1, requested type "simple"
  3705                           ; Number of cases is 5, Range of values is 0 to 4
  3706                           ; switch strategies available:
  3707                           ; Name         Instructions Cycles
  3708                           ; simple_byte           16     9 (average)
  3709                           ; direct_byte           23     8 (fixed)
  3710                           ; jumptable            260     6 (fixed)
  3711                           ;	Chosen strategy is simple_byte
  3712     0270  082A               	movf	??_MovieShape,w
  3713     0271  3A00               	xorlw	0	; case 0
  3714     0272  1903               	skipnz
  3715     0273  2A40               	goto	l1435
  3716     0274  3A01               	xorlw	1	; case 1
  3717     0275  1903               	skipnz
  3718     0276  2A4A               	goto	l1437
  3719     0277  3A03               	xorlw	3	; case 2
  3720     0278  1903               	skipnz
  3721     0279  2A54               	goto	l1439
  3722     027A  3A01               	xorlw	1	; case 3
  3723     027B  1903               	skipnz
  3724     027C  2A5E               	goto	l1441
  3725     027D  3A07               	xorlw	7	; case 4
  3726     027E  1903               	skipnz
  3727     027F  2A81               	goto	l1447
  3728     0280  2A81               	goto	l1447
  3729     0281                     l1447:
  3730                           
  3731                           ;shape.c: 51:     SpiClearMatrix();
  3732     0281  120A  118A  2045  120A  118A  	fcall	_SpiClearMatrix
  3733     0286                     l1449:
  3734                           
  3735                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  3736     0286  1283               	bcf	3,5	;RP0=0, select bank0
  3737     0287  1303               	bcf	3,6	;RP1=0, select bank0
  3738     0288  0825               	movf	MovieShape@_shapePosition,w
  3739     0289  00F5               	movwf	ShowShape@coord
  3740     028A  0826               	movf	MovieShape@_shapePosition+1,w
  3741     028B  00F6               	movwf	ShowShape@coord+1
  3742     028C  0829               	movf	MovieShape@countElemntArray+1,w
  3743     028D  00F8               	movwf	ShowShape@countElemntArray+1
  3744     028E  0828               	movf	MovieShape@countElemntArray,w
  3745     028F  00F7               	movwf	ShowShape@countElemntArray
  3746     0290  0827               	movf	MovieShape@shapeArray,w
  3747     0291  00F9               	movwf	ShowShape@shapeArray
  3748     0292  120A  118A  2298  120A  118A  	fcall	_ShowShape
  3749     0297                     l130:
  3750     0297  0008               	return
  3751     0298                     __end_of_MovieShape:
  3752                           
  3753                           	psect	text16
  3754     0045                     __ptext16:	
  3755 ;; *************** function _SpiClearMatrix *****************
  3756 ;; Defined at:
  3757 ;;		line 10 in file "matrix.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;		None
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  i               1    6[COMMON] unsigned char 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0, pclath, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3771 ;;      Params:         0       0       0       0       0
  3772 ;;      Locals:         1       0       0       0       0
  3773 ;;      Temps:          2       0       0       0       0
  3774 ;;      Totals:         3       0       0       0       0
  3775 ;;Total ram usage:        3 bytes
  3776 ;; Hardware stack levels used: 1
  3777 ;; Hardware stack levels required when called: 2
  3778 ;; This function calls:
  3779 ;;		_SendToSegment
  3780 ;; This function is called by:
  3781 ;;		_MatrixInit
  3782 ;;		_MovieShape
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786     0045                     _SpiClearMatrix:	
  3787                           ;psect for function _SpiClearMatrix
  3788                           
  3789     0045                     l1367:	
  3790                           ;incstack = 0
  3791                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  3792                           
  3793                           
  3794                           ;matrix.c: 12:   char i = 8;
  3795     0045  3008               	movlw	8
  3796     0046  00F7               	movwf	SpiClearMatrix@i
  3797     0047                     l1369:
  3798                           
  3799                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  3800     0047  0877               	movf	SpiClearMatrix@i,w
  3801     0048  00F5               	movwf	??_SpiClearMatrix
  3802     0049  01F6               	clrf	??_SpiClearMatrix+1
  3803     004A  0875               	movf	??_SpiClearMatrix,w
  3804     004B  00F2               	movwf	SendToSegment@segment
  3805     004C  0876               	movf	??_SpiClearMatrix+1,w
  3806     004D  00F3               	movwf	SendToSegment@segment+1
  3807     004E  01F4               	clrf	SendToSegment@data
  3808     004F  120A  118A  2032  120A  118A  	fcall	_SendToSegment
  3809     0054                     l1371:
  3810                           
  3811                           ;matrix.c: 16:   } while (--i);
  3812     0054  3001               	movlw	1
  3813     0055  02F7               	subwf	SpiClearMatrix@i,f
  3814     0056  1D03               	btfss	3,2
  3815     0057  2859               	goto	u761
  3816     0058  285A               	goto	u760
  3817     0059                     u761:
  3818     0059  2847               	goto	l1369
  3819     005A                     u760:
  3820     005A                     l85:
  3821     005A  0008               	return
  3822     005B                     __end_of_SpiClearMatrix:
  3823                           
  3824                           	psect	text17
  3825     0298                     __ptext17:	
  3826 ;; *************** function _ShowShape *****************
  3827 ;; Defined at:
  3828 ;;		line 8 in file "shape.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  coord           2    4[COMMON] PTR struct .
  3831 ;;		 -> main@shapePosition(4), 
  3832 ;;  countElemntA    2    6[COMMON] int 
  3833 ;;  shapeArray      1    8[COMMON] PTR unsigned char 
  3834 ;;		 -> main@square_1(3), 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  pos             2   11[COMMON] int 
  3837 ;;  _pos            2    9[COMMON] int 
  3838 ;; Return value:  Size  Location     Type
  3839 ;;                  1    wreg      void 
  3840 ;; Registers used:
  3841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3842 ;; Tracked objects:
  3843 ;;		On entry : 0/0
  3844 ;;		On exit  : 0/0
  3845 ;;		Unchanged: 0/0
  3846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3847 ;;      Params:         5       0       0       0       0
  3848 ;;      Locals:         4       0       0       0       0
  3849 ;;      Temps:          0       5       0       0       0
  3850 ;;      Totals:         9       5       0       0       0
  3851 ;;Total ram usage:       14 bytes
  3852 ;; Hardware stack levels used: 1
  3853 ;; Hardware stack levels required when called: 2
  3854 ;; This function calls:
  3855 ;;		_SendToSegment
  3856 ;; This function is called by:
  3857 ;;		_MovieShape
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861     0298                     _ShowShape:	
  3862                           ;psect for function _ShowShape
  3863                           
  3864     0298                     l1373:	
  3865                           ;incstack = 0
  3866                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3867                           
  3868     0298                     l1375:
  3869                           
  3870                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  3871     0298  0875               	movf	ShowShape@coord,w
  3872     0299  0084               	movwf	4
  3873     029A  1783               	bsf	3,7
  3874     029B  1C76               	btfss	ShowShape@coord+1,0
  3875     029C  1383               	bcf	3,7
  3876     029D  0800               	movf	0,w
  3877     029E  1283               	bcf	3,5	;RP0=0, select bank0
  3878     029F  1303               	bcf	3,6	;RP1=0, select bank0
  3879     02A0  00A0               	movwf	??_ShowShape
  3880     02A1  0A84               	incf	4,f
  3881     02A2  0800               	movf	0,w
  3882     02A3  00A1               	movwf	??_ShowShape+1
  3883     02A4  0820               	movf	??_ShowShape,w
  3884     02A5  3E01               	addlw	1
  3885     02A6  00FC               	movwf	ShowShape@pos
  3886     02A7  0821               	movf	??_ShowShape+1,w
  3887     02A8  1803               	skipnc
  3888     02A9  3E01               	addlw	1
  3889     02AA  3E00               	addlw	0
  3890     02AB  00FD               	movwf	ShowShape@pos+1
  3891     02AC  2AF6               	goto	l1383
  3892     02AD                     l1377:
  3893                           
  3894                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  3895     02AD  0875               	movf	ShowShape@coord,w
  3896     02AE  0084               	movwf	4
  3897     02AF  1783               	bsf	3,7
  3898     02B0  1C76               	btfss	ShowShape@coord+1,0
  3899     02B1  1383               	bcf	3,7
  3900     02B2  0800               	movf	0,w
  3901     02B3  1283               	bcf	3,5	;RP0=0, select bank0
  3902     02B4  1303               	bcf	3,6	;RP1=0, select bank0
  3903     02B5  00A0               	movwf	??_ShowShape
  3904     02B6  0A84               	incf	4,f
  3905     02B7  0800               	movf	0,w
  3906     02B8  00A1               	movwf	??_ShowShape+1
  3907     02B9  0820               	movf	??_ShowShape,w
  3908     02BA  027C               	subwf	ShowShape@pos,w
  3909     02BB  00A2               	movwf	??_ShowShape+2
  3910     02BC  0821               	movf	??_ShowShape+1,w
  3911     02BD  1C03               	skipc
  3912     02BE  0A21               	incf	??_ShowShape+1,w
  3913     02BF  027D               	subwf	ShowShape@pos+1,w
  3914     02C0  00A3               	movwf	??_ShowShape+3
  3915     02C1  0822               	movf	??_ShowShape+2,w
  3916     02C2  3EFF               	addlw	255
  3917     02C3  00FA               	movwf	ShowShape@_pos
  3918     02C4  0823               	movf	??_ShowShape+3,w
  3919     02C5  1803               	skipnc
  3920     02C6  3E01               	addlw	1
  3921     02C7  3EFF               	addlw	255
  3922     02C8  00FB               	movwf	ShowShape@_pos+1
  3923     02C9                     l1379:
  3924                           
  3925                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  3926     02C9  087D               	movf	ShowShape@pos+1,w
  3927     02CA  00F3               	movwf	SendToSegment@segment+1
  3928     02CB  087C               	movf	ShowShape@pos,w
  3929     02CC  00F2               	movwf	SendToSegment@segment
  3930     02CD  087A               	movf	ShowShape@_pos,w
  3931     02CE  0779               	addwf	ShowShape@shapeArray,w
  3932     02CF  00A0               	movwf	??_ShowShape
  3933     02D0  0820               	movf	??_ShowShape,w
  3934     02D1  0084               	movwf	4
  3935     02D2  1383               	bcf	3,7	;select IRP bank0
  3936     02D3  0800               	movf	0,w
  3937     02D4  00A1               	movwf	??_ShowShape+1
  3938     02D5  0875               	movf	ShowShape@coord,w
  3939     02D6  3E02               	addlw	2
  3940     02D7  00A2               	movwf	??_ShowShape+2
  3941     02D8  0876               	movf	ShowShape@coord+1,w
  3942     02D9  1803               	skipnc
  3943     02DA  3E01               	addlw	1
  3944     02DB  3E00               	addlw	0
  3945     02DC  00A3               	movwf	??_ShowShape+3
  3946     02DD  0822               	movf	??_ShowShape+2,w
  3947     02DE  0084               	movwf	4
  3948     02DF  1783               	bsf	3,7
  3949     02E0  1C23               	btfss	??_ShowShape+3,0
  3950     02E1  1383               	bcf	3,7
  3951     02E2  0A00               	incf	0,w
  3952     02E3  2AE6               	goto	u774
  3953     02E4                     u775:
  3954     02E4  1003               	clrc
  3955     02E5  0DA1               	rlf	??_ShowShape+1,f
  3956     02E6                     u774:
  3957     02E6  3EFF               	addlw	-1
  3958     02E7  1D03               	skipz
  3959     02E8  2AE4               	goto	u775
  3960     02E9  0821               	movf	??_ShowShape+1,w
  3961     02EA  00F4               	movwf	SendToSegment@data
  3962     02EB  120A  118A  2032  120A  118A  	fcall	_SendToSegment
  3963     02F0                     l1381:
  3964                           
  3965                           ;shape.c: 13:     }
  3966     02F0  3001               	movlw	1
  3967     02F1  07FC               	addwf	ShowShape@pos,f
  3968     02F2  1803               	skipnc
  3969     02F3  0AFD               	incf	ShowShape@pos+1,f
  3970     02F4  3000               	movlw	0
  3971     02F5  07FD               	addwf	ShowShape@pos+1,f
  3972     02F6                     l1383:
  3973     02F6  0875               	movf	ShowShape@coord,w
  3974     02F7  0084               	movwf	4
  3975     02F8  1783               	bsf	3,7
  3976     02F9  1C76               	btfss	ShowShape@coord+1,0
  3977     02FA  1383               	bcf	3,7
  3978     02FB  0800               	movf	0,w
  3979     02FC  1283               	bcf	3,5	;RP0=0, select bank0
  3980     02FD  1303               	bcf	3,6	;RP1=0, select bank0
  3981     02FE  00A0               	movwf	??_ShowShape
  3982     02FF  0A84               	incf	4,f
  3983     0300  0800               	movf	0,w
  3984     0301  00A1               	movwf	??_ShowShape+1
  3985     0302  0877               	movf	ShowShape@countElemntArray,w
  3986     0303  0720               	addwf	??_ShowShape,w
  3987     0304  00A2               	movwf	??_ShowShape+2
  3988     0305  0878               	movf	ShowShape@countElemntArray+1,w
  3989     0306  1803               	skipnc
  3990     0307  0A78               	incf	ShowShape@countElemntArray+1,w
  3991     0308  0721               	addwf	??_ShowShape+1,w
  3992     0309  00A3               	movwf	??_ShowShape+3
  3993     030A  0823               	movf	??_ShowShape+3,w
  3994     030B  3A80               	xorlw	128
  3995     030C  00A4               	movwf	??_ShowShape+4
  3996     030D  087D               	movf	ShowShape@pos+1,w
  3997     030E  3A80               	xorlw	128
  3998     030F  0224               	subwf	??_ShowShape+4,w
  3999     0310  1D03               	skipz
  4000     0311  2B14               	goto	u785
  4001     0312  087C               	movf	ShowShape@pos,w
  4002     0313  0222               	subwf	??_ShowShape+2,w
  4003     0314                     u785:
  4004     0314  1803               	skipnc
  4005     0315  2B17               	goto	u781
  4006     0316  2B18               	goto	u780
  4007     0317                     u781:
  4008     0317  2AAD               	goto	l1377
  4009     0318                     u780:
  4010     0318                     l108:
  4011     0318  0008               	return
  4012     0319                     __end_of_ShowShape:
  4013                           
  4014                           	psect	text18
  4015     0032                     __ptext18:	
  4016 ;; *************** function _SendToSegment *****************
  4017 ;; Defined at:
  4018 ;;		line 34 in file "matrix.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;  segment         2    1[COMMON] int 
  4021 ;;  data            1    3[COMMON] unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, status,2, status,0, pclath, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4033 ;;      Params:         3       0       0       0       0
  4034 ;;      Locals:         0       0       0       0       0
  4035 ;;      Temps:          0       0       0       0       0
  4036 ;;      Totals:         3       0       0       0       0
  4037 ;;Total ram usage:        3 bytes
  4038 ;; Hardware stack levels used: 1
  4039 ;; Hardware stack levels required when called: 1
  4040 ;; This function calls:
  4041 ;;		_SpiSendByte
  4042 ;; This function is called by:
  4043 ;;		_SpiClearMatrix
  4044 ;;		_MatrixInit
  4045 ;;		_ShowShape
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049     0032                     _SendToSegment:	
  4050                           ;psect for function _SendToSegment
  4051                           
  4052     0032                     l1287:	
  4053                           ;incstack = 0
  4054                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  4055                           
  4056                           
  4057                           ;matrix.c: 35:     RA5 = 0;
  4058     0032  1283               	bcf	3,5	;RP0=0, select bank0
  4059     0033  1303               	bcf	3,6	;RP1=0, select bank0
  4060     0034  1285               	bcf	5,5	;volatile
  4061     0035                     l1289:
  4062                           
  4063                           ;matrix.c: 36:     SpiSendByte((char)segment);
  4064     0035  0872               	movf	SendToSegment@segment,w
  4065     0036  120A  158A  27E4  120A  118A  	fcall	_SpiSendByte
  4066                           
  4067                           ;matrix.c: 37:     SpiSendByte(data);
  4068     003B  0874               	movf	SendToSegment@data,w
  4069     003C  120A  158A  27E4  120A  118A  	fcall	_SpiSendByte
  4070     0041                     l1291:
  4071                           
  4072                           ;matrix.c: 38:     RA5 = 1;
  4073     0041  1283               	bcf	3,5	;RP0=0, select bank0
  4074     0042  1303               	bcf	3,6	;RP1=0, select bank0
  4075     0043  1685               	bsf	5,5	;volatile
  4076     0044                     l91:
  4077     0044  0008               	return
  4078     0045                     __end_of_SendToSegment:
  4079                           
  4080                           	psect	text19
  4081     0FE4                     __ptext19:	
  4082 ;; *************** function _SpiSendByte *****************
  4083 ;; Defined at:
  4084 ;;		line 18 in file "spi.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  data            1    wreg     unsigned char 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  data            1    0[COMMON] unsigned char 
  4089 ;; Return value:  Size  Location     Type
  4090 ;;                  1    wreg      void 
  4091 ;; Registers used:
  4092 ;;		wreg
  4093 ;; Tracked objects:
  4094 ;;		On entry : 0/0
  4095 ;;		On exit  : 0/0
  4096 ;;		Unchanged: 0/0
  4097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4098 ;;      Params:         0       0       0       0       0
  4099 ;;      Locals:         1       0       0       0       0
  4100 ;;      Temps:          0       0       0       0       0
  4101 ;;      Totals:         1       0       0       0       0
  4102 ;;Total ram usage:        1 bytes
  4103 ;; Hardware stack levels used: 1
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_SendToSegment
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111     0FE4                     _SpiSendByte:	
  4112                           ;psect for function _SpiSendByte
  4113                           
  4114                           
  4115                           ;incstack = 0
  4116                           ; Regs used in _SpiSendByte: [wreg]
  4117                           ;SpiSendByte@data stored from wreg
  4118     0FE4  00F1               	movwf	SpiSendByte@data
  4119     0FE5                     l1199:
  4120                           
  4121                           ;spi.c: 19:     SSPBUF = data;
  4122     0FE5  0871               	movf	SpiSendByte@data,w
  4123     0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  4124     0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  4125     0FE8  0093               	movwf	19	;volatile
  4126     0FE9                     l69:	
  4127                           ;spi.c: 20:     while (!SSPIF);
  4128                           
  4129     0FE9  1D8C               	btfss	12,3	;volatile
  4130     0FEA  2FEC               	goto	u491
  4131     0FEB  2FED               	goto	u490
  4132     0FEC                     u491:
  4133     0FEC  2FE9               	goto	l69
  4134     0FED                     u490:
  4135     0FED                     l71:
  4136                           
  4137                           ;spi.c: 21:     SSPIF = 0;
  4138     0FED  118C               	bcf	12,3	;volatile
  4139     0FEE                     l72:
  4140     0FEE  0008               	return
  4141     0FEF                     __end_of_SpiSendByte:
  4142                           
  4143                           	psect	text20
  4144     005B                     __ptext20:	
  4145 ;; *************** function _MovieUp *****************
  4146 ;; Defined at:
  4147 ;;		line 20 in file "shape.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4150 ;;		 -> main@shapePosition(4), 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  1    wreg      void 
  4155 ;; Registers used:
  4156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4162 ;;      Params:         2       0       0       0       0
  4163 ;;      Locals:         0       0       0       0       0
  4164 ;;      Temps:          2       0       0       0       0
  4165 ;;      Totals:         4       0       0       0       0
  4166 ;;Total ram usage:        4 bytes
  4167 ;; Hardware stack levels used: 1
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_MovieShape
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175     005B                     _MovieUp:	
  4176                           ;psect for function _MovieUp
  4177                           
  4178     005B                     l1387:	
  4179                           ;incstack = 0
  4180                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4181                           
  4182                           
  4183                           ;shape.c: 21:     _shapePosition->y--;
  4184     005B  0871               	movf	MovieUp@_shapePosition,w
  4185     005C  3E02               	addlw	2
  4186     005D  00F3               	movwf	??_MovieUp
  4187     005E  0872               	movf	MovieUp@_shapePosition+1,w
  4188     005F  1803               	skipnc
  4189     0060  3E01               	addlw	1
  4190     0061  3E00               	addlw	0
  4191     0062  00F4               	movwf	??_MovieUp+1
  4192     0063  0873               	movf	??_MovieUp,w
  4193     0064  0084               	movwf	4
  4194     0065  1783               	bsf	3,7
  4195     0066  1C74               	btfss	??_MovieUp+1,0
  4196     0067  1383               	bcf	3,7
  4197     0068  30FF               	movlw	255
  4198     0069  0780               	addwf	0,f
  4199     006A  0F84               	incfsz	4,f
  4200     006B  0800               	movf	0,w
  4201     006C  1803               	skipnc
  4202     006D  0A00               	incf	0,w
  4203     006E  00FF               	movwf	btemp+1
  4204     006F  30FF               	movlw	255
  4205     0070  077F               	addwf	btemp+1,w
  4206     0071  0080               	movwf	0
  4207     0072  0384               	decf	4,f
  4208     0073                     l114:
  4209     0073  0008               	return
  4210     0074                     __end_of_MovieUp:
  4211                           
  4212                           	psect	text21
  4213     0FD9                     __ptext21:	
  4214 ;; *************** function _MovieRigth *****************
  4215 ;; Defined at:
  4216 ;;		line 28 in file "shape.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4219 ;;		 -> main@shapePosition(4), 
  4220 ;; Auto vars:     Size  Location     Type
  4221 ;;		None
  4222 ;; Return value:  Size  Location     Type
  4223 ;;                  1    wreg      void 
  4224 ;; Registers used:
  4225 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4226 ;; Tracked objects:
  4227 ;;		On entry : 0/0
  4228 ;;		On exit  : 0/0
  4229 ;;		Unchanged: 0/0
  4230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4231 ;;      Params:         2       0       0       0       0
  4232 ;;      Locals:         0       0       0       0       0
  4233 ;;      Temps:          0       0       0       0       0
  4234 ;;      Totals:         2       0       0       0       0
  4235 ;;Total ram usage:        2 bytes
  4236 ;; Hardware stack levels used: 1
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_MovieShape
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244     0FD9                     _MovieRigth:	
  4245                           ;psect for function _MovieRigth
  4246                           
  4247     0FD9                     l1391:	
  4248                           ;incstack = 0
  4249                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  4250                           
  4251                           
  4252                           ;shape.c: 29:     _shapePosition->x++;
  4253     0FD9  0871               	movf	MovieRigth@_shapePosition,w
  4254     0FDA  0084               	movwf	4
  4255     0FDB  1783               	bsf	3,7
  4256     0FDC  1C72               	btfss	MovieRigth@_shapePosition+1,0
  4257     0FDD  1383               	bcf	3,7
  4258     0FDE  3001               	movlw	1
  4259     0FDF  0780               	addwf	0,f
  4260     0FE0  0A84               	incf	4,f
  4261     0FE1  1803               	skipnc
  4262     0FE2  0A80               	incf	0,f
  4263     0FE3                     l120:
  4264     0FE3  0008               	return
  4265     0FE4                     __end_of_MovieRigth:
  4266                           
  4267                           	psect	text22
  4268     0FEF                     __ptext22:	
  4269 ;; *************** function _MovieLeft *****************
  4270 ;; Defined at:
  4271 ;;		line 24 in file "shape.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4274 ;;		 -> main@shapePosition(4), 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;		None
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      void 
  4279 ;; Registers used:
  4280 ;;		wreg, fsr0l, fsr0h, btemp+1
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4286 ;;      Params:         2       0       0       0       0
  4287 ;;      Locals:         0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0
  4289 ;;      Totals:         2       0       0       0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used: 1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_MovieShape
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299     0FEF                     _MovieLeft:	
  4300                           ;psect for function _MovieLeft
  4301                           
  4302     0FEF                     l1389:	
  4303                           ;incstack = 0
  4304                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  4305                           
  4306                           
  4307                           ;shape.c: 25:     _shapePosition->x--;
  4308     0FEF  0871               	movf	MovieLeft@_shapePosition,w
  4309     0FF0  0084               	movwf	4
  4310     0FF1  1783               	bsf	3,7
  4311     0FF2  1C72               	btfss	MovieLeft@_shapePosition+1,0
  4312     0FF3  1383               	bcf	3,7
  4313     0FF4  30FF               	movlw	255
  4314     0FF5  0780               	addwf	0,f
  4315     0FF6  0F84               	incfsz	4,f
  4316     0FF7  0800               	movf	0,w
  4317     0FF8  1803               	skipnc
  4318     0FF9  0A00               	incf	0,w
  4319     0FFA  00FF               	movwf	btemp+1
  4320     0FFB  30FF               	movlw	255
  4321     0FFC  077F               	addwf	btemp+1,w
  4322     0FFD  0080               	movwf	0
  4323     0FFE  0384               	decf	4,f
  4324     0FFF                     l117:
  4325     0FFF  0008               	return
  4326     1000                     __end_of_MovieLeft:
  4327                           
  4328                           	psect	text23
  4329     001F                     __ptext23:	
  4330 ;; *************** function _MovieDown *****************
  4331 ;; Defined at:
  4332 ;;		line 16 in file "shape.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4335 ;;		 -> main@shapePosition(4), 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4347 ;;      Params:         2       0       0       0       0
  4348 ;;      Locals:         0       0       0       0       0
  4349 ;;      Temps:          2       0       0       0       0
  4350 ;;      Totals:         4       0       0       0       0
  4351 ;;Total ram usage:        4 bytes
  4352 ;; Hardware stack levels used: 1
  4353 ;; This function calls:
  4354 ;;		Nothing
  4355 ;; This function is called by:
  4356 ;;		_MovieShape
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360     001F                     _MovieDown:	
  4361                           ;psect for function _MovieDown
  4362                           
  4363     001F                     l1385:	
  4364                           ;incstack = 0
  4365                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  4366                           
  4367                           
  4368                           ;shape.c: 17:     _shapePosition->y++;
  4369     001F  0871               	movf	MovieDown@_shapePosition,w
  4370     0020  3E02               	addlw	2
  4371     0021  00F3               	movwf	??_MovieDown
  4372     0022  0872               	movf	MovieDown@_shapePosition+1,w
  4373     0023  1803               	skipnc
  4374     0024  3E01               	addlw	1
  4375     0025  3E00               	addlw	0
  4376     0026  00F4               	movwf	??_MovieDown+1
  4377     0027  0873               	movf	??_MovieDown,w
  4378     0028  0084               	movwf	4
  4379     0029  1783               	bsf	3,7
  4380     002A  1C74               	btfss	??_MovieDown+1,0
  4381     002B  1383               	bcf	3,7
  4382     002C  3001               	movlw	1
  4383     002D  0780               	addwf	0,f
  4384     002E  0A84               	incf	4,f
  4385     002F  1803               	skipnc
  4386     0030  0A80               	incf	0,f
  4387     0031                     l111:
  4388     0031  0008               	return
  4389     0032                     __end_of_MovieDown:
  4390     0002                     ___latbits      equ	2
  4391     007E                     btemp           set	126	;btemp
  4392     007E                     wtemp0          set	126
  4393                           
  4394                           	psect	config
  4395                           
  4396                           ;Config register CONFIG @ 0x2007
  4397                           ;	Oscillator Selection bits
  4398                           ;	FOSC = HS, HS oscillator
  4399                           ;	Watchdog Timer Enable bit
  4400                           ;	WDTE = OFF, WDT disabled
  4401                           ;	Power-up Timer Enable bit
  4402                           ;	PWRTE = OFF, PWRT disabled
  4403                           ;	FLASH Program Memory Code Protection bits
  4404                           ;	CP = OFF, Code protection off
  4405                           ;	Brown-out Reset Enable bit
  4406                           ;	BOREN = OFF, BOR disabled
  4407                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  4408                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4409                           ;	Data EE Memory Code Protection
  4410                           ;	CPD = OFF, Code Protection off
  4411                           ;	FLASH Program Memory Write Enable
  4412                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  4413                           ;	In-Circuit Debugger Mode bit
  4414                           ;	DEBUG = 0x1, unprogrammed default
  4415     2007                     	org	8199
  4416     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     73      79
    BANK1            80      0      11
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    calloc@new_ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ChangeOfCoordinates@_reverse	PTR _Bool  size(1) Largest target is 1
		 -> main@reverse(BANK0[1]), NULL(NULL[0]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    __expand_heap@new_brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __expand_heap@pn	PTR unsigned int  size(1) Largest target is 2
		 -> malloc@m(BANK0[2]), 

    free@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@cptr	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@cur	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@end	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@new	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@p	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@sz	PTR unsigned int  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    Reverse@array	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    Rotate@array_	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    Rotate@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    S662$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK0[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK0[3]), 

    ?___simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____expand_heap	PTR void  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl	PTR void  size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp__calloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _Rotate->_free
    _calloc->_malloc
    _calloc->_memset
    _memset->___wmul
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_Rotate
    _Rotate->_calloc
    _calloc->_malloc
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    4514
                                             63 BANK0     10    10      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 13     7      6    4068
                                             50 BANK0     13     7      6
                         _MovieShape
                            _Reverse
                             _Rotate
 ---------------------------------------------------------------------------------
 (2) _Rotate                                              20    17      3    2575
                                             30 BANK0     20    17      3
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (3) _free                                                12    10      2     289
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (3) _calloc                                               6     2      4    1813
                                             24 BANK0      6     2      4
                             ___wmul
                             _malloc
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6      99
                                              6 COMMON     6     0      6
                                              0 BANK0      2     2      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _malloc                                              14    12      2    1461
                                              8 COMMON     4     2      2
                                             14 BANK0     10    10      0
                      ___expand_heap
                 ___simple_search_fl
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___simple_search_fl                                  22    20      2     827
                                              0 COMMON     8     6      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (5) ___expand_heap                                        5     4      1     136
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4      96
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Reverse                                             11     8      3     271
                                              0 COMMON    11     8      3
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           8     3      5     729
                                              5 BANK0      8     3      5
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           14     9      5     312
                                              4 COMMON     9     4      5
                                              0 BANK0      5     5      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
     _Reverse
     _Rotate
       _calloc
         ___wmul
         _malloc
           ___expand_heap
           ___simple_search_fl
           ___wmul (ARG)
         _memset
           ___wmul (ARG)
       _free
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               85      0       0      0.0%
BITBANK3            85      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      11     13.8%
BITBANK1            80      0       0      0.0%
BANK0               80     73      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0     103      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Dec 18 17:10:50 2024

                      _SpiClearMatrix 0045                                     pc 0002  
                                  l21 03DA                                    l32 0499  
                                  l71 0FED                                    l72 0FEE  
                                  l49 0FD8                                    l66 001E  
                                  l91 0044                                    l69 0FE9  
                                  l85 005A                                    l88 0116  
                                  fsr 0004                   ___wmul@multiplicand 0073  
                     SpiSendByte@data 0071                                   l102 0090  
                                 l111 0031                                   l120 0FE3  
                                 l114 0073                                   l130 0297  
                                 l108 0318                                   l117 0FFF  
                                 l141 03D5                                   l233 00BE  
                                 l147 0159                                   l235 00D6  
                                 l711 0705                                   l703 07D7  
                                 l720 0651                                   l714 07AE  
                                 l740 04AA                                   l744 0563  
                                 l762 01B6                                   l746 053E  
                                 l748 0531                                   l773 00B1  
                                 l767 01EE                                   l697 01A1  
                                 _RA5 002D                                   u500 0660  
                                 u501 065F                                   u510 067C  
                                 u511 067B                                   u600 01B2  
                                 u520 0682                                   u601 01B1  
                                 u521 0681                                   u610 01BF  
                                 u530 06D8                                   u611 01BE  
                                 u531 06D7                                   u515 0678  
                                 u620 01D3                                   u540 06DE  
                                 u700 04C7                                   u621 01D2  
                                 u541 06DD                                   u701 04C6  
                                 u630 01DD                                   u550 06FC  
                                 u710 04E5                                   u631 01DC  
                                 u551 06FB                                   u535 06D4  
                                 u711 04E4                                   u640 00B8  
                                 u560 0722                                   u720 04FD  
                                 u800 056E                                   u641 00B7  
                                 u561 0721                                   u721 04FC  
                                 u801 056D                                   u490 0FED  
                                 u570 0728                                   u730 051A  
                                 u810 0584                                   u491 0FEC  
                                 u635 01D9                                   u571 0727  
                                 u555 06F8                                   u731 0519  
                                 u811 0583                                   u580 0756  
                                 u740 052D                                   u820 059A  
                                 u900 0375                                   u581 0755  
                                 u741 052C                                   u725 04F9  
                                 u821 0599                                   u670 00D2  
                                 u590 07B8                                   u750 00B1  
                                 u830 060A                                   u910 03A3  
                                 u671 00D1                                   u655 00BF  
                                 u591 07B7                                   u751 00B0  
                                 u831 0609                                   u760 005A  
                                 u840 0159                                   u680 04A4  
                                 u920 03CA                                   u761 0059  
                                 u841 0158                                   u665 00C6  
                                 u745 0529                                   u681 04A3  
                                 u825 0596                                   u921 03C9  
                                 u690 04B3                                   u850 0334  
                                 u930 045B                                   u595 07B4  
                                 u691 04B2                                   u835 0606  
                                 u851 0333                                   u931 045A  
                                 u780 0318                                   u860 0340  
                                 u940 0463                                   u781 0317  
                                 u845 0155                                   u925 03C6  
                                 u861 033F                                   u941 0462  
                                 u774 02E6                                   u790 017E  
                                 u870 034F                                   u950 046B  
                                 u775 02E4                                   u791 017D  
                                 u871 034E                                   u951 046A  
                                 u935 0457                                   u960 0499  
                                 u785 0314                                   u961 0498  
                                 u884 035C                                   u885 035A  
                                 u965 0495                                   u894 0366  
                                 u895 0364                                   u977 00DD  
                                 u987 0440                                   fsr0 0004  
                                 indf 0000                                  l1201 0652  
                                l1211 0668                                  l1203 065A  
                                l1301 00CC                                  l1213 067C  
                                l1205 0660                                  l1303 00D2  
                                l1231 06FD                                  l1215 0682  
                                l1223 06C4                                  l1311 04A4  
                                l1241 0756                                  l1233 0709  
                                l1225 06D8                                  l1217 06A8  
                                l1209 0663                                  l1313 04B3  
                                l1251 07B8                                  l1243 0770  
                                l1227 06DE                                  l1219 06BB  
                                l1235 071C                                  l1331 04FD  
                                l1323 04D0                                  l1315 04B8  
                                l1307 049A                                  l1411 059A  
                                l1403 0564                                  l1253 07BD  
                                l1245 077A                                  l1237 0722  
                                l1341 051B                                  l1333 0507  
                                l1325 04D0                                  l1317 04C7  
                                l1309 049E                                  l1413 05BF  
                                l1421 05E6                                  l1501 0397  
                                l1271 01C3                                  l1263 01A2  
                                l1255 07CF                                  l1247 0798  
                                l1239 0728                                  l1351 0556  
                                l1343 052D                                  l1335 0514  
                                l1327 04DF                                  l1319 04CD  
                                l1423 060A                                  l1415 05E1  
                                l1407 056F                                  l1503 03B6  
                                l1441 025E                                  l1433 023F  
                                l1273 01CA                                  l1265 01AA  
                                l1249 07AA                                  l1353 055A  
                                l1345 0544                                  l1329 04E5  
                                l1361 0098                                  l1409 0584  
                                l1505 03BC                                  l1521 0412  
                                l1291 0041                                  l1371 0054  
                                l1435 0240                                  l1283 01E6  
                                l1275 01D3                                  l1267 01B2  
                                l1347 0548                                  l1355 055F  
                                l1363 009F                                  l1427 062D  
                                l1507 03CA                                  l1531 045B  
                                l1515 03DF                                  l1381 02F0  
                                l1373 0298                                  l1437 024A  
                                l1445 0268                                  l1461 0122  
                                l1293 00B2                                  l1277 01DD  
                                l1269 01BF                                  l1349 0552  
                                l1365 00A3                                  l1429 0640  
                                l1541 0484                                  l1533 0463  
                                l1517 03F0                                  l1525 0423  
                                l1509 03D6                                  l1391 0FD9  
                                l1199 0FE5                                  l1287 0032  
                                l1383 02F6                                  l1375 0298  
                                l1367 0045                                  l1439 0254  
                                l1447 0281                                  l1463 013F  
                                l1295 00B4                                  l1279 01E3  
                                l1359 0091                                  l1471 032E  
                                l1543 048C                                  l1535 046B  
                                l1519 0401                                  l1527 0438  
                                l1551 0010                                  l1385 001F  
                                l1289 0035                                  l1377 02AD  
                                l1369 0047                                  l1449 0286  
                                l1465 0145                                  l1457 0117  
                                l1297 00B8                                  l1393 015A  
                                l1481 0349                                  l1473 0334  
                                l1537 0476                                  l1529 044E  
                                l1561 00E6                                  l1553 0018  
                                l1387 005B                                  l1379 02C9  
                                l1467 014B                                  l1459 0119  
                                l1299 00C5                                  l1395 0178  
                                l1491 0386                                  l1483 034B  
                                l1475 033C                                  l1539 0479  
                                l1563 00F0                                  l1571 0FD2  
                                l1555 001A                                  l1389 0FEF  
                                l1397 017E                                  l1469 0319  
                                l1637 042A                                  l1565 00FB  
                                l1557 00D7                                  l1573 0074  
                                l1549 000D                                  l1581 0214  
                                l1639 0270                                  l1399 019B  
                                l1495 038D                                  l1487 0350  
                                l1479 0341                                  l1567 0106  
                                l1559 00E3                                  l1575 007E  
                                l1583 0216                                  l1489 0380  
                                l1569 0111                                  l1585 0225  
                                l1577 01EF                                  l1499 0394  
                                l1579 01F9                                  _brkp 0069  
                                _free 0564                                  _main 01EF  
                                btemp 007E                           main@reverse 0064  
                                start 0000                __end_of_SpiClearMatrix 005B  
                     __end_of_MovieUp 0074                       __end_of_SpiInit 001F  
                     __end_of_Reverse 015A                                 ?_free 0071  
                               ?_main 0071                   _ChangeOfCoordinates 03D6  
                               _PORTA 0005                                 _PORTB 0006  
                               _TRISA 0085                                 _TRISB 0086  
                               _TRISC 0087                                 _SSPIF 0063  
                     SpiClearMatrix@i 0077                     SendToSegment@data 0074  
                               _errno 00A6                                 free@c 007B  
                               pclath 000A                      ___expand_heap@pn 0071  
                               status 0003                                 wtemp0 007E  
                        main@square_1 005F                  ?_ChangeOfCoordinates 0052  
                     ?_SpiClearMatrix 0071                       __initialization 07D8  
                        __end_of_free 0652                          __end_of_main 023C  
                       ___expand_heap 01A2                            _MatrixInit 00D7  
                              ??_free 0073                                ??_main 007E  
                       ??_SetPosition 0077                         calloc@new_ptr 003C  
               ??_ChangeOfCoordinates 0058                                _SSPCON 0014  
                              _SSPBUF 0013                            _MovieShape 023C  
                          _MovieRigth 0FD9                  MovieShape@shapeArray 0027  
                           ??_MovieUp 0073                             ??_SpiInit 0071  
                           ??_Reverse 0074                         ??_SpiSendByte 0071  
                              _Rotate 0319                        ?___expand_heap 0071  
             ___simple_search_fl@best 002C               ___simple_search_fl@last 0026  
             ___simple_search_fl@next 0028                                ___wmul 00B2  
                              _calloc 015A                                _malloc 049A  
                              _memset 0091                        ShowShape@coord 0075  
             __end_of__initialization 07FC                   __end_of_SetPosition 0091  
                          ___freelist 006D                        __pcstackCOMMON 0071  
                        __pidataBANK1 0FCF                           ?_MatrixInit 0071  
                 __end_of_SpiSendByte 0FEF     ChangeOfCoordinates@_shapePosition 0052  
ChangeOfCoordinates@_countElemntArray 0055            __end_of___simple_search_fl 07D8  
                          __pbssBANK0 0069                            __pbssBANK1 00A0  
                   __end_of_MovieLeft 1000                     __end_of_MovieDown 0032  
            MovieShape@_shapePosition 0025                     __end_of_PortBInit 0FD9  
                   __end_of_ShowShape 0319                           ?_MovieShape 0025  
                   main@shapePosition 0065                           ?_MovieRigth 0071  
                     ??___expand_heap 0072                            __pmaintext 01EF  
                             ?_Rotate 003E                               ?___wmul 0071  
                             ?_calloc 0038                               ?_malloc 0079  
                             ?_memset 0077                         MovieShape@dir 002C  
           ShowShape@countElemntArray 0077                           _SetPosition 0074  
                             _SSPSTAT 0094                            __stringtab 0003  
                    ??_SpiClearMatrix 0075                            calloc@size 003A  
                             _MovieUp 005B                               _SpiInit 000D  
                       _SendToSegment 0032                  ___simple_search_fl@c 002A  
                             _Reverse 0117                  ___simple_search_fl@n 0071  
                         _SpiSendByte 0FE4                               Rotate@i 004A  
                             Rotate@x 0048                               Rotate@y 004C  
            ___simple_search_fl@split 0024                               __ptext1 000D  
                             __ptext2 0074                               __ptext3 0FD2  
                             __ptext4 00D7                               __ptext5 03D6  
                             __ptext6 0319                               __ptext7 0564  
                             __ptext8 015A                               __ptext9 0091  
             ChangeOfCoordinates@step 005D                               free@ptr 0071  
                end_of_initialization 07FC                               malloc@m 002E  
                             malloc@n 0079                               malloc@p 0034  
              ___expand_heap@new_brkp 0074                               memset@c 0079  
                             memset@n 007B                               memset@p 0020  
                      ?_SendToSegment 0072                   SetPosition@position 0071  
         __end_of_ChangeOfCoordinates 049A               MovieLeft@_shapePosition 0071  
          ChangeOfCoordinates@_figure 0054                        __end_of_Rotate 03D6  
                      __end_of___wmul 00D7                          ??_MatrixInit 0078  
                      __end_of_calloc 01A2                        __end_of_malloc 0564  
                      __end_of_memset 00B2                       ___expand_heap@n 0072  
                 start_initialization 07D8                            malloc@lock 00A0  
                          malloc@size 0032                    __end_of_MatrixInit 0117  
                     ??_SendToSegment 0075                          ??_MovieShape 002A  
                        ??_MovieRigth 0073                             _MovieLeft 0FEF  
                           _MovieDown 001F                    ___simple_search_fl 0652  
                           _PortBInit 0FD2                              ??_Rotate 0041  
                           _ShowShape 0298          ___simple_search_fl@best_last 0022  
                            ??___wmul 0075                              ??_calloc 007D  
                         __pdataBANK1 00A8                              ??_malloc 007B  
                            ??_memset 007D                   ?___simple_search_fl 0071  
                          memset@dest 0077                         ShowShape@_pos 007A  
                        SetPosition@x 0073                          SetPosition@y 0075  
                           Rotate@res 004E                             ___heap_hi 0170  
                           ___heap_lo 0110                             ___latbits 0002  
                       __pcstackBANK0 0020                    __end_of_MovieShape 0298  
                  __end_of_MovieRigth 0FE4                          ?_SetPosition 0071  
                main@countElemntArray 0062                   ShowShape@shapeArray 0079  
                ??___simple_search_fl 0073           ChangeOfCoordinates@_reverse 0057  
                          ?_MovieLeft 0071                            ?_MovieDown 0071  
                            ?_MovieUp 0071                              ?_SpiInit 0071  
                            ?_Reverse 0071                            ?_PortBInit 0071  
               __end_of___expand_heap 01EF                          ?_SpiSendByte 0071  
                          ?_ShowShape 0075                             __pstrings 0003  
             MovieDown@_shapePosition 0071      __end_ofChangeOfCoordinates@delay 000D  
               MovieUp@_shapePosition 0071                        ___wmul@product 0075  
                  Reverse@countElemnt 0072                          Reverse@array 0071  
                         __stringbase 0008                     ___wmul@multiplier 0071  
                           malloc@end 00A4                             malloc@cur 006B  
                           malloc@new 0036                           ??_MovieLeft 0073  
                         ??_MovieDown 0073                           calloc@nmemb 0038  
                            Reverse@i 0078                              Reverse@j 007A  
                            Reverse@t 0077                           ??_PortBInit 0071  
                         ??_ShowShape 0020                          ShowShape@pos 007C  
                            Rotate@_i 0050                    __end_of__stringtab 0009  
                            __ptext10 049A                              __ptext11 0652  
                            __ptext20 005B                              __ptext12 01A2  
                            __ptext21 0FD9                              __ptext13 00B2  
                            __ptext22 0FEF                              __ptext14 0117  
                            __ptext23 001F                              __ptext15 023C  
                            __ptext16 0045                              __ptext17 0298  
                            __ptext18 0032                              __ptext19 0FE4  
            ChangeOfCoordinates@delay 0009                              main@F928 00A8  
                SendToSegment@segment 0072                              free@cptr 0079  
                            malloc@sz 0030     ___simple_search_fl@remaining_size 0020  
                ChangeOfCoordinates@i 005B                             stringcode 0003  
               __end_of_SendToSegment 0045              MovieRigth@_shapePosition 0071  
          MovieShape@countElemntArray 0028                              stringdir 0003  
                            stringtab 0003                          Rotate@array_ 003E  
                        Rotate@length 003F  

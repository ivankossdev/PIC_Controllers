

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 23 11:54:16 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F876
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    14                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    27                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=1
    28                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    38                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41     0000                     
    42                           ; Generated 12/10/2023 GMT
    43                           ; 
    44                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC16F876 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76     0004                     fsr             equ	4
    77     0004                     fsr0            equ	4
    78     0000                     indf            equ	0
    79     0000                     indf0           equ	0
    80     0002                     pc              equ	2
    81     0002                     pcl             equ	2
    82     000A                     pclath          equ	10
    83     0003                     status          equ	3
    84     0000                     INDF            equ	0	;# 
    85     0001                     TMR0            equ	1	;# 
    86     0002                     PCL             equ	2	;# 
    87     0003                     STATUS          equ	3	;# 
    88     0004                     FSR             equ	4	;# 
    89     0005                     PORTA           equ	5	;# 
    90     0006                     PORTB           equ	6	;# 
    91     0007                     PORTC           equ	7	;# 
    92     000A                     PCLATH          equ	10	;# 
    93     000B                     INTCON          equ	11	;# 
    94     000C                     PIR1            equ	12	;# 
    95     000D                     PIR2            equ	13	;# 
    96     000E                     TMR1            equ	14	;# 
    97     000E                     TMR1L           equ	14	;# 
    98     000F                     TMR1H           equ	15	;# 
    99     0010                     T1CON           equ	16	;# 
   100     0011                     TMR2            equ	17	;# 
   101     0012                     T2CON           equ	18	;# 
   102     0013                     SSPBUF          equ	19	;# 
   103     0014                     SSPCON          equ	20	;# 
   104     0015                     CCPR1           equ	21	;# 
   105     0015                     CCPR1L          equ	21	;# 
   106     0016                     CCPR1H          equ	22	;# 
   107     0017                     CCP1CON         equ	23	;# 
   108     0018                     RCSTA           equ	24	;# 
   109     0019                     TXREG           equ	25	;# 
   110     001A                     RCREG           equ	26	;# 
   111     001B                     CCPR2           equ	27	;# 
   112     001B                     CCPR2L          equ	27	;# 
   113     001C                     CCPR2H          equ	28	;# 
   114     001D                     CCP2CON         equ	29	;# 
   115     001E                     ADRESH          equ	30	;# 
   116     001F                     ADCON0          equ	31	;# 
   117     0081                     OPTION_REG      equ	129	;# 
   118     0085                     TRISA           equ	133	;# 
   119     0086                     TRISB           equ	134	;# 
   120     0087                     TRISC           equ	135	;# 
   121     008C                     PIE1            equ	140	;# 
   122     008D                     PIE2            equ	141	;# 
   123     008E                     PCON            equ	142	;# 
   124     0091                     SSPCON2         equ	145	;# 
   125     0092                     PR2             equ	146	;# 
   126     0093                     SSPADD          equ	147	;# 
   127     0094                     SSPSTAT         equ	148	;# 
   128     0098                     TXSTA           equ	152	;# 
   129     0099                     SPBRG           equ	153	;# 
   130     009E                     ADRESL          equ	158	;# 
   131     009F                     ADCON1          equ	159	;# 
   132     010C                     EEDATA          equ	268	;# 
   133     010D                     EEADR           equ	269	;# 
   134     010E                     EEDATH          equ	270	;# 
   135     010F                     EEADRH          equ	271	;# 
   136     018C                     EECON1          equ	396	;# 
   137     018D                     EECON2          equ	397	;# 
   138     0000                     INDF            equ	0	;# 
   139     0001                     TMR0            equ	1	;# 
   140     0002                     PCL             equ	2	;# 
   141     0003                     STATUS          equ	3	;# 
   142     0004                     FSR             equ	4	;# 
   143     0005                     PORTA           equ	5	;# 
   144     0006                     PORTB           equ	6	;# 
   145     0007                     PORTC           equ	7	;# 
   146     000A                     PCLATH          equ	10	;# 
   147     000B                     INTCON          equ	11	;# 
   148     000C                     PIR1            equ	12	;# 
   149     000D                     PIR2            equ	13	;# 
   150     000E                     TMR1            equ	14	;# 
   151     000E                     TMR1L           equ	14	;# 
   152     000F                     TMR1H           equ	15	;# 
   153     0010                     T1CON           equ	16	;# 
   154     0011                     TMR2            equ	17	;# 
   155     0012                     T2CON           equ	18	;# 
   156     0013                     SSPBUF          equ	19	;# 
   157     0014                     SSPCON          equ	20	;# 
   158     0015                     CCPR1           equ	21	;# 
   159     0015                     CCPR1L          equ	21	;# 
   160     0016                     CCPR1H          equ	22	;# 
   161     0017                     CCP1CON         equ	23	;# 
   162     0018                     RCSTA           equ	24	;# 
   163     0019                     TXREG           equ	25	;# 
   164     001A                     RCREG           equ	26	;# 
   165     001B                     CCPR2           equ	27	;# 
   166     001B                     CCPR2L          equ	27	;# 
   167     001C                     CCPR2H          equ	28	;# 
   168     001D                     CCP2CON         equ	29	;# 
   169     001E                     ADRESH          equ	30	;# 
   170     001F                     ADCON0          equ	31	;# 
   171     0081                     OPTION_REG      equ	129	;# 
   172     0085                     TRISA           equ	133	;# 
   173     0086                     TRISB           equ	134	;# 
   174     0087                     TRISC           equ	135	;# 
   175     008C                     PIE1            equ	140	;# 
   176     008D                     PIE2            equ	141	;# 
   177     008E                     PCON            equ	142	;# 
   178     0091                     SSPCON2         equ	145	;# 
   179     0092                     PR2             equ	146	;# 
   180     0093                     SSPADD          equ	147	;# 
   181     0094                     SSPSTAT         equ	148	;# 
   182     0098                     TXSTA           equ	152	;# 
   183     0099                     SPBRG           equ	153	;# 
   184     009E                     ADRESL          equ	158	;# 
   185     009F                     ADCON1          equ	159	;# 
   186     010C                     EEDATA          equ	268	;# 
   187     010D                     EEADR           equ	269	;# 
   188     010E                     EEDATH          equ	270	;# 
   189     010F                     EEADRH          equ	271	;# 
   190     018C                     EECON1          equ	396	;# 
   191     018D                     EECON2          equ	397	;# 
   192     0000                     INDF            equ	0	;# 
   193     0001                     TMR0            equ	1	;# 
   194     0002                     PCL             equ	2	;# 
   195     0003                     STATUS          equ	3	;# 
   196     0004                     FSR             equ	4	;# 
   197     0005                     PORTA           equ	5	;# 
   198     0006                     PORTB           equ	6	;# 
   199     0007                     PORTC           equ	7	;# 
   200     000A                     PCLATH          equ	10	;# 
   201     000B                     INTCON          equ	11	;# 
   202     000C                     PIR1            equ	12	;# 
   203     000D                     PIR2            equ	13	;# 
   204     000E                     TMR1            equ	14	;# 
   205     000E                     TMR1L           equ	14	;# 
   206     000F                     TMR1H           equ	15	;# 
   207     0010                     T1CON           equ	16	;# 
   208     0011                     TMR2            equ	17	;# 
   209     0012                     T2CON           equ	18	;# 
   210     0013                     SSPBUF          equ	19	;# 
   211     0014                     SSPCON          equ	20	;# 
   212     0015                     CCPR1           equ	21	;# 
   213     0015                     CCPR1L          equ	21	;# 
   214     0016                     CCPR1H          equ	22	;# 
   215     0017                     CCP1CON         equ	23	;# 
   216     0018                     RCSTA           equ	24	;# 
   217     0019                     TXREG           equ	25	;# 
   218     001A                     RCREG           equ	26	;# 
   219     001B                     CCPR2           equ	27	;# 
   220     001B                     CCPR2L          equ	27	;# 
   221     001C                     CCPR2H          equ	28	;# 
   222     001D                     CCP2CON         equ	29	;# 
   223     001E                     ADRESH          equ	30	;# 
   224     001F                     ADCON0          equ	31	;# 
   225     0081                     OPTION_REG      equ	129	;# 
   226     0085                     TRISA           equ	133	;# 
   227     0086                     TRISB           equ	134	;# 
   228     0087                     TRISC           equ	135	;# 
   229     008C                     PIE1            equ	140	;# 
   230     008D                     PIE2            equ	141	;# 
   231     008E                     PCON            equ	142	;# 
   232     0091                     SSPCON2         equ	145	;# 
   233     0092                     PR2             equ	146	;# 
   234     0093                     SSPADD          equ	147	;# 
   235     0094                     SSPSTAT         equ	148	;# 
   236     0098                     TXSTA           equ	152	;# 
   237     0099                     SPBRG           equ	153	;# 
   238     009E                     ADRESL          equ	158	;# 
   239     009F                     ADCON1          equ	159	;# 
   240     010C                     EEDATA          equ	268	;# 
   241     010D                     EEADR           equ	269	;# 
   242     010E                     EEDATH          equ	270	;# 
   243     010F                     EEADRH          equ	271	;# 
   244     018C                     EECON1          equ	396	;# 
   245     018D                     EECON2          equ	397	;# 
   246     0000                     INDF            equ	0	;# 
   247     0001                     TMR0            equ	1	;# 
   248     0002                     PCL             equ	2	;# 
   249     0003                     STATUS          equ	3	;# 
   250     0004                     FSR             equ	4	;# 
   251     0005                     PORTA           equ	5	;# 
   252     0006                     PORTB           equ	6	;# 
   253     0007                     PORTC           equ	7	;# 
   254     000A                     PCLATH          equ	10	;# 
   255     000B                     INTCON          equ	11	;# 
   256     000C                     PIR1            equ	12	;# 
   257     000D                     PIR2            equ	13	;# 
   258     000E                     TMR1            equ	14	;# 
   259     000E                     TMR1L           equ	14	;# 
   260     000F                     TMR1H           equ	15	;# 
   261     0010                     T1CON           equ	16	;# 
   262     0011                     TMR2            equ	17	;# 
   263     0012                     T2CON           equ	18	;# 
   264     0013                     SSPBUF          equ	19	;# 
   265     0014                     SSPCON          equ	20	;# 
   266     0015                     CCPR1           equ	21	;# 
   267     0015                     CCPR1L          equ	21	;# 
   268     0016                     CCPR1H          equ	22	;# 
   269     0017                     CCP1CON         equ	23	;# 
   270     0018                     RCSTA           equ	24	;# 
   271     0019                     TXREG           equ	25	;# 
   272     001A                     RCREG           equ	26	;# 
   273     001B                     CCPR2           equ	27	;# 
   274     001B                     CCPR2L          equ	27	;# 
   275     001C                     CCPR2H          equ	28	;# 
   276     001D                     CCP2CON         equ	29	;# 
   277     001E                     ADRESH          equ	30	;# 
   278     001F                     ADCON0          equ	31	;# 
   279     0081                     OPTION_REG      equ	129	;# 
   280     0085                     TRISA           equ	133	;# 
   281     0086                     TRISB           equ	134	;# 
   282     0087                     TRISC           equ	135	;# 
   283     008C                     PIE1            equ	140	;# 
   284     008D                     PIE2            equ	141	;# 
   285     008E                     PCON            equ	142	;# 
   286     0091                     SSPCON2         equ	145	;# 
   287     0092                     PR2             equ	146	;# 
   288     0093                     SSPADD          equ	147	;# 
   289     0094                     SSPSTAT         equ	148	;# 
   290     0098                     TXSTA           equ	152	;# 
   291     0099                     SPBRG           equ	153	;# 
   292     009E                     ADRESL          equ	158	;# 
   293     009F                     ADCON1          equ	159	;# 
   294     010C                     EEDATA          equ	268	;# 
   295     010D                     EEADR           equ	269	;# 
   296     010E                     EEDATH          equ	270	;# 
   297     010F                     EEADRH          equ	271	;# 
   298     018C                     EECON1          equ	396	;# 
   299     018D                     EECON2          equ	397	;# 
   300     0000                     INDF            equ	0	;# 
   301     0001                     TMR0            equ	1	;# 
   302     0002                     PCL             equ	2	;# 
   303     0003                     STATUS          equ	3	;# 
   304     0004                     FSR             equ	4	;# 
   305     0005                     PORTA           equ	5	;# 
   306     0006                     PORTB           equ	6	;# 
   307     0007                     PORTC           equ	7	;# 
   308     000A                     PCLATH          equ	10	;# 
   309     000B                     INTCON          equ	11	;# 
   310     000C                     PIR1            equ	12	;# 
   311     000D                     PIR2            equ	13	;# 
   312     000E                     TMR1            equ	14	;# 
   313     000E                     TMR1L           equ	14	;# 
   314     000F                     TMR1H           equ	15	;# 
   315     0010                     T1CON           equ	16	;# 
   316     0011                     TMR2            equ	17	;# 
   317     0012                     T2CON           equ	18	;# 
   318     0013                     SSPBUF          equ	19	;# 
   319     0014                     SSPCON          equ	20	;# 
   320     0015                     CCPR1           equ	21	;# 
   321     0015                     CCPR1L          equ	21	;# 
   322     0016                     CCPR1H          equ	22	;# 
   323     0017                     CCP1CON         equ	23	;# 
   324     0018                     RCSTA           equ	24	;# 
   325     0019                     TXREG           equ	25	;# 
   326     001A                     RCREG           equ	26	;# 
   327     001B                     CCPR2           equ	27	;# 
   328     001B                     CCPR2L          equ	27	;# 
   329     001C                     CCPR2H          equ	28	;# 
   330     001D                     CCP2CON         equ	29	;# 
   331     001E                     ADRESH          equ	30	;# 
   332     001F                     ADCON0          equ	31	;# 
   333     0081                     OPTION_REG      equ	129	;# 
   334     0085                     TRISA           equ	133	;# 
   335     0086                     TRISB           equ	134	;# 
   336     0087                     TRISC           equ	135	;# 
   337     008C                     PIE1            equ	140	;# 
   338     008D                     PIE2            equ	141	;# 
   339     008E                     PCON            equ	142	;# 
   340     0091                     SSPCON2         equ	145	;# 
   341     0092                     PR2             equ	146	;# 
   342     0093                     SSPADD          equ	147	;# 
   343     0094                     SSPSTAT         equ	148	;# 
   344     0098                     TXSTA           equ	152	;# 
   345     0099                     SPBRG           equ	153	;# 
   346     009E                     ADRESL          equ	158	;# 
   347     009F                     ADCON1          equ	159	;# 
   348     010C                     EEDATA          equ	268	;# 
   349     010D                     EEADR           equ	269	;# 
   350     010E                     EEDATH          equ	270	;# 
   351     010F                     EEADRH          equ	271	;# 
   352     018C                     EECON1          equ	396	;# 
   353     018D                     EECON2          equ	397	;# 
   354     0000                     INDF            equ	0	;# 
   355     0001                     TMR0            equ	1	;# 
   356     0002                     PCL             equ	2	;# 
   357     0003                     STATUS          equ	3	;# 
   358     0004                     FSR             equ	4	;# 
   359     0005                     PORTA           equ	5	;# 
   360     0006                     PORTB           equ	6	;# 
   361     0007                     PORTC           equ	7	;# 
   362     000A                     PCLATH          equ	10	;# 
   363     000B                     INTCON          equ	11	;# 
   364     000C                     PIR1            equ	12	;# 
   365     000D                     PIR2            equ	13	;# 
   366     000E                     TMR1            equ	14	;# 
   367     000E                     TMR1L           equ	14	;# 
   368     000F                     TMR1H           equ	15	;# 
   369     0010                     T1CON           equ	16	;# 
   370     0011                     TMR2            equ	17	;# 
   371     0012                     T2CON           equ	18	;# 
   372     0013                     SSPBUF          equ	19	;# 
   373     0014                     SSPCON          equ	20	;# 
   374     0015                     CCPR1           equ	21	;# 
   375     0015                     CCPR1L          equ	21	;# 
   376     0016                     CCPR1H          equ	22	;# 
   377     0017                     CCP1CON         equ	23	;# 
   378     0018                     RCSTA           equ	24	;# 
   379     0019                     TXREG           equ	25	;# 
   380     001A                     RCREG           equ	26	;# 
   381     001B                     CCPR2           equ	27	;# 
   382     001B                     CCPR2L          equ	27	;# 
   383     001C                     CCPR2H          equ	28	;# 
   384     001D                     CCP2CON         equ	29	;# 
   385     001E                     ADRESH          equ	30	;# 
   386     001F                     ADCON0          equ	31	;# 
   387     0081                     OPTION_REG      equ	129	;# 
   388     0085                     TRISA           equ	133	;# 
   389     0086                     TRISB           equ	134	;# 
   390     0087                     TRISC           equ	135	;# 
   391     008C                     PIE1            equ	140	;# 
   392     008D                     PIE2            equ	141	;# 
   393     008E                     PCON            equ	142	;# 
   394     0091                     SSPCON2         equ	145	;# 
   395     0092                     PR2             equ	146	;# 
   396     0093                     SSPADD          equ	147	;# 
   397     0094                     SSPSTAT         equ	148	;# 
   398     0098                     TXSTA           equ	152	;# 
   399     0099                     SPBRG           equ	153	;# 
   400     009E                     ADRESL          equ	158	;# 
   401     009F                     ADCON1          equ	159	;# 
   402     010C                     EEDATA          equ	268	;# 
   403     010D                     EEADR           equ	269	;# 
   404     010E                     EEDATH          equ	270	;# 
   405     010F                     EEADRH          equ	271	;# 
   406     018C                     EECON1          equ	396	;# 
   407     018D                     EECON2          equ	397	;# 
   408                           
   409                           	psect	idataBANK1
   410     0003                     __pidataBANK1:
   411                           
   412                           ;initializer for main@F932
   413     0003  3407               	retlw	7
   414     0004  3405               	retlw	5
   415     0005  3402               	retlw	2
   416                           
   417                           	psect	strings
   418     0800                     __pstrings:
   419     0800                     stringtab:
   420     0800                     __stringtab:
   421     0800                     stringcode:	
   422                           ;	String table - string pointers are 1 byte each
   423                           
   424     0800                     stringdir:
   425     0800  3008               	movlw	high stringdir
   426     0801  008A               	movwf	10
   427     0802  0804               	movf	4,w
   428     0803  0A84               	incf	4,f
   429     0804  0782               	addwf	2,f
   430     0805                     __stringbase:
   431     0805  3400               	retlw	0
   432     0806                     __end_of__stringtab:
   433     0806                     ChangeOfCoordinates@delay:
   434     0806  3464               	retlw	100
   435     0807  3400               	retlw	0
   436     0808  3400               	retlw	0
   437     0809  3400               	retlw	0
   438     080A                     __end_ofChangeOfCoordinates@delay:
   439     0013                     _SSPBUF         set	19
   440     0014                     _SSPCON         set	20
   441     0005                     _PORTA          set	5
   442     0006                     _PORTB          set	6
   443     002D                     _RA5            set	45
   444     0063                     _SSPIF          set	99
   445     0094                     _SSPSTAT        set	148
   446     0085                     _TRISA          set	133
   447     0087                     _TRISC          set	135
   448     0086                     _TRISB          set	134
   449                           
   450                           	psect	cinit
   451     07D8                     start_initialization:	
   452                           ; #config settings
   453                           
   454     07D8                     __initialization:
   455                           
   456                           ; Initialize objects allocated to BANK1
   457     07D8  1683               	bsf	3,5	;RP0=1, select bank1
   458     07D9  1303               	bcf	3,6	;RP1=0, select bank1
   459     07DA  120A  118A  2003  120A  118A  	fcall	__pidataBANK1	;fetch initializer
   460     07DF  00B1               	movwf	__pdataBANK1& (0+127)
   461     07E0  120A  118A  2004  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
   462     07E5  00B2               	movwf	(__pdataBANK1+1)& (0+127)
   463     07E6  120A  118A  2005  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
   464     07EB  00B3               	movwf	(__pdataBANK1+2)& (0+127)
   465                           
   466                           ; Clear objects allocated to BANK1
   467     07EC  01A9               	clrf	__pbssBANK1& (0+127)
   468     07ED  01AA               	clrf	(__pbssBANK1+1)& (0+127)
   469     07EE  01AB               	clrf	(__pbssBANK1+2)& (0+127)
   470     07EF  01AC               	clrf	(__pbssBANK1+3)& (0+127)
   471     07F0  01AD               	clrf	(__pbssBANK1+4)& (0+127)
   472     07F1  01AE               	clrf	(__pbssBANK1+5)& (0+127)
   473     07F2  01AF               	clrf	(__pbssBANK1+6)& (0+127)
   474     07F3  01B0               	clrf	(__pbssBANK1+7)& (0+127)
   475                           
   476                           ; Clear objects allocated to BANK0
   477     07F4  1283               	bcf	3,5	;RP0=0, select bank0
   478     07F5  1303               	bcf	3,6	;RP1=0, select bank0
   479     07F6  01E9               	clrf	__pbssBANK0& (0+127)
   480     07F7  01EA               	clrf	(__pbssBANK0+1)& (0+127)
   481     07F8  01EB               	clrf	(__pbssBANK0+2)& (0+127)
   482     07F9  01EC               	clrf	(__pbssBANK0+3)& (0+127)
   483     07FA  01ED               	clrf	(__pbssBANK0+4)& (0+127)
   484     07FB  01EE               	clrf	(__pbssBANK0+5)& (0+127)
   485     07FC                     end_of_initialization:	
   486                           ;End of C runtime variable initialization code
   487                           
   488     07FC                     __end_of__initialization:
   489     07FC  0183               	clrf	3
   490     07FD  120A  118A  284C   	ljmp	_main	;jump to C main() function
   491                           
   492                           	psect	bssBANK0
   493     0069                     __pbssBANK0:
   494     0069                     _brkp:
   495     0069                     	ds	2
   496     006B                     malloc@cur:
   497     006B                     	ds	2
   498     006D                     ___freelist:
   499     006D                     	ds	2
   500                           
   501                           	psect	bssBANK1
   502     00A9                     __pbssBANK1:
   503     00A9                     malloc@lock:
   504     00A9                     	ds	4
   505     00AD                     malloc@end:
   506     00AD                     	ds	2
   507     00AF                     _errno:
   508     00AF                     	ds	2
   509                           
   510                           	psect	dataBANK1
   511     00B1                     __pdataBANK1:
   512     00B1                     main@F932:
   513     00B1                     	ds	3
   514                           
   515                           	psect	cstackBANK1
   516     00A0                     __pcstackBANK1:
   517     00A0                     main@square_1:
   518                           
   519                           ; 3 bytes @ 0x0
   520     00A0                     	ds	3
   521     00A3                     main@countElemntArray:
   522                           
   523                           ; 2 bytes @ 0x3
   524     00A3                     	ds	2
   525     00A5                     main@shapePosition:
   526                           
   527                           ; 4 bytes @ 0x5
   528     00A5                     	ds	4
   529                           
   530                           	psect	cstackCOMMON
   531     0071                     __pcstackCOMMON:
   532     0071                     ?_SpiInit:
   533     0071                     ?_MatrixInit:	
   534                           ; 1 bytes @ 0x0
   535                           
   536     0071                     ?_PortBInit:	
   537                           ; 1 bytes @ 0x0
   538                           
   539     0071                     ?_SetPosition:	
   540                           ; 1 bytes @ 0x0
   541                           
   542     0071                     ?_CopyArray:	
   543                           ; 1 bytes @ 0x0
   544                           
   545     0071                     ?_free:	
   546                           ; 1 bytes @ 0x0
   547                           
   548     0071                     ?_Reverse:	
   549                           ; 1 bytes @ 0x0
   550                           
   551     0071                     ?_main:	
   552                           ; 1 bytes @ 0x0
   553                           
   554     0071                     ?_SpiSendByte:	
   555                           ; 1 bytes @ 0x0
   556                           
   557     0071                     ?_SpiClearMatrix:	
   558                           ; 1 bytes @ 0x0
   559                           
   560     0071                     ?_MovieDown:	
   561                           ; 1 bytes @ 0x0
   562                           
   563     0071                     ?_MovieUp:	
   564                           ; 1 bytes @ 0x0
   565                           
   566     0071                     ?_MovieLeft:	
   567                           ; 1 bytes @ 0x0
   568                           
   569     0071                     ?_MovieRigth:	
   570                           ; 1 bytes @ 0x0
   571                           
   572     0071                     ?___simple_search_fl:	
   573                           ; 1 bytes @ 0x0
   574                           
   575     0071                     ?___expand_heap:	
   576                           ; 2 bytes @ 0x0
   577                           
   578     0071                     ?___wmul:	
   579                           ; 2 bytes @ 0x0
   580                           
   581     0071                     SpiSendByte@data:	
   582                           ; 2 bytes @ 0x0
   583                           
   584     0071                     ___expand_heap@pn:	
   585                           ; 1 bytes @ 0x0
   586                           
   587     0071                     SetPosition@position:	
   588                           ; 1 bytes @ 0x0
   589                           
   590     0071                     MovieDown@_shapePosition:	
   591                           ; 2 bytes @ 0x0
   592                           
   593     0071                     MovieUp@_shapePosition:	
   594                           ; 2 bytes @ 0x0
   595                           
   596     0071                     MovieLeft@_shapePosition:	
   597                           ; 2 bytes @ 0x0
   598                           
   599     0071                     MovieRigth@_shapePosition:	
   600                           ; 2 bytes @ 0x0
   601                           
   602     0071                     Reverse@array_:	
   603                           ; 2 bytes @ 0x0
   604                           
   605     0071                     CopyArray@array_:	
   606                           ; 2 bytes @ 0x0
   607                           
   608     0071                     ___wmul@multiplier:	
   609                           ; 2 bytes @ 0x0
   610                           
   611     0071                     ___simple_search_fl@n:	
   612                           ; 2 bytes @ 0x0
   613                           
   614     0071                     free@ptr:	
   615                           ; 2 bytes @ 0x0
   616                           
   617     0071                     ??_SpiInit:	
   618                           ; 2 bytes @ 0x0
   619                           
   620     0071                     ??_PortBInit:	
   621                           ; 1 bytes @ 0x0
   622                           
   623     0071                     ??_SpiSendByte:	
   624                           ; 1 bytes @ 0x0
   625                           
   626                           
   627                           ; 1 bytes @ 0x0
   628     0071                     	ds	1
   629     0072                     ?_SendToSegment:
   630     0072                     SendToSegment@segment:	
   631                           ; 1 bytes @ 0x1
   632                           
   633     0072                     ___expand_heap@n:	
   634                           ; 2 bytes @ 0x1
   635                           
   636     0072                     ??___expand_heap:	
   637                           ; 2 bytes @ 0x1
   638                           
   639                           
   640                           ; 1 bytes @ 0x1
   641     0072                     	ds	1
   642     0073                     SetPosition@x:
   643     0073                     Reverse@countElemntArray:	
   644                           ; 2 bytes @ 0x2
   645                           
   646     0073                     CopyArray@res:	
   647                           ; 2 bytes @ 0x2
   648                           
   649     0073                     ___wmul@multiplicand:	
   650                           ; 2 bytes @ 0x2
   651                           
   652     0073                     ??_free:	
   653                           ; 2 bytes @ 0x2
   654                           
   655     0073                     ??___simple_search_fl:	
   656                           ; 1 bytes @ 0x2
   657                           
   658     0073                     ??_MovieDown:	
   659                           ; 1 bytes @ 0x2
   660                           
   661     0073                     ??_MovieUp:	
   662                           ; 1 bytes @ 0x2
   663                           
   664     0073                     ??_MovieLeft:	
   665                           ; 1 bytes @ 0x2
   666                           
   667     0073                     ??_MovieRigth:	
   668                           ; 1 bytes @ 0x2
   669                           
   670                           
   671                           ; 1 bytes @ 0x2
   672     0073                     	ds	1
   673     0074                     SendToSegment@data:
   674     0074                     ___expand_heap@new_brkp:	
   675                           ; 1 bytes @ 0x3
   676                           
   677                           
   678                           ; 2 bytes @ 0x3
   679     0074                     	ds	1
   680     0075                     ?_ShowShape:
   681     0075                     SetPosition@y:	
   682                           ; 1 bytes @ 0x4
   683                           
   684     0075                     ShowShape@coord:	
   685                           ; 2 bytes @ 0x4
   686                           
   687     0075                     CopyArray@countElemntArray:	
   688                           ; 2 bytes @ 0x4
   689                           
   690     0075                     ___wmul@product:	
   691                           ; 2 bytes @ 0x4
   692                           
   693     0075                     ??_Reverse:	
   694                           ; 2 bytes @ 0x4
   695                           
   696     0075                     ??_SendToSegment:	
   697                           ; 1 bytes @ 0x4
   698                           
   699     0075                     ??_SpiClearMatrix:	
   700                           ; 1 bytes @ 0x4
   701                           
   702     0075                     ??___wmul:	
   703                           ; 1 bytes @ 0x4
   704                           
   705                           
   706                           ; 1 bytes @ 0x4
   707     0075                     	ds	2
   708     0077                     ?_memset:
   709     0077                     SpiClearMatrix@i:	
   710                           ; 2 bytes @ 0x6
   711                           
   712     0077                     ShowShape@countElemntArray:	
   713                           ; 1 bytes @ 0x6
   714                           
   715     0077                     memset@dest:	
   716                           ; 2 bytes @ 0x6
   717                           
   718     0077                     ??_SetPosition:	
   719                           ; 2 bytes @ 0x6
   720                           
   721     0077                     ??_CopyArray:	
   722                           ; 1 bytes @ 0x6
   723                           
   724                           
   725                           ; 1 bytes @ 0x6
   726     0077                     	ds	1
   727     0078                     ??_MatrixInit:
   728                           
   729                           ; 1 bytes @ 0x7
   730     0078                     	ds	1
   731     0079                     ?_malloc:
   732     0079                     ShowShape@shapeArray:	
   733                           ; 2 bytes @ 0x8
   734                           
   735     0079                     free@cptr:	
   736                           ; 2 bytes @ 0x8
   737                           
   738     0079                     malloc@n:	
   739                           ; 2 bytes @ 0x8
   740                           
   741     0079                     memset@c:	
   742                           ; 2 bytes @ 0x8
   743                           
   744                           
   745                           ; 2 bytes @ 0x8
   746     0079                     	ds	2
   747     007B                     free@c:
   748     007B                     memset@n:	
   749                           ; 2 bytes @ 0xA
   750                           
   751     007B                     ??_MovieShape:	
   752                           ; 2 bytes @ 0xA
   753                           
   754     007B                     ??_malloc:	
   755                           ; 1 bytes @ 0xA
   756                           
   757                           
   758                           ; 1 bytes @ 0xA
   759     007B                     	ds	2
   760     007D                     MovieShape@dir:
   761     007D                     ??_calloc:	
   762                           ; 1 bytes @ 0xC
   763                           
   764     007D                     ??_memset:	
   765                           ; 1 bytes @ 0xC
   766                           
   767                           
   768                           ; 1 bytes @ 0xC
   769     007D                     	ds	1
   770     007E                     ??_RotateDirection:
   771     007E                     ??_main:	
   772                           ; 1 bytes @ 0xD
   773                           
   774                           
   775                           	psect	cstackBANK0
   776     0020                     __pcstackBANK0:	
   777                           ; 1 bytes @ 0xD
   778                           
   779     0020                     Reverse@t:
   780     0020                     CopyArray@y:	
   781                           ; 1 bytes @ 0x0
   782                           
   783     0020                     ___simple_search_fl@remaining_size:	
   784                           ; 2 bytes @ 0x0
   785                           
   786     0020                     memset@p:	
   787                           ; 2 bytes @ 0x0
   788                           
   789     0020                     ??_ShowShape:	
   790                           ; 2 bytes @ 0x0
   791                           
   792                           
   793                           ; 1 bytes @ 0x0
   794     0020                     	ds	1
   795     0021                     Reverse@i:
   796                           
   797                           ; 2 bytes @ 0x1
   798     0021                     	ds	1
   799     0022                     ___simple_search_fl@best_last:
   800                           
   801                           ; 2 bytes @ 0x2
   802     0022                     	ds	1
   803     0023                     Reverse@j:
   804                           
   805                           ; 2 bytes @ 0x3
   806     0023                     	ds	1
   807     0024                     ___simple_search_fl@split:
   808                           
   809                           ; 2 bytes @ 0x4
   810     0024                     	ds	2
   811     0026                     ShowShape@_pos:
   812     0026                     ___simple_search_fl@last:	
   813                           ; 2 bytes @ 0x6
   814                           
   815                           
   816                           ; 2 bytes @ 0x6
   817     0026                     	ds	2
   818     0028                     ShowShape@pos:
   819     0028                     ___simple_search_fl@next:	
   820                           ; 2 bytes @ 0x8
   821                           
   822                           
   823                           ; 2 bytes @ 0x8
   824     0028                     	ds	2
   825     002A                     ?_MovieShape:
   826     002A                     MovieShape@_shapePosition:	
   827                           ; 1 bytes @ 0xA
   828                           
   829     002A                     ___simple_search_fl@c:	
   830                           ; 2 bytes @ 0xA
   831                           
   832                           
   833                           ; 2 bytes @ 0xA
   834     002A                     	ds	2
   835     002C                     MovieShape@shapeArray:
   836     002C                     ___simple_search_fl@best:	
   837                           ; 2 bytes @ 0xC
   838                           
   839                           
   840                           ; 2 bytes @ 0xC
   841     002C                     	ds	2
   842     002E                     MovieShape@countElemntArray:
   843     002E                     malloc@m:	
   844                           ; 2 bytes @ 0xE
   845                           
   846                           
   847                           ; 2 bytes @ 0xE
   848     002E                     	ds	2
   849     0030                     malloc@sz:
   850                           
   851                           ; 2 bytes @ 0x10
   852     0030                     	ds	2
   853     0032                     malloc@size:
   854                           
   855                           ; 2 bytes @ 0x12
   856     0032                     	ds	2
   857     0034                     malloc@p:
   858                           
   859                           ; 2 bytes @ 0x14
   860     0034                     	ds	2
   861     0036                     malloc@new:
   862                           
   863                           ; 2 bytes @ 0x16
   864     0036                     	ds	2
   865     0038                     ?_calloc:
   866     0038                     calloc@nmemb:	
   867                           ; 2 bytes @ 0x18
   868                           
   869                           
   870                           ; 2 bytes @ 0x18
   871     0038                     	ds	2
   872     003A                     calloc@size:
   873                           
   874                           ; 2 bytes @ 0x1A
   875     003A                     	ds	2
   876     003C                     calloc@new_ptr:
   877                           
   878                           ; 2 bytes @ 0x1C
   879     003C                     	ds	2
   880     003E                     ?_Rotate:
   881     003E                     Rotate@array_:	
   882                           ; 1 bytes @ 0x1E
   883                           
   884                           
   885                           ; 2 bytes @ 0x1E
   886     003E                     	ds	2
   887     0040                     Rotate@countElemntArray:
   888                           
   889                           ; 2 bytes @ 0x20
   890     0040                     	ds	2
   891     0042                     ??_Rotate:
   892                           
   893                           ; 1 bytes @ 0x22
   894     0042                     	ds	9
   895     004B                     Rotate@x:
   896                           
   897                           ; 2 bytes @ 0x2B
   898     004B                     	ds	2
   899     004D                     Rotate@i:
   900                           
   901                           ; 2 bytes @ 0x2D
   902     004D                     	ds	2
   903     004F                     Rotate@res:
   904                           
   905                           ; 2 bytes @ 0x2F
   906     004F                     	ds	2
   907     0051                     Rotate@_i:
   908                           
   909                           ; 2 bytes @ 0x31
   910     0051                     	ds	2
   911     0053                     ?_RotateDirection:
   912     0053                     RotateDirection@step:	
   913                           ; 1 bytes @ 0x33
   914                           
   915                           
   916                           ; 2 bytes @ 0x33
   917     0053                     	ds	2
   918     0055                     RotateDirection@array_:
   919                           
   920                           ; 2 bytes @ 0x35
   921     0055                     	ds	2
   922     0057                     RotateDirection@_countElemntArray:
   923                           
   924                           ; 2 bytes @ 0x37
   925     0057                     	ds	2
   926     0059                     RotateDirection@i:
   927                           
   928                           ; 2 bytes @ 0x39
   929     0059                     	ds	2
   930     005B                     ?_ChangeOfCoordinates:
   931     005B                     ChangeOfCoordinates@_shapePosition:	
   932                           ; 1 bytes @ 0x3B
   933                           
   934                           
   935                           ; 2 bytes @ 0x3B
   936     005B                     	ds	2
   937     005D                     ChangeOfCoordinates@_figure:
   938                           
   939                           ; 1 bytes @ 0x3D
   940     005D                     	ds	1
   941     005E                     ChangeOfCoordinates@_countElemntArray:
   942                           
   943                           ; 2 bytes @ 0x3E
   944     005E                     	ds	2
   945     0060                     ??_ChangeOfCoordinates:
   946                           
   947                           ; 1 bytes @ 0x40
   948     0060                     	ds	3
   949     0063                     ChangeOfCoordinates@i:
   950                           
   951                           ; 2 bytes @ 0x43
   952     0063                     	ds	2
   953     0065                     ChangeOfCoordinates@step:
   954                           
   955                           ; 2 bytes @ 0x45
   956     0065                     	ds	2
   957     0067                     ChangeOfCoordinates@rotateArray:
   958                           
   959                           ; 2 bytes @ 0x47
   960     0067                     	ds	2
   961                           
   962                           	psect	maintext
   963     004C                     __pmaintext:	
   964 ;;
   965 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   966 ;;
   967 ;; *************** function _main *****************
   968 ;; Defined at:
   969 ;;		line 22 in file "main.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;		None
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  shapePositio    4    5[BANK1 ] struct .
   974 ;;  square_1        3    0[BANK1 ] unsigned char [3]
   975 ;;  countElemntA    2    3[BANK1 ] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : B00/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   985 ;;      Params:         0       0       0       0       0
   986 ;;      Locals:         0       0       9       0       0
   987 ;;      Temps:          0       0       0       0       0
   988 ;;      Totals:         0       0       9       0       0
   989 ;;Total ram usage:        9 bytes
   990 ;; Hardware stack levels required when called: 6
   991 ;; This function calls:
   992 ;;		_ChangeOfCoordinates
   993 ;;		_MatrixInit
   994 ;;		_PortBInit
   995 ;;		_SetPosition
   996 ;;		_SpiInit
   997 ;; This function is called by:
   998 ;;		Startup code after reset
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002     004C                     _main:	
  1003                           ;psect for function _main
  1004                           
  1005     004C                     l1689:	
  1006                           ;incstack = 0
  1007                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1008                           
  1009                           
  1010                           ;main.c: 23:     SpiInit();
  1011     004C  120A  158A  26F6  120A  118A  	fcall	_SpiInit
  1012                           
  1013                           ;main.c: 24:     MatrixInit();
  1014     0051  120A  158A  27C0  120A  118A  	fcall	_MatrixInit
  1015     0056                     l1691:
  1016                           
  1017                           ;main.c: 25:     PortBInit();
  1018     0056  120A  158A  26C8  120A  118A  	fcall	_PortBInit
  1019                           
  1020                           ;main.c: 27:     TCoord shapePosition;;main.c: 28:     char square_1[3] = { 0x07, 0x05, 
      +                          0x02 };
  1021     005B  1683               	bsf	3,5	;RP0=1, select bank1
  1022     005C  1303               	bcf	3,6	;RP1=0, select bank1
  1023     005D  0831               	movf	main@F932^(0+128),w
  1024     005E  00A0               	movwf	main@square_1^(0+128)
  1025     005F  0832               	movf	(main@F932+1)^(0+128),w
  1026     0060  00A1               	movwf	(main@square_1+1)^(0+128)
  1027     0061  0833               	movf	(main@F932+2)^(0+128),w
  1028     0062  00A2               	movwf	(main@square_1+2)^(0+128)
  1029                           
  1030                           ;main.c: 29:     int countElemntArray = 3;
  1031     0063  3003               	movlw	3
  1032     0064  00A3               	movwf	main@countElemntArray^(0+128)
  1033     0065  3000               	movlw	0
  1034     0066  00A4               	movwf	(main@countElemntArray^(0+128)+1)
  1035     0067                     l1693:
  1036                           
  1037                           ;main.c: 32:         SetPosition(&shapePosition, 0, 0);
  1038     0067  30A5               	movlw	low main@shapePosition
  1039     0068  00F1               	movwf	SetPosition@position
  1040     0069  3000               	movlw	high main@shapePosition
  1041     006A  00F2               	movwf	SetPosition@position+1
  1042     006B  3000               	movlw	0
  1043     006C  00F3               	movwf	SetPosition@x
  1044     006D  00F4               	movwf	SetPosition@x+1
  1045     006E  3000               	movlw	0
  1046     006F  00F5               	movwf	SetPosition@y
  1047     0070  00F6               	movwf	SetPosition@y+1
  1048     0071  120A  158A  275D  120A  118A  	fcall	_SetPosition
  1049     0076                     l1695:
  1050                           
  1051                           ;main.c: 33:         ChangeOfCoordinates(&shapePosition, square_1, countElemntArray);
  1052     0076  30A5               	movlw	low main@shapePosition
  1053     0077  1283               	bcf	3,5	;RP0=0, select bank0
  1054     0078  1303               	bcf	3,6	;RP1=0, select bank0
  1055     0079  00DB               	movwf	ChangeOfCoordinates@_shapePosition
  1056     007A  3000               	movlw	high main@shapePosition
  1057     007B  00DC               	movwf	ChangeOfCoordinates@_shapePosition+1
  1058     007C  30A0               	movlw	(low (main@square_1| 0))& (0+255)
  1059     007D  00DD               	movwf	ChangeOfCoordinates@_figure
  1060     007E  1683               	bsf	3,5	;RP0=1, select bank1
  1061     007F  1303               	bcf	3,6	;RP1=0, select bank1
  1062     0080  0824               	movf	(main@countElemntArray+1)^(0+128),w
  1063     0081  1283               	bcf	3,5	;RP0=0, select bank0
  1064     0082  1303               	bcf	3,6	;RP1=0, select bank0
  1065     0083  00DF               	movwf	ChangeOfCoordinates@_countElemntArray+1
  1066     0084  1683               	bsf	3,5	;RP0=1, select bank1
  1067     0085  1303               	bcf	3,6	;RP1=0, select bank1
  1068     0086  0823               	movf	main@countElemntArray^(0+128),w
  1069     0087  1283               	bcf	3,5	;RP0=0, select bank0
  1070     0088  1303               	bcf	3,6	;RP1=0, select bank0
  1071     0089  00DE               	movwf	ChangeOfCoordinates@_countElemntArray
  1072     008A  120A  118A  247C  120A  118A  	fcall	_ChangeOfCoordinates
  1073     008F  2867               	goto	l1693
  1074     0090  120A  118A  2800   	ljmp	start
  1075     0093                     __end_of_main:
  1076                           
  1077                           	psect	text1
  1078     0EF6                     __ptext1:	
  1079 ;; *************** function _SpiInit *****************
  1080 ;; Defined at:
  1081 ;;		line 9 in file "spi.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1095 ;;      Params:         0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0
  1098 ;;      Totals:         0       0       0       0       0
  1099 ;;Total ram usage:        0 bytes
  1100 ;; Hardware stack levels used: 1
  1101 ;; This function calls:
  1102 ;;		Nothing
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;; This function uses a non-reentrant model
  1106 ;;
  1107                           
  1108     0EF6                     _SpiInit:	
  1109                           ;psect for function _SpiInit
  1110                           
  1111     0EF6                     l1623:	
  1112                           ;incstack = 0
  1113                           ; Regs used in _SpiInit: [wreg+status,2+status,0]
  1114                           
  1115                           
  1116                           ;spi.c: 10:     TRISC |= 0x10;
  1117     0EF6  1683               	bsf	3,5	;RP0=1, select bank1
  1118     0EF7  1303               	bcf	3,6	;RP1=0, select bank1
  1119     0EF8  1607               	bsf	7,4	;volatile
  1120     0EF9                     l1625:
  1121                           
  1122                           ;spi.c: 11:     TRISC &= ~0x28;
  1123     0EF9  30D7               	movlw	215
  1124     0EFA  0587               	andwf	7,f	;volatile
  1125                           
  1126                           ;spi.c: 12:     TRISA &= ~0x20;
  1127     0EFB  30DF               	movlw	223
  1128     0EFC  0585               	andwf	5,f	;volatile
  1129                           
  1130                           ;spi.c: 13:     PORTA &= ~0x20;
  1131     0EFD  30DF               	movlw	223
  1132     0EFE  1283               	bcf	3,5	;RP0=0, select bank0
  1133     0EFF  1303               	bcf	3,6	;RP1=0, select bank0
  1134     0F00  0585               	andwf	5,f	;volatile
  1135     0F01                     l1627:
  1136                           
  1137                           ;spi.c: 14:     SSPCON = 0x30;
  1138     0F01  3030               	movlw	48
  1139     0F02  0094               	movwf	20	;volatile
  1140     0F03                     l1629:
  1141                           
  1142                           ;spi.c: 15:     SSPSTAT = 0x80;
  1143     0F03  3080               	movlw	128
  1144     0F04  1683               	bsf	3,5	;RP0=1, select bank1
  1145     0F05  1303               	bcf	3,6	;RP1=0, select bank1
  1146     0F06  0094               	movwf	20	;volatile
  1147     0F07                     l85:
  1148     0F07  0008               	return
  1149     0F08                     __end_of_SpiInit:
  1150                           
  1151                           	psect	text2
  1152     0F5D                     __ptext2:	
  1153 ;; *************** function _SetPosition *****************
  1154 ;; Defined at:
  1155 ;;		line 3 in file "shape.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  position        2    0[COMMON] PTR struct .
  1158 ;;		 -> main@shapePosition(4), 
  1159 ;;  x               2    2[COMMON] int 
  1160 ;;  y               2    4[COMMON] int 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;		None
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  1    wreg      void 
  1165 ;; Registers used:
  1166 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         6       0       0       0       0
  1173 ;;      Locals:         0       0       0       0       0
  1174 ;;      Temps:          2       0       0       0       0
  1175 ;;      Totals:         8       0       0       0       0
  1176 ;;Total ram usage:        8 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185     0F5D                     _SetPosition:	
  1186                           ;psect for function _SetPosition
  1187                           
  1188     0F5D                     l1647:	
  1189                           ;incstack = 0
  1190                           ; Regs used in _SetPosition: [wreg-fsr0h+status,2+status,0]
  1191                           
  1192                           
  1193                           ;shape.c: 4:     position->x = x;
  1194     0F5D  0871               	movf	SetPosition@position,w
  1195     0F5E  0084               	movwf	4
  1196     0F5F  1783               	bsf	3,7
  1197     0F60  1C72               	btfss	SetPosition@position+1,0
  1198     0F61  1383               	bcf	3,7
  1199     0F62  0873               	movf	SetPosition@x,w
  1200     0F63  0080               	movwf	0
  1201     0F64  0A84               	incf	4,f
  1202     0F65  0874               	movf	SetPosition@x+1,w
  1203     0F66  0080               	movwf	0
  1204     0F67                     l1649:
  1205                           
  1206                           ;shape.c: 5:     position->y = y;
  1207     0F67  0871               	movf	SetPosition@position,w
  1208     0F68  3E02               	addlw	2
  1209     0F69  00F7               	movwf	??_SetPosition
  1210     0F6A  0872               	movf	SetPosition@position+1,w
  1211     0F6B  1803               	skipnc
  1212     0F6C  3E01               	addlw	1
  1213     0F6D  3E00               	addlw	0
  1214     0F6E  00F8               	movwf	??_SetPosition+1
  1215     0F6F  0877               	movf	??_SetPosition,w
  1216     0F70  0084               	movwf	4
  1217     0F71  1783               	bsf	3,7
  1218     0F72  1C78               	btfss	??_SetPosition+1,0
  1219     0F73  1383               	bcf	3,7
  1220     0F74  0875               	movf	SetPosition@y,w
  1221     0F75  0080               	movwf	0
  1222     0F76  0A84               	incf	4,f
  1223     0F77  0876               	movf	SetPosition@y+1,w
  1224     0F78  0080               	movwf	0
  1225     0F79                     l123:
  1226     0F79  0008               	return
  1227     0F7A                     __end_of_SetPosition:
  1228                           
  1229                           	psect	text3
  1230     0EC8                     __ptext3:	
  1231 ;; *************** function _PortBInit *****************
  1232 ;; Defined at:
  1233 ;;		line 13 in file "portsinit.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;		None
  1238 ;; Return value:  Size  Location     Type
  1239 ;;                  1    wreg      void 
  1240 ;; Registers used:
  1241 ;;		status,2
  1242 ;; Tracked objects:
  1243 ;;		On entry : 0/0
  1244 ;;		On exit  : 0/0
  1245 ;;		Unchanged: 0/0
  1246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1247 ;;      Params:         0       0       0       0       0
  1248 ;;      Locals:         0       0       0       0       0
  1249 ;;      Temps:          0       0       0       0       0
  1250 ;;      Totals:         0       0       0       0       0
  1251 ;;Total ram usage:        0 bytes
  1252 ;; Hardware stack levels used: 1
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260     0EC8                     _PortBInit:	
  1261                           ;psect for function _PortBInit
  1262                           
  1263     0EC8                     l1645:	
  1264                           ;incstack = 0
  1265                           ; Regs used in _PortBInit: [status,2]
  1266                           
  1267                           
  1268                           ;portsinit.c: 14:     TRISB = 0x00;
  1269     0EC8  1683               	bsf	3,5	;RP0=1, select bank1
  1270     0EC9  1303               	bcf	3,6	;RP1=0, select bank1
  1271     0ECA  0186               	clrf	6	;volatile
  1272                           
  1273                           ;portsinit.c: 15:     PORTB = 0x00;
  1274     0ECB  1283               	bcf	3,5	;RP0=0, select bank0
  1275     0ECC  1303               	bcf	3,6	;RP1=0, select bank0
  1276     0ECD  0186               	clrf	6	;volatile
  1277     0ECE                     l68:
  1278     0ECE  0008               	return
  1279     0ECF                     __end_of_PortBInit:
  1280                           
  1281                           	psect	text4
  1282     0FC0                     __ptext4:	
  1283 ;; *************** function _MatrixInit *****************
  1284 ;; Defined at:
  1285 ;;		line 20 in file "matrix.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, status,2, status,0, pclath, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1299 ;;      Params:         0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0
  1301 ;;      Temps:          3       0       0       0       0
  1302 ;;      Totals:         3       0       0       0       0
  1303 ;;Total ram usage:        3 bytes
  1304 ;; Hardware stack levels used: 1
  1305 ;; Hardware stack levels required when called: 3
  1306 ;; This function calls:
  1307 ;;		_SendToSegment
  1308 ;;		_SpiClearMatrix
  1309 ;; This function is called by:
  1310 ;;		_main
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314     0FC0                     _MatrixInit:	
  1315                           ;psect for function _MatrixInit
  1316                           
  1317     0FC0                     l1631:	
  1318                           ;incstack = 0
  1319                           ; Regs used in _MatrixInit: [wreg+status,2+status,0+pclath+cstack]
  1320                           
  1321                           
  1322                           ;matrix.c: 21:     _delay((unsigned long)((100)*(16000000/4000.0)));
  1323     0FC0  3003               	movlw	3
  1324     0FC1  00FA               	movwf	??_MatrixInit+2
  1325     0FC2  3008               	movlw	8
  1326     0FC3  00F9               	movwf	??_MatrixInit+1
  1327     0FC4  3077               	movlw	119
  1328     0FC5  00F8               	movwf	??_MatrixInit
  1329     0FC6                     u1097:
  1330     0FC6  0BF8               	decfsz	??_MatrixInit,f
  1331     0FC7  2FC6               	goto	u1097
  1332     0FC8  0BF9               	decfsz	??_MatrixInit+1,f
  1333     0FC9  2FC6               	goto	u1097
  1334     0FCA  0BFA               	decfsz	??_MatrixInit+2,f
  1335     0FCB  2FC6               	goto	u1097
  1336     0FCC                     l1633:
  1337                           
  1338                           ;matrix.c: 22:     RA5=1;
  1339     0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  1340     0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  1341     0FCE  1685               	bsf	5,5	;volatile
  1342     0FCF                     l1635:
  1343                           
  1344                           ;matrix.c: 23:     SendToSegment(0x09, 0x00);
  1345     0FCF  3009               	movlw	9
  1346     0FD0  00F2               	movwf	SendToSegment@segment
  1347     0FD1  3000               	movlw	0
  1348     0FD2  00F3               	movwf	SendToSegment@segment+1
  1349     0FD3  01F4               	clrf	SendToSegment@data
  1350     0FD4  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1351     0FD9                     l1637:
  1352                           
  1353                           ;matrix.c: 24:     SendToSegment(0x0b, 0x07);
  1354     0FD9  300B               	movlw	11
  1355     0FDA  00F2               	movwf	SendToSegment@segment
  1356     0FDB  3000               	movlw	0
  1357     0FDC  00F3               	movwf	SendToSegment@segment+1
  1358     0FDD  3007               	movlw	7
  1359     0FDE  00F4               	movwf	SendToSegment@data
  1360     0FDF  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1361     0FE4                     l1639:
  1362                           
  1363                           ;matrix.c: 25:     SendToSegment(0x0A, 0x02);
  1364     0FE4  300A               	movlw	10
  1365     0FE5  00F2               	movwf	SendToSegment@segment
  1366     0FE6  3000               	movlw	0
  1367     0FE7  00F3               	movwf	SendToSegment@segment+1
  1368     0FE8  3002               	movlw	2
  1369     0FE9  00F4               	movwf	SendToSegment@data
  1370     0FEA  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1371     0FEF                     l1641:
  1372                           
  1373                           ;matrix.c: 26:     SendToSegment(0x0c, 0x01);
  1374     0FEF  300C               	movlw	12
  1375     0FF0  00F2               	movwf	SendToSegment@segment
  1376     0FF1  3000               	movlw	0
  1377     0FF2  00F3               	movwf	SendToSegment@segment+1
  1378     0FF3  01F4               	clrf	SendToSegment@data
  1379     0FF4  0AF4               	incf	SendToSegment@data,f
  1380     0FF5  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  1381     0FFA                     l1643:
  1382                           
  1383                           ;matrix.c: 27:     SpiClearMatrix();
  1384     0FFA  120A  158A  272E  120A  158A  	fcall	_SpiClearMatrix
  1385     0FFF                     l107:
  1386     0FFF  0008               	return
  1387     1000                     __end_of_MatrixInit:
  1388                           
  1389                           	psect	text5
  1390     047C                     __ptext5:	
  1391 ;; *************** function _ChangeOfCoordinates *****************
  1392 ;; Defined at:
  1393 ;;		line 39 in file "main.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;  _shapePositi    2   59[BANK0 ] PTR struct .
  1396 ;;		 -> main@shapePosition(4), 
  1397 ;;  _figure         1   61[BANK0 ] PTR unsigned char 
  1398 ;;		 -> main@square_1(3), 
  1399 ;;  _countElemnt    2   62[BANK0 ] int 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  i               2   67[BANK0 ] int 
  1402 ;;  rotateArray     2   71[BANK0 ] PTR unsigned char 
  1403 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1404 ;;  step            2   69[BANK0 ] int 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1414 ;;      Params:         0       5       0       0       0
  1415 ;;      Locals:         0       6       0       0       0
  1416 ;;      Temps:          0       3       0       0       0
  1417 ;;      Totals:         0      14       0       0       0
  1418 ;;Total ram usage:       14 bytes
  1419 ;; Hardware stack levels used: 1
  1420 ;; Hardware stack levels required when called: 5
  1421 ;; This function calls:
  1422 ;;		_CopyArray
  1423 ;;		_MovieShape
  1424 ;;		_RotateDirection
  1425 ;;		_calloc
  1426 ;;		_free
  1427 ;; This function is called by:
  1428 ;;		_main
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432     047C                     _ChangeOfCoordinates:	
  1433                           ;psect for function _ChangeOfCoordinates
  1434                           
  1435     047C                     l1651:	
  1436                           ;incstack = 0
  1437                           ; Regs used in _ChangeOfCoordinates: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  1438                           
  1439                           
  1440                           ;main.c: 40:     const unsigned long delay = 100;;main.c: 41:     char * rotateArray = c
      +                          alloc((size_t)_countElemntArray, sizeof(char));
  1441     047C  1283               	bcf	3,5	;RP0=0, select bank0
  1442     047D  1303               	bcf	3,6	;RP1=0, select bank0
  1443     047E  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1444     047F  00B9               	movwf	calloc@nmemb+1
  1445     0480  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1446     0481  00B8               	movwf	calloc@nmemb
  1447     0482  3001               	movlw	1
  1448     0483  00BA               	movwf	calloc@size
  1449     0484  3000               	movlw	0
  1450     0485  00BB               	movwf	calloc@size+1
  1451     0486  120A  118A  2093  120A  118A  	fcall	_calloc
  1452     048B  1283               	bcf	3,5	;RP0=0, select bank0
  1453     048C  1303               	bcf	3,6	;RP1=0, select bank0
  1454     048D  0838               	movf	?_calloc,w
  1455     048E  00E7               	movwf	ChangeOfCoordinates@rotateArray
  1456     048F  0839               	movf	?_calloc+1,w
  1457     0490  00E8               	movwf	ChangeOfCoordinates@rotateArray+1
  1458                           
  1459                           ;main.c: 42:     CopyArray(rotateArray, _figure, _countElemntArray);
  1460     0491  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1461     0492  00F1               	movwf	CopyArray@array_
  1462     0493  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1463     0494  00F2               	movwf	CopyArray@array_+1
  1464     0495  085D               	movf	ChangeOfCoordinates@_figure,w
  1465     0496  00F3               	movwf	CopyArray@res
  1466     0497  3000               	movlw	0
  1467     0498  00F4               	movwf	CopyArray@res+1
  1468     0499  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1469     049A  00F6               	movwf	CopyArray@countElemntArray+1
  1470     049B  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1471     049C  00F5               	movwf	CopyArray@countElemntArray
  1472     049D  120A  118A  2006  120A  118A  	fcall	_CopyArray
  1473     04A2                     l1653:
  1474                           
  1475                           ;main.c: 44:     int step = 0;
  1476     04A2  1283               	bcf	3,5	;RP0=0, select bank0
  1477     04A3  1303               	bcf	3,6	;RP1=0, select bank0
  1478     04A4  01E5               	clrf	ChangeOfCoordinates@step
  1479     04A5  01E6               	clrf	ChangeOfCoordinates@step+1
  1480     04A6                     l1655:
  1481                           
  1482                           ;main.c: 46:             for(int i = 0; i < 5; i++){
  1483     04A6  1283               	bcf	3,5	;RP0=0, select bank0
  1484     04A7  1303               	bcf	3,6	;RP1=0, select bank0
  1485     04A8  01E3               	clrf	ChangeOfCoordinates@i
  1486     04A9  01E4               	clrf	ChangeOfCoordinates@i+1
  1487     04AA  2CF7               	goto	l1671
  1488     04AB                     l1661:
  1489                           
  1490                           ;main.c: 49:                         MovieShape(right, _shapePosition, rotateArray, _cou
      +                          ntElemntArray);
  1491     04AB  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1492     04AC  00AA               	movwf	MovieShape@_shapePosition
  1493     04AD  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1494     04AE  00AB               	movwf	MovieShape@_shapePosition+1
  1495     04AF  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1496     04B0  00AC               	movwf	MovieShape@shapeArray
  1497     04B1  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1498     04B2  00AD               	movwf	MovieShape@shapeArray+1
  1499     04B3  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1500     04B4  00AF               	movwf	MovieShape@countElemntArray+1
  1501     04B5  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1502     04B6  00AE               	movwf	MovieShape@countElemntArray
  1503     04B7  3003               	movlw	3
  1504     04B8  120A  118A  2128  120A  118A  	fcall	_MovieShape
  1505                           
  1506                           ;main.c: 50:                         break;
  1507     04BD  2D0C               	goto	l1673
  1508     04BE                     l1663:
  1509                           
  1510                           ;main.c: 52:                         MovieShape(down, _shapePosition, rotateArray, _coun
      +                          tElemntArray);
  1511     04BE  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1512     04BF  00AA               	movwf	MovieShape@_shapePosition
  1513     04C0  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1514     04C1  00AB               	movwf	MovieShape@_shapePosition+1
  1515     04C2  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1516     04C3  00AC               	movwf	MovieShape@shapeArray
  1517     04C4  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1518     04C5  00AD               	movwf	MovieShape@shapeArray+1
  1519     04C6  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1520     04C7  00AF               	movwf	MovieShape@countElemntArray+1
  1521     04C8  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1522     04C9  00AE               	movwf	MovieShape@countElemntArray
  1523     04CA  3000               	movlw	0
  1524     04CB  120A  118A  2128  120A  118A  	fcall	_MovieShape
  1525                           
  1526                           ;main.c: 53:                         break;
  1527     04D0  2D0C               	goto	l1673
  1528     04D1                     l1665:
  1529                           
  1530                           ;main.c: 55:                         MovieShape(left, _shapePosition, rotateArray, _coun
      +                          tElemntArray);
  1531     04D1  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1532     04D2  00AA               	movwf	MovieShape@_shapePosition
  1533     04D3  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1534     04D4  00AB               	movwf	MovieShape@_shapePosition+1
  1535     04D5  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1536     04D6  00AC               	movwf	MovieShape@shapeArray
  1537     04D7  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1538     04D8  00AD               	movwf	MovieShape@shapeArray+1
  1539     04D9  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1540     04DA  00AF               	movwf	MovieShape@countElemntArray+1
  1541     04DB  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1542     04DC  00AE               	movwf	MovieShape@countElemntArray
  1543     04DD  3002               	movlw	2
  1544     04DE  120A  118A  2128  120A  118A  	fcall	_MovieShape
  1545                           
  1546                           ;main.c: 56:                         break;
  1547     04E3  2D0C               	goto	l1673
  1548     04E4                     l1667:
  1549                           
  1550                           ;main.c: 58:                         MovieShape(up, _shapePosition, rotateArray, _countE
      +                          lemntArray);
  1551     04E4  085B               	movf	ChangeOfCoordinates@_shapePosition,w
  1552     04E5  00AA               	movwf	MovieShape@_shapePosition
  1553     04E6  085C               	movf	ChangeOfCoordinates@_shapePosition+1,w
  1554     04E7  00AB               	movwf	MovieShape@_shapePosition+1
  1555     04E8  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1556     04E9  00AC               	movwf	MovieShape@shapeArray
  1557     04EA  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1558     04EB  00AD               	movwf	MovieShape@shapeArray+1
  1559     04EC  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1560     04ED  00AF               	movwf	MovieShape@countElemntArray+1
  1561     04EE  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1562     04EF  00AE               	movwf	MovieShape@countElemntArray
  1563     04F0  3001               	movlw	1
  1564     04F1  120A  118A  2128  120A  118A  	fcall	_MovieShape
  1565                           
  1566                           ;main.c: 59:                         break;
  1567     04F6  2D0C               	goto	l1673
  1568     04F7                     l1671:
  1569                           
  1570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1571                           ; Switch size 1, requested type "simple"
  1572                           ; Number of cases is 1, Range of values is 0 to 0
  1573                           ; switch strategies available:
  1574                           ; Name         Instructions Cycles
  1575                           ; simple_byte            4     3 (average)
  1576                           ; direct_byte           11     8 (fixed)
  1577                           ; jumptable            260     6 (fixed)
  1578                           ;	Chosen strategy is simple_byte
  1579     04F7  1283               	bcf	3,5	;RP0=0, select bank0
  1580     04F8  1303               	bcf	3,6	;RP1=0, select bank0
  1581     04F9  0866               	movf	ChangeOfCoordinates@step+1,w
  1582     04FA  3A00               	xorlw	0	; case 0
  1583     04FB  1903               	skipnz
  1584     04FC  2CFE               	goto	l1757
  1585     04FD  2D0C               	goto	l1673
  1586     04FE                     l1757:
  1587                           
  1588                           ; Switch size 1, requested type "simple"
  1589                           ; Number of cases is 4, Range of values is 0 to 3
  1590                           ; switch strategies available:
  1591                           ; Name         Instructions Cycles
  1592                           ; simple_byte           13     7 (average)
  1593                           ; direct_byte           20     8 (fixed)
  1594                           ; jumptable            260     6 (fixed)
  1595                           ;	Chosen strategy is simple_byte
  1596     04FE  0865               	movf	ChangeOfCoordinates@step,w
  1597     04FF  3A00               	xorlw	0	; case 0
  1598     0500  1903               	skipnz
  1599     0501  2CAB               	goto	l1661
  1600     0502  3A01               	xorlw	1	; case 1
  1601     0503  1903               	skipnz
  1602     0504  2CBE               	goto	l1663
  1603     0505  3A03               	xorlw	3	; case 2
  1604     0506  1903               	skipnz
  1605     0507  2CD1               	goto	l1665
  1606     0508  3A01               	xorlw	1	; case 3
  1607     0509  1903               	skipnz
  1608     050A  2CE4               	goto	l1667
  1609     050B  2D0C               	goto	l1673
  1610     050C                     l1673:
  1611                           
  1612                           ;main.c: 61:                 _delay((unsigned long)((delay)*(16000000/4000.0)));
  1613     050C  3003               	movlw	3
  1614     050D  1283               	bcf	3,5	;RP0=0, select bank0
  1615     050E  1303               	bcf	3,6	;RP1=0, select bank0
  1616     050F  00E2               	movwf	??_ChangeOfCoordinates+2
  1617     0510  3008               	movlw	8
  1618     0511  00E1               	movwf	??_ChangeOfCoordinates+1
  1619     0512  3076               	movlw	118
  1620     0513  00E0               	movwf	??_ChangeOfCoordinates
  1621     0514                     u1107:
  1622     0514  0BE0               	decfsz	??_ChangeOfCoordinates,f
  1623     0515  2D14               	goto	u1107
  1624     0516  0BE1               	decfsz	??_ChangeOfCoordinates+1,f
  1625     0517  2D14               	goto	u1107
  1626     0518  0BE2               	decfsz	??_ChangeOfCoordinates+2,f
  1627     0519  2D14               	goto	u1107
  1628     051A  0000               	nop
  1629                           
  1630                           ;main.c: 63:             }
  1631     051B  3001               	movlw	1
  1632     051C  1283               	bcf	3,5	;RP0=0, select bank0
  1633     051D  1303               	bcf	3,6	;RP1=0, select bank0
  1634     051E  07E3               	addwf	ChangeOfCoordinates@i,f
  1635     051F  1803               	skipnc
  1636     0520  0AE4               	incf	ChangeOfCoordinates@i+1,f
  1637     0521  3000               	movlw	0
  1638     0522  07E4               	addwf	ChangeOfCoordinates@i+1,f
  1639     0523                     l1675:
  1640     0523  0864               	movf	ChangeOfCoordinates@i+1,w
  1641     0524  3A80               	xorlw	128
  1642     0525  00FF               	movwf	btemp+1
  1643     0526  3080               	movlw	128
  1644     0527  027F               	subwf	btemp+1,w
  1645     0528  1D03               	skipz
  1646     0529  2D2C               	goto	u1075
  1647     052A  3005               	movlw	5
  1648     052B  0263               	subwf	ChangeOfCoordinates@i,w
  1649     052C                     u1075:
  1650     052C  1C03               	skipc
  1651     052D  2D2F               	goto	u1071
  1652     052E  2D30               	goto	u1070
  1653     052F                     u1071:
  1654     052F  2CF7               	goto	l1671
  1655     0530                     u1070:
  1656     0530                     l1677:
  1657                           
  1658                           ;main.c: 64:             RotateDirection(step, rotateArray, _countElemntArray);
  1659     0530  1283               	bcf	3,5	;RP0=0, select bank0
  1660     0531  1303               	bcf	3,6	;RP1=0, select bank0
  1661     0532  0866               	movf	ChangeOfCoordinates@step+1,w
  1662     0533  00D4               	movwf	RotateDirection@step+1
  1663     0534  0865               	movf	ChangeOfCoordinates@step,w
  1664     0535  00D3               	movwf	RotateDirection@step
  1665     0536  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1666     0537  00D5               	movwf	RotateDirection@array_
  1667     0538  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1668     0539  00D6               	movwf	RotateDirection@array_+1
  1669     053A  085F               	movf	ChangeOfCoordinates@_countElemntArray+1,w
  1670     053B  00D8               	movwf	RotateDirection@_countElemntArray+1
  1671     053C  085E               	movf	ChangeOfCoordinates@_countElemntArray,w
  1672     053D  00D7               	movwf	RotateDirection@_countElemntArray
  1673     053E  120A  118A  218C  120A  118A  	fcall	_RotateDirection
  1674     0543                     l1679:
  1675                           
  1676                           ;main.c: 65:             step++;
  1677     0543  3001               	movlw	1
  1678     0544  1283               	bcf	3,5	;RP0=0, select bank0
  1679     0545  1303               	bcf	3,6	;RP1=0, select bank0
  1680     0546  07E5               	addwf	ChangeOfCoordinates@step,f
  1681     0547  1803               	skipnc
  1682     0548  0AE6               	incf	ChangeOfCoordinates@step+1,f
  1683     0549  3000               	movlw	0
  1684     054A  07E6               	addwf	ChangeOfCoordinates@step+1,f
  1685     054B                     l1681:
  1686                           
  1687                           ;main.c: 66:         } while(step < 4);
  1688     054B  0866               	movf	ChangeOfCoordinates@step+1,w
  1689     054C  3A80               	xorlw	128
  1690     054D  00FF               	movwf	btemp+1
  1691     054E  3080               	movlw	128
  1692     054F  027F               	subwf	btemp+1,w
  1693     0550  1D03               	skipz
  1694     0551  2D54               	goto	u1085
  1695     0552  3004               	movlw	4
  1696     0553  0265               	subwf	ChangeOfCoordinates@step,w
  1697     0554                     u1085:
  1698     0554  1C03               	skipc
  1699     0555  2D57               	goto	u1081
  1700     0556  2D58               	goto	u1080
  1701     0557                     u1081:
  1702     0557  2CA6               	goto	l1655
  1703     0558                     u1080:
  1704     0558                     l1683:
  1705                           
  1706                           ;main.c: 68:         free(rotateArray);
  1707     0558  1283               	bcf	3,5	;RP0=0, select bank0
  1708     0559  1303               	bcf	3,6	;RP1=0, select bank0
  1709     055A  0867               	movf	ChangeOfCoordinates@rotateArray,w
  1710     055B  00F1               	movwf	free@ptr
  1711     055C  0868               	movf	ChangeOfCoordinates@rotateArray+1,w
  1712     055D  00F2               	movwf	free@ptr+1
  1713     055E  120A  118A  2564  120A  118A  	fcall	_free
  1714     0563                     l51:
  1715     0563  0008               	return
  1716     0564                     __end_of_ChangeOfCoordinates:
  1717                           
  1718                           	psect	text6
  1719     018C                     __ptext6:	
  1720 ;; *************** function _RotateDirection *****************
  1721 ;; Defined at:
  1722 ;;		line 71 in file "main.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  step            2   51[BANK0 ] int 
  1725 ;;  array_          2   53[BANK0 ] PTR unsigned char 
  1726 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1727 ;;  _countElemnt    2   55[BANK0 ] int 
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;  i               2   57[BANK0 ] int 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1739 ;;      Params:         0       6       0       0       0
  1740 ;;      Locals:         0       2       0       0       0
  1741 ;;      Temps:          0       0       0       0       0
  1742 ;;      Totals:         0       8       0       0       0
  1743 ;;Total ram usage:        8 bytes
  1744 ;; Hardware stack levels used: 1
  1745 ;; Hardware stack levels required when called: 4
  1746 ;; This function calls:
  1747 ;;		_Reverse
  1748 ;;		_Rotate
  1749 ;; This function is called by:
  1750 ;;		_ChangeOfCoordinates
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754     018C                     _RotateDirection:	
  1755                           ;psect for function _RotateDirection
  1756                           
  1757     018C                     l1593:	
  1758                           ;incstack = 0
  1759                           ; Regs used in _RotateDirection: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1760                           
  1761                           
  1762                           ;main.c: 72:     switch (step){
  1763     018C  29EE               	goto	l1617
  1764     018D                     l1595:
  1765                           
  1766                           ;main.c: 74:             Reverse(array_, _countElemntArray);
  1767     018D  0855               	movf	RotateDirection@array_,w
  1768     018E  00F1               	movwf	Reverse@array_
  1769     018F  0856               	movf	RotateDirection@array_+1,w
  1770     0190  00F2               	movwf	Reverse@array_+1
  1771     0191  0858               	movf	RotateDirection@_countElemntArray+1,w
  1772     0192  00F4               	movwf	Reverse@countElemntArray+1
  1773     0193  0857               	movf	RotateDirection@_countElemntArray,w
  1774     0194  00F3               	movwf	Reverse@countElemntArray
  1775     0195  120A  118A  2201  120A  118A  	fcall	_Reverse
  1776     019A                     l1597:
  1777                           
  1778                           ;main.c: 75:             Rotate(array_, _countElemntArray);
  1779     019A  1283               	bcf	3,5	;RP0=0, select bank0
  1780     019B  1303               	bcf	3,6	;RP1=0, select bank0
  1781     019C  0855               	movf	RotateDirection@array_,w
  1782     019D  00BE               	movwf	Rotate@array_
  1783     019E  0856               	movf	RotateDirection@array_+1,w
  1784     019F  00BF               	movwf	Rotate@array_+1
  1785     01A0  0858               	movf	RotateDirection@_countElemntArray+1,w
  1786     01A1  00C1               	movwf	Rotate@countElemntArray+1
  1787     01A2  0857               	movf	RotateDirection@_countElemntArray,w
  1788     01A3  00C0               	movwf	Rotate@countElemntArray
  1789     01A4  120A  118A  230D  120A  118A  	fcall	_Rotate
  1790                           
  1791                           ;main.c: 76:             break;
  1792     01A9  2A00               	goto	l61
  1793     01AA                     l1599:
  1794                           
  1795                           ;main.c: 78:             Rotate(array_, _countElemntArray);
  1796     01AA  0855               	movf	RotateDirection@array_,w
  1797     01AB  00BE               	movwf	Rotate@array_
  1798     01AC  0856               	movf	RotateDirection@array_+1,w
  1799     01AD  00BF               	movwf	Rotate@array_+1
  1800     01AE  0858               	movf	RotateDirection@_countElemntArray+1,w
  1801     01AF  00C1               	movwf	Rotate@countElemntArray+1
  1802     01B0  0857               	movf	RotateDirection@_countElemntArray,w
  1803     01B1  00C0               	movwf	Rotate@countElemntArray
  1804     01B2  120A  118A  230D  120A  118A  	fcall	_Rotate
  1805     01B7                     l1601:
  1806                           
  1807                           ;main.c: 79:             Reverse(array_, _countElemntArray);
  1808     01B7  1283               	bcf	3,5	;RP0=0, select bank0
  1809     01B8  1303               	bcf	3,6	;RP1=0, select bank0
  1810     01B9  0855               	movf	RotateDirection@array_,w
  1811     01BA  00F1               	movwf	Reverse@array_
  1812     01BB  0856               	movf	RotateDirection@array_+1,w
  1813     01BC  00F2               	movwf	Reverse@array_+1
  1814     01BD  0858               	movf	RotateDirection@_countElemntArray+1,w
  1815     01BE  00F4               	movwf	Reverse@countElemntArray+1
  1816     01BF  0857               	movf	RotateDirection@_countElemntArray,w
  1817     01C0  00F3               	movwf	Reverse@countElemntArray
  1818     01C1  120A  118A  2201  120A  118A  	fcall	_Reverse
  1819                           
  1820                           ;main.c: 80:             break;
  1821     01C6  2A00               	goto	l61
  1822     01C7                     l1603:
  1823                           
  1824                           ;main.c: 82:             for(int i = 0; i < 3; i++){
  1825     01C7  01D9               	clrf	RotateDirection@i
  1826     01C8  01DA               	clrf	RotateDirection@i+1
  1827     01C9                     l1609:
  1828                           
  1829                           ;main.c: 83:                 Rotate(array_, _countElemntArray);
  1830     01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1831     01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1832     01CB  0855               	movf	RotateDirection@array_,w
  1833     01CC  00BE               	movwf	Rotate@array_
  1834     01CD  0856               	movf	RotateDirection@array_+1,w
  1835     01CE  00BF               	movwf	Rotate@array_+1
  1836     01CF  0858               	movf	RotateDirection@_countElemntArray+1,w
  1837     01D0  00C1               	movwf	Rotate@countElemntArray+1
  1838     01D1  0857               	movf	RotateDirection@_countElemntArray,w
  1839     01D2  00C0               	movwf	Rotate@countElemntArray
  1840     01D3  120A  118A  230D  120A  118A  	fcall	_Rotate
  1841     01D8                     l1611:
  1842                           
  1843                           ;main.c: 84:             }
  1844     01D8  3001               	movlw	1
  1845     01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1846     01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1847     01DB  07D9               	addwf	RotateDirection@i,f
  1848     01DC  1803               	skipnc
  1849     01DD  0ADA               	incf	RotateDirection@i+1,f
  1850     01DE  3000               	movlw	0
  1851     01DF  07DA               	addwf	RotateDirection@i+1,f
  1852     01E0                     l1613:
  1853     01E0  085A               	movf	RotateDirection@i+1,w
  1854     01E1  3A80               	xorlw	128
  1855     01E2  00FF               	movwf	btemp+1
  1856     01E3  3080               	movlw	128
  1857     01E4  027F               	subwf	btemp+1,w
  1858     01E5  1D03               	skipz
  1859     01E6  29E9               	goto	u1065
  1860     01E7  3003               	movlw	3
  1861     01E8  0259               	subwf	RotateDirection@i,w
  1862     01E9                     u1065:
  1863     01E9  1C03               	skipc
  1864     01EA  29EC               	goto	u1061
  1865     01EB  29ED               	goto	u1060
  1866     01EC                     u1061:
  1867     01EC  29C9               	goto	l1609
  1868     01ED                     u1060:
  1869     01ED  2A00               	goto	l61
  1870     01EE                     l1617:
  1871                           
  1872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1873                           ; Switch size 1, requested type "simple"
  1874                           ; Number of cases is 1, Range of values is 0 to 0
  1875                           ; switch strategies available:
  1876                           ; Name         Instructions Cycles
  1877                           ; simple_byte            4     3 (average)
  1878                           ; direct_byte           11     8 (fixed)
  1879                           ; jumptable            260     6 (fixed)
  1880                           ;	Chosen strategy is simple_byte
  1881     01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1882     01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1883     01F0  0854               	movf	RotateDirection@step+1,w
  1884     01F1  3A00               	xorlw	0	; case 0
  1885     01F2  1903               	skipnz
  1886     01F3  29F5               	goto	l1759
  1887     01F4  2A00               	goto	l61
  1888     01F5                     l1759:
  1889                           
  1890                           ; Switch size 1, requested type "simple"
  1891                           ; Number of cases is 3, Range of values is 0 to 2
  1892                           ; switch strategies available:
  1893                           ; Name         Instructions Cycles
  1894                           ; simple_byte           10     6 (average)
  1895                           ; direct_byte           17     8 (fixed)
  1896                           ; jumptable            260     6 (fixed)
  1897                           ;	Chosen strategy is simple_byte
  1898     01F5  0853               	movf	RotateDirection@step,w
  1899     01F6  3A00               	xorlw	0	; case 0
  1900     01F7  1903               	skipnz
  1901     01F8  298D               	goto	l1595
  1902     01F9  3A01               	xorlw	1	; case 1
  1903     01FA  1903               	skipnz
  1904     01FB  29AA               	goto	l1599
  1905     01FC  3A03               	xorlw	3	; case 2
  1906     01FD  1903               	skipnz
  1907     01FE  29C7               	goto	l1603
  1908     01FF  2A00               	goto	l61
  1909     0200                     l61:
  1910     0200  0008               	return
  1911     0201                     __end_of_RotateDirection:
  1912                           
  1913                           	psect	text7
  1914     030D                     __ptext7:	
  1915 ;; *************** function _Rotate *****************
  1916 ;; Defined at:
  1917 ;;		line 55 in file "shape.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  array_          2   30[BANK0 ] PTR unsigned char 
  1920 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1921 ;;  countElemntA    2   32[BANK0 ] int 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  i               2   45[BANK0 ] int 
  1924 ;;  x               2   43[BANK0 ] int 
  1925 ;;  _i              2   49[BANK0 ] int 
  1926 ;;  res             2   47[BANK0 ] PTR unsigned char 
  1927 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1937 ;;      Params:         0       4       0       0       0
  1938 ;;      Locals:         0       8       0       0       0
  1939 ;;      Temps:          0       9       0       0       0
  1940 ;;      Totals:         0      21       0       0       0
  1941 ;;Total ram usage:       21 bytes
  1942 ;; Hardware stack levels used: 1
  1943 ;; Hardware stack levels required when called: 3
  1944 ;; This function calls:
  1945 ;;		_CopyArray
  1946 ;;		_calloc
  1947 ;;		_free
  1948 ;; This function is called by:
  1949 ;;		_RotateDirection
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953     030D                     _Rotate:	
  1954                           ;psect for function _Rotate
  1955                           
  1956     030D                     l1511:	
  1957                           ;incstack = 0
  1958                           ; Regs used in _Rotate: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1959                           
  1960                           
  1961                           ;shape.c: 57:     char * res = calloc((size_t)countElemntArray, sizeof(char));
  1962     030D  1283               	bcf	3,5	;RP0=0, select bank0
  1963     030E  1303               	bcf	3,6	;RP1=0, select bank0
  1964     030F  0841               	movf	Rotate@countElemntArray+1,w
  1965     0310  00B9               	movwf	calloc@nmemb+1
  1966     0311  0840               	movf	Rotate@countElemntArray,w
  1967     0312  00B8               	movwf	calloc@nmemb
  1968     0313  3001               	movlw	1
  1969     0314  00BA               	movwf	calloc@size
  1970     0315  3000               	movlw	0
  1971     0316  00BB               	movwf	calloc@size+1
  1972     0317  120A  118A  2093  120A  118A  	fcall	_calloc
  1973     031C  1283               	bcf	3,5	;RP0=0, select bank0
  1974     031D  1303               	bcf	3,6	;RP1=0, select bank0
  1975     031E  0838               	movf	?_calloc,w
  1976     031F  00CF               	movwf	Rotate@res
  1977     0320  0839               	movf	?_calloc+1,w
  1978     0321  00D0               	movwf	Rotate@res+1
  1979     0322                     l1513:
  1980                           
  1981                           ;shape.c: 59:     if (res){
  1982     0322  084F               	movf	Rotate@res,w
  1983     0323  0450               	iorwf	Rotate@res+1,w
  1984     0324  1903               	btfsc	3,2
  1985     0325  2B27               	goto	u951
  1986     0326  2B28               	goto	u950
  1987     0327                     u951:
  1988     0327  2BA6               	goto	l1543
  1989     0328                     u950:
  1990     0328                     l1515:
  1991                           
  1992                           ;shape.c: 60:         for(int _i = countElemntArray - 1; _i >= 0; _i--){
  1993     0328  0840               	movf	Rotate@countElemntArray,w
  1994     0329  3EFF               	addlw	255
  1995     032A  00D1               	movwf	Rotate@_i
  1996     032B  0841               	movf	Rotate@countElemntArray+1,w
  1997     032C  1803               	skipnc
  1998     032D  3E01               	addlw	1
  1999     032E  3EFF               	addlw	255
  2000     032F  00D2               	movwf	Rotate@_i+1
  2001     0330                     l1517:
  2002     0330  1FD2               	btfss	Rotate@_i+1,7
  2003     0331  2B33               	goto	u961
  2004     0332  2B34               	goto	u960
  2005     0333                     u961:
  2006     0333  2B35               	goto	l1521
  2007     0334                     u960:
  2008     0334  2B95               	goto	l1541
  2009     0335                     l1521:
  2010                           
  2011                           ;shape.c: 61:             for(int i = countElemntArray - 1, x = 0; i >= 0; i--, x++){
  2012     0335  0840               	movf	Rotate@countElemntArray,w
  2013     0336  3EFF               	addlw	255
  2014     0337  00CD               	movwf	Rotate@i
  2015     0338  0841               	movf	Rotate@countElemntArray+1,w
  2016     0339  1803               	skipnc
  2017     033A  3E01               	addlw	1
  2018     033B  3EFF               	addlw	255
  2019     033C  00CE               	movwf	Rotate@i+1
  2020     033D                     l1523:
  2021     033D  01CB               	clrf	Rotate@x
  2022     033E  01CC               	clrf	Rotate@x+1
  2023     033F                     l1525:
  2024     033F  1FCE               	btfss	Rotate@i+1,7
  2025     0340  2B42               	goto	u971
  2026     0341  2B43               	goto	u970
  2027     0342                     u971:
  2028     0342  2B44               	goto	l1529
  2029     0343                     u970:
  2030     0343  2B8E               	goto	l1537
  2031     0344                     l1529:
  2032                           
  2033                           ;shape.c: 62:                 res[_i] |= ((array_[x] >> _i ) & 1) << i;
  2034     0344  084B               	movf	Rotate@x,w
  2035     0345  073E               	addwf	Rotate@array_,w
  2036     0346  00C3               	movwf	??_Rotate+1
  2037     0347  083F               	movf	Rotate@array_+1,w
  2038     0348  00C2               	movwf	??_Rotate
  2039     0349  1803               	skipnc
  2040     034A  0AC2               	incf	??_Rotate,f
  2041     034B  1FCB               	btfss	Rotate@x,7
  2042     034C  2B4E               	goto	u980
  2043     034D  03C2               	decf	??_Rotate,f
  2044     034E                     u980:
  2045     034E  1283               	bcf	3,5	;RP0=0, select bank0
  2046     034F  1303               	bcf	3,6	;RP1=0, select bank0
  2047     0350  0842               	movf	??_Rotate,w
  2048     0351  00C4               	movwf	??_Rotate+2
  2049     0352  0843               	movf	??_Rotate+1,w
  2050     0353  0084               	movwf	4
  2051     0354  1783               	bsf	3,7
  2052     0355  1C44               	btfss	??_Rotate+2,0
  2053     0356  1383               	bcf	3,7
  2054     0357  0800               	movf	0,w
  2055     0358  00C5               	movwf	??_Rotate+3
  2056     0359  0A51               	incf	Rotate@_i,w
  2057     035A  2B5D               	goto	u994
  2058     035B                     u995:
  2059     035B  1003               	clrc
  2060     035C  0CC5               	rrf	??_Rotate+3,f
  2061     035D                     u994:
  2062     035D  3EFF               	addlw	-1
  2063     035E  1D03               	skipz
  2064     035F  2B5B               	goto	u995
  2065     0360  0845               	movf	??_Rotate+3,w
  2066     0361  3901               	andlw	1
  2067     0362  00C6               	movwf	??_Rotate+4
  2068     0363  0A4D               	incf	Rotate@i,w
  2069     0364  2B67               	goto	u1004
  2070     0365                     u1005:
  2071     0365  1003               	clrc
  2072     0366  0DC6               	rlf	??_Rotate+4,f
  2073     0367                     u1004:
  2074     0367  3EFF               	addlw	-1
  2075     0368  1D03               	skipz
  2076     0369  2B65               	goto	u1005
  2077     036A  0846               	movf	??_Rotate+4,w
  2078     036B  00C7               	movwf	??_Rotate+5
  2079     036C  0851               	movf	Rotate@_i,w
  2080     036D  074F               	addwf	Rotate@res,w
  2081     036E  00C9               	movwf	??_Rotate+7
  2082     036F  0850               	movf	Rotate@res+1,w
  2083     0370  00C8               	movwf	??_Rotate+6
  2084     0371  1803               	skipnc
  2085     0372  0AC8               	incf	??_Rotate+6,f
  2086     0373  1FD1               	btfss	Rotate@_i,7
  2087     0374  2B76               	goto	u1010
  2088     0375  03C8               	decf	??_Rotate+6,f
  2089     0376                     u1010:
  2090     0376  1283               	bcf	3,5	;RP0=0, select bank0
  2091     0377  1303               	bcf	3,6	;RP1=0, select bank0
  2092     0378  0848               	movf	??_Rotate+6,w
  2093     0379  00CA               	movwf	??_Rotate+8
  2094     037A  0849               	movf	??_Rotate+7,w
  2095     037B  0084               	movwf	4
  2096     037C  1783               	bsf	3,7
  2097     037D  1C4A               	btfss	??_Rotate+8,0
  2098     037E  1383               	bcf	3,7
  2099     037F  0847               	movf	??_Rotate+5,w
  2100     0380  0480               	iorwf	0,f
  2101     0381                     l1531:
  2102                           
  2103                           ;shape.c: 63:             }
  2104     0381  30FF               	movlw	255
  2105     0382  07CD               	addwf	Rotate@i,f
  2106     0383  1803               	skipnc
  2107     0384  0ACE               	incf	Rotate@i+1,f
  2108     0385  30FF               	movlw	255
  2109     0386  07CE               	addwf	Rotate@i+1,f
  2110     0387                     l1533:
  2111     0387  3001               	movlw	1
  2112     0388  07CB               	addwf	Rotate@x,f
  2113     0389  1803               	skipnc
  2114     038A  0ACC               	incf	Rotate@x+1,f
  2115     038B  3000               	movlw	0
  2116     038C  07CC               	addwf	Rotate@x+1,f
  2117     038D  2B3F               	goto	l1525
  2118     038E                     l1537:
  2119                           
  2120                           ;shape.c: 64:         }
  2121     038E  30FF               	movlw	255
  2122     038F  07D1               	addwf	Rotate@_i,f
  2123     0390  1803               	skipnc
  2124     0391  0AD2               	incf	Rotate@_i+1,f
  2125     0392  30FF               	movlw	255
  2126     0393  07D2               	addwf	Rotate@_i+1,f
  2127     0394  2B30               	goto	l1517
  2128     0395                     l1541:
  2129                           
  2130                           ;shape.c: 65:         CopyArray(array_, res, countElemntArray);
  2131     0395  083E               	movf	Rotate@array_,w
  2132     0396  00F1               	movwf	CopyArray@array_
  2133     0397  083F               	movf	Rotate@array_+1,w
  2134     0398  00F2               	movwf	CopyArray@array_+1
  2135     0399  084F               	movf	Rotate@res,w
  2136     039A  00F3               	movwf	CopyArray@res
  2137     039B  0850               	movf	Rotate@res+1,w
  2138     039C  00F4               	movwf	CopyArray@res+1
  2139     039D  0841               	movf	Rotate@countElemntArray+1,w
  2140     039E  00F6               	movwf	CopyArray@countElemntArray+1
  2141     039F  0840               	movf	Rotate@countElemntArray,w
  2142     03A0  00F5               	movwf	CopyArray@countElemntArray
  2143     03A1  120A  118A  2006  120A  118A  	fcall	_CopyArray
  2144     03A6                     l1543:
  2145                           
  2146                           ;shape.c: 67:     free(res);
  2147     03A6  1283               	bcf	3,5	;RP0=0, select bank0
  2148     03A7  1303               	bcf	3,6	;RP1=0, select bank0
  2149     03A8  084F               	movf	Rotate@res,w
  2150     03A9  00F1               	movwf	free@ptr
  2151     03AA  0850               	movf	Rotate@res+1,w
  2152     03AB  00F2               	movwf	free@ptr+1
  2153     03AC  120A  118A  2564  120A  118A  	fcall	_free
  2154     03B1                     l159:
  2155     03B1  0008               	return
  2156     03B2                     __end_of_Rotate:
  2157                           
  2158                           	psect	text8
  2159     0564                     __ptext8:	
  2160 ;; *************** function _free *****************
  2161 ;; Defined at:
  2162 ;;		line 67 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  ptr             2    0[COMMON] PTR void 
  2165 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  c               2   10[COMMON] PTR struct chunk
  2168 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2169 ;;  cptr            2    8[COMMON] PTR unsigned char 
  2170 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2180 ;;      Params:         2       0       0       0       0
  2181 ;;      Locals:         4       0       0       0       0
  2182 ;;      Temps:          6       0       0       0       0
  2183 ;;      Totals:        12       0       0       0       0
  2184 ;;Total ram usage:       12 bytes
  2185 ;; Hardware stack levels used: 1
  2186 ;; This function calls:
  2187 ;;		Nothing
  2188 ;; This function is called by:
  2189 ;;		_ChangeOfCoordinates
  2190 ;;		_Rotate
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194     0564                     _free:	
  2195                           ;psect for function _free
  2196                           
  2197     0564                     l1463:	
  2198                           ;incstack = 0
  2199                           ; Regs used in _free: [wreg-fsr0h+status,2+status,0+btemp+1]
  2200                           
  2201     0564  0871               	movf	free@ptr,w
  2202     0565  00F9               	movwf	free@cptr
  2203     0566  0872               	movf	free@ptr+1,w
  2204     0567  00FA               	movwf	free@cptr+1
  2205     0568  0871               	movf	free@ptr,w
  2206     0569  0472               	iorwf	free@ptr+1,w
  2207     056A  1D03               	btfss	3,2
  2208     056B  2D6D               	goto	u861
  2209     056C  2D6E               	goto	u860
  2210     056D                     u861:
  2211     056D  2D6F               	goto	l1467
  2212     056E                     u860:
  2213     056E  2E51               	goto	l744
  2214     056F                     l1467:
  2215     056F  30FE               	movlw	254
  2216     0570  00F3               	movwf	??_free
  2217     0571  0873               	movf	??_free,w
  2218     0572  0779               	addwf	free@cptr,w
  2219     0573  00FB               	movwf	free@c
  2220     0574  087A               	movf	free@cptr+1,w
  2221     0575  00F4               	movwf	??_free+1
  2222     0576  1803               	skipnc
  2223     0577  0AF4               	incf	??_free+1,f
  2224     0578  1BF3               	btfsc	??_free,7
  2225     0579  03F4               	decf	??_free+1,f
  2226     057A  0874               	movf	??_free+1,w
  2227     057B  00FC               	movwf	free@c+1
  2228     057C  1283               	bcf	3,5	;RP0=0, select bank0
  2229     057D  1303               	bcf	3,6	;RP1=0, select bank0
  2230     057E  086D               	movf	___freelist,w
  2231     057F  046E               	iorwf	___freelist+1,w
  2232     0580  1903               	btfsc	3,2
  2233     0581  2D83               	goto	u871
  2234     0582  2D84               	goto	u870
  2235     0583                     u871:
  2236     0583  2E40               	goto	l1489
  2237     0584                     u870:
  2238     0584                     l1469:
  2239     0584  087B               	movf	free@c,w
  2240     0585  0084               	movwf	4
  2241     0586  1783               	bsf	3,7
  2242     0587  1C7C               	btfss	free@c+1,0
  2243     0588  1383               	bcf	3,7
  2244     0589  0800               	movf	0,w
  2245     058A  0779               	addwf	free@cptr,w
  2246     058B  00F3               	movwf	??_free
  2247     058C  087A               	movf	free@cptr+1,w
  2248     058D  1803               	skipnc
  2249     058E  3E01               	addlw	1
  2250     058F  00F4               	movwf	??_free+1
  2251     0590  0874               	movf	??_free+1,w
  2252     0591  066E               	xorwf	___freelist+1,w
  2253     0592  1D03               	skipz
  2254     0593  2D96               	goto	u885
  2255     0594  0873               	movf	??_free,w
  2256     0595  066D               	xorwf	___freelist,w
  2257     0596                     u885:
  2258     0596  1D03               	skipz
  2259     0597  2D99               	goto	u881
  2260     0598  2D9A               	goto	u880
  2261     0599                     u881:
  2262     0599  2DE6               	goto	l1481
  2263     059A                     u880:
  2264     059A                     l1471:
  2265     059A  086D               	movf	___freelist,w
  2266     059B  3E02               	addlw	2
  2267     059C  00F3               	movwf	??_free
  2268     059D  086E               	movf	___freelist+1,w
  2269     059E  1803               	skipnc
  2270     059F  3E01               	addlw	1
  2271     05A0  3E00               	addlw	0
  2272     05A1  00F4               	movwf	??_free+1
  2273     05A2  0873               	movf	??_free,w
  2274     05A3  0084               	movwf	4
  2275     05A4  1783               	bsf	3,7
  2276     05A5  1C74               	btfss	??_free+1,0
  2277     05A6  1383               	bcf	3,7
  2278     05A7  0800               	movf	0,w
  2279     05A8  00F5               	movwf	??_free+2
  2280     05A9  0A84               	incf	4,f
  2281     05AA  0800               	movf	0,w
  2282     05AB  00F6               	movwf	??_free+3
  2283     05AC  087B               	movf	free@c,w
  2284     05AD  3E02               	addlw	2
  2285     05AE  00F7               	movwf	??_free+4
  2286     05AF  087C               	movf	free@c+1,w
  2287     05B0  1803               	skipnc
  2288     05B1  3E01               	addlw	1
  2289     05B2  3E00               	addlw	0
  2290     05B3  00F8               	movwf	??_free+5
  2291     05B4  0877               	movf	??_free+4,w
  2292     05B5  0084               	movwf	4
  2293     05B6  1783               	bsf	3,7
  2294     05B7  1C78               	btfss	??_free+5,0
  2295     05B8  1383               	bcf	3,7
  2296     05B9  0875               	movf	??_free+2,w
  2297     05BA  0080               	movwf	0
  2298     05BB  0876               	movf	??_free+3,w
  2299     05BC  0A84               	incf	4,f
  2300     05BD  0080               	movwf	0
  2301     05BE  0384               	decf	4,f
  2302     05BF                     l1473:
  2303     05BF  086D               	movf	___freelist,w
  2304     05C0  0084               	movwf	4
  2305     05C1  1783               	bsf	3,7
  2306     05C2  1C6E               	btfss	___freelist+1,0
  2307     05C3  1383               	bcf	3,7
  2308     05C4  0800               	movf	0,w
  2309     05C5  00F3               	movwf	??_free
  2310     05C6  0A84               	incf	4,f
  2311     05C7  0800               	movf	0,w
  2312     05C8  00F4               	movwf	??_free+1
  2313     05C9  0873               	movf	??_free,w
  2314     05CA  3E02               	addlw	2
  2315     05CB  00F5               	movwf	??_free+2
  2316     05CC  0874               	movf	??_free+1,w
  2317     05CD  1803               	skipnc
  2318     05CE  3E01               	addlw	1
  2319     05CF  3E00               	addlw	0
  2320     05D0  00F6               	movwf	??_free+3
  2321     05D1  087B               	movf	free@c,w
  2322     05D2  0084               	movwf	4
  2323     05D3  1783               	bsf	3,7
  2324     05D4  1C7C               	btfss	free@c+1,0
  2325     05D5  1383               	bcf	3,7
  2326     05D6  0875               	movf	??_free+2,w
  2327     05D7  0780               	addwf	0,f
  2328     05D8  0F84               	incfsz	4,f
  2329     05D9  0800               	movf	0,w
  2330     05DA  1803               	skipnc
  2331     05DB  0A00               	incf	0,w
  2332     05DC  00FF               	movwf	btemp+1
  2333     05DD  0876               	movf	??_free+3,w
  2334     05DE  077F               	addwf	btemp+1,w
  2335     05DF  0080               	movwf	0
  2336     05E0  0384               	decf	4,f
  2337     05E1                     l1475:
  2338     05E1  087B               	movf	free@c,w
  2339     05E2  00ED               	movwf	___freelist
  2340     05E3  087C               	movf	free@c+1,w
  2341     05E4  00EE               	movwf	___freelist+1
  2342     05E5  2E51               	goto	l744
  2343     05E6                     l1481:
  2344     05E6  086D               	movf	___freelist,w
  2345     05E7  0084               	movwf	4
  2346     05E8  1783               	bsf	3,7
  2347     05E9  1C6E               	btfss	___freelist+1,0
  2348     05EA  1383               	bcf	3,7
  2349     05EB  0800               	movf	0,w
  2350     05EC  00F3               	movwf	??_free
  2351     05ED  0A84               	incf	4,f
  2352     05EE  0800               	movf	0,w
  2353     05EF  00F4               	movwf	??_free+1
  2354     05F0  0873               	movf	??_free,w
  2355     05F1  076D               	addwf	___freelist,w
  2356     05F2  00F5               	movwf	??_free+2
  2357     05F3  0874               	movf	??_free+1,w
  2358     05F4  1803               	skipnc
  2359     05F5  0A74               	incf	??_free+1,w
  2360     05F6  076E               	addwf	___freelist+1,w
  2361     05F7  00F6               	movwf	??_free+3
  2362     05F8  0875               	movf	??_free+2,w
  2363     05F9  3E02               	addlw	2
  2364     05FA  00F7               	movwf	??_free+4
  2365     05FB  0876               	movf	??_free+3,w
  2366     05FC  1803               	skipnc
  2367     05FD  3E01               	addlw	1
  2368     05FE  3E00               	addlw	0
  2369     05FF  00F8               	movwf	??_free+5
  2370     0600  087C               	movf	free@c+1,w
  2371     0601  0678               	xorwf	??_free+5,w
  2372     0602  1D03               	skipz
  2373     0603  2E06               	goto	u895
  2374     0604  087B               	movf	free@c,w
  2375     0605  0677               	xorwf	??_free+4,w
  2376     0606                     u895:
  2377     0606  1D03               	skipz
  2378     0607  2E09               	goto	u891
  2379     0608  2E0A               	goto	u890
  2380     0609                     u891:
  2381     0609  2E2D               	goto	l1487
  2382     060A                     u890:
  2383     060A                     l1483:
  2384     060A  087B               	movf	free@c,w
  2385     060B  0084               	movwf	4
  2386     060C  1783               	bsf	3,7
  2387     060D  1C7C               	btfss	free@c+1,0
  2388     060E  1383               	bcf	3,7
  2389     060F  0800               	movf	0,w
  2390     0610  00F3               	movwf	??_free
  2391     0611  0A84               	incf	4,f
  2392     0612  0800               	movf	0,w
  2393     0613  00F4               	movwf	??_free+1
  2394     0614  0873               	movf	??_free,w
  2395     0615  3E02               	addlw	2
  2396     0616  00F5               	movwf	??_free+2
  2397     0617  0874               	movf	??_free+1,w
  2398     0618  1803               	skipnc
  2399     0619  3E01               	addlw	1
  2400     061A  3E00               	addlw	0
  2401     061B  00F6               	movwf	??_free+3
  2402     061C  086D               	movf	___freelist,w
  2403     061D  0084               	movwf	4
  2404     061E  1783               	bsf	3,7
  2405     061F  1C6E               	btfss	___freelist+1,0
  2406     0620  1383               	bcf	3,7
  2407     0621  0875               	movf	??_free+2,w
  2408     0622  0780               	addwf	0,f
  2409     0623  0F84               	incfsz	4,f
  2410     0624  0800               	movf	0,w
  2411     0625  1803               	skipnc
  2412     0626  0A00               	incf	0,w
  2413     0627  00FF               	movwf	btemp+1
  2414     0628  0876               	movf	??_free+3,w
  2415     0629  077F               	addwf	btemp+1,w
  2416     062A  0080               	movwf	0
  2417     062B  0384               	decf	4,f
  2418     062C  2E51               	goto	l744
  2419     062D                     l1487:
  2420     062D  087B               	movf	free@c,w
  2421     062E  3E02               	addlw	2
  2422     062F  00F3               	movwf	??_free
  2423     0630  087C               	movf	free@c+1,w
  2424     0631  1803               	skipnc
  2425     0632  3E01               	addlw	1
  2426     0633  3E00               	addlw	0
  2427     0634  00F4               	movwf	??_free+1
  2428     0635  0873               	movf	??_free,w
  2429     0636  0084               	movwf	4
  2430     0637  1783               	bsf	3,7
  2431     0638  1C74               	btfss	??_free+1,0
  2432     0639  1383               	bcf	3,7
  2433     063A  086D               	movf	___freelist,w
  2434     063B  0080               	movwf	0
  2435     063C  0A84               	incf	4,f
  2436     063D  086E               	movf	___freelist+1,w
  2437     063E  0080               	movwf	0
  2438     063F  2DE1               	goto	l1475
  2439     0640                     l1489:
  2440     0640  087B               	movf	free@c,w
  2441     0641  3E02               	addlw	2
  2442     0642  00F3               	movwf	??_free
  2443     0643  087C               	movf	free@c+1,w
  2444     0644  1803               	skipnc
  2445     0645  3E01               	addlw	1
  2446     0646  3E00               	addlw	0
  2447     0647  00F4               	movwf	??_free+1
  2448     0648  0873               	movf	??_free,w
  2449     0649  0084               	movwf	4
  2450     064A  1783               	bsf	3,7
  2451     064B  1C74               	btfss	??_free+1,0
  2452     064C  1383               	bcf	3,7
  2453     064D  0180               	clrf	0
  2454     064E  0A84               	incf	4,f
  2455     064F  0180               	clrf	0
  2456     0650  2DE1               	goto	l1475
  2457     0651                     l744:
  2458     0651  0008               	return
  2459     0652                     __end_of_free:
  2460                           
  2461                           	psect	text9
  2462     0093                     __ptext9:	
  2463 ;; *************** function _calloc *****************
  2464 ;; Defined at:
  2465 ;;		line 10 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_calloc.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;  nmemb           2   24[BANK0 ] unsigned int 
  2468 ;;  size            2   26[BANK0 ] unsigned int 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  new_ptr         2   28[BANK0 ] PTR void 
  2471 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  2   24[BANK0 ] PTR void 
  2474 ;; Registers used:
  2475 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 0/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2481 ;;      Params:         0       4       0       0       0
  2482 ;;      Locals:         0       2       0       0       0
  2483 ;;      Temps:          0       0       0       0       0
  2484 ;;      Totals:         0       6       0       0       0
  2485 ;;Total ram usage:        6 bytes
  2486 ;; Hardware stack levels used: 1
  2487 ;; Hardware stack levels required when called: 2
  2488 ;; This function calls:
  2489 ;;		___wmul
  2490 ;;		_malloc
  2491 ;;		_memset
  2492 ;; This function is called by:
  2493 ;;		_ChangeOfCoordinates
  2494 ;;		_Rotate
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498     0093                     _calloc:	
  2499                           ;psect for function _calloc
  2500                           
  2501     0093                     l1445:	
  2502                           ;incstack = 0
  2503                           ; Regs used in _calloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2504                           
  2505     0093  1283               	bcf	3,5	;RP0=0, select bank0
  2506     0094  1303               	bcf	3,6	;RP1=0, select bank0
  2507     0095  0839               	movf	calloc@nmemb+1,w
  2508     0096  00F2               	movwf	___wmul@multiplier+1
  2509     0097  0838               	movf	calloc@nmemb,w
  2510     0098  00F1               	movwf	___wmul@multiplier
  2511     0099  083B               	movf	calloc@size+1,w
  2512     009A  00F4               	movwf	___wmul@multiplicand+1
  2513     009B  083A               	movf	calloc@size,w
  2514     009C  00F3               	movwf	___wmul@multiplicand
  2515     009D  120A  158A  279B  120A  118A  	fcall	___wmul
  2516     00A2  0872               	movf	?___wmul+1,w
  2517     00A3  00FA               	movwf	malloc@n+1
  2518     00A4  0871               	movf	?___wmul,w
  2519     00A5  00F9               	movwf	malloc@n
  2520     00A6  120A  118A  23B2  120A  118A  	fcall	_malloc
  2521     00AB  0879               	movf	?_malloc,w
  2522     00AC  1283               	bcf	3,5	;RP0=0, select bank0
  2523     00AD  1303               	bcf	3,6	;RP1=0, select bank0
  2524     00AE  00BC               	movwf	calloc@new_ptr
  2525     00AF  087A               	movf	?_malloc+1,w
  2526     00B0  00BD               	movwf	calloc@new_ptr+1
  2527     00B1                     l1447:
  2528     00B1  083C               	movf	calloc@new_ptr,w
  2529     00B2  043D               	iorwf	calloc@new_ptr+1,w
  2530     00B3  1903               	btfsc	3,2
  2531     00B4  28B6               	goto	u821
  2532     00B5  28B7               	goto	u820
  2533     00B6                     u821:
  2534     00B6  28D4               	goto	l1451
  2535     00B7                     u820:
  2536     00B7                     l1449:
  2537     00B7  083C               	movf	calloc@new_ptr,w
  2538     00B8  00F7               	movwf	memset@dest
  2539     00B9  083D               	movf	calloc@new_ptr+1,w
  2540     00BA  00F8               	movwf	memset@dest+1
  2541     00BB  3000               	movlw	0
  2542     00BC  00F9               	movwf	memset@c
  2543     00BD  00FA               	movwf	memset@c+1
  2544     00BE  0839               	movf	calloc@nmemb+1,w
  2545     00BF  00F2               	movwf	___wmul@multiplier+1
  2546     00C0  0838               	movf	calloc@nmemb,w
  2547     00C1  00F1               	movwf	___wmul@multiplier
  2548     00C2  083B               	movf	calloc@size+1,w
  2549     00C3  00F4               	movwf	___wmul@multiplicand+1
  2550     00C4  083A               	movf	calloc@size,w
  2551     00C5  00F3               	movwf	___wmul@multiplicand
  2552     00C6  120A  158A  279B  120A  118A  	fcall	___wmul
  2553     00CB  0872               	movf	?___wmul+1,w
  2554     00CC  00FC               	movwf	memset@n+1
  2555     00CD  0871               	movf	?___wmul,w
  2556     00CE  00FB               	movwf	memset@n
  2557     00CF  120A  158A  277A  120A  118A  	fcall	_memset
  2558     00D4                     l1451:
  2559     00D4  1283               	bcf	3,5	;RP0=0, select bank0
  2560     00D5  1303               	bcf	3,6	;RP1=0, select bank0
  2561     00D6  083C               	movf	calloc@new_ptr,w
  2562     00D7  00B8               	movwf	?_calloc
  2563     00D8  083D               	movf	calloc@new_ptr+1,w
  2564     00D9  00B9               	movwf	?_calloc+1
  2565     00DA                     l721:
  2566     00DA  0008               	return
  2567     00DB                     __end_of_calloc:
  2568                           
  2569                           	psect	text10
  2570     0F7A                     __ptext10:	
  2571 ;; *************** function _memset *****************
  2572 ;; Defined at:
  2573 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/memset.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  dest            2    6[COMMON] PTR void 
  2576 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2577 ;;  c               2    8[COMMON] int 
  2578 ;;  n               2   10[COMMON] unsigned int 
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;  p               2    0[BANK0 ] PTR unsigned char 
  2581 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2582 ;; Return value:  Size  Location     Type
  2583 ;;                  2    6[COMMON] PTR void 
  2584 ;; Registers used:
  2585 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2586 ;; Tracked objects:
  2587 ;;		On entry : 0/0
  2588 ;;		On exit  : 0/0
  2589 ;;		Unchanged: 0/0
  2590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2591 ;;      Params:         6       0       0       0       0
  2592 ;;      Locals:         0       2       0       0       0
  2593 ;;      Temps:          0       0       0       0       0
  2594 ;;      Totals:         6       2       0       0       0
  2595 ;;Total ram usage:        8 bytes
  2596 ;; Hardware stack levels used: 1
  2597 ;; This function calls:
  2598 ;;		Nothing
  2599 ;; This function is called by:
  2600 ;;		_calloc
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604     0F7A                     _memset:	
  2605                           ;psect for function _memset
  2606                           
  2607     0F7A                     l1437:	
  2608                           ;incstack = 0
  2609                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  2610                           
  2611     0F7A  0877               	movf	memset@dest,w
  2612     0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  2613     0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  2614     0F7D  00A0               	movwf	memset@p
  2615     0F7E  0878               	movf	memset@dest+1,w
  2616     0F7F  00A1               	movwf	memset@p+1
  2617     0F80  2F8C               	goto	l1443
  2618     0F81                     l1439:
  2619     0F81  0820               	movf	memset@p,w
  2620     0F82  0084               	movwf	4
  2621     0F83  1783               	bsf	3,7
  2622     0F84  1C21               	btfss	memset@p+1,0
  2623     0F85  1383               	bcf	3,7
  2624     0F86  0879               	movf	memset@c,w
  2625     0F87  0080               	movwf	0
  2626     0F88                     l1441:
  2627     0F88  3001               	movlw	1
  2628     0F89  07A0               	addwf	memset@p,f
  2629     0F8A  1803               	skipnc
  2630     0F8B  0AA1               	incf	memset@p+1,f
  2631     0F8C                     l1443:
  2632     0F8C  3001               	movlw	1
  2633     0F8D  02FB               	subwf	memset@n,f
  2634     0F8E  3000               	movlw	0
  2635     0F8F  1C03               	skipc
  2636     0F90  03FC               	decf	memset@n+1,f
  2637     0F91  02FC               	subwf	memset@n+1,f
  2638     0F92  0A7B               	incf	memset@n,w
  2639     0F93  1D03               	skipz
  2640     0F94  2F99               	goto	u811
  2641     0F95  0A7C               	incf	memset@n+1,w
  2642     0F96  1D03               	btfss	3,2
  2643     0F97  2F99               	goto	u811
  2644     0F98  2F9A               	goto	u810
  2645     0F99                     u811:
  2646     0F99  2F81               	goto	l1439
  2647     0F9A                     u810:
  2648     0F9A                     l797:
  2649     0F9A  0008               	return
  2650     0F9B                     __end_of_memset:
  2651                           
  2652                           	psect	text11
  2653     03B2                     __ptext11:	
  2654 ;; *************** function _malloc *****************
  2655 ;; Defined at:
  2656 ;;		line 16 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_malloc.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  n               2    8[COMMON] unsigned int 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  sz              2   16[BANK0 ] PTR unsigned int 
  2661 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2662 ;;  new             2   22[BANK0 ] PTR unsigned char 
  2663 ;;		 -> __heap_hi(0), NULL(0), 
  2664 ;;  m               2   14[BANK0 ] unsigned int 
  2665 ;;  p               2   20[BANK0 ] PTR void 
  2666 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2667 ;;  size            2   18[BANK0 ] unsigned int 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  2    8[COMMON] PTR void 
  2670 ;; Registers used:
  2671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2677 ;;      Params:         2       0       0       0       0
  2678 ;;      Locals:         0      10       0       0       0
  2679 ;;      Temps:          2       0       0       0       0
  2680 ;;      Totals:         4      10       0       0       0
  2681 ;;Total ram usage:       14 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; Hardware stack levels required when called: 1
  2684 ;; This function calls:
  2685 ;;		___expand_heap
  2686 ;;		___simple_search_fl
  2687 ;; This function is called by:
  2688 ;;		_calloc
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692     03B2                     _malloc:	
  2693                           ;psect for function _malloc
  2694                           
  2695     03B2                     l1385:	
  2696                           ;incstack = 0
  2697                           ; Regs used in _malloc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2698                           
  2699     03B2  1283               	bcf	3,5	;RP0=0, select bank0
  2700     03B3  1303               	bcf	3,6	;RP1=0, select bank0
  2701     03B4  01B2               	clrf	malloc@size
  2702     03B5  01B3               	clrf	malloc@size+1
  2703     03B6                     l1387:
  2704     03B6  0879               	movf	malloc@n,w
  2705     03B7  047A               	iorwf	malloc@n+1,w
  2706     03B8  1D03               	btfss	3,2
  2707     03B9  2BBB               	goto	u741
  2708     03BA  2BBC               	goto	u740
  2709     03BB                     u741:
  2710     03BB  2BC2               	goto	l764
  2711     03BC                     u740:
  2712     03BC                     l1389:
  2713     03BC  3001               	movlw	1
  2714     03BD  07F9               	addwf	malloc@n,f
  2715     03BE  1803               	skipnc
  2716     03BF  0AFA               	incf	malloc@n+1,f
  2717     03C0  3000               	movlw	0
  2718     03C1  07FA               	addwf	malloc@n+1,f
  2719     03C2                     l764:
  2720     03C2  3000               	movlw	0
  2721     03C3  027A               	subwf	malloc@n+1,w
  2722     03C4  3002               	movlw	2
  2723     03C5  1903               	skipnz
  2724     03C6  0279               	subwf	malloc@n,w
  2725     03C7  1803               	skipnc
  2726     03C8  2BCA               	goto	u751
  2727     03C9  2BCB               	goto	u750
  2728     03CA                     u751:
  2729     03CA  2BD0               	goto	l1393
  2730     03CB                     u750:
  2731     03CB                     l1391:
  2732     03CB  3002               	movlw	2
  2733     03CC  00F9               	movwf	malloc@n
  2734     03CD  3000               	movlw	0
  2735     03CE  00FA               	movwf	malloc@n+1
  2736     03CF  2BE8               	goto	l1401
  2737     03D0                     l1393:
  2738     03D0  087A               	movf	malloc@n+1,w
  2739     03D1  00FC               	movwf	??_malloc+1
  2740     03D2  0879               	movf	malloc@n,w
  2741     03D3  00FB               	movwf	??_malloc
  2742     03D4  09FB               	comf	??_malloc,f
  2743     03D5  09FC               	comf	??_malloc+1,f
  2744     03D6  3000               	movlw	0
  2745     03D7  027C               	subwf	??_malloc+1,w
  2746     03D8  3002               	movlw	2
  2747     03D9  1903               	skipnz
  2748     03DA  027B               	subwf	??_malloc,w
  2749     03DB  1803               	skipnc
  2750     03DC  2BDE               	goto	u761
  2751     03DD  2BDF               	goto	u760
  2752     03DE                     u761:
  2753     03DE  2BE8               	goto	l1401
  2754     03DF                     u760:
  2755     03DF                     l1395:
  2756     03DF  300C               	movlw	12
  2757     03E0  1683               	bsf	3,5	;RP0=1, select bank1
  2758     03E1  1303               	bcf	3,6	;RP1=0, select bank1
  2759     03E2  00AF               	movwf	_errno^(0+128)
  2760     03E3  3000               	movlw	0
  2761     03E4  00B0               	movwf	(_errno^(0+128)+1)
  2762     03E5                     l1397:
  2763     03E5  01F9               	clrf	?_malloc
  2764     03E6  01FA               	clrf	?_malloc+1
  2765     03E7  2C7B               	goto	l768
  2766     03E8                     l1401:
  2767     03E8                     l1403:
  2768     03E8  087A               	movf	malloc@n+1,w
  2769     03E9  00F2               	movwf	___simple_search_fl@n+1
  2770     03EA  0879               	movf	malloc@n,w
  2771     03EB  00F1               	movwf	___simple_search_fl@n
  2772     03EC  120A  118A  2652  120A  118A  	fcall	___simple_search_fl
  2773     03F1  0871               	movf	?___simple_search_fl,w
  2774     03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2775     03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2776     03F4  00B4               	movwf	malloc@p
  2777     03F5  0872               	movf	?___simple_search_fl+1,w
  2778     03F6  00B5               	movwf	malloc@p+1
  2779     03F7                     l1405:
  2780     03F7  0834               	movf	malloc@p,w
  2781     03F8  0435               	iorwf	malloc@p+1,w
  2782     03F9  1D03               	btfss	3,2
  2783     03FA  2BFC               	goto	u771
  2784     03FB  2BFD               	goto	u770
  2785     03FC                     u771:
  2786     03FC  2C77               	goto	l1433
  2787     03FD                     u770:
  2788     03FD                     l1407:
  2789     03FD  086B               	movf	malloc@cur,w
  2790     03FE  1683               	bsf	3,5	;RP0=1, select bank1
  2791     03FF  1303               	bcf	3,6	;RP1=0, select bank1
  2792     0400  022D               	subwf	malloc@end^(0+128),w
  2793     0401  00FB               	movwf	??_malloc
  2794     0402  1283               	bcf	3,5	;RP0=0, select bank0
  2795     0403  1303               	bcf	3,6	;RP1=0, select bank0
  2796     0404  086C               	movf	malloc@cur+1,w
  2797     0405  1C03               	skipc
  2798     0406  0A6C               	incf	malloc@cur+1,w
  2799     0407  1683               	bsf	3,5	;RP0=1, select bank1
  2800     0408  1303               	bcf	3,6	;RP1=0, select bank1
  2801     0409  022E               	subwf	(malloc@end+1)^(0+128),w
  2802     040A  00FC               	movwf	??_malloc+1
  2803     040B  087A               	movf	malloc@n+1,w
  2804     040C  027C               	subwf	??_malloc+1,w
  2805     040D  1D03               	skipz
  2806     040E  2C11               	goto	u785
  2807     040F  0879               	movf	malloc@n,w
  2808     0410  027B               	subwf	??_malloc,w
  2809     0411                     u785:
  2810     0411  1803               	skipnc
  2811     0412  2C14               	goto	u781
  2812     0413  2C15               	goto	u780
  2813     0414                     u781:
  2814     0414  2C56               	goto	l770
  2815     0415                     u780:
  2816     0415                     l1409:
  2817     0415  0879               	movf	malloc@n,w
  2818     0416  3E02               	addlw	2
  2819     0417  1283               	bcf	3,5	;RP0=0, select bank0
  2820     0418  1303               	bcf	3,6	;RP1=0, select bank0
  2821     0419  00AE               	movwf	malloc@m
  2822     041A  087A               	movf	malloc@n+1,w
  2823     041B  1803               	skipnc
  2824     041C  3E01               	addlw	1
  2825     041D  3E00               	addlw	0
  2826     041E  00AF               	movwf	malloc@m+1
  2827     041F                     l1411:
  2828     041F  302E               	movlw	(low (malloc@m| 0))& (0+255)
  2829     0420  00F1               	movwf	___expand_heap@pn
  2830     0421  120A  118A  20DB  120A  118A  	fcall	___expand_heap
  2831     0426  0871               	movf	?___expand_heap,w
  2832     0427  1283               	bcf	3,5	;RP0=0, select bank0
  2833     0428  1303               	bcf	3,6	;RP1=0, select bank0
  2834     0429  00B6               	movwf	malloc@new
  2835     042A  0872               	movf	?___expand_heap+1,w
  2836     042B  00B7               	movwf	malloc@new+1
  2837     042C                     l1413:
  2838     042C  0836               	movf	malloc@new,w
  2839     042D  0437               	iorwf	malloc@new+1,w
  2840     042E  1D03               	btfss	3,2
  2841     042F  2C31               	goto	u791
  2842     0430  2C32               	goto	u790
  2843     0431                     u791:
  2844     0431  2C33               	goto	l1419
  2845     0432                     u790:
  2846     0432  2BE5               	goto	l1397
  2847     0433                     l1419:
  2848     0433  1683               	bsf	3,5	;RP0=1, select bank1
  2849     0434  1303               	bcf	3,6	;RP1=0, select bank1
  2850     0435  082E               	movf	(malloc@end+1)^(0+128),w
  2851     0436  1283               	bcf	3,5	;RP0=0, select bank0
  2852     0437  1303               	bcf	3,6	;RP1=0, select bank0
  2853     0438  0637               	xorwf	malloc@new+1,w
  2854     0439  1D03               	skipz
  2855     043A  2C41               	goto	u805
  2856     043B  1683               	bsf	3,5	;RP0=1, select bank1
  2857     043C  1303               	bcf	3,6	;RP1=0, select bank1
  2858     043D  082D               	movf	malloc@end^(0+128),w
  2859     043E  1283               	bcf	3,5	;RP0=0, select bank0
  2860     043F  1303               	bcf	3,6	;RP1=0, select bank0
  2861     0440  0636               	xorwf	malloc@new,w
  2862     0441                     u805:
  2863     0441  1903               	skipnz
  2864     0442  2C44               	goto	u801
  2865     0443  2C45               	goto	u800
  2866     0444                     u801:
  2867     0444  2C49               	goto	l772
  2868     0445                     u800:
  2869     0445                     l1421:
  2870     0445  0836               	movf	malloc@new,w
  2871     0446  00EB               	movwf	malloc@cur
  2872     0447  0837               	movf	malloc@new+1,w
  2873     0448  00EC               	movwf	malloc@cur+1
  2874     0449                     l772:
  2875     0449  082E               	movf	malloc@m,w
  2876     044A  0736               	addwf	malloc@new,w
  2877     044B  1683               	bsf	3,5	;RP0=1, select bank1
  2878     044C  1303               	bcf	3,6	;RP1=0, select bank1
  2879     044D  00AD               	movwf	malloc@end^(0+128)
  2880     044E  1283               	bcf	3,5	;RP0=0, select bank0
  2881     044F  1303               	bcf	3,6	;RP1=0, select bank0
  2882     0450  0837               	movf	malloc@new+1,w
  2883     0451  1803               	skipnc
  2884     0452  3E01               	addlw	1
  2885     0453  1683               	bsf	3,5	;RP0=1, select bank1
  2886     0454  1303               	bcf	3,6	;RP1=0, select bank1
  2887     0455  00AE               	movwf	(malloc@end^(0+128)+1)
  2888     0456                     l770:
  2889     0456  1283               	bcf	3,5	;RP0=0, select bank0
  2890     0457  1303               	bcf	3,6	;RP1=0, select bank0
  2891     0458  086B               	movf	malloc@cur,w
  2892     0459  00B4               	movwf	malloc@p
  2893     045A  086C               	movf	malloc@cur+1,w
  2894     045B  00B5               	movwf	malloc@p+1
  2895     045C                     l1423:
  2896     045C  0834               	movf	malloc@p,w
  2897     045D  00B0               	movwf	malloc@sz
  2898     045E  0835               	movf	malloc@p+1,w
  2899     045F  00B1               	movwf	malloc@sz+1
  2900     0460                     l1425:
  2901     0460  0830               	movf	malloc@sz,w
  2902     0461  0084               	movwf	4
  2903     0462  1783               	bsf	3,7
  2904     0463  1C31               	btfss	malloc@sz+1,0
  2905     0464  1383               	bcf	3,7
  2906     0465  0879               	movf	malloc@n,w
  2907     0466  0080               	movwf	0
  2908     0467  0A84               	incf	4,f
  2909     0468  087A               	movf	malloc@n+1,w
  2910     0469  0080               	movwf	0
  2911     046A                     l1427:
  2912     046A  3002               	movlw	2
  2913     046B  07B0               	addwf	malloc@sz,f
  2914     046C  1803               	skipnc
  2915     046D  0AB1               	incf	malloc@sz+1,f
  2916     046E                     l1429:
  2917     046E  0830               	movf	malloc@sz,w
  2918     046F  00B4               	movwf	malloc@p
  2919     0470  0831               	movf	malloc@sz+1,w
  2920     0471  00B5               	movwf	malloc@p+1
  2921     0472                     l1431:
  2922     0472  0879               	movf	malloc@n,w
  2923     0473  3E02               	addlw	2
  2924     0474  07EB               	addwf	malloc@cur,f
  2925     0475  1803               	skipnc
  2926     0476  0AEC               	incf	malloc@cur+1,f
  2927     0477                     l1433:
  2928     0477  0834               	movf	malloc@p,w
  2929     0478  00F9               	movwf	?_malloc
  2930     0479  0835               	movf	malloc@p+1,w
  2931     047A  00FA               	movwf	?_malloc+1
  2932     047B                     l768:
  2933     047B  0008               	return
  2934     047C                     __end_of_malloc:
  2935                           
  2936                           	psect	text12
  2937     0652                     __ptext12:	
  2938 ;; *************** function ___simple_search_fl *****************
  2939 ;; Defined at:
  2940 ;;		line 19 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/lite_free.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  n               2    0[COMMON] unsigned int 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  split           2    4[BANK0 ] PTR struct chunk
  2945 ;;		 -> __heap_hi$.$next(2), NULL(0), 
  2946 ;;  remaining_si    2    0[BANK0 ] unsigned int 
  2947 ;;  next            2    8[BANK0 ] PTR struct chunk
  2948 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2949 ;;  best            2   12[BANK0 ] PTR struct chunk
  2950 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2951 ;;  c               2   10[BANK0 ] PTR struct chunk
  2952 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2953 ;;  last            2    6[BANK0 ] PTR struct chunk
  2954 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2955 ;;  best_last       2    2[BANK0 ] PTR struct chunk
  2956 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  2    0[COMMON] PTR void 
  2959 ;; Registers used:
  2960 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2966 ;;      Params:         2       0       0       0       0
  2967 ;;      Locals:         0      14       0       0       0
  2968 ;;      Temps:          6       0       0       0       0
  2969 ;;      Totals:         8      14       0       0       0
  2970 ;;Total ram usage:       22 bytes
  2971 ;; Hardware stack levels used: 1
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_malloc
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979     0652                     ___simple_search_fl:	
  2980                           ;psect for function ___simple_search_fl
  2981                           
  2982     0652                     l1283:	
  2983                           ;incstack = 0
  2984                           ; Regs used in ___simple_search_fl: [wreg-fsr0h+status,2+status,0]
  2985                           
  2986     0652  1283               	bcf	3,5	;RP0=0, select bank0
  2987     0653  1303               	bcf	3,6	;RP1=0, select bank0
  2988     0654  01AC               	clrf	___simple_search_fl@best
  2989     0655  01AD               	clrf	___simple_search_fl@best+1
  2990     0656  01A2               	clrf	___simple_search_fl@best_last
  2991     0657  01A3               	clrf	___simple_search_fl@best_last+1
  2992     0658  01A6               	clrf	___simple_search_fl@last
  2993     0659  01A7               	clrf	___simple_search_fl@last+1
  2994     065A                     l1285:
  2995     065A  086D               	movf	___freelist,w
  2996     065B  046E               	iorwf	___freelist+1,w
  2997     065C  1D03               	btfss	3,2
  2998     065D  2E5F               	goto	u551
  2999     065E  2E60               	goto	u550
  3000     065F                     u551:
  3001     065F  2E63               	goto	l1291
  3002     0660                     u550:
  3003     0660                     l1287:
  3004     0660  01F1               	clrf	?___simple_search_fl
  3005     0661  01F2               	clrf	?___simple_search_fl+1
  3006     0662  2FD7               	goto	l727
  3007     0663                     l1291:
  3008     0663  086D               	movf	___freelist,w
  3009     0664  00AA               	movwf	___simple_search_fl@c
  3010     0665  086E               	movf	___freelist+1,w
  3011     0666  00AB               	movwf	___simple_search_fl@c+1
  3012     0667  2F1C               	goto	l1317
  3013     0668                     l1293:
  3014     0668  082A               	movf	___simple_search_fl@c,w
  3015     0669  0084               	movwf	4
  3016     066A  1783               	bsf	3,7
  3017     066B  1C2B               	btfss	___simple_search_fl@c+1,0
  3018     066C  1383               	bcf	3,7
  3019     066D  0800               	movf	0,w
  3020     066E  00F3               	movwf	??___simple_search_fl
  3021     066F  0A84               	incf	4,f
  3022     0670  0800               	movf	0,w
  3023     0671  00F4               	movwf	??___simple_search_fl+1
  3024     0672  0872               	movf	___simple_search_fl@n+1,w
  3025     0673  0674               	xorwf	??___simple_search_fl+1,w
  3026     0674  1D03               	skipz
  3027     0675  2E78               	goto	u565
  3028     0676  0871               	movf	___simple_search_fl@n,w
  3029     0677  0673               	xorwf	??___simple_search_fl,w
  3030     0678                     u565:
  3031     0678  1D03               	skipz
  3032     0679  2E7B               	goto	u561
  3033     067A  2E7C               	goto	u560
  3034     067B                     u561:
  3035     067B  2EC4               	goto	l1305
  3036     067C                     u560:
  3037     067C                     l1295:
  3038     067C  0826               	movf	___simple_search_fl@last,w
  3039     067D  0427               	iorwf	___simple_search_fl@last+1,w
  3040     067E  1903               	btfsc	3,2
  3041     067F  2E81               	goto	u571
  3042     0680  2E82               	goto	u570
  3043     0681                     u571:
  3044     0681  2EA8               	goto	l1299
  3045     0682                     u570:
  3046     0682                     l1297:
  3047     0682  082A               	movf	___simple_search_fl@c,w
  3048     0683  3E02               	addlw	2
  3049     0684  00F3               	movwf	??___simple_search_fl
  3050     0685  082B               	movf	___simple_search_fl@c+1,w
  3051     0686  1803               	skipnc
  3052     0687  3E01               	addlw	1
  3053     0688  3E00               	addlw	0
  3054     0689  00F4               	movwf	??___simple_search_fl+1
  3055     068A  0873               	movf	??___simple_search_fl,w
  3056     068B  0084               	movwf	4
  3057     068C  1783               	bsf	3,7
  3058     068D  1C74               	btfss	??___simple_search_fl+1,0
  3059     068E  1383               	bcf	3,7
  3060     068F  0800               	movf	0,w
  3061     0690  00F5               	movwf	??___simple_search_fl+2
  3062     0691  0A84               	incf	4,f
  3063     0692  0800               	movf	0,w
  3064     0693  00F6               	movwf	??___simple_search_fl+3
  3065     0694  0826               	movf	___simple_search_fl@last,w
  3066     0695  3E02               	addlw	2
  3067     0696  00F7               	movwf	??___simple_search_fl+4
  3068     0697  0827               	movf	___simple_search_fl@last+1,w
  3069     0698  1803               	skipnc
  3070     0699  3E01               	addlw	1
  3071     069A  3E00               	addlw	0
  3072     069B  00F8               	movwf	??___simple_search_fl+5
  3073     069C  0877               	movf	??___simple_search_fl+4,w
  3074     069D  0084               	movwf	4
  3075     069E  1783               	bsf	3,7
  3076     069F  1C78               	btfss	??___simple_search_fl+5,0
  3077     06A0  1383               	bcf	3,7
  3078     06A1  0875               	movf	??___simple_search_fl+2,w
  3079     06A2  0080               	movwf	0
  3080     06A3  0876               	movf	??___simple_search_fl+3,w
  3081     06A4  0A84               	incf	4,f
  3082     06A5  0080               	movwf	0
  3083     06A6  0384               	decf	4,f
  3084     06A7  2EBB               	goto	l1301
  3085     06A8                     l1299:
  3086     06A8  082A               	movf	___simple_search_fl@c,w
  3087     06A9  3E02               	addlw	2
  3088     06AA  00F3               	movwf	??___simple_search_fl
  3089     06AB  082B               	movf	___simple_search_fl@c+1,w
  3090     06AC  1803               	skipnc
  3091     06AD  3E01               	addlw	1
  3092     06AE  3E00               	addlw	0
  3093     06AF  00F4               	movwf	??___simple_search_fl+1
  3094     06B0  0873               	movf	??___simple_search_fl,w
  3095     06B1  0084               	movwf	4
  3096     06B2  1783               	bsf	3,7
  3097     06B3  1C74               	btfss	??___simple_search_fl+1,0
  3098     06B4  1383               	bcf	3,7
  3099     06B5  0800               	movf	0,w
  3100     06B6  00ED               	movwf	___freelist
  3101     06B7  0A84               	incf	4,f
  3102     06B8  0800               	movf	0,w
  3103     06B9  0384               	decf	4,f
  3104     06BA  00EE               	movwf	___freelist+1
  3105     06BB                     l1301:
  3106     06BB  082A               	movf	___simple_search_fl@c,w
  3107     06BC  3E02               	addlw	2
  3108     06BD  00F1               	movwf	?___simple_search_fl
  3109     06BE  082B               	movf	___simple_search_fl@c+1,w
  3110     06BF  1803               	skipnc
  3111     06C0  3E01               	addlw	1
  3112     06C1  3E00               	addlw	0
  3113     06C2  00F2               	movwf	?___simple_search_fl+1
  3114     06C3  2FD7               	goto	l727
  3115     06C4                     l1305:
  3116     06C4  082A               	movf	___simple_search_fl@c,w
  3117     06C5  0084               	movwf	4
  3118     06C6  1783               	bsf	3,7
  3119     06C7  1C2B               	btfss	___simple_search_fl@c+1,0
  3120     06C8  1383               	bcf	3,7
  3121     06C9  0800               	movf	0,w
  3122     06CA  00F3               	movwf	??___simple_search_fl
  3123     06CB  0A84               	incf	4,f
  3124     06CC  0800               	movf	0,w
  3125     06CD  00F4               	movwf	??___simple_search_fl+1
  3126     06CE  0874               	movf	??___simple_search_fl+1,w
  3127     06CF  0272               	subwf	___simple_search_fl@n+1,w
  3128     06D0  1D03               	skipz
  3129     06D1  2ED4               	goto	u585
  3130     06D2  0873               	movf	??___simple_search_fl,w
  3131     06D3  0271               	subwf	___simple_search_fl@n,w
  3132     06D4                     u585:
  3133     06D4  1803               	skipnc
  3134     06D5  2ED7               	goto	u581
  3135     06D6  2ED8               	goto	u580
  3136     06D7                     u581:
  3137     06D7  2F05               	goto	l735
  3138     06D8                     u580:
  3139     06D8                     l1307:
  3140     06D8  082C               	movf	___simple_search_fl@best,w
  3141     06D9  042D               	iorwf	___simple_search_fl@best+1,w
  3142     06DA  1903               	btfsc	3,2
  3143     06DB  2EDD               	goto	u591
  3144     06DC  2EDE               	goto	u590
  3145     06DD                     u591:
  3146     06DD  2EFD               	goto	l1313
  3147     06DE                     u590:
  3148     06DE                     l1309:
  3149     06DE  082C               	movf	___simple_search_fl@best,w
  3150     06DF  0084               	movwf	4
  3151     06E0  1783               	bsf	3,7
  3152     06E1  1C2D               	btfss	___simple_search_fl@best+1,0
  3153     06E2  1383               	bcf	3,7
  3154     06E3  0800               	movf	0,w
  3155     06E4  00F3               	movwf	??___simple_search_fl
  3156     06E5  0A84               	incf	4,f
  3157     06E6  0800               	movf	0,w
  3158     06E7  00F4               	movwf	??___simple_search_fl+1
  3159     06E8  082A               	movf	___simple_search_fl@c,w
  3160     06E9  0084               	movwf	4
  3161     06EA  1783               	bsf	3,7
  3162     06EB  1C2B               	btfss	___simple_search_fl@c+1,0
  3163     06EC  1383               	bcf	3,7
  3164     06ED  0800               	movf	0,w
  3165     06EE  00F5               	movwf	??___simple_search_fl+2
  3166     06EF  0A84               	incf	4,f
  3167     06F0  0800               	movf	0,w
  3168     06F1  00F6               	movwf	??___simple_search_fl+3
  3169     06F2  0874               	movf	??___simple_search_fl+1,w
  3170     06F3  0276               	subwf	??___simple_search_fl+3,w
  3171     06F4  1D03               	skipz
  3172     06F5  2EF8               	goto	u605
  3173     06F6  0873               	movf	??___simple_search_fl,w
  3174     06F7  0275               	subwf	??___simple_search_fl+2,w
  3175     06F8                     u605:
  3176     06F8  1C03               	skipc
  3177     06F9  2EFB               	goto	u601
  3178     06FA  2EFC               	goto	u600
  3179     06FB                     u601:
  3180     06FB  2EFD               	goto	l1313
  3181     06FC                     u600:
  3182     06FC  2F05               	goto	l735
  3183     06FD                     l1313:
  3184     06FD  082A               	movf	___simple_search_fl@c,w
  3185     06FE  00AC               	movwf	___simple_search_fl@best
  3186     06FF  082B               	movf	___simple_search_fl@c+1,w
  3187     0700  00AD               	movwf	___simple_search_fl@best+1
  3188     0701  0826               	movf	___simple_search_fl@last,w
  3189     0702  00A2               	movwf	___simple_search_fl@best_last
  3190     0703  0827               	movf	___simple_search_fl@last+1,w
  3191     0704  00A3               	movwf	___simple_search_fl@best_last+1
  3192     0705                     l735:
  3193     0705  082A               	movf	___simple_search_fl@c,w
  3194     0706  00A6               	movwf	___simple_search_fl@last
  3195     0707  082B               	movf	___simple_search_fl@c+1,w
  3196     0708  00A7               	movwf	___simple_search_fl@last+1
  3197     0709                     l1315:
  3198     0709  082A               	movf	___simple_search_fl@c,w
  3199     070A  3E02               	addlw	2
  3200     070B  00F3               	movwf	??___simple_search_fl
  3201     070C  082B               	movf	___simple_search_fl@c+1,w
  3202     070D  1803               	skipnc
  3203     070E  3E01               	addlw	1
  3204     070F  3E00               	addlw	0
  3205     0710  00F4               	movwf	??___simple_search_fl+1
  3206     0711  0873               	movf	??___simple_search_fl,w
  3207     0712  0084               	movwf	4
  3208     0713  1783               	bsf	3,7
  3209     0714  1C74               	btfss	??___simple_search_fl+1,0
  3210     0715  1383               	bcf	3,7
  3211     0716  0800               	movf	0,w
  3212     0717  00AA               	movwf	___simple_search_fl@c
  3213     0718  0A84               	incf	4,f
  3214     0719  0800               	movf	0,w
  3215     071A  0384               	decf	4,f
  3216     071B  00AB               	movwf	___simple_search_fl@c+1
  3217     071C                     l1317:
  3218     071C  082A               	movf	___simple_search_fl@c,w
  3219     071D  042B               	iorwf	___simple_search_fl@c+1,w
  3220     071E  1D03               	btfss	3,2
  3221     071F  2F21               	goto	u611
  3222     0720  2F22               	goto	u610
  3223     0721                     u611:
  3224     0721  2E68               	goto	l1293
  3225     0722                     u610:
  3226     0722                     l1319:
  3227     0722  082C               	movf	___simple_search_fl@best,w
  3228     0723  042D               	iorwf	___simple_search_fl@best+1,w
  3229     0724  1903               	btfsc	3,2
  3230     0725  2F27               	goto	u621
  3231     0726  2F28               	goto	u620
  3232     0727                     u621:
  3233     0727  2E60               	goto	l1287
  3234     0728                     u620:
  3235     0728                     l1321:
  3236     0728  082C               	movf	___simple_search_fl@best,w
  3237     0729  3E02               	addlw	2
  3238     072A  00F3               	movwf	??___simple_search_fl
  3239     072B  082D               	movf	___simple_search_fl@best+1,w
  3240     072C  1803               	skipnc
  3241     072D  3E01               	addlw	1
  3242     072E  3E00               	addlw	0
  3243     072F  00F4               	movwf	??___simple_search_fl+1
  3244     0730  0873               	movf	??___simple_search_fl,w
  3245     0731  0084               	movwf	4
  3246     0732  1783               	bsf	3,7
  3247     0733  1C74               	btfss	??___simple_search_fl+1,0
  3248     0734  1383               	bcf	3,7
  3249     0735  0800               	movf	0,w
  3250     0736  00A8               	movwf	___simple_search_fl@next
  3251     0737  0A84               	incf	4,f
  3252     0738  0800               	movf	0,w
  3253     0739  0384               	decf	4,f
  3254     073A  00A9               	movwf	___simple_search_fl@next+1
  3255     073B  082C               	movf	___simple_search_fl@best,w
  3256     073C  0084               	movwf	4
  3257     073D  1783               	bsf	3,7
  3258     073E  1C2D               	btfss	___simple_search_fl@best+1,0
  3259     073F  1383               	bcf	3,7
  3260     0740  0800               	movf	0,w
  3261     0741  00F3               	movwf	??___simple_search_fl
  3262     0742  0A84               	incf	4,f
  3263     0743  0800               	movf	0,w
  3264     0744  00F4               	movwf	??___simple_search_fl+1
  3265     0745  0871               	movf	___simple_search_fl@n,w
  3266     0746  0273               	subwf	??___simple_search_fl,w
  3267     0747  00F5               	movwf	??___simple_search_fl+2
  3268     0748  0872               	movf	___simple_search_fl@n+1,w
  3269     0749  1C03               	skipc
  3270     074A  0A72               	incf	___simple_search_fl@n+1,w
  3271     074B  0274               	subwf	??___simple_search_fl+1,w
  3272     074C  00F6               	movwf	??___simple_search_fl+3
  3273     074D  3000               	movlw	0
  3274     074E  0276               	subwf	??___simple_search_fl+3,w
  3275     074F  3005               	movlw	5
  3276     0750  1903               	skipnz
  3277     0751  0275               	subwf	??___simple_search_fl+2,w
  3278     0752  1C03               	skipc
  3279     0753  2F55               	goto	u631
  3280     0754  2F56               	goto	u630
  3281     0755                     u631:
  3282     0755  2FAE               	goto	l738
  3283     0756                     u630:
  3284     0756                     l1323:
  3285     0756  082C               	movf	___simple_search_fl@best,w
  3286     0757  0084               	movwf	4
  3287     0758  1783               	bsf	3,7
  3288     0759  1C2D               	btfss	___simple_search_fl@best+1,0
  3289     075A  1383               	bcf	3,7
  3290     075B  0800               	movf	0,w
  3291     075C  00F3               	movwf	??___simple_search_fl
  3292     075D  0A84               	incf	4,f
  3293     075E  0800               	movf	0,w
  3294     075F  00F4               	movwf	??___simple_search_fl+1
  3295     0760  0871               	movf	___simple_search_fl@n,w
  3296     0761  0273               	subwf	??___simple_search_fl,w
  3297     0762  00F5               	movwf	??___simple_search_fl+2
  3298     0763  0872               	movf	___simple_search_fl@n+1,w
  3299     0764  1C03               	skipc
  3300     0765  0A72               	incf	___simple_search_fl@n+1,w
  3301     0766  0274               	subwf	??___simple_search_fl+1,w
  3302     0767  00F6               	movwf	??___simple_search_fl+3
  3303     0768  0875               	movf	??___simple_search_fl+2,w
  3304     0769  3EFE               	addlw	254
  3305     076A  00A0               	movwf	___simple_search_fl@remaining_size
  3306     076B  0876               	movf	??___simple_search_fl+3,w
  3307     076C  1803               	skipnc
  3308     076D  3E01               	addlw	1
  3309     076E  3EFF               	addlw	255
  3310     076F  00A1               	movwf	___simple_search_fl@remaining_size+1
  3311     0770                     l1325:
  3312     0770  082C               	movf	___simple_search_fl@best,w
  3313     0771  0084               	movwf	4
  3314     0772  1783               	bsf	3,7
  3315     0773  1C2D               	btfss	___simple_search_fl@best+1,0
  3316     0774  1383               	bcf	3,7
  3317     0775  0871               	movf	___simple_search_fl@n,w
  3318     0776  0080               	movwf	0
  3319     0777  0A84               	incf	4,f
  3320     0778  0872               	movf	___simple_search_fl@n+1,w
  3321     0779  0080               	movwf	0
  3322     077A                     l1327:
  3323     077A  082C               	movf	___simple_search_fl@best,w
  3324     077B  0084               	movwf	4
  3325     077C  1783               	bsf	3,7
  3326     077D  1C2D               	btfss	___simple_search_fl@best+1,0
  3327     077E  1383               	bcf	3,7
  3328     077F  0800               	movf	0,w
  3329     0780  072C               	addwf	___simple_search_fl@best,w
  3330     0781  00F3               	movwf	??___simple_search_fl
  3331     0782  082D               	movf	___simple_search_fl@best+1,w
  3332     0783  1803               	skipnc
  3333     0784  3E01               	addlw	1
  3334     0785  00F4               	movwf	??___simple_search_fl+1
  3335     0786  0873               	movf	??___simple_search_fl,w
  3336     0787  3E02               	addlw	2
  3337     0788  00A4               	movwf	___simple_search_fl@split
  3338     0789  0874               	movf	??___simple_search_fl+1,w
  3339     078A  1803               	skipnc
  3340     078B  3E01               	addlw	1
  3341     078C  3E00               	addlw	0
  3342     078D  00A5               	movwf	___simple_search_fl@split+1
  3343     078E  0824               	movf	___simple_search_fl@split,w
  3344     078F  0084               	movwf	4
  3345     0790  1783               	bsf	3,7
  3346     0791  1C25               	btfss	___simple_search_fl@split+1,0
  3347     0792  1383               	bcf	3,7
  3348     0793  0820               	movf	___simple_search_fl@remaining_size,w
  3349     0794  0080               	movwf	0
  3350     0795  0A84               	incf	4,f
  3351     0796  0821               	movf	___simple_search_fl@remaining_size+1,w
  3352     0797  0080               	movwf	0
  3353     0798                     l1329:
  3354     0798  0824               	movf	___simple_search_fl@split,w
  3355     0799  3E02               	addlw	2
  3356     079A  00F3               	movwf	??___simple_search_fl
  3357     079B  0825               	movf	___simple_search_fl@split+1,w
  3358     079C  1803               	skipnc
  3359     079D  3E01               	addlw	1
  3360     079E  3E00               	addlw	0
  3361     079F  00F4               	movwf	??___simple_search_fl+1
  3362     07A0  0873               	movf	??___simple_search_fl,w
  3363     07A1  0084               	movwf	4
  3364     07A2  1783               	bsf	3,7
  3365     07A3  1C74               	btfss	??___simple_search_fl+1,0
  3366     07A4  1383               	bcf	3,7
  3367     07A5  0828               	movf	___simple_search_fl@next,w
  3368     07A6  0080               	movwf	0
  3369     07A7  0A84               	incf	4,f
  3370     07A8  0829               	movf	___simple_search_fl@next+1,w
  3371     07A9  0080               	movwf	0
  3372     07AA                     l1331:
  3373     07AA  0824               	movf	___simple_search_fl@split,w
  3374     07AB  00A8               	movwf	___simple_search_fl@next
  3375     07AC  0825               	movf	___simple_search_fl@split+1,w
  3376     07AD  00A9               	movwf	___simple_search_fl@next+1
  3377     07AE                     l738:
  3378     07AE  082D               	movf	___simple_search_fl@best+1,w
  3379     07AF  066E               	xorwf	___freelist+1,w
  3380     07B0  1D03               	skipz
  3381     07B1  2FB4               	goto	u645
  3382     07B2  082C               	movf	___simple_search_fl@best,w
  3383     07B3  066D               	xorwf	___freelist,w
  3384     07B4                     u645:
  3385     07B4  1D03               	skipz
  3386     07B5  2FB7               	goto	u641
  3387     07B6  2FB8               	goto	u640
  3388     07B7                     u641:
  3389     07B7  2FBD               	goto	l1335
  3390     07B8                     u640:
  3391     07B8                     l1333:
  3392     07B8  0828               	movf	___simple_search_fl@next,w
  3393     07B9  00ED               	movwf	___freelist
  3394     07BA  0829               	movf	___simple_search_fl@next+1,w
  3395     07BB  00EE               	movwf	___freelist+1
  3396     07BC  2FCF               	goto	l1337
  3397     07BD                     l1335:
  3398     07BD  0822               	movf	___simple_search_fl@best_last,w
  3399     07BE  3E02               	addlw	2
  3400     07BF  00F3               	movwf	??___simple_search_fl
  3401     07C0  0823               	movf	___simple_search_fl@best_last+1,w
  3402     07C1  1803               	skipnc
  3403     07C2  3E01               	addlw	1
  3404     07C3  3E00               	addlw	0
  3405     07C4  00F4               	movwf	??___simple_search_fl+1
  3406     07C5  0873               	movf	??___simple_search_fl,w
  3407     07C6  0084               	movwf	4
  3408     07C7  1783               	bsf	3,7
  3409     07C8  1C74               	btfss	??___simple_search_fl+1,0
  3410     07C9  1383               	bcf	3,7
  3411     07CA  0828               	movf	___simple_search_fl@next,w
  3412     07CB  0080               	movwf	0
  3413     07CC  0A84               	incf	4,f
  3414     07CD  0829               	movf	___simple_search_fl@next+1,w
  3415     07CE  0080               	movwf	0
  3416     07CF                     l1337:
  3417     07CF  082C               	movf	___simple_search_fl@best,w
  3418     07D0  3E02               	addlw	2
  3419     07D1  00F1               	movwf	?___simple_search_fl
  3420     07D2  082D               	movf	___simple_search_fl@best+1,w
  3421     07D3  1803               	skipnc
  3422     07D4  3E01               	addlw	1
  3423     07D5  3E00               	addlw	0
  3424     07D6  00F2               	movwf	?___simple_search_fl+1
  3425     07D7                     l727:
  3426     07D7  0008               	return
  3427     07D8                     __end_of___simple_search_fl:
  3428                           
  3429                           	psect	text13
  3430     00DB                     __ptext13:	
  3431 ;; *************** function ___expand_heap *****************
  3432 ;; Defined at:
  3433 ;;		line 14 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/expand_heap.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;  pn              1    0[COMMON] PTR unsigned int 
  3436 ;;		 -> malloc@m(2), 
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;  new_brkp        2    3[COMMON] PTR unsigned char 
  3439 ;;		 -> __heap_hi(0), NULL(0), 
  3440 ;;  n               2    1[COMMON] unsigned int 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2    0[COMMON] PTR void 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3450 ;;      Params:         1       0       0       0       0
  3451 ;;      Locals:         4       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0
  3453 ;;      Totals:         5       0       0       0       0
  3454 ;;Total ram usage:        5 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_malloc
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463     00DB                     ___expand_heap:	
  3464                           ;psect for function ___expand_heap
  3465                           
  3466     00DB                     l1345:	
  3467                           ;incstack = 0
  3468                           ; Regs used in ___expand_heap: [wreg-fsr0h+status,2+status,0]
  3469                           
  3470     00DB  0871               	movf	___expand_heap@pn,w
  3471     00DC  0084               	movwf	4
  3472     00DD  1383               	bcf	3,7	;select IRP bank0
  3473     00DE  0800               	movf	0,w
  3474     00DF  00F2               	movwf	___expand_heap@n
  3475     00E0  0A84               	incf	4,f
  3476     00E1  0800               	movf	0,w
  3477     00E2  00F3               	movwf	___expand_heap@n+1
  3478     00E3                     l1347:
  3479     00E3  1283               	bcf	3,5	;RP0=0, select bank0
  3480     00E4  1303               	bcf	3,6	;RP1=0, select bank0
  3481     00E5  0869               	movf	_brkp,w
  3482     00E6  046A               	iorwf	_brkp+1,w
  3483     00E7  1D03               	btfss	3,2
  3484     00E8  28EA               	goto	u651
  3485     00E9  28EB               	goto	u650
  3486     00EA                     u651:
  3487     00EA  28EF               	goto	l786
  3488     00EB                     u650:
  3489     00EB                     l1349:
  3490     00EB  3070               	movlw	low ___heap_hi
  3491     00EC  00E9               	movwf	_brkp
  3492     00ED  3001               	movlw	high ___heap_hi
  3493     00EE  00EA               	movwf	_brkp+1
  3494     00EF                     l786:
  3495     00EF  3000               	movlw	0
  3496     00F0  0273               	subwf	___expand_heap@n+1,w
  3497     00F1  3004               	movlw	4
  3498     00F2  1903               	skipnz
  3499     00F3  0272               	subwf	___expand_heap@n,w
  3500     00F4  1803               	skipnc
  3501     00F5  28F7               	goto	u661
  3502     00F6  28F8               	goto	u660
  3503     00F7                     u661:
  3504     00F7  28FC               	goto	l1353
  3505     00F8                     u660:
  3506     00F8                     l1351:
  3507     00F8  3004               	movlw	4
  3508     00F9  00F2               	movwf	___expand_heap@n
  3509     00FA  3000               	movlw	0
  3510     00FB  00F3               	movwf	___expand_heap@n+1
  3511     00FC                     l1353:
  3512     00FC  0872               	movf	___expand_heap@n,w
  3513     00FD  0269               	subwf	_brkp,w
  3514     00FE  00F4               	movwf	___expand_heap@new_brkp
  3515     00FF  086A               	movf	_brkp+1,w
  3516     0100  1C03               	skipc
  3517     0101  036A               	decf	_brkp+1,w
  3518     0102  00F5               	movwf	___expand_heap@new_brkp+1
  3519     0103                     l1355:
  3520     0103  3001               	movlw	high ___heap_lo
  3521     0104  0275               	subwf	___expand_heap@new_brkp+1,w
  3522     0105  3010               	movlw	low ___heap_lo
  3523     0106  1903               	skipnz
  3524     0107  0274               	subwf	___expand_heap@new_brkp,w
  3525     0108  1C03               	skipc
  3526     0109  290B               	goto	u671
  3527     010A  290C               	goto	u670
  3528     010B                     u671:
  3529     010B  2916               	goto	l1359
  3530     010C                     u670:
  3531     010C                     l1357:
  3532     010C  086A               	movf	_brkp+1,w
  3533     010D  0275               	subwf	___expand_heap@new_brkp+1,w
  3534     010E  1D03               	skipz
  3535     010F  2912               	goto	u685
  3536     0110  0869               	movf	_brkp,w
  3537     0111  0274               	subwf	___expand_heap@new_brkp,w
  3538     0112                     u685:
  3539     0112  1C03               	skipc
  3540     0113  2915               	goto	u681
  3541     0114  2916               	goto	u680
  3542     0115                     u681:
  3543     0115  291F               	goto	l1365
  3544     0116                     u680:
  3545     0116                     l1359:
  3546     0116  300C               	movlw	12
  3547     0117  1683               	bsf	3,5	;RP0=1, select bank1
  3548     0118  1303               	bcf	3,6	;RP1=0, select bank1
  3549     0119  00AF               	movwf	_errno^(0+128)
  3550     011A  3000               	movlw	0
  3551     011B  00B0               	movwf	(_errno^(0+128)+1)
  3552     011C                     l1361:
  3553     011C  01F1               	clrf	?___expand_heap
  3554     011D  01F2               	clrf	?___expand_heap+1
  3555     011E  2927               	goto	l791
  3556     011F                     l1365:
  3557     011F  0874               	movf	___expand_heap@new_brkp,w
  3558     0120  00E9               	movwf	_brkp
  3559     0121  0875               	movf	___expand_heap@new_brkp+1,w
  3560     0122  00EA               	movwf	_brkp+1
  3561     0123  0869               	movf	_brkp,w
  3562     0124  00F1               	movwf	?___expand_heap
  3563     0125  086A               	movf	_brkp+1,w
  3564     0126  00F2               	movwf	?___expand_heap+1
  3565     0127                     l791:
  3566     0127  0008               	return
  3567     0128                     __end_of___expand_heap:
  3568                           
  3569                           	psect	text14
  3570     0F9B                     __ptext14:	
  3571 ;; *************** function ___wmul *****************
  3572 ;; Defined at:
  3573 ;;		line 15 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/Umul16.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  multiplier      2    0[COMMON] unsigned int 
  3576 ;;  multiplicand    2    2[COMMON] unsigned int 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  product         2    4[COMMON] unsigned int 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  2    0[COMMON] unsigned int 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3588 ;;      Params:         4       0       0       0       0
  3589 ;;      Locals:         2       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0
  3591 ;;      Totals:         6       0       0       0       0
  3592 ;;Total ram usage:        6 bytes
  3593 ;; Hardware stack levels used: 1
  3594 ;; This function calls:
  3595 ;;		Nothing
  3596 ;; This function is called by:
  3597 ;;		_calloc
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601     0F9B                     ___wmul:	
  3602                           ;psect for function ___wmul
  3603                           
  3604     0F9B                     l1371:	
  3605                           ;incstack = 0
  3606                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3607                           
  3608     0F9B  01F5               	clrf	___wmul@product
  3609     0F9C  01F6               	clrf	___wmul@product+1
  3610     0F9D                     l1373:
  3611     0F9D  1C71               	btfss	___wmul@multiplier,0
  3612     0F9E  2FA0               	goto	u701
  3613     0F9F  2FA1               	goto	u700
  3614     0FA0                     u701:
  3615     0FA0  2FA7               	goto	l257
  3616     0FA1                     u700:
  3617     0FA1                     l1375:
  3618     0FA1  0873               	movf	___wmul@multiplicand,w
  3619     0FA2  07F5               	addwf	___wmul@product,f
  3620     0FA3  1803               	skipnc
  3621     0FA4  0AF6               	incf	___wmul@product+1,f
  3622     0FA5  0874               	movf	___wmul@multiplicand+1,w
  3623     0FA6  07F6               	addwf	___wmul@product+1,f
  3624     0FA7                     l257:
  3625     0FA7  3001               	movlw	1
  3626     0FA8                     u715:
  3627     0FA8  1003               	clrc
  3628     0FA9  0DF3               	rlf	___wmul@multiplicand,f
  3629     0FAA  0DF4               	rlf	___wmul@multiplicand+1,f
  3630     0FAB  3EFF               	addlw	-1
  3631     0FAC  1D03               	skipz
  3632     0FAD  2FA8               	goto	u715
  3633     0FAE                     l1377:
  3634     0FAE  3001               	movlw	1
  3635     0FAF                     u725:
  3636     0FAF  1003               	clrc
  3637     0FB0  0CF2               	rrf	___wmul@multiplier+1,f
  3638     0FB1  0CF1               	rrf	___wmul@multiplier,f
  3639     0FB2  3EFF               	addlw	-1
  3640     0FB3  1D03               	skipz
  3641     0FB4  2FAF               	goto	u725
  3642     0FB5                     l1379:
  3643     0FB5  0871               	movf	___wmul@multiplier,w
  3644     0FB6  0472               	iorwf	___wmul@multiplier+1,w
  3645     0FB7  1D03               	btfss	3,2
  3646     0FB8  2FBA               	goto	u731
  3647     0FB9  2FBB               	goto	u730
  3648     0FBA                     u731:
  3649     0FBA  2F9D               	goto	l1373
  3650     0FBB                     u730:
  3651     0FBB                     l1381:
  3652     0FBB  0876               	movf	___wmul@product+1,w
  3653     0FBC  00F2               	movwf	?___wmul+1
  3654     0FBD  0875               	movf	___wmul@product,w
  3655     0FBE  00F1               	movwf	?___wmul
  3656     0FBF                     l259:
  3657     0FBF  0008               	return
  3658     0FC0                     __end_of___wmul:
  3659                           
  3660                           	psect	text15
  3661     0006                     __ptext15:	
  3662 ;; *************** function _CopyArray *****************
  3663 ;; Defined at:
  3664 ;;		line 80 in file "shape.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  array_          2    0[COMMON] PTR unsigned char 
  3667 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3668 ;;  res             2    2[COMMON] PTR unsigned char 
  3669 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), main@square_1(3), 
  3670 ;;  countElemntA    2    4[COMMON] int 
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;  y               2    0[BANK0 ] int 
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      void 
  3675 ;; Registers used:
  3676 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3682 ;;      Params:         6       0       0       0       0
  3683 ;;      Locals:         0       2       0       0       0
  3684 ;;      Temps:          7       0       0       0       0
  3685 ;;      Totals:        13       2       0       0       0
  3686 ;;Total ram usage:       15 bytes
  3687 ;; Hardware stack levels used: 1
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_ChangeOfCoordinates
  3692 ;;		_Rotate
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696     0006                     _CopyArray:	
  3697                           ;psect for function _CopyArray
  3698                           
  3699     0006                     l1455:	
  3700                           ;incstack = 0
  3701                           ; Regs used in _CopyArray: [wreg-fsr0h+status,2+status,0]
  3702                           
  3703                           
  3704                           ;shape.c: 81:     for(int y = 0; y < countElemntArray; y++){
  3705     0006  1283               	bcf	3,5	;RP0=0, select bank0
  3706     0007  1303               	bcf	3,6	;RP1=0, select bank0
  3707     0008  01A0               	clrf	CopyArray@y
  3708     0009  01A1               	clrf	CopyArray@y+1
  3709     000A  283D               	goto	l1461
  3710     000B                     l1457:
  3711                           
  3712                           ;shape.c: 82:         array_[y] = res[y];
  3713     000B  1283               	bcf	3,5	;RP0=0, select bank0
  3714     000C  1303               	bcf	3,6	;RP1=0, select bank0
  3715     000D  0820               	movf	CopyArray@y,w
  3716     000E  0773               	addwf	CopyArray@res,w
  3717     000F  00F8               	movwf	??_CopyArray+1
  3718     0010  0874               	movf	CopyArray@res+1,w
  3719     0011  00F7               	movwf	??_CopyArray
  3720     0012  1803               	skipnc
  3721     0013  0AF7               	incf	??_CopyArray,f
  3722     0014  1FA0               	btfss	CopyArray@y,7
  3723     0015  2817               	goto	u830
  3724     0016  03F7               	decf	??_CopyArray,f
  3725     0017                     u830:
  3726     0017  0877               	movf	??_CopyArray,w
  3727     0018  00F9               	movwf	??_CopyArray+2
  3728     0019  0878               	movf	??_CopyArray+1,w
  3729     001A  0084               	movwf	4
  3730     001B  1783               	bsf	3,7
  3731     001C  1C79               	btfss	??_CopyArray+2,0
  3732     001D  1383               	bcf	3,7
  3733     001E  0800               	movf	0,w
  3734     001F  00FA               	movwf	??_CopyArray+3
  3735     0020  1283               	bcf	3,5	;RP0=0, select bank0
  3736     0021  1303               	bcf	3,6	;RP1=0, select bank0
  3737     0022  0820               	movf	CopyArray@y,w
  3738     0023  0771               	addwf	CopyArray@array_,w
  3739     0024  00FC               	movwf	??_CopyArray+5
  3740     0025  0872               	movf	CopyArray@array_+1,w
  3741     0026  00FB               	movwf	??_CopyArray+4
  3742     0027  1803               	skipnc
  3743     0028  0AFB               	incf	??_CopyArray+4,f
  3744     0029  1FA0               	btfss	CopyArray@y,7
  3745     002A  282C               	goto	u840
  3746     002B  03FB               	decf	??_CopyArray+4,f
  3747     002C                     u840:
  3748     002C  087B               	movf	??_CopyArray+4,w
  3749     002D  00FD               	movwf	??_CopyArray+6
  3750     002E  087C               	movf	??_CopyArray+5,w
  3751     002F  0084               	movwf	4
  3752     0030  1783               	bsf	3,7
  3753     0031  1C7D               	btfss	??_CopyArray+6,0
  3754     0032  1383               	bcf	3,7
  3755     0033  087A               	movf	??_CopyArray+3,w
  3756     0034  0080               	movwf	0
  3757     0035                     l1459:
  3758                           
  3759                           ;shape.c: 83:     }
  3760     0035  3001               	movlw	1
  3761     0036  1283               	bcf	3,5	;RP0=0, select bank0
  3762     0037  1303               	bcf	3,6	;RP1=0, select bank0
  3763     0038  07A0               	addwf	CopyArray@y,f
  3764     0039  1803               	skipnc
  3765     003A  0AA1               	incf	CopyArray@y+1,f
  3766     003B  3000               	movlw	0
  3767     003C  07A1               	addwf	CopyArray@y+1,f
  3768     003D                     l1461:
  3769     003D  0821               	movf	CopyArray@y+1,w
  3770     003E  3A80               	xorlw	128
  3771     003F  00F7               	movwf	??_CopyArray
  3772     0040  0876               	movf	CopyArray@countElemntArray+1,w
  3773     0041  3A80               	xorlw	128
  3774     0042  0277               	subwf	??_CopyArray,w
  3775     0043  1D03               	skipz
  3776     0044  2847               	goto	u855
  3777     0045  0875               	movf	CopyArray@countElemntArray,w
  3778     0046  0220               	subwf	CopyArray@y,w
  3779     0047                     u855:
  3780     0047  1C03               	skipc
  3781     0048  284A               	goto	u851
  3782     0049  284B               	goto	u850
  3783     004A                     u851:
  3784     004A  280B               	goto	l1457
  3785     004B                     u850:
  3786     004B                     l171:
  3787     004B  0008               	return
  3788     004C                     __end_of_CopyArray:
  3789                           
  3790                           	psect	text16
  3791     0201                     __ptext16:	
  3792 ;; *************** function _Reverse *****************
  3793 ;; Defined at:
  3794 ;;		line 70 in file "shape.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  array_          2    0[COMMON] PTR unsigned char 
  3797 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3798 ;;  countElemntA    2    2[COMMON] int 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;  t               1    0[BANK0 ] unsigned char 
  3801 ;;  j               2    3[BANK0 ] int 
  3802 ;;  i               2    1[BANK0 ] int 
  3803 ;; Return value:  Size  Location     Type
  3804 ;;                  1    wreg      void 
  3805 ;; Registers used:
  3806 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/0
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3812 ;;      Params:         4       0       0       0       0
  3813 ;;      Locals:         0       5       0       0       0
  3814 ;;      Temps:          7       0       0       0       0
  3815 ;;      Totals:        11       5       0       0       0
  3816 ;;Total ram usage:       16 bytes
  3817 ;; Hardware stack levels used: 1
  3818 ;; This function calls:
  3819 ;;		Nothing
  3820 ;; This function is called by:
  3821 ;;		_RotateDirection
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825     0201                     _Reverse:	
  3826                           ;psect for function _Reverse
  3827                           
  3828     0201                     l1499:	
  3829                           ;incstack = 0
  3830                           ; Regs used in _Reverse: [wreg-fsr0h+status,2+status,0]
  3831                           
  3832                           
  3833                           ;shape.c: 70: void Reverse(char * array_, int countElemntArray);shape.c: 71: {;shape.c: 
      +                          72:     for(int i = 0, j = countElemntArray - 1; i < j; i++, j--)
  3834     0201  1283               	bcf	3,5	;RP0=0, select bank0
  3835     0202  1303               	bcf	3,6	;RP1=0, select bank0
  3836     0203  01A1               	clrf	Reverse@i
  3837     0204  01A2               	clrf	Reverse@i+1
  3838     0205                     l1501:
  3839     0205  0873               	movf	Reverse@countElemntArray,w
  3840     0206  3EFF               	addlw	255
  3841     0207  00A3               	movwf	Reverse@j
  3842     0208  0874               	movf	Reverse@countElemntArray+1,w
  3843     0209  1803               	skipnc
  3844     020A  3E01               	addlw	1
  3845     020B  3EFF               	addlw	255
  3846     020C  00A4               	movwf	Reverse@j+1
  3847     020D  2A70               	goto	l1509
  3848     020E                     l1503:
  3849                           
  3850                           ;shape.c: 73:     {;shape.c: 74:         char t = array_[i];
  3851     020E  1283               	bcf	3,5	;RP0=0, select bank0
  3852     020F  1303               	bcf	3,6	;RP1=0, select bank0
  3853     0210  0821               	movf	Reverse@i,w
  3854     0211  0771               	addwf	Reverse@array_,w
  3855     0212  00F6               	movwf	??_Reverse+1
  3856     0213  0872               	movf	Reverse@array_+1,w
  3857     0214  00F5               	movwf	??_Reverse
  3858     0215  1803               	skipnc
  3859     0216  0AF5               	incf	??_Reverse,f
  3860     0217  1FA1               	btfss	Reverse@i,7
  3861     0218  2A1A               	goto	u900
  3862     0219  03F5               	decf	??_Reverse,f
  3863     021A                     u900:
  3864     021A  0875               	movf	??_Reverse,w
  3865     021B  00F7               	movwf	??_Reverse+2
  3866     021C  0876               	movf	??_Reverse+1,w
  3867     021D  0084               	movwf	4
  3868     021E  1783               	bsf	3,7
  3869     021F  1C77               	btfss	??_Reverse+2,0
  3870     0220  1383               	bcf	3,7
  3871     0221  0800               	movf	0,w
  3872     0222  1283               	bcf	3,5	;RP0=0, select bank0
  3873     0223  1303               	bcf	3,6	;RP1=0, select bank0
  3874     0224  00A0               	movwf	Reverse@t
  3875                           
  3876                           ;shape.c: 75:         array_[i] = array_[j];
  3877     0225  0823               	movf	Reverse@j,w
  3878     0226  0771               	addwf	Reverse@array_,w
  3879     0227  00F6               	movwf	??_Reverse+1
  3880     0228  0872               	movf	Reverse@array_+1,w
  3881     0229  00F5               	movwf	??_Reverse
  3882     022A  1803               	skipnc
  3883     022B  0AF5               	incf	??_Reverse,f
  3884     022C  1FA3               	btfss	Reverse@j,7
  3885     022D  2A2F               	goto	u910
  3886     022E  03F5               	decf	??_Reverse,f
  3887     022F                     u910:
  3888     022F  0875               	movf	??_Reverse,w
  3889     0230  00F7               	movwf	??_Reverse+2
  3890     0231  0876               	movf	??_Reverse+1,w
  3891     0232  0084               	movwf	4
  3892     0233  1783               	bsf	3,7
  3893     0234  1C77               	btfss	??_Reverse+2,0
  3894     0235  1383               	bcf	3,7
  3895     0236  0800               	movf	0,w
  3896     0237  00F8               	movwf	??_Reverse+3
  3897     0238  1283               	bcf	3,5	;RP0=0, select bank0
  3898     0239  1303               	bcf	3,6	;RP1=0, select bank0
  3899     023A  0821               	movf	Reverse@i,w
  3900     023B  0771               	addwf	Reverse@array_,w
  3901     023C  00FA               	movwf	??_Reverse+5
  3902     023D  0872               	movf	Reverse@array_+1,w
  3903     023E  00F9               	movwf	??_Reverse+4
  3904     023F  1803               	skipnc
  3905     0240  0AF9               	incf	??_Reverse+4,f
  3906     0241  1FA1               	btfss	Reverse@i,7
  3907     0242  2A44               	goto	u920
  3908     0243  03F9               	decf	??_Reverse+4,f
  3909     0244                     u920:
  3910     0244  0879               	movf	??_Reverse+4,w
  3911     0245  00FB               	movwf	??_Reverse+6
  3912     0246  087A               	movf	??_Reverse+5,w
  3913     0247  0084               	movwf	4
  3914     0248  1783               	bsf	3,7
  3915     0249  1C7B               	btfss	??_Reverse+6,0
  3916     024A  1383               	bcf	3,7
  3917     024B  0878               	movf	??_Reverse+3,w
  3918     024C  0080               	movwf	0
  3919                           
  3920                           ;shape.c: 76:         array_[j] = t;
  3921     024D  1283               	bcf	3,5	;RP0=0, select bank0
  3922     024E  1303               	bcf	3,6	;RP1=0, select bank0
  3923     024F  0823               	movf	Reverse@j,w
  3924     0250  0771               	addwf	Reverse@array_,w
  3925     0251  00F6               	movwf	??_Reverse+1
  3926     0252  0872               	movf	Reverse@array_+1,w
  3927     0253  00F5               	movwf	??_Reverse
  3928     0254  1803               	skipnc
  3929     0255  0AF5               	incf	??_Reverse,f
  3930     0256  1FA3               	btfss	Reverse@j,7
  3931     0257  2A59               	goto	u930
  3932     0258  03F5               	decf	??_Reverse,f
  3933     0259                     u930:
  3934     0259  0875               	movf	??_Reverse,w
  3935     025A  00F7               	movwf	??_Reverse+2
  3936     025B  0876               	movf	??_Reverse+1,w
  3937     025C  0084               	movwf	4
  3938     025D  1783               	bsf	3,7
  3939     025E  1C77               	btfss	??_Reverse+2,0
  3940     025F  1383               	bcf	3,7
  3941     0260  1283               	bcf	3,5	;RP0=0, select bank0
  3942     0261  1303               	bcf	3,6	;RP1=0, select bank0
  3943     0262  0820               	movf	Reverse@t,w
  3944     0263  0080               	movwf	0
  3945     0264                     l1505:
  3946                           
  3947                           ;shape.c: 77:     }
  3948     0264  3001               	movlw	1
  3949     0265  07A1               	addwf	Reverse@i,f
  3950     0266  1803               	skipnc
  3951     0267  0AA2               	incf	Reverse@i+1,f
  3952     0268  3000               	movlw	0
  3953     0269  07A2               	addwf	Reverse@i+1,f
  3954     026A                     l1507:
  3955     026A  30FF               	movlw	255
  3956     026B  07A3               	addwf	Reverse@j,f
  3957     026C  1803               	skipnc
  3958     026D  0AA4               	incf	Reverse@j+1,f
  3959     026E  30FF               	movlw	255
  3960     026F  07A4               	addwf	Reverse@j+1,f
  3961     0270                     l1509:
  3962     0270  0822               	movf	Reverse@i+1,w
  3963     0271  3A80               	xorlw	128
  3964     0272  00F5               	movwf	??_Reverse
  3965     0273  0824               	movf	Reverse@j+1,w
  3966     0274  3A80               	xorlw	128
  3967     0275  0275               	subwf	??_Reverse,w
  3968     0276  1D03               	skipz
  3969     0277  2A7A               	goto	u945
  3970     0278  0823               	movf	Reverse@j,w
  3971     0279  0221               	subwf	Reverse@i,w
  3972     027A                     u945:
  3973     027A  1C03               	skipc
  3974     027B  2A7D               	goto	u941
  3975     027C  2A7E               	goto	u940
  3976     027D                     u941:
  3977     027D  2A0E               	goto	l1503
  3978     027E                     u940:
  3979     027E                     l165:
  3980     027E  0008               	return
  3981     027F                     __end_of_Reverse:
  3982                           
  3983                           	psect	text17
  3984     0128                     __ptext17:	
  3985 ;; *************** function _MovieShape *****************
  3986 ;; Defined at:
  3987 ;;		line 32 in file "shape.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  dir             1    wreg     enum E885
  3990 ;;  _shapePositi    2   10[BANK0 ] PTR struct .
  3991 ;;		 -> main@shapePosition(4), 
  3992 ;;  shapeArray      2   12[BANK0 ] PTR unsigned char 
  3993 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  3994 ;;  countElemntA    2   14[BANK0 ] int 
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;  dir             1   12[COMMON] enum E885
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4006 ;;      Params:         0       6       0       0       0
  4007 ;;      Locals:         1       0       0       0       0
  4008 ;;      Temps:          2       0       0       0       0
  4009 ;;      Totals:         3       6       0       0       0
  4010 ;;Total ram usage:        9 bytes
  4011 ;; Hardware stack levels used: 1
  4012 ;; Hardware stack levels required when called: 3
  4013 ;; This function calls:
  4014 ;;		_MovieDown
  4015 ;;		_MovieLeft
  4016 ;;		_MovieRigth
  4017 ;;		_MovieUp
  4018 ;;		_ShowShape
  4019 ;;		_SpiClearMatrix
  4020 ;; This function is called by:
  4021 ;;		_ChangeOfCoordinates
  4022 ;; This function uses a non-reentrant model
  4023 ;;
  4024                           
  4025     0128                     _MovieShape:	
  4026                           ;psect for function _MovieShape
  4027                           
  4028                           
  4029                           ;incstack = 0
  4030                           ; Regs used in _MovieShape: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4031                           ;MovieShape@dir stored from wreg
  4032     0128  00FD               	movwf	MovieShape@dir
  4033     0129                     l1571:
  4034                           
  4035                           ;shape.c: 34:     switch (dir){
  4036     0129  295A               	goto	l1583
  4037     012A                     l1573:
  4038                           
  4039                           ;shape.c: 36:             MovieDown(_shapePosition);
  4040     012A  1283               	bcf	3,5	;RP0=0, select bank0
  4041     012B  1303               	bcf	3,6	;RP1=0, select bank0
  4042     012C  082A               	movf	MovieShape@_shapePosition,w
  4043     012D  00F1               	movwf	MovieDown@_shapePosition
  4044     012E  082B               	movf	MovieShape@_shapePosition+1,w
  4045     012F  00F2               	movwf	MovieDown@_shapePosition+1
  4046     0130  120A  158A  2708  120A  118A  	fcall	_MovieDown
  4047                           
  4048                           ;shape.c: 37:             break;
  4049     0135  2973               	goto	l1585
  4050     0136                     l1575:
  4051                           
  4052                           ;shape.c: 39:             MovieUp(_shapePosition);
  4053     0136  1283               	bcf	3,5	;RP0=0, select bank0
  4054     0137  1303               	bcf	3,6	;RP1=0, select bank0
  4055     0138  082A               	movf	MovieShape@_shapePosition,w
  4056     0139  00F1               	movwf	MovieUp@_shapePosition
  4057     013A  082B               	movf	MovieShape@_shapePosition+1,w
  4058     013B  00F2               	movwf	MovieUp@_shapePosition+1
  4059     013C  120A  158A  2744  120A  118A  	fcall	_MovieUp
  4060                           
  4061                           ;shape.c: 40:             break;
  4062     0141  2973               	goto	l1585
  4063     0142                     l1577:
  4064                           
  4065                           ;shape.c: 42:             MovieLeft(_shapePosition);
  4066     0142  1283               	bcf	3,5	;RP0=0, select bank0
  4067     0143  1303               	bcf	3,6	;RP1=0, select bank0
  4068     0144  082A               	movf	MovieShape@_shapePosition,w
  4069     0145  00F1               	movwf	MovieLeft@_shapePosition
  4070     0146  082B               	movf	MovieShape@_shapePosition+1,w
  4071     0147  00F2               	movwf	MovieLeft@_shapePosition+1
  4072     0148  120A  158A  26E5  120A  118A  	fcall	_MovieLeft
  4073                           
  4074                           ;shape.c: 43:             break;
  4075     014D  2973               	goto	l1585
  4076     014E                     l1579:
  4077                           
  4078                           ;shape.c: 45:             MovieRigth(_shapePosition);
  4079     014E  1283               	bcf	3,5	;RP0=0, select bank0
  4080     014F  1303               	bcf	3,6	;RP1=0, select bank0
  4081     0150  082A               	movf	MovieShape@_shapePosition,w
  4082     0151  00F1               	movwf	MovieRigth@_shapePosition
  4083     0152  082B               	movf	MovieShape@_shapePosition+1,w
  4084     0153  00F2               	movwf	MovieRigth@_shapePosition+1
  4085     0154  120A  158A  26CF  120A  118A  	fcall	_MovieRigth
  4086                           
  4087                           ;shape.c: 46:             break;
  4088     0159  2973               	goto	l1585
  4089     015A                     l1583:
  4090     015A  087D               	movf	MovieShape@dir,w
  4091     015B  00FB               	movwf	??_MovieShape
  4092     015C  01FC               	clrf	??_MovieShape+1
  4093                           
  4094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4095                           ; Switch size 1, requested type "simple"
  4096                           ; Number of cases is 1, Range of values is 0 to 0
  4097                           ; switch strategies available:
  4098                           ; Name         Instructions Cycles
  4099                           ; simple_byte            4     3 (average)
  4100                           ; direct_byte           11     8 (fixed)
  4101                           ; jumptable            260     6 (fixed)
  4102                           ;	Chosen strategy is simple_byte
  4103     015D  087C               	movf	??_MovieShape+1,w
  4104     015E  3A00               	xorlw	0	; case 0
  4105     015F  1903               	skipnz
  4106     0160  2962               	goto	l1761
  4107     0161  2973               	goto	l1585
  4108     0162                     l1761:
  4109                           
  4110                           ; Switch size 1, requested type "simple"
  4111                           ; Number of cases is 5, Range of values is 0 to 4
  4112                           ; switch strategies available:
  4113                           ; Name         Instructions Cycles
  4114                           ; simple_byte           16     9 (average)
  4115                           ; direct_byte           23     8 (fixed)
  4116                           ; jumptable            260     6 (fixed)
  4117                           ;	Chosen strategy is simple_byte
  4118     0162  087B               	movf	??_MovieShape,w
  4119     0163  3A00               	xorlw	0	; case 0
  4120     0164  1903               	skipnz
  4121     0165  292A               	goto	l1573
  4122     0166  3A01               	xorlw	1	; case 1
  4123     0167  1903               	skipnz
  4124     0168  2936               	goto	l1575
  4125     0169  3A03               	xorlw	3	; case 2
  4126     016A  1903               	skipnz
  4127     016B  2942               	goto	l1577
  4128     016C  3A01               	xorlw	1	; case 3
  4129     016D  1903               	skipnz
  4130     016E  294E               	goto	l1579
  4131     016F  3A07               	xorlw	7	; case 4
  4132     0170  1903               	skipnz
  4133     0171  2973               	goto	l1585
  4134     0172  2973               	goto	l1585
  4135     0173                     l1585:
  4136                           
  4137                           ;shape.c: 51:     SpiClearMatrix();
  4138     0173  120A  158A  272E  120A  118A  	fcall	_SpiClearMatrix
  4139     0178                     l1587:
  4140                           
  4141                           ;shape.c: 52:     ShowShape(_shapePosition, countElemntArray, shapeArray);
  4142     0178  1283               	bcf	3,5	;RP0=0, select bank0
  4143     0179  1303               	bcf	3,6	;RP1=0, select bank0
  4144     017A  082A               	movf	MovieShape@_shapePosition,w
  4145     017B  00F5               	movwf	ShowShape@coord
  4146     017C  082B               	movf	MovieShape@_shapePosition+1,w
  4147     017D  00F6               	movwf	ShowShape@coord+1
  4148     017E  082F               	movf	MovieShape@countElemntArray+1,w
  4149     017F  00F8               	movwf	ShowShape@countElemntArray+1
  4150     0180  082E               	movf	MovieShape@countElemntArray,w
  4151     0181  00F7               	movwf	ShowShape@countElemntArray
  4152     0182  082C               	movf	MovieShape@shapeArray,w
  4153     0183  00F9               	movwf	ShowShape@shapeArray
  4154     0184  082D               	movf	MovieShape@shapeArray+1,w
  4155     0185  00FA               	movwf	ShowShape@shapeArray+1
  4156     0186  120A  118A  227F  120A  118A  	fcall	_ShowShape
  4157     018B                     l151:
  4158     018B  0008               	return
  4159     018C                     __end_of_MovieShape:
  4160                           
  4161                           	psect	text18
  4162     0F2E                     __ptext18:	
  4163 ;; *************** function _SpiClearMatrix *****************
  4164 ;; Defined at:
  4165 ;;		line 10 in file "matrix.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;		None
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  i               1    6[COMMON] unsigned char 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      void 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4179 ;;      Params:         0       0       0       0       0
  4180 ;;      Locals:         1       0       0       0       0
  4181 ;;      Temps:          2       0       0       0       0
  4182 ;;      Totals:         3       0       0       0       0
  4183 ;;Total ram usage:        3 bytes
  4184 ;; Hardware stack levels used: 1
  4185 ;; Hardware stack levels required when called: 2
  4186 ;; This function calls:
  4187 ;;		_SendToSegment
  4188 ;; This function is called by:
  4189 ;;		_MatrixInit
  4190 ;;		_MovieShape
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194     0F2E                     _SpiClearMatrix:	
  4195                           ;psect for function _SpiClearMatrix
  4196                           
  4197     0F2E                     l1545:	
  4198                           ;incstack = 0
  4199                           ; Regs used in _SpiClearMatrix: [wreg+status,2+status,0+pclath+cstack]
  4200                           
  4201                           
  4202                           ;matrix.c: 12:   char i = 8;
  4203     0F2E  3008               	movlw	8
  4204     0F2F  00F7               	movwf	SpiClearMatrix@i
  4205     0F30                     l1547:
  4206                           
  4207                           ;matrix.c: 14:   {;matrix.c: 15:     SendToSegment(i, 0x00);
  4208     0F30  0877               	movf	SpiClearMatrix@i,w
  4209     0F31  00F5               	movwf	??_SpiClearMatrix
  4210     0F32  01F6               	clrf	??_SpiClearMatrix+1
  4211     0F33  0875               	movf	??_SpiClearMatrix,w
  4212     0F34  00F2               	movwf	SendToSegment@segment
  4213     0F35  0876               	movf	??_SpiClearMatrix+1,w
  4214     0F36  00F3               	movwf	SendToSegment@segment+1
  4215     0F37  01F4               	clrf	SendToSegment@data
  4216     0F38  120A  158A  271B  120A  158A  	fcall	_SendToSegment
  4217     0F3D                     l1549:
  4218                           
  4219                           ;matrix.c: 16:   } while (--i);
  4220     0F3D  3001               	movlw	1
  4221     0F3E  02F7               	subwf	SpiClearMatrix@i,f
  4222     0F3F  1D03               	btfss	3,2
  4223     0F40  2F42               	goto	u1021
  4224     0F41  2F43               	goto	u1020
  4225     0F42                     u1021:
  4226     0F42  2F30               	goto	l1547
  4227     0F43                     u1020:
  4228     0F43                     l104:
  4229     0F43  0008               	return
  4230     0F44                     __end_of_SpiClearMatrix:
  4231                           
  4232                           	psect	text19
  4233     027F                     __ptext19:	
  4234 ;; *************** function _ShowShape *****************
  4235 ;; Defined at:
  4236 ;;		line 8 in file "shape.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  coord           2    4[COMMON] PTR struct .
  4239 ;;		 -> main@shapePosition(4), 
  4240 ;;  countElemntA    2    6[COMMON] int 
  4241 ;;  shapeArray      2    8[COMMON] PTR unsigned char 
  4242 ;;		 -> __heap_hi$.$next(2), __heap_hi(0), NULL(0), 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  pos             2    8[BANK0 ] int 
  4245 ;;  _pos            2    6[BANK0 ] int 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;                  1    wreg      void 
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4255 ;;      Params:         6       0       0       0       0
  4256 ;;      Locals:         0       4       0       0       0
  4257 ;;      Temps:          0       6       0       0       0
  4258 ;;      Totals:         6      10       0       0       0
  4259 ;;Total ram usage:       16 bytes
  4260 ;; Hardware stack levels used: 1
  4261 ;; Hardware stack levels required when called: 2
  4262 ;; This function calls:
  4263 ;;		_SendToSegment
  4264 ;; This function is called by:
  4265 ;;		_MovieShape
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269     027F                     _ShowShape:	
  4270                           ;psect for function _ShowShape
  4271                           
  4272     027F                     l1551:	
  4273                           ;incstack = 0
  4274                           ; Regs used in _ShowShape: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4275                           
  4276     027F                     l1553:
  4277                           
  4278                           ;shape.c: 10:     for(int pos = 1 + coord->x; pos <= countElemntArray + coord->x; pos++)
      +                          {
  4279     027F  0875               	movf	ShowShape@coord,w
  4280     0280  0084               	movwf	4
  4281     0281  1783               	bsf	3,7
  4282     0282  1C76               	btfss	ShowShape@coord+1,0
  4283     0283  1383               	bcf	3,7
  4284     0284  0800               	movf	0,w
  4285     0285  1283               	bcf	3,5	;RP0=0, select bank0
  4286     0286  1303               	bcf	3,6	;RP1=0, select bank0
  4287     0287  00A0               	movwf	??_ShowShape
  4288     0288  0A84               	incf	4,f
  4289     0289  0800               	movf	0,w
  4290     028A  00A1               	movwf	??_ShowShape+1
  4291     028B  0820               	movf	??_ShowShape,w
  4292     028C  3E01               	addlw	1
  4293     028D  00A8               	movwf	ShowShape@pos
  4294     028E  0821               	movf	??_ShowShape+1,w
  4295     028F  1803               	skipnc
  4296     0290  3E01               	addlw	1
  4297     0291  3E00               	addlw	0
  4298     0292  00A9               	movwf	ShowShape@pos+1
  4299     0293  2AEC               	goto	l1561
  4300     0294                     l1555:
  4301                           
  4302                           ;shape.c: 11:        _pos = pos - 1 - coord->x;
  4303     0294  0875               	movf	ShowShape@coord,w
  4304     0295  0084               	movwf	4
  4305     0296  1783               	bsf	3,7
  4306     0297  1C76               	btfss	ShowShape@coord+1,0
  4307     0298  1383               	bcf	3,7
  4308     0299  0800               	movf	0,w
  4309     029A  1283               	bcf	3,5	;RP0=0, select bank0
  4310     029B  1303               	bcf	3,6	;RP1=0, select bank0
  4311     029C  00A0               	movwf	??_ShowShape
  4312     029D  0A84               	incf	4,f
  4313     029E  0800               	movf	0,w
  4314     029F  00A1               	movwf	??_ShowShape+1
  4315     02A0  0820               	movf	??_ShowShape,w
  4316     02A1  0228               	subwf	ShowShape@pos,w
  4317     02A2  00A2               	movwf	??_ShowShape+2
  4318     02A3  0821               	movf	??_ShowShape+1,w
  4319     02A4  1C03               	skipc
  4320     02A5  0A21               	incf	??_ShowShape+1,w
  4321     02A6  0229               	subwf	ShowShape@pos+1,w
  4322     02A7  00A3               	movwf	??_ShowShape+3
  4323     02A8  0822               	movf	??_ShowShape+2,w
  4324     02A9  3EFF               	addlw	255
  4325     02AA  00A6               	movwf	ShowShape@_pos
  4326     02AB  0823               	movf	??_ShowShape+3,w
  4327     02AC  1803               	skipnc
  4328     02AD  3E01               	addlw	1
  4329     02AE  3EFF               	addlw	255
  4330     02AF  00A7               	movwf	ShowShape@_pos+1
  4331     02B0                     l1557:
  4332                           
  4333                           ;shape.c: 12:        SendToSegment(pos, (char)(shapeArray[_pos] << coord->y));
  4334     02B0  0829               	movf	ShowShape@pos+1,w
  4335     02B1  00F3               	movwf	SendToSegment@segment+1
  4336     02B2  0828               	movf	ShowShape@pos,w
  4337     02B3  00F2               	movwf	SendToSegment@segment
  4338     02B4  0826               	movf	ShowShape@_pos,w
  4339     02B5  0779               	addwf	ShowShape@shapeArray,w
  4340     02B6  00A1               	movwf	??_ShowShape+1
  4341     02B7  087A               	movf	ShowShape@shapeArray+1,w
  4342     02B8  00A0               	movwf	??_ShowShape
  4343     02B9  1803               	skipnc
  4344     02BA  0AA0               	incf	??_ShowShape,f
  4345     02BB  1FA6               	btfss	ShowShape@_pos,7
  4346     02BC  2ABE               	goto	u1030
  4347     02BD  03A0               	decf	??_ShowShape,f
  4348     02BE                     u1030:
  4349     02BE  1283               	bcf	3,5	;RP0=0, select bank0
  4350     02BF  1303               	bcf	3,6	;RP1=0, select bank0
  4351     02C0  0820               	movf	??_ShowShape,w
  4352     02C1  00A2               	movwf	??_ShowShape+2
  4353     02C2  0821               	movf	??_ShowShape+1,w
  4354     02C3  0084               	movwf	4
  4355     02C4  1783               	bsf	3,7
  4356     02C5  1C22               	btfss	??_ShowShape+2,0
  4357     02C6  1383               	bcf	3,7
  4358     02C7  0800               	movf	0,w
  4359     02C8  00A3               	movwf	??_ShowShape+3
  4360     02C9  0875               	movf	ShowShape@coord,w
  4361     02CA  3E02               	addlw	2
  4362     02CB  00A4               	movwf	??_ShowShape+4
  4363     02CC  0876               	movf	ShowShape@coord+1,w
  4364     02CD  1803               	skipnc
  4365     02CE  3E01               	addlw	1
  4366     02CF  3E00               	addlw	0
  4367     02D0  00A5               	movwf	??_ShowShape+5
  4368     02D1  0824               	movf	??_ShowShape+4,w
  4369     02D2  0084               	movwf	4
  4370     02D3  1783               	bsf	3,7
  4371     02D4  1C25               	btfss	??_ShowShape+5,0
  4372     02D5  1383               	bcf	3,7
  4373     02D6  0A00               	incf	0,w
  4374     02D7  2ADA               	goto	u1044
  4375     02D8                     u1045:
  4376     02D8  1003               	clrc
  4377     02D9  0DA3               	rlf	??_ShowShape+3,f
  4378     02DA                     u1044:
  4379     02DA  3EFF               	addlw	-1
  4380     02DB  1D03               	skipz
  4381     02DC  2AD8               	goto	u1045
  4382     02DD  0823               	movf	??_ShowShape+3,w
  4383     02DE  00F4               	movwf	SendToSegment@data
  4384     02DF  120A  158A  271B  120A  118A  	fcall	_SendToSegment
  4385     02E4                     l1559:
  4386                           
  4387                           ;shape.c: 13:     }
  4388     02E4  3001               	movlw	1
  4389     02E5  1283               	bcf	3,5	;RP0=0, select bank0
  4390     02E6  1303               	bcf	3,6	;RP1=0, select bank0
  4391     02E7  07A8               	addwf	ShowShape@pos,f
  4392     02E8  1803               	skipnc
  4393     02E9  0AA9               	incf	ShowShape@pos+1,f
  4394     02EA  3000               	movlw	0
  4395     02EB  07A9               	addwf	ShowShape@pos+1,f
  4396     02EC                     l1561:
  4397     02EC  0875               	movf	ShowShape@coord,w
  4398     02ED  0084               	movwf	4
  4399     02EE  1783               	bsf	3,7
  4400     02EF  1C76               	btfss	ShowShape@coord+1,0
  4401     02F0  1383               	bcf	3,7
  4402     02F1  0800               	movf	0,w
  4403     02F2  00A0               	movwf	??_ShowShape
  4404     02F3  0A84               	incf	4,f
  4405     02F4  0800               	movf	0,w
  4406     02F5  00A1               	movwf	??_ShowShape+1
  4407     02F6  0877               	movf	ShowShape@countElemntArray,w
  4408     02F7  0720               	addwf	??_ShowShape,w
  4409     02F8  00A2               	movwf	??_ShowShape+2
  4410     02F9  0878               	movf	ShowShape@countElemntArray+1,w
  4411     02FA  1803               	skipnc
  4412     02FB  0A78               	incf	ShowShape@countElemntArray+1,w
  4413     02FC  0721               	addwf	??_ShowShape+1,w
  4414     02FD  00A3               	movwf	??_ShowShape+3
  4415     02FE  0823               	movf	??_ShowShape+3,w
  4416     02FF  3A80               	xorlw	128
  4417     0300  00A4               	movwf	??_ShowShape+4
  4418     0301  0829               	movf	ShowShape@pos+1,w
  4419     0302  3A80               	xorlw	128
  4420     0303  0224               	subwf	??_ShowShape+4,w
  4421     0304  1D03               	skipz
  4422     0305  2B08               	goto	u1055
  4423     0306  0828               	movf	ShowShape@pos,w
  4424     0307  0222               	subwf	??_ShowShape+2,w
  4425     0308                     u1055:
  4426     0308  1803               	skipnc
  4427     0309  2B0B               	goto	u1051
  4428     030A  2B0C               	goto	u1050
  4429     030B                     u1051:
  4430     030B  2A94               	goto	l1555
  4431     030C                     u1050:
  4432     030C                     l129:
  4433     030C  0008               	return
  4434     030D                     __end_of_ShowShape:
  4435                           
  4436                           	psect	text20
  4437     0F1B                     __ptext20:	
  4438 ;; *************** function _SendToSegment *****************
  4439 ;; Defined at:
  4440 ;;		line 34 in file "matrix.c"
  4441 ;; Parameters:    Size  Location     Type
  4442 ;;  segment         2    1[COMMON] int 
  4443 ;;  data            1    3[COMMON] unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;		None
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0, pclath, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4455 ;;      Params:         3       0       0       0       0
  4456 ;;      Locals:         0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0
  4458 ;;      Totals:         3       0       0       0       0
  4459 ;;Total ram usage:        3 bytes
  4460 ;; Hardware stack levels used: 1
  4461 ;; Hardware stack levels required when called: 1
  4462 ;; This function calls:
  4463 ;;		_SpiSendByte
  4464 ;; This function is called by:
  4465 ;;		_SpiClearMatrix
  4466 ;;		_MatrixInit
  4467 ;;		_ShowShape
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471     0F1B                     _SendToSegment:	
  4472                           ;psect for function _SendToSegment
  4473                           
  4474     0F1B                     l1493:	
  4475                           ;incstack = 0
  4476                           ; Regs used in _SendToSegment: [wreg+status,2+status,0+pclath+cstack]
  4477                           
  4478                           
  4479                           ;matrix.c: 35:     RA5 = 0;
  4480     0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  4481     0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  4482     0F1D  1285               	bcf	5,5	;volatile
  4483     0F1E                     l1495:
  4484                           
  4485                           ;matrix.c: 36:     SpiSendByte((char)segment);
  4486     0F1E  0872               	movf	SendToSegment@segment,w
  4487     0F1F  120A  158A  26DA  120A  158A  	fcall	_SpiSendByte
  4488                           
  4489                           ;matrix.c: 37:     SpiSendByte(data);
  4490     0F24  0874               	movf	SendToSegment@data,w
  4491     0F25  120A  158A  26DA  120A  158A  	fcall	_SpiSendByte
  4492     0F2A                     l1497:
  4493                           
  4494                           ;matrix.c: 38:     RA5 = 1;
  4495     0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  4496     0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  4497     0F2C  1685               	bsf	5,5	;volatile
  4498     0F2D                     l110:
  4499     0F2D  0008               	return
  4500     0F2E                     __end_of_SendToSegment:
  4501                           
  4502                           	psect	text21
  4503     0EDA                     __ptext21:	
  4504 ;; *************** function _SpiSendByte *****************
  4505 ;; Defined at:
  4506 ;;		line 18 in file "spi.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  data            1    wreg     unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  data            1    0[COMMON] unsigned char 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      void 
  4513 ;; Registers used:
  4514 ;;		wreg
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4520 ;;      Params:         0       0       0       0       0
  4521 ;;      Locals:         1       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0
  4523 ;;      Totals:         1       0       0       0       0
  4524 ;;Total ram usage:        1 bytes
  4525 ;; Hardware stack levels used: 1
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_SendToSegment
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533     0EDA                     _SpiSendByte:	
  4534                           ;psect for function _SpiSendByte
  4535                           
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _SpiSendByte: [wreg]
  4539                           ;SpiSendByte@data stored from wreg
  4540     0EDA  00F1               	movwf	SpiSendByte@data
  4541     0EDB                     l1369:
  4542                           
  4543                           ;spi.c: 19:     SSPBUF = data;
  4544     0EDB  0871               	movf	SpiSendByte@data,w
  4545     0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  4546     0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  4547     0EDE  0093               	movwf	19	;volatile
  4548     0EDF                     l88:	
  4549                           ;spi.c: 20:     while (!SSPIF);
  4550                           
  4551     0EDF  1D8C               	btfss	12,3	;volatile
  4552     0EE0  2EE2               	goto	u691
  4553     0EE1  2EE3               	goto	u690
  4554     0EE2                     u691:
  4555     0EE2  2EDF               	goto	l88
  4556     0EE3                     u690:
  4557     0EE3                     l90:
  4558                           
  4559                           ;spi.c: 21:     SSPIF = 0;
  4560     0EE3  118C               	bcf	12,3	;volatile
  4561     0EE4                     l91:
  4562     0EE4  0008               	return
  4563     0EE5                     __end_of_SpiSendByte:
  4564                           
  4565                           	psect	text22
  4566     0F44                     __ptext22:	
  4567 ;; *************** function _MovieUp *****************
  4568 ;; Defined at:
  4569 ;;		line 20 in file "shape.c"
  4570 ;; Parameters:    Size  Location     Type
  4571 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4572 ;;		 -> main@shapePosition(4), 
  4573 ;; Auto vars:     Size  Location     Type
  4574 ;;		None
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  1    wreg      void 
  4577 ;; Registers used:
  4578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4584 ;;      Params:         2       0       0       0       0
  4585 ;;      Locals:         0       0       0       0       0
  4586 ;;      Temps:          2       0       0       0       0
  4587 ;;      Totals:         4       0       0       0       0
  4588 ;;Total ram usage:        4 bytes
  4589 ;; Hardware stack levels used: 1
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_MovieShape
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597     0F44                     _MovieUp:	
  4598                           ;psect for function _MovieUp
  4599                           
  4600     0F44                     l1565:	
  4601                           ;incstack = 0
  4602                           ; Regs used in _MovieUp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4603                           
  4604                           
  4605                           ;shape.c: 21:     _shapePosition->y--;
  4606     0F44  0871               	movf	MovieUp@_shapePosition,w
  4607     0F45  3E02               	addlw	2
  4608     0F46  00F3               	movwf	??_MovieUp
  4609     0F47  0872               	movf	MovieUp@_shapePosition+1,w
  4610     0F48  1803               	skipnc
  4611     0F49  3E01               	addlw	1
  4612     0F4A  3E00               	addlw	0
  4613     0F4B  00F4               	movwf	??_MovieUp+1
  4614     0F4C  0873               	movf	??_MovieUp,w
  4615     0F4D  0084               	movwf	4
  4616     0F4E  1783               	bsf	3,7
  4617     0F4F  1C74               	btfss	??_MovieUp+1,0
  4618     0F50  1383               	bcf	3,7
  4619     0F51  30FF               	movlw	255
  4620     0F52  0780               	addwf	0,f
  4621     0F53  0F84               	incfsz	4,f
  4622     0F54  0800               	movf	0,w
  4623     0F55  1803               	skipnc
  4624     0F56  0A00               	incf	0,w
  4625     0F57  00FF               	movwf	btemp+1
  4626     0F58  30FF               	movlw	255
  4627     0F59  077F               	addwf	btemp+1,w
  4628     0F5A  0080               	movwf	0
  4629     0F5B  0384               	decf	4,f
  4630     0F5C                     l135:
  4631     0F5C  0008               	return
  4632     0F5D                     __end_of_MovieUp:
  4633                           
  4634                           	psect	text23
  4635     0ECF                     __ptext23:	
  4636 ;; *************** function _MovieRigth *****************
  4637 ;; Defined at:
  4638 ;;		line 28 in file "shape.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4641 ;;		 -> main@shapePosition(4), 
  4642 ;; Auto vars:     Size  Location     Type
  4643 ;;		None
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      void 
  4646 ;; Registers used:
  4647 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4653 ;;      Params:         2       0       0       0       0
  4654 ;;      Locals:         0       0       0       0       0
  4655 ;;      Temps:          0       0       0       0       0
  4656 ;;      Totals:         2       0       0       0       0
  4657 ;;Total ram usage:        2 bytes
  4658 ;; Hardware stack levels used: 1
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_MovieShape
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666     0ECF                     _MovieRigth:	
  4667                           ;psect for function _MovieRigth
  4668                           
  4669     0ECF                     l1569:	
  4670                           ;incstack = 0
  4671                           ; Regs used in _MovieRigth: [wreg-fsr0h+status,2+status,0]
  4672                           
  4673                           
  4674                           ;shape.c: 29:     _shapePosition->x++;
  4675     0ECF  0871               	movf	MovieRigth@_shapePosition,w
  4676     0ED0  0084               	movwf	4
  4677     0ED1  1783               	bsf	3,7
  4678     0ED2  1C72               	btfss	MovieRigth@_shapePosition+1,0
  4679     0ED3  1383               	bcf	3,7
  4680     0ED4  3001               	movlw	1
  4681     0ED5  0780               	addwf	0,f
  4682     0ED6  0A84               	incf	4,f
  4683     0ED7  1803               	skipnc
  4684     0ED8  0A80               	incf	0,f
  4685     0ED9                     l141:
  4686     0ED9  0008               	return
  4687     0EDA                     __end_of_MovieRigth:
  4688                           
  4689                           	psect	text24
  4690     0EE5                     __ptext24:	
  4691 ;; *************** function _MovieLeft *****************
  4692 ;; Defined at:
  4693 ;;		line 24 in file "shape.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4696 ;;		 -> main@shapePosition(4), 
  4697 ;; Auto vars:     Size  Location     Type
  4698 ;;		None
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  1    wreg      void 
  4701 ;; Registers used:
  4702 ;;		wreg, fsr0l, fsr0h, btemp+1
  4703 ;; Tracked objects:
  4704 ;;		On entry : 0/0
  4705 ;;		On exit  : 0/0
  4706 ;;		Unchanged: 0/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4708 ;;      Params:         2       0       0       0       0
  4709 ;;      Locals:         0       0       0       0       0
  4710 ;;      Temps:          0       0       0       0       0
  4711 ;;      Totals:         2       0       0       0       0
  4712 ;;Total ram usage:        2 bytes
  4713 ;; Hardware stack levels used: 1
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_MovieShape
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721     0EE5                     _MovieLeft:	
  4722                           ;psect for function _MovieLeft
  4723                           
  4724     0EE5                     l1567:	
  4725                           ;incstack = 0
  4726                           ; Regs used in _MovieLeft: [wreg-fsr0h+btemp+1]
  4727                           
  4728                           
  4729                           ;shape.c: 25:     _shapePosition->x--;
  4730     0EE5  0871               	movf	MovieLeft@_shapePosition,w
  4731     0EE6  0084               	movwf	4
  4732     0EE7  1783               	bsf	3,7
  4733     0EE8  1C72               	btfss	MovieLeft@_shapePosition+1,0
  4734     0EE9  1383               	bcf	3,7
  4735     0EEA  30FF               	movlw	255
  4736     0EEB  0780               	addwf	0,f
  4737     0EEC  0F84               	incfsz	4,f
  4738     0EED  0800               	movf	0,w
  4739     0EEE  1803               	skipnc
  4740     0EEF  0A00               	incf	0,w
  4741     0EF0  00FF               	movwf	btemp+1
  4742     0EF1  30FF               	movlw	255
  4743     0EF2  077F               	addwf	btemp+1,w
  4744     0EF3  0080               	movwf	0
  4745     0EF4  0384               	decf	4,f
  4746     0EF5                     l138:
  4747     0EF5  0008               	return
  4748     0EF6                     __end_of_MovieLeft:
  4749                           
  4750                           	psect	text25
  4751     0F08                     __ptext25:	
  4752 ;; *************** function _MovieDown *****************
  4753 ;; Defined at:
  4754 ;;		line 16 in file "shape.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  _shapePositi    2    0[COMMON] PTR struct .
  4757 ;;		 -> main@shapePosition(4), 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;		None
  4760 ;; Return value:  Size  Location     Type
  4761 ;;                  1    wreg      void 
  4762 ;; Registers used:
  4763 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4769 ;;      Params:         2       0       0       0       0
  4770 ;;      Locals:         0       0       0       0       0
  4771 ;;      Temps:          2       0       0       0       0
  4772 ;;      Totals:         4       0       0       0       0
  4773 ;;Total ram usage:        4 bytes
  4774 ;; Hardware stack levels used: 1
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_MovieShape
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782     0F08                     _MovieDown:	
  4783                           ;psect for function _MovieDown
  4784                           
  4785     0F08                     l1563:	
  4786                           ;incstack = 0
  4787                           ; Regs used in _MovieDown: [wreg-fsr0h+status,2+status,0]
  4788                           
  4789                           
  4790                           ;shape.c: 17:     _shapePosition->y++;
  4791     0F08  0871               	movf	MovieDown@_shapePosition,w
  4792     0F09  3E02               	addlw	2
  4793     0F0A  00F3               	movwf	??_MovieDown
  4794     0F0B  0872               	movf	MovieDown@_shapePosition+1,w
  4795     0F0C  1803               	skipnc
  4796     0F0D  3E01               	addlw	1
  4797     0F0E  3E00               	addlw	0
  4798     0F0F  00F4               	movwf	??_MovieDown+1
  4799     0F10  0873               	movf	??_MovieDown,w
  4800     0F11  0084               	movwf	4
  4801     0F12  1783               	bsf	3,7
  4802     0F13  1C74               	btfss	??_MovieDown+1,0
  4803     0F14  1383               	bcf	3,7
  4804     0F15  3001               	movlw	1
  4805     0F16  0780               	addwf	0,f
  4806     0F17  0A84               	incf	4,f
  4807     0F18  1803               	skipnc
  4808     0F19  0A80               	incf	0,f
  4809     0F1A                     l132:
  4810     0F1A  0008               	return
  4811     0F1B                     __end_of_MovieDown:
  4812     0002                     ___latbits      equ	2
  4813     007E                     btemp           set	126	;btemp
  4814     007E                     wtemp0          set	126
  4815                           
  4816                           	psect	config
  4817                           
  4818                           ;Config register CONFIG @ 0x2007
  4819                           ;	Oscillator Selection bits
  4820                           ;	FOSC = HS, HS oscillator
  4821                           ;	Watchdog Timer Enable bit
  4822                           ;	WDTE = OFF, WDT disabled
  4823                           ;	Power-up Timer Enable bit
  4824                           ;	PWRTE = OFF, PWRT disabled
  4825                           ;	FLASH Program Memory Code Protection bits
  4826                           ;	CP = OFF, Code protection off
  4827                           ;	Brown-out Reset Enable bit
  4828                           ;	BOREN = OFF, BOR disabled
  4829                           ;	Low Voltage In-Circuit Serial Programming Enable bit
  4830                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4831                           ;	Data EE Memory Code Protection
  4832                           ;	CPD = OFF, Code Protection off
  4833                           ;	FLASH Program Memory Write Enable
  4834                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
  4835                           ;	In-Circuit Debugger Mode bit
  4836                           ;	DEBUG = 0x1, unprogrammed default
  4837     2007                     	org	8199
  4838     2007  3D3A               	dw	15674

Data Sizes:
    Strings     0
    Constant    4
    Data        3
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     73      79
    BANK1            80      9      20
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    calloc@new_ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ChangeOfCoordinates@_figure	PTR unsigned char  size(1) Largest target is 3
		 -> main@square_1(BANK1[3]), 

    ChangeOfCoordinates@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ChangeOfCoordinates@rotateArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    CopyArray@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    CopyArray@res	PTR unsigned char  size(2) Largest target is 3
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), main@square_1(BANK1[3]), NULL(NULL[0]), 

    __expand_heap@new_brkp	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __expand_heap@pn	PTR unsigned int  size(1) Largest target is 2
		 -> malloc@m(BANK0[2]), 

    free@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@c$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    free@cptr	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    free@ptr	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __freelist$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __heap_hi$.$next$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@cur	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@end	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@new	PTR unsigned char  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    malloc@p	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    malloc@sz	PTR unsigned int  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    memset@p	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieDown@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieLeft@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieRigth@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieShape@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    MovieShape@shapeArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    MovieUp@_shapePosition	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    Reverse@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    Rotate@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    Rotate@res	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    RotateDirection@array_	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    S693$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    SetPosition@position	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ShowShape@coord	PTR struct . size(2) Largest target is 4
		 -> main@shapePosition(BANK1[4]), 

    ShowShape@shapeArray	PTR unsigned char  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    ?___simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@best_last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@c$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@last$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split	PTR struct chunk size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    __simple_search_fl@split$.$next$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____expand_heap	PTR void  size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl	PTR void  size(2) Largest target is 2
		 -> __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp____simple_search_fl$.$next	PTR struct chunk size(2) Largest target is 0
		 -> __heap_hi(UNKNOWN), NULL(NULL[0]), 

    sp__calloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 2
		 -> __heap_hi(UNKNOWN), __heap_hi$.$next(UNKNOWN), NULL(NULL[0]), 


Critical Paths under _main in COMMON

    _MatrixInit->_SpiClearMatrix
    _ChangeOfCoordinates->_CopyArray
    _ChangeOfCoordinates->_MovieShape
    _Rotate->_CopyArray
    _calloc->_malloc
    _calloc->_memset
    _memset->___wmul
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape
    _SpiClearMatrix->_SendToSegment
    _ShowShape->_SendToSegment
    _SendToSegment->_SpiSendByte

Critical Paths under _main in BANK0

    _main->_ChangeOfCoordinates
    _ChangeOfCoordinates->_RotateDirection
    _RotateDirection->_Rotate
    _Rotate->_calloc
    _calloc->_malloc
    _malloc->___simple_search_fl
    _MovieShape->_ShowShape

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    7141
                                              0 BANK1      9     9      0
                _ChangeOfCoordinates
                         _MatrixInit
                          _PortBInit
                        _SetPosition
                            _SpiInit
 ---------------------------------------------------------------------------------
 (1) _SpiInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetPosition                                          8     2      6      91
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (1) _PortBInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MatrixInit                                           3     3      0     215
                                              7 COMMON     3     3      0
                      _SendToSegment
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (1) _ChangeOfCoordinates                                 14     9      5    6728
                                             59 BANK0     14     9      5
                          _CopyArray
                         _MovieShape
                    _RotateDirection
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (2) _RotateDirection                                      8     2      6    3218
                                             51 BANK0      8     2      6
                            _Reverse
                             _Rotate
 ---------------------------------------------------------------------------------
 (3) _Rotate                                              21    17      4    2654
                                             30 BANK0     21    17      4
                          _CopyArray
                             _calloc
                               _free
 ---------------------------------------------------------------------------------
 (2) _free                                                12    10      2     290
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (2) _calloc                                               6     2      4    1815
                                             24 BANK0      6     2      4
                             ___wmul
                             _malloc
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6      99
                                              6 COMMON     6     0      6
                                              0 BANK0      2     2      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _malloc                                              14    12      2    1461
                                              8 COMMON     4     2      2
                                             14 BANK0     10    10      0
                      ___expand_heap
                 ___simple_search_fl
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___simple_search_fl                                  22    20      2     827
                                              0 COMMON     8     6      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (4) ___expand_heap                                        5     4      1     136
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      96
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _CopyArray                                           15     9      6     140
                                              0 COMMON    13     7      6
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Reverse                                             16    12      4     273
                                              0 COMMON    11     7      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _MovieShape                                           9     3      6     729
                                             10 COMMON     3     3      0
                                             10 BANK0      6     0      6
                          _MovieDown
                          _MovieLeft
                         _MovieRigth
                            _MovieUp
                          _ShowShape
                     _SpiClearMatrix
 ---------------------------------------------------------------------------------
 (2) _SpiClearMatrix                                       3     3      0     130
                                              4 COMMON     3     3      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _ShowShape                                           16    10      6     312
                                              4 COMMON     6     0      6
                                              0 BANK0     10    10      0
                      _SendToSegment
 ---------------------------------------------------------------------------------
 (3) _SendToSegment                                        3     0      3      85
                                              1 COMMON     3     0      3
                        _SpiSendByte
 ---------------------------------------------------------------------------------
 (4) _SpiSendByte                                          1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MovieUp                                              4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _MovieRigth                                           2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieLeft                                            2     0      2      23
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _MovieDown                                            4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeOfCoordinates
     _CopyArray
     _MovieShape
       _MovieDown
       _MovieLeft
       _MovieRigth
       _MovieUp
       _ShowShape
         _SendToSegment
           _SpiSendByte
       _SpiClearMatrix
         _SendToSegment
     _RotateDirection
       _Reverse
       _Rotate
         _CopyArray
         _calloc
           ___wmul
           _malloc
             ___expand_heap
             ___simple_search_fl
             ___wmul (ARG)
           _memset
             ___wmul (ARG)
         _free
     _calloc
     _free
   _MatrixInit
     _SendToSegment
     _SpiClearMatrix
   _PortBInit
   _SetPosition
   _SpiInit

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               85      0       0      0.0%
BITBANK3            85      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      9      20     25.0%
BITBANK1            80      0       0      0.0%
BANK0               80     73      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              13     13      13    100.0%
BITCOMMON           13      0       0      0.0%
DATA                 0      0     112      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 23 11:54:16 2024

                      _SpiClearMatrix 0F2E                                     pc 0002  
                                  l51 0563                                    l61 0200  
                                  l90 0EE3                                    l91 0EE4  
                                  l68 0ECE                                    l85 0F07  
                                  l88 0EDF                                    fsr 0004  
                 ___wmul@multiplicand 0073                       SpiSendByte@data 0071  
                                 l110 0F2D                                   l104 0F43  
                                 l107 0FFF                                   l123 0F79  
                                 l132 0F1A                                   l141 0ED9  
                                 l135 0F5C                                   l151 018B  
                                 l129 030C                                   l138 0EF5  
                                 l171 004B                                   l165 027E  
                                 l159 03B1                                   l257 0FA7  
                                 l259 0FBF                                   l721 00DA  
                                 l735 0705                                   l727 07D7  
                                 l744 0651                                   l738 07AE  
                                 l770 0456                                   l772 0449  
                                 l764 03C2                                   l791 0127  
                                 l768 047B                                   l786 00EF  
                                 l797 0F9A                                   _RA5 002D  
                                 u600 06FC                                   u601 06FB  
                                 u610 0722                                   u611 0721  
                                 u700 0FA1                                   u620 0728  
                                 u701 0FA0                                   u621 0727  
                                 u605 06F8                                   u630 0756  
                                 u550 0660                                   u631 0755  
                                 u551 065F                                   u640 07B8  
                                 u560 067C                                   u800 0445  
                                 u641 07B7                                   u561 067B  
                                 u801 0444                                   u730 0FBB  
                                 u650 00EB                                   u570 0682  
                                 u810 0F9A                                   u731 0FBA  
                                 u715 0FA8                                   u651 00EA  
                                 u571 0681                                   u811 0F99  
                                 u900 021A                                   u660 00F8  
                                 u580 06D8                                   u740 03BC  
                                 u820 00B7                                   u725 0FAF  
                                 u661 00F7                                   u645 07B4  
                                 u581 06D7                                   u565 0678  
                                 u805 0441                                   u741 03BB  
                                 u821 00B6                                   u910 022F  
                                 u830 0017                                   u670 010C  
                                 u590 06DE                                   u750 03CB  
                                 u671 010B                                   u591 06DD  
                                 u751 03CA                                   u920 0244  
                                 u840 002C                                   u680 0116  
                                 u760 03DF                                   u681 0115  
                                 u585 06D4                                   u761 03DE  
                                 u690 0EE3                                   u930 0259  
                                 u850 004B                                   u770 03FD  
                                 u691 0EE2                                   u851 004A  
                                 u771 03FC                                   u940 027E  
                                 u780 0415                                   u860 056E  
                                 u941 027D                                   u685 0112  
                                 u781 0414                                   u861 056D  
                                 u790 0432                                   u870 0584  
                                 u950 0328                                   u855 0047  
                                 u791 0431                                   u871 0583  
                                 u951 0327                                   u880 059A  
                                 u960 0334                                   u945 027A  
                                 u785 0411                                   u881 0599  
                                 u961 0333                                   u890 060A  
                                 u970 0343                                   u891 0609  
                                 u971 0342                                   u980 034E  
                                 u885 0596                                   u895 0606  
                                 u994 035D                                   u995 035B  
                                 fsr0 0004                                   indf 0000  
    RotateDirection@_countElemntArray 0057                                  l1301 06BB  
                                l1321 0728                                  l1313 06FD  
                                l1305 06C4                                  l1401 03E8  
                                l1331 07AA                                  l1323 0756  
                                l1315 0709                                  l1307 06D8  
                                l1411 041F                                  l1403 03E8  
                                l1501 0205                                  l1333 07B8  
                                l1325 0770                                  l1309 06DE  
                                l1317 071C                                  l1421 0445  
                                l1413 042C                                  l1405 03F7  
                                l1503 020E                                  l1351 00F8  
                                l1335 07BD                                  l1327 077A  
                                l1319 0722                                  l1431 0472  
                                l1423 045C                                  l1407 03FD  
                                l1511 030D                                  l1505 0264  
                                l1361 011C                                  l1353 00FC  
                                l1345 00DB                                  l1337 07CF  
                                l1329 0798                                  l1425 0460  
                                l1409 0415                                  l1433 0477  
                                l1441 0F88                                  l1521 0335  
                                l1513 0322                                  l1601 01B7  
                                l1507 026A                                  l1371 0F9B  
                                l1355 0103                                  l1347 00E3  
                                l1291 0663                                  l1283 0652  
                                l1427 046A                                  l1419 0433  
                                l1443 0F8C                                  l1451 00D4  
                                l1531 0381                                  l1523 033D  
                                l1515 0328                                  l1611 01D8  
                                l1603 01C7                                  l1509 0270  
                                l1461 003D                                  l1381 0FBB  
                                l1373 0F9D                                  l1365 011F  
                                l1357 010C                                  l1349 00EB  
                                l1293 0668                                  l1285 065A  
                                l1429 046E                                  l1437 0F7A  
                                l1445 0093                                  l1533 0387  
                                l1525 033F                                  l1541 0395  
                                l1517 0330                                  l1613 01E0  
                                l1551 027F                                  l1455 0006  
                                l1375 0FA1                                  l1359 0116  
                                l1295 067C                                  l1287 0660  
                                l1391 03CB                                  l1439 0F81  
                                l1447 00B1                                  l1471 059A  
                                l1463 0564                                  l1543 03A6  
                                l1631 0FC0                                  l1623 0EF6  
                                l1369 0EDB                                  l1561 02EC  
                                l1553 027F                                  l1545 0F2E  
                                l1457 000B                                  l1377 0FAE  
                                l1297 0682                                  l1393 03D0  
                                l1385 03B2                                  l1449 00B7  
                                l1473 05BF                                  l1481 05E6  
                                l1537 038E                                  l1529 0344  
                                l1609 01C9                                  l1617 01EE  
                                l1641 0FEF                                  l1633 0FCC  
                                l1625 0EF9                                  l1563 0F08  
                                l1555 0294                                  l1547 0F30  
                                l1571 0129                                  l1459 0035  
                                l1379 0FB5                                  l1299 06A8  
                                l1395 03DF                                  l1387 03B6  
                                l1483 060A                                  l1475 05E1  
                                l1467 056F                                  l1651 047C  
                                l1643 0FFA                                  l1635 0FCF  
                                l1627 0F01                                  l1565 0F44  
                                l1493 0F1B                                  l1557 02B0  
                                l1549 0F3D                                  l1573 012A  
                                l1397 03E5                                  l1389 03BC  
                                l1469 0584                                  l1661 04AB  
                                l1653 04A2                                  l1637 0FD9  
                                l1645 0EC8                                  l1629 0F03  
                                l1567 0EE5                                  l1495 0F1E  
                                l1559 02E4                                  l1575 0136  
                                l1583 015A                                  l1487 062D  
                                l1663 04BE                                  l1671 04F7  
                                l1655 04A6                                  l1639 0FE4  
                                l1647 0F5D                                  l1569 0ECF  
                                l1497 0F2A                                  l1761 0162  
                                l1577 0142                                  l1585 0173  
                                l1489 0640                                  l1593 018C  
                                l1681 054B                                  l1665 04D1  
                                l1673 050C                                  l1649 0F67  
                                l1587 0178                                  l1579 014E  
                                l1499 0201                                  l1595 018D  
                                l1683 0558                                  l1675 0523  
                                l1667 04E4                                  l1691 0056  
                                l1597 019A                                  l1677 0530  
                                l1757 04FE                                  l1693 0067  
                                l1759 01F5                                  l1599 01AA  
                                l1679 0543                                  l1695 0076  
                                l1689 004C                                  u1010 0376  
                                u1020 0F43                                  u1004 0367  
                                u1021 0F42                                  u1005 0365  
                                u1030 02BE                                  u1050 030C  
                                u1051 030B                                  u1107 0514  
                                u1044 02DA                                  u1060 01ED  
                                u1045 02D8                                  u1061 01EC  
                                u1070 0530                                  u1055 0308  
                                u1071 052F                                  u1080 0558  
                                u1065 01E9                                  u1081 0557  
                                u1075 052C                                  u1085 0554  
                                u1097 0FC6                                  _brkp 0069  
                                _free 0564                                  _main 004C  
                                btemp 007E                                  start 0000  
              __end_of_SpiClearMatrix 0F44                       __end_of_MovieUp 0F5D  
                     __end_of_SpiInit 0F08                       __end_of_Reverse 027F  
                               ?_free 0071                                 ?_main 0071  
                 _ChangeOfCoordinates 047C                                 _PORTA 0005  
                               _PORTB 0006                                 _TRISA 0085  
                               _TRISB 0086                                 _TRISC 0087  
                               _SSPIF 0063                       SpiClearMatrix@i 0077  
                   SendToSegment@data 0074                                 _errno 00AF  
                               free@c 007B                                 pclath 000A  
                    ___expand_heap@pn 0071                                 status 0003  
                               wtemp0 007E                          main@square_1 00A0  
                ?_ChangeOfCoordinates 005B                       ?_SpiClearMatrix 0071  
                     __initialization 07D8                          __end_of_free 0652  
                        __end_of_main 0093                         ___expand_heap 00DB  
                          _MatrixInit 0FC0                                ??_free 0073  
                              ??_main 007E                     ??_RotateDirection 007E  
           CopyArray@countElemntArray 0075                         ??_SetPosition 0077  
                       calloc@new_ptr 003C                 ??_ChangeOfCoordinates 0060  
                              _SSPCON 0014                                _SSPBUF 0013  
                          _MovieShape 0128                            _MovieRigth 0ECF  
                MovieShape@shapeArray 002C                             ??_MovieUp 0073  
                           ??_SpiInit 0071                             ??_Reverse 0075  
                       ??_SpiSendByte 0071                                _Rotate 030D  
                      ?___expand_heap 0071               ___simple_search_fl@best 002C  
             ___simple_search_fl@last 0026               ___simple_search_fl@next 0028  
                              ___wmul 0F9B                                _calloc 0093  
                              _malloc 03B2                                _memset 0F7A  
                      ShowShape@coord 0075               __end_of__initialization 07FC  
                 __end_of_SetPosition 0F7A                            ___freelist 006D  
                      __pcstackCOMMON 0071                          __pidataBANK1 0003  
                   __end_of_CopyArray 004C                           ?_MatrixInit 0071  
                 __end_of_SpiSendByte 0EE5     ChangeOfCoordinates@_shapePosition 005B  
ChangeOfCoordinates@_countElemntArray 005E            __end_of___simple_search_fl 07D8  
                          __pbssBANK0 0069                            __pbssBANK1 00A9  
                   __end_of_MovieLeft 0EF6                     __end_of_MovieDown 0F1B  
            MovieShape@_shapePosition 002A                     __end_of_PortBInit 0ECF  
                   __end_of_ShowShape 030D                           ?_MovieShape 002A  
                   main@shapePosition 00A5                           ?_MovieRigth 0071  
                     ??___expand_heap 0072                            __pmaintext 004C  
                             ?_Rotate 003E                               ?___wmul 0071  
                             ?_calloc 0038                               ?_malloc 0079  
                             ?_memset 0077                         MovieShape@dir 007D  
           ShowShape@countElemntArray 0077                           _SetPosition 0F5D  
                             _SSPSTAT 0094                            __stringtab 0800  
                    ??_SpiClearMatrix 0075                       _RotateDirection 018C  
                          calloc@size 003A                               _MovieUp 0F44  
                             _SpiInit 0EF6                         _SendToSegment 0F1B  
                ___simple_search_fl@c 002A                               _Reverse 0201  
                ___simple_search_fl@n 0071                           _SpiSendByte 0EDA  
                             Rotate@i 004D                               Rotate@x 004B  
            ___simple_search_fl@split 0024                               __ptext1 0EF6  
                             __ptext2 0F5D                               __ptext3 0EC8  
                             __ptext4 0FC0                               __ptext5 047C  
                             __ptext6 018C                               __ptext7 030D  
                             __ptext8 0564                               __ptext9 0093  
             ChangeOfCoordinates@step 0065                               free@ptr 0071  
                end_of_initialization 07FC                               malloc@m 002E  
                             malloc@n 0079                               malloc@p 0034  
              ___expand_heap@new_brkp 0074                               memset@c 0079  
                             memset@n 007B                               memset@p 0020  
                      ?_SendToSegment 0072                         Reverse@array_ 0071  
                 SetPosition@position 0071           __end_of_ChangeOfCoordinates 0564  
             __end_of_RotateDirection 0201               MovieLeft@_shapePosition 0071  
          ChangeOfCoordinates@_figure 005D                        __end_of_Rotate 03B2  
                      __end_of___wmul 0FC0                          ??_MatrixInit 0078  
                      __end_of_calloc 00DB                             _CopyArray 0006  
                      __end_of_malloc 047C                        __end_of_memset 0F9B  
                     ___expand_heap@n 0072                   start_initialization 07D8  
                          malloc@lock 00A9                            malloc@size 0032  
                  __end_of_MatrixInit 1000                       ??_SendToSegment 0075  
                        ??_MovieShape 007B                          ??_MovieRigth 0073  
                           _MovieLeft 0EE5                             _MovieDown 0F08  
                  ___simple_search_fl 0652                             _PortBInit 0EC8  
                            ??_Rotate 0042                             _ShowShape 027F  
        ___simple_search_fl@best_last 0022                              ??___wmul 0075  
                            ??_calloc 007D                           __pdataBANK1 00B1  
                            ??_malloc 007B                              ??_memset 007D  
                 ?___simple_search_fl 0071                            memset@dest 0077  
                       ShowShape@_pos 0026                            ?_CopyArray 0071  
                        SetPosition@x 0073                          SetPosition@y 0075  
                           Rotate@res 004F                             ___heap_hi 0170  
                           ___heap_lo 0110                             ___latbits 0002  
                       __pcstackBANK0 0020                         __pcstackBANK1 00A0  
                  __end_of_MovieShape 018C                    __end_of_MovieRigth 0EDA  
                        ?_SetPosition 0071                  main@countElemntArray 00A3  
                 ShowShape@shapeArray 0079                  ??___simple_search_fl 0073  
                    ?_RotateDirection 0053                       CopyArray@array_ 0071  
                          ?_MovieLeft 0071                            ?_MovieDown 0071  
                            ?_MovieUp 0071                              ?_SpiInit 0071  
                            ?_Reverse 0071                            ?_PortBInit 0071  
               __end_of___expand_heap 0128                          ?_SpiSendByte 0071  
                          ?_ShowShape 0075                             __pstrings 0800  
             MovieDown@_shapePosition 0071      __end_ofChangeOfCoordinates@delay 080A  
               MovieUp@_shapePosition 0071                        ___wmul@product 0075  
      ChangeOfCoordinates@rotateArray 0067                      RotateDirection@i 0059  
                         ??_CopyArray 0077                           __stringbase 0805  
                   ___wmul@multiplier 0071                Rotate@countElemntArray 0040  
                           malloc@end 00AD                             malloc@cur 006B  
                           malloc@new 0036                           ??_MovieLeft 0073  
                         ??_MovieDown 0073                           calloc@nmemb 0038  
                            Reverse@i 0021                              Reverse@j 0023  
                            Reverse@t 0020                           ??_PortBInit 0071  
             Reverse@countElemntArray 0073                           ??_ShowShape 0020  
                        ShowShape@pos 0028                              Rotate@_i 0051  
                  __end_of__stringtab 0806                              __ptext10 0F7A  
                            __ptext11 03B2                              __ptext20 0F1B  
                            __ptext12 0652                              __ptext21 0EDA  
                            __ptext13 00DB                              __ptext22 0F44  
                            __ptext14 0F9B                              __ptext23 0ECF  
                            __ptext15 0006                              __ptext24 0EE5  
                            __ptext16 0201                              __ptext25 0F08  
                            __ptext17 0128                              __ptext18 0F2E  
                            __ptext19 027F              ChangeOfCoordinates@delay 0806  
                            main@F932 00B1                  SendToSegment@segment 0072  
                            free@cptr 0079                              malloc@sz 0030  
   ___simple_search_fl@remaining_size 0020                 RotateDirection@array_ 0055  
                ChangeOfCoordinates@i 0063                             stringcode 0800  
               __end_of_SendToSegment 0F2E              MovieRigth@_shapePosition 0071  
                        CopyArray@res 0073            MovieShape@countElemntArray 002E  
                            stringdir 0800                              stringtab 0800  
                        Rotate@array_ 003E                   RotateDirection@step 0053  
                          CopyArray@y 0020  
